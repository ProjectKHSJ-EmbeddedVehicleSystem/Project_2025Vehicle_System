/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* 이벤트 정의 */
typedef enum {
  EVT_BTN_DOWN = 1,
  EVT_BTN_UP,
  EVT_GEAR_EDGE
} evt_type_t;

typedef struct {
  evt_type_t type;
  uint32_t   tick;
  uint16_t   pin;
  uint8_t    level; // 0=Low,1=High (GEAR용)
} evt_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;

osThreadId defaultTaskHandle;
/* USER CODE BEGIN PV */

static QueueHandle_t  qEvt;           // 공용 이벤트 큐
static TimerHandle_t  tBtnRelease;    // 버튼 릴리즈 감시 타이머(소프트웨어 타이머)

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM3_Init(void);
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */
static void ButtonTask(void *arg);
static void GearTask(void *arg);
static void MotorTask(void *arg);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*** 파라미터 (원하면 조절) ***/
#define PWM_MAX         900     // ARR=999 기준 약 90%
#define START_DUTY      200     // "아주 천천히" 시작 (모터에 맞춰 100~200 권장)
#define PWM_STEP        8       // 스텝 증가량 (느리게 올리려면 3~8)
#define STEP_PERIOD_MS  35      // 스텝 간격(ms) (느리게 올리려면 30~50)

#define DEBOUNCE_MS_PRESS   60   // 버튼 "눌림" 디바운스
#define DEBOUNCE_MS_RELEASE 40   // 버튼 "해제" 안정 확인
#define RELEASE_POLL_MS      10

/*** 상태 ***/
static volatile uint8_t  g_pressed      = 0;  // 눌림 상태(풀업 → 눌림=LOW)
static volatile uint16_t g_pwm          = 0;  // 현재 듀티
static uint32_t          g_last_step_ms = 0;  // 마지막 가속 시각

static uint32_t          g_last_press_ms   = 0; // 마지막으로 Low 감지된 시각
static uint32_t          g_last_release_ms = 0; // High 유지 시작 시각

/*** 기어 상태 ***/
typedef enum { GEAR_NEUTRAL = 0, GEAR_FWD = +1, GEAR_BACK = -1 } gear_t;
static volatile gear_t g_gear = GEAR_NEUTRAL;   // *** ADD ***/

/*** 모터 유틸 ***/
static inline void Motor_SetDuty(uint16_t d){
  if (d > PWM_MAX) d = PWM_MAX;
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, d);
  g_pwm = d;
}
static inline void Motor_Fwd(void){  // IN1=1, IN2=0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
}
static inline void Motor_Bck(void){  // IN1=0, IN2=1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
}
static inline void Motor_Stop(void){ // 듀티0 + 프리휠
  Motor_SetDuty(0);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
}

/* (안전) TIM3 리맵 해제: CH3=PB0 고정 */
static inline void Force_NoRemap_TIM3(void){
  __HAL_RCC_AFIO_CLK_ENABLE();
  AFIO->MAPR &= ~(AFIO_MAPR_TIM3_REMAP); // 00: No Remap
}

/* PC8/PC6 상태를 읽어 기어 판정 (풀업, 누르면 0) */   // *** ADD ***
static inline gear_t ReadGear(void)
{
	  GPIO_PinState p8 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8); // FWD
	  GPIO_PinState p6 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); // BACK
	  if (p8 == GPIO_PIN_RESET && p6 == GPIO_PIN_SET)  return GEAR_FWD;
	  if (p6 == GPIO_PIN_RESET && p8 == GPIO_PIN_SET)  return GEAR_BACK;
	  /* 둘 다 HIGH(미선택) 이거나 둘 다 LOW(이상상태)면 안전하게 중립 처리 */
	  return GEAR_NEUTRAL;
}
static inline gear_t ReadGear_HoldPrev(gear_t prev)
{
  GPIO_PinState p8 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8); // FWD (LOW=선택)
  GPIO_PinState p6 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); // BACK(LOW=선택)

  if (p8 == GPIO_PIN_RESET && p6 == GPIO_PIN_SET)  return GEAR_FWD;
  if (p6 == GPIO_PIN_RESET && p8 == GPIO_PIN_SET)  return GEAR_BACK;

  /* *** 핵심 수정 *** */
  if (p8 == GPIO_PIN_SET && p6 == GPIO_PIN_SET)    return GEAR_NEUTRAL; // 둘 다 HIGH = 중립
  /* 둘 다 LOW는 통과구간/노이즈 → 이전 상태 유지 */
  return prev;
}


static void BtnReleaseTimerCb(TimerHandle_t xTimer) {
  static uint32_t highStart = 0;
  uint32_t now = xTaskGetTickCount();

  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) { // High 유지 중
    if (highStart == 0) highStart = now;
    if ((now - highStart) >= pdMS_TO_TICKS(DEBOUNCE_MS_RELEASE)) {
      evt_t e = { .type = EVT_BTN_UP, .tick = now, .pin = GPIO_PIN_5, .level = 1 };
      xQueueSend(qEvt, &e, 0);
      highStart = 0;
      xTimerStop(tBtnRelease, 0);
      return;
    }
  } else {
    highStart = 0; // 다시 Low면 초기화
  }
  // 아직 안정 안 됨 → 다음 주기에도 체크
  xTimerStart(tBtnRelease, 0);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
//  Motor_Fwd();               // 기어 추가로 인한 주석 처리 0813
  Motor_Stop();              // 시작은 0% (안전)
  g_last_step_ms = HAL_GetTick();
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  qEvt = xQueueCreate(16, sizeof(evt_t));
  configASSERT(qEvt != NULL);

  tBtnRelease = xTimerCreate("btnRel",
                             pdMS_TO_TICKS(RELEASE_POLL_MS),
                             pdFALSE, NULL, BtnReleaseTimerCb);
  configASSERT(tBtnRelease != NULL);

  /* 태스크 생성 (FreeRTOS 네이티브) */
  xTaskCreate(ButtonTask, "btn",   256, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(GearTask,   "gear",  256, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(MotorTask,  "motor", 256, NULL, tskIDLE_PRIORITY + 3, NULL);
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
  vTaskStartScheduler();
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  uint32_t now = HAL_GetTick();
//	    if (g_pressed){
//	      if ((uint32_t)(now - g_last_step_ms) >= STEP_PERIOD_MS) {
//	        g_last_step_ms = now;
//	        if (g_pwm < START_DUTY)
//	        	Motor_SetDuty(START_DUTY);
//	        else if (g_pwm < PWM_MAX)
//	        	Motor_SetDuty(g_pwm + PWM_STEP);
//	      }
//	    }

	  uint32_t now = HAL_GetTick();

	  /* --- 버튼 해제 감지(안정 확인) --- */
	  if (g_pressed) {
	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) { // High=해제 후보
	      if (g_last_release_ms == 0) g_last_release_ms = now;     // High 시작 시각
	      if ((now - g_last_release_ms) >= DEBOUNCE_MS_RELEASE) {
	        // 충분히 High가 유지됨 → 진짜 해제
	        g_pressed = 0;
	        g_last_release_ms = 0;
	        Motor_Stop();
	#ifdef LD2_Pin
	        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	#endif
	      }
	    } else {
	      // 아직 Low 유지 중 → 해제 타이머 리셋
	      g_last_release_ms = 0;
	    }
	  } else {
	    g_last_release_ms = 0; // 미눌림 상태면 항상 리셋
	  }


	  /** 기어 리팩토링 **/


	  /* 인터록: 중립이거나 버튼 미눌림이면 항상 정지 */         // *** ADD ***
	  if (!g_pressed || g_gear == GEAR_NEUTRAL) {
	    if (g_pwm != 0) Motor_Stop();
	  } else {
	    /* 방향 출력 세팅 (전/후진) */                            // *** ADD ***
	    if (g_gear == GEAR_FWD)  Motor_Fwd();
	    else                     Motor_Bck();

	    /* 가속 램프업 */
	    if ((uint32_t)(now - g_last_step_ms) >= STEP_PERIOD_MS) {
	      g_last_step_ms = now;
	      if (g_pwm < START_DUTY)      Motor_SetDuty(START_DUTY);
	      else if (g_pwm < PWM_MAX)    Motor_SetDuty(g_pwm + PWM_STEP);
	    }
	  }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 71;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
  BaseType_t hpw = pdFALSE;
  uint32_t now = xTaskGetTickCountFromISR();

  if (pin == GPIO_PIN_5) { // 버튼: Falling만 들어오게 설정됨
    static uint32_t lastPressTick = 0;
    if ((now - lastPressTick) < pdMS_TO_TICKS(DEBOUNCE_MS_PRESS)) return;
    lastPressTick = now;

    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_RESET) { // Low 확인
      evt_t e = { .type = EVT_BTN_DOWN, .tick = now, .pin = GPIO_PIN_5, .level = 0 };
      xQueueSendFromISR(qEvt, &e, &hpw);

      // 릴리즈 감시 시작
      BaseType_t s = xTimerStartFromISR(tBtnRelease, &hpw);
      (void)s;
    }
  }
  else if (pin == GPIO_PIN_6 || pin == GPIO_PIN_8) { // 기어 엣지
    uint8_t lvl = (HAL_GPIO_ReadPin(GPIOC, pin) == GPIO_PIN_SET) ? 1 : 0;
    evt_t e = { .type = EVT_GEAR_EDGE, .tick = now, .pin = pin, .level = lvl };
    xQueueSendFromISR(qEvt, &e, &hpw);
  }

  portYIELD_FROM_ISR(hpw);
}

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */

static void ButtonTask(void *arg)
{
  (void)arg;
  evt_t e;

  for(;;) {
    if (xQueueReceive(qEvt, &e, portMAX_DELAY) == pdTRUE) {
      if (e.type == EVT_BTN_DOWN) {
        if (!g_pressed) {
          g_pressed = 1;
          g_last_step_ms = HAL_GetTick();
          if (g_gear != GEAR_NEUTRAL) Motor_SetDuty(START_DUTY);
#ifdef LD2_Pin
          HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
#endif
        }
      }
      else if (e.type == EVT_BTN_UP) {
        if (g_pressed) {
          g_pressed = 0;
          Motor_Stop();
#ifdef LD2_Pin
          HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
#endif
        }
      }
      else {
        // 다른 이벤트는 GearTask가 처리하도록 다시 넣거나 무시
        // (간단히 하려면 GearTask가 같은 큐에서 함께 받게 하면 됨)
        xQueueSend(qEvt, &e, 0);
      }
    }
  }
}

static void GearTask(void *arg)
{
  (void)arg;
  evt_t e;

  for(;;) {
    if (xQueueReceive(qEvt, &e, portMAX_DELAY) == pdTRUE) {
      if (e.type == EVT_GEAR_EDGE) {
        gear_t newg = ReadGear_HoldPrev(g_gear); // 너가 만든 안정 판정
        g_gear = newg;
        if (g_gear == GEAR_NEUTRAL) {
          g_pressed = 0;
          Motor_Stop();
        }
      } else {
        // 버튼 이벤트는 ButtonTask가 처리하도록 되돌리기
        if (e.type == EVT_BTN_DOWN || e.type == EVT_BTN_UP)
          xQueueSend(qEvt, &e, 0);
      }
    }
  }
}

static void MotorTask(void *arg)
{
  (void)arg;
  const TickType_t period = pdMS_TO_TICKS(10); // 10ms 틱
  TickType_t last = xTaskGetTickCount();

  for(;;) {
    // 하드 인터록: 핀 직접 읽어 중립이면 즉시 정지
    GPIO_PinState p8 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
    GPIO_PinState p6 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
    if (p8==GPIO_PIN_SET && p6==GPIO_PIN_SET) {
      g_gear = GEAR_NEUTRAL;
      g_pressed = 0;
      if (g_pwm != 0) Motor_Stop();
      vTaskDelayUntil(&last, period);
      continue;
    }

    if (!g_pressed || g_gear == GEAR_NEUTRAL) {
      if (g_pwm != 0) Motor_Stop();
    } else {
      if (g_gear == GEAR_FWD)  Motor_Fwd();
      else                     Motor_Bck();

      uint32_t now = HAL_GetTick();
      if ((uint32_t)(now - g_last_step_ms) >= STEP_PERIOD_MS) {
        g_last_step_ms = now;
        if (g_pwm < START_DUTY)      Motor_SetDuty(START_DUTY);
        else if (g_pwm < PWM_MAX)    Motor_SetDuty(g_pwm + PWM_STEP);
      }
    }

    vTaskDelayUntil(&last, period);
  }
}




/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
