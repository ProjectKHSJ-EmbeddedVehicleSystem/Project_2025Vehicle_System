
ECU_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bebc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800bfd0  0800bfd0  0000cfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c500  0800c500  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c500  0800c500  0000d500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c508  0800c508  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c508  0800c508  0000d508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c50c  0800c50c  0000d50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c510  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c8  200001d8  0800c6e8  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200014a0  0800c6e8  0000e4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117c8  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb4  00000000  00000000  0001f9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00022980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9d  00000000  00000000  000239d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a181  00000000  00000000  0002466d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fe1  00000000  00000000  0003e7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffb5  00000000  00000000  000527cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000592c  00000000  00000000  000e27c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e80f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bfb4 	.word	0x0800bfb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800bfb4 	.word	0x0800bfb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <__aeabi_d2lz>:
 800109c:	b538      	push	{r3, r4, r5, lr}
 800109e:	2200      	movs	r2, #0
 80010a0:	2300      	movs	r3, #0
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	f7ff fc89 	bl	80009bc <__aeabi_dcmplt>
 80010aa:	b928      	cbnz	r0, 80010b8 <__aeabi_d2lz+0x1c>
 80010ac:	4620      	mov	r0, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010b4:	f000 b80a 	b.w	80010cc <__aeabi_d2ulz>
 80010b8:	4620      	mov	r0, r4
 80010ba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80010be:	f000 f805 	bl	80010cc <__aeabi_d2ulz>
 80010c2:	4240      	negs	r0, r0
 80010c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010c8:	bd38      	pop	{r3, r4, r5, pc}
 80010ca:	bf00      	nop

080010cc <__aeabi_d2ulz>:
 80010cc:	b5d0      	push	{r4, r6, r7, lr}
 80010ce:	2200      	movs	r2, #0
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <__aeabi_d2ulz+0x34>)
 80010d2:	4606      	mov	r6, r0
 80010d4:	460f      	mov	r7, r1
 80010d6:	f7ff f9ff 	bl	80004d8 <__aeabi_dmul>
 80010da:	f7ff fcd5 	bl	8000a88 <__aeabi_d2uiz>
 80010de:	4604      	mov	r4, r0
 80010e0:	f7ff f980 	bl	80003e4 <__aeabi_ui2d>
 80010e4:	2200      	movs	r2, #0
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <__aeabi_d2ulz+0x38>)
 80010e8:	f7ff f9f6 	bl	80004d8 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4630      	mov	r0, r6
 80010f2:	4639      	mov	r1, r7
 80010f4:	f7ff f838 	bl	8000168 <__aeabi_dsub>
 80010f8:	f7ff fcc6 	bl	8000a88 <__aeabi_d2uiz>
 80010fc:	4621      	mov	r1, r4
 80010fe:	bdd0      	pop	{r4, r6, r7, pc}
 8001100:	3df00000 	.word	0x3df00000
 8001104:	41f00000 	.word	0x41f00000

08001108 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <vApplicationGetIdleTaskMemory+0x28>)
 8001118:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <vApplicationGetIdleTaskMemory+0x2c>)
 800111e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	200001f4 	.word	0x200001f4
 8001134:	20000248 	.word	0x20000248

08001138 <nmea_checksum_ok>:
static char line_buf[LINE_MAX];
static volatile uint16_t line_len;
static GPSFix latest;
static volatile bool has_new_valid;

static int nmea_checksum_ok(const char *s) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    // s는 '$' 다음부터 '*' 전까지
    uint8_t csum = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
    while (*s && *s != '*') { csum ^= (uint8_t)(*s++); }
 8001144:	e006      	b.n	8001154 <nmea_checksum_ok+0x1c>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	781a      	ldrb	r2, [r3, #0]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	4053      	eors	r3, r2
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <nmea_checksum_ok+0x2c>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b2a      	cmp	r3, #42	@ 0x2a
 8001162:	d1f0      	bne.n	8001146 <nmea_checksum_ok+0xe>
    if (*s != '*') return 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b2a      	cmp	r3, #42	@ 0x2a
 800116a:	d001      	beq.n	8001170 <nmea_checksum_ok+0x38>
 800116c:	2300      	movs	r3, #0
 800116e:	e01d      	b.n	80011ac <nmea_checksum_ok+0x74>
    char h1 = *(s+1), h2 = *(s+2);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	73bb      	strb	r3, [r7, #14]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3302      	adds	r3, #2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	737b      	strb	r3, [r7, #13]
    uint8_t val = (uint8_t)strtoul((char[]){h1,h2,0}, NULL, 16);
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	723b      	strb	r3, [r7, #8]
 8001184:	7b7b      	ldrb	r3, [r7, #13]
 8001186:	727b      	strb	r3, [r7, #9]
 8001188:	2300      	movs	r3, #0
 800118a:	72bb      	strb	r3, [r7, #10]
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	2210      	movs	r2, #16
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f007 fb75 	bl	8008884 <strtoul>
 800119a:	4603      	mov	r3, r0
 800119c:	733b      	strb	r3, [r7, #12]
    return csum == val;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <dm_to_deg>:

// ddmm.mmmm -> degrees(double)
static double dm_to_deg(const char *dm) {
 80011b4:	b5b0      	push	{r4, r5, r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    if (!dm || !*dm) return 0.0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <dm_to_deg+0x16>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d104      	bne.n	80011d4 <dm_to_deg+0x20>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e039      	b.n	8001248 <dm_to_deg+0x94>
    double v = atof(dm);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f006 fcdf 	bl	8007b98 <atof>
 80011da:	e9c7 0106 	strd	r0, r1, [r7, #24]
    int deg = (int)(v / 100.0);
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <dm_to_deg+0xa0>)
 80011e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011e8:	f7ff faa0 	bl	800072c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fc20 	bl	8000a38 <__aeabi_d2iz>
 80011f8:	4603      	mov	r3, r0
 80011fa:	617b      	str	r3, [r7, #20]
    double min = v - (deg * 100.0);
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff f901 	bl	8000404 <__aeabi_i2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <dm_to_deg+0xa0>)
 8001208:	f7ff f966 	bl	80004d8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001214:	f7fe ffa8 	bl	8000168 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (double)deg + min/60.0;
 8001220:	6978      	ldr	r0, [r7, #20]
 8001222:	f7ff f8ef 	bl	8000404 <__aeabi_i2d>
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <dm_to_deg+0xa4>)
 8001230:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001234:	f7ff fa7a 	bl	800072c <__aeabi_ddiv>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	f7fe ff94 	bl	800016c <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
}
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bdb0      	pop	{r4, r5, r7, pc}
 8001252:	bf00      	nop
 8001254:	40590000 	.word	0x40590000
 8001258:	404e0000 	.word	0x404e0000

0800125c <parse_gprmc>:

static void parse_gprmc(char *s) {
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b0a2      	sub	sp, #136	@ 0x88
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
    // s: "GPRMC,hhmmss.sss,A,llll.ll,a,yyyyy.yy,a,..."
    // 토큰 분해
    // 인덱스: 0=GPRMC 1=UTC 2=valid 3=lat 4=N/S 5=lon 6=E/W
    char *field[16] = {0};
 8001264:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001268:	2240      	movs	r2, #64	@ 0x40
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f008 f8a8 	bl	80093c2 <memset>
    int idx = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    for (char *p = s; *p && idx < 16; ++idx) {
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800127e:	e03b      	b.n	80012f8 <parse_gprmc+0x9c>
        field[idx] = p;
 8001280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	3380      	adds	r3, #128	@ 0x80
 8001288:	f107 0208 	add.w	r2, r7, #8
 800128c:	4413      	add	r3, r2
 800128e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001292:	f843 2c58 	str.w	r2, [r3, #-88]
        while (*p && *p != ',' && *p != '*') p++;
 8001296:	e004      	b.n	80012a2 <parse_gprmc+0x46>
 8001298:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800129c:	3301      	adds	r3, #1
 800129e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80012a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d009      	beq.n	80012c0 <parse_gprmc+0x64>
 80012ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80012b4:	d004      	beq.n	80012c0 <parse_gprmc+0x64>
 80012b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80012be:	d1eb      	bne.n	8001298 <parse_gprmc+0x3c>
        if (*p == ',' ) { *p++ = '\0'; }
 80012c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b2c      	cmp	r3, #44	@ 0x2c
 80012c8:	d107      	bne.n	80012da <parse_gprmc+0x7e>
 80012ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e009      	b.n	80012ee <parse_gprmc+0x92>
        else if (*p == '*') { *p = '\0'; break; }
 80012da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80012e2:	d104      	bne.n	80012ee <parse_gprmc+0x92>
 80012e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e00d      	b.n	800130a <parse_gprmc+0xae>
    for (char *p = s; *p && idx < 16; ++idx) {
 80012ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012f2:	3301      	adds	r3, #1
 80012f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80012f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <parse_gprmc+0xae>
 8001302:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001306:	2b0f      	cmp	r3, #15
 8001308:	ddba      	ble.n	8001280 <parse_gprmc+0x24>
    }
    if (idx < 7) return;
 800130a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800130e:	2b06      	cmp	r3, #6
 8001310:	f340 809a 	ble.w	8001448 <parse_gprmc+0x1ec>

    GPSFix fix = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2220      	movs	r2, #32
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f008 f850 	bl	80093c2 <memset>
    // 유효성
    fix.valid = (field[2] && field[2][0] == 'A');
 8001322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <parse_gprmc+0xd8>
 8001328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b41      	cmp	r3, #65	@ 0x41
 800132e:	d101      	bne.n	8001334 <parse_gprmc+0xd8>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <parse_gprmc+0xda>
 8001334:	2300      	movs	r3, #0
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	743b      	strb	r3, [r7, #16]

    // 시간 hhmmss
    if (field[1] && strlen(field[1]) >= 6) {
 800133e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001340:	2b00      	cmp	r3, #0
 8001342:	d03e      	beq.n	80013c2 <parse_gprmc+0x166>
 8001344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ff02 	bl	8000150 <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	2b05      	cmp	r3, #5
 8001350:	d937      	bls.n	80013c2 <parse_gprmc+0x166>
        fix.hh = (field[1][0]-'0')*10 + (field[1][1]-'0');
 8001352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	3b30      	subs	r3, #48	@ 0x30
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	b2da      	uxtb	r2, r3
 8001364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001366:	3301      	adds	r3, #1
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3b30      	subs	r3, #48	@ 0x30
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        fix.mm = (field[1][2]-'0')*10 + (field[1][3]-'0');
 8001376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001378:	3302      	adds	r3, #2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3b30      	subs	r3, #48	@ 0x30
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138c:	3303      	adds	r3, #3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4413      	add	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	3b30      	subs	r3, #48	@ 0x30
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        fix.ss = (field[1][4]-'0')*10 + (field[1][5]-'0');
 800139c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800139e:	3304      	adds	r3, #4
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	3b30      	subs	r3, #48	@ 0x30
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013b2:	3305      	adds	r3, #5
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	3b30      	subs	r3, #48	@ 0x30
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }

    // 위도/경도
    double lat = dm_to_deg(field[3]);
 80013c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fef5 	bl	80011b4 <dm_to_deg>
 80013ca:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
    double lon = dm_to_deg(field[5]);
 80013ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff feef 	bl	80011b4 <dm_to_deg>
 80013d6:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
    if (field[4] && field[4][0] == 'S') lat = -lat;
 80013da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <parse_gprmc+0x1a0>
 80013e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b53      	cmp	r3, #83	@ 0x53
 80013e6:	d109      	bne.n	80013fc <parse_gprmc+0x1a0>
 80013e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013ee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013f8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    if (field[6] && field[6][0] == 'W') lon = -lon;
 80013fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <parse_gprmc+0x1ba>
 8001402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b57      	cmp	r3, #87	@ 0x57
 8001408:	d105      	bne.n	8001416 <parse_gprmc+0x1ba>
 800140a:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 800140c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800140e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001412:	e9c7 451c 	strd	r4, r5, [r7, #112]	@ 0x70

    fix.latitude  = lat;
 8001416:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800141a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    fix.longitude = lon;
 800141e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001422:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (fix.valid) {
 8001426:	7c3b      	ldrb	r3, [r7, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00e      	beq.n	800144a <parse_gprmc+0x1ee>
        latest = fix;
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <parse_gprmc+0x1f4>)
 800142e:	461d      	mov	r5, r3
 8001430:	f107 0410 	add.w	r4, r7, #16
 8001434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001438:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800143c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        has_new_valid = true;
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <parse_gprmc+0x1f8>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	e000      	b.n	800144a <parse_gprmc+0x1ee>
    if (idx < 7) return;
 8001448:	bf00      	nop
    }
}
 800144a:	3788      	adds	r7, #136	@ 0x88
 800144c:	46bd      	mov	sp, r7
 800144e:	bdb0      	pop	{r4, r5, r7, pc}
 8001450:	200004d0 	.word	0x200004d0
 8001454:	200004f0 	.word	0x200004f0

08001458 <GPS_Init>:

void GPS_Init(void) {
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
    line_len = 0;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <GPS_Init+0x20>)
 800145e:	2200      	movs	r2, #0
 8001460:	801a      	strh	r2, [r3, #0]
    latest.valid = false;
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <GPS_Init+0x24>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
    has_new_valid = false;
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <GPS_Init+0x28>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	200004c8 	.word	0x200004c8
 800147c:	200004d0 	.word	0x200004d0
 8001480:	200004f0 	.word	0x200004f0

08001484 <GPS_OnByte>:

void GPS_OnByte(uint8_t b) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
    if (b == '\r') return; // 무시
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b0d      	cmp	r3, #13
 8001492:	d04e      	beq.n	8001532 <GPS_OnByte+0xae>
    if (b == '\n') {
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b0a      	cmp	r3, #10
 8001498:	d12f      	bne.n	80014fa <GPS_OnByte+0x76>
        // 한 줄 완성
        if (line_len >= 6 && line_buf[0] == '$') {
 800149a:	4b28      	ldr	r3, [pc, #160]	@ (800153c <GPS_OnByte+0xb8>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	d926      	bls.n	80014f2 <GPS_OnByte+0x6e>
 80014a4:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <GPS_OnByte+0xbc>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b24      	cmp	r3, #36	@ 0x24
 80014aa:	d122      	bne.n	80014f2 <GPS_OnByte+0x6e>
            // 체크섬 확인
            char *star = strchr(line_buf, '*');
 80014ac:	212a      	movs	r1, #42	@ 0x2a
 80014ae:	4824      	ldr	r0, [pc, #144]	@ (8001540 <GPS_OnByte+0xbc>)
 80014b0:	f007 ff8f 	bl	80093d2 <strchr>
 80014b4:	60f8      	str	r0, [r7, #12]
            if (star && nmea_checksum_ok(line_buf + 1)) {
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d01a      	beq.n	80014f2 <GPS_OnByte+0x6e>
 80014bc:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <GPS_OnByte+0xc0>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe3a 	bl	8001138 <nmea_checksum_ok>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d013      	beq.n	80014f2 <GPS_OnByte+0x6e>
                // 문장 타입 확인
                if (strstr(line_buf, "$GPRMC") == line_buf || strstr(line_buf, "$GNRMC") == line_buf) {
 80014ca:	491f      	ldr	r1, [pc, #124]	@ (8001548 <GPS_OnByte+0xc4>)
 80014cc:	481c      	ldr	r0, [pc, #112]	@ (8001540 <GPS_OnByte+0xbc>)
 80014ce:	f007 ff9f 	bl	8009410 <strstr>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001540 <GPS_OnByte+0xbc>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <GPS_OnByte+0x66>
 80014da:	491c      	ldr	r1, [pc, #112]	@ (800154c <GPS_OnByte+0xc8>)
 80014dc:	4818      	ldr	r0, [pc, #96]	@ (8001540 <GPS_OnByte+0xbc>)
 80014de:	f007 ff97 	bl	8009410 <strstr>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a16      	ldr	r2, [pc, #88]	@ (8001540 <GPS_OnByte+0xbc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d103      	bne.n	80014f2 <GPS_OnByte+0x6e>
                    // '$' 제거하고 타입 이후부터 파싱
                    parse_gprmc(line_buf + 1); // 'GPRMC,...'
 80014ea:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <GPS_OnByte+0xc0>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff feb5 	bl	800125c <parse_gprmc>
                }
            }
        }
        line_len = 0;
 80014f2:	4b12      	ldr	r3, [pc, #72]	@ (800153c <GPS_OnByte+0xb8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	801a      	strh	r2, [r3, #0]
        return;
 80014f8:	e01c      	b.n	8001534 <GPS_OnByte+0xb0>
    }
    if (line_len < LINE_MAX-1) {
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <GPS_OnByte+0xb8>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	2b7e      	cmp	r3, #126	@ 0x7e
 8001502:	d812      	bhi.n	800152a <GPS_OnByte+0xa6>
        line_buf[line_len++] = (char)b;
 8001504:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <GPS_OnByte+0xb8>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	b291      	uxth	r1, r2
 800150e:	4a0b      	ldr	r2, [pc, #44]	@ (800153c <GPS_OnByte+0xb8>)
 8001510:	8011      	strh	r1, [r2, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <GPS_OnByte+0xbc>)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	5453      	strb	r3, [r2, r1]
        line_buf[line_len] = '\0';
 800151a:	4b08      	ldr	r3, [pc, #32]	@ (800153c <GPS_OnByte+0xb8>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <GPS_OnByte+0xbc>)
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]
 8001528:	e004      	b.n	8001534 <GPS_OnByte+0xb0>
    } else {
        line_len = 0; // overflow 시 라인 리셋
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <GPS_OnByte+0xb8>)
 800152c:	2200      	movs	r2, #0
 800152e:	801a      	strh	r2, [r3, #0]
 8001530:	e000      	b.n	8001534 <GPS_OnByte+0xb0>
    if (b == '\r') return; // 무시
 8001532:	bf00      	nop
    }
}
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200004c8 	.word	0x200004c8
 8001540:	20000448 	.word	0x20000448
 8001544:	20000449 	.word	0x20000449
 8001548:	0800bfd0 	.word	0x0800bfd0
 800154c:	0800bfd8 	.word	0x0800bfd8

08001550 <GPS_GetLatestFix>:

bool GPS_GetLatestFix(GPSFix *out) {
 8001550:	b4b0      	push	{r4, r5, r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    if (!out) return false;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <GPS_GetLatestFix+0x12>
 800155e:	2300      	movs	r3, #0
 8001560:	e015      	b.n	800158e <GPS_GetLatestFix+0x3e>
    if (!latest.valid) return false;
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <GPS_GetLatestFix+0x48>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	f083 0301 	eor.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <GPS_GetLatestFix+0x24>
 8001570:	2300      	movs	r3, #0
 8001572:	e00c      	b.n	800158e <GPS_GetLatestFix+0x3e>
    *out = latest;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <GPS_GetLatestFix+0x48>)
 8001578:	461c      	mov	r4, r3
 800157a:	4615      	mov	r5, r2
 800157c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001580:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return has_new_valid; // true면 "새로 업데이트됨"
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <GPS_GetLatestFix+0x4c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bcb0      	pop	{r4, r5, r7}
 8001596:	4770      	bx	lr
 8001598:	200004d0 	.word	0x200004d0
 800159c:	200004f0 	.word	0x200004f0

080015a0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  // GPS는 USART1로 수신
  if (huart->Instance == USART1) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_UART_RxCpltCallback+0x30>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d109      	bne.n	80015c6 <HAL_UART_RxCpltCallback+0x26>
    GPS_OnByte(gps_rx_byte);
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_UART_RxCpltCallback+0x34>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff64 	bl	8001484 <GPS_OnByte>
    HAL_UART_Receive_IT(&huart1, &gps_rx_byte, 1); // 다음 바이트 계속 수신
 80015bc:	2201      	movs	r2, #1
 80015be:	4905      	ldr	r1, [pc, #20]	@ (80015d4 <HAL_UART_RxCpltCallback+0x34>)
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <HAL_UART_RxCpltCallback+0x38>)
 80015c2:	f002 ff1e 	bl	8004402 <HAL_UART_Receive_IT>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40013800 	.word	0x40013800
 80015d4:	200005f4 	.word	0x200005f4
 80015d8:	20000548 	.word	0x20000548

080015dc <SensorTask>:

/* ===================== App Tasks ===================== */
static void SensorTask(void const * argument)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  (void)argument;
  int16_t raw[3];
  uint32_t last = osKernelSysTick();
 80015e4:	f003 fccb 	bl	8004f7e <osKernelSysTick>
 80015e8:	61f8      	str	r0, [r7, #28]

  for(;;) {
    uint32_t now = osKernelSysTick();
 80015ea:	f003 fcc8 	bl	8004f7e <osKernelSysTick>
 80015ee:	61b8      	str	r0, [r7, #24]
    uint32_t elapsed = now - last;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
    if (elapsed < SENSOR_PERIOD_MS) {
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b31      	cmp	r3, #49	@ 0x31
 80015fc:	d805      	bhi.n	800160a <SensorTask+0x2e>
      osDelay(SENSOR_PERIOD_MS - elapsed);
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 8001604:	4618      	mov	r0, r3
 8001606:	f003 fd16 	bl	8005036 <osDelay>
    }
    last = osKernelSysTick();
 800160a:	f003 fcb8 	bl	8004f7e <osKernelSysTick>
 800160e:	61f8      	str	r0, [r7, #28]

    if (i2cMutexHandle) osMutexWait(i2cMutexHandle, 20);
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <SensorTask+0xa0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <SensorTask+0x48>
 8001618:	4b18      	ldr	r3, [pc, #96]	@ (800167c <SensorTask+0xa0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2114      	movs	r1, #20
 800161e:	4618      	mov	r0, r3
 8001620:	f003 fdc2 	bl	80051a8 <osMutexWait>
    MPU6050_Read_Accel(&hi2c1, raw);
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4619      	mov	r1, r3
 800162a:	4815      	ldr	r0, [pc, #84]	@ (8001680 <SensorTask+0xa4>)
 800162c:	f000 fb7b 	bl	8001d26 <MPU6050_Read_Accel>
    if (i2cMutexHandle) osMutexRelease(i2cMutexHandle);
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <SensorTask+0xa0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <SensorTask+0x66>
 8001638:	4b10      	ldr	r3, [pc, #64]	@ (800167c <SensorTask+0xa0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fe01 	bl	8005244 <osMutexRelease>

    g_sample.ax = raw[0];
 8001642:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <SensorTask+0xa8>)
 8001648:	801a      	strh	r2, [r3, #0]
    g_sample.ay = raw[1];
 800164a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800164e:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <SensorTask+0xa8>)
 8001650:	805a      	strh	r2, [r3, #2]
    g_sample.az = raw[2];
 8001652:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <SensorTask+0xa8>)
 8001658:	809a      	strh	r2, [r3, #4]
    g_sample.ts_ms = osKernelSysTick();
 800165a:	f003 fc90 	bl	8004f7e <osKernelSysTick>
 800165e:	4603      	mov	r3, r0
 8001660:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <SensorTask+0xa8>)
 8001662:	6093      	str	r3, [r2, #8]

    if (detectTaskHandle) osSignalSet(detectTaskHandle, DETECT_SIGNAL_FLAG);
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <SensorTask+0xac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0be      	beq.n	80015ea <SensorTask+0xe>
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <SensorTask+0xac>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	4618      	mov	r0, r3
 8001674:	f003 fcf4 	bl	8005060 <osSignalSet>
  for(;;) {
 8001678:	e7b7      	b.n	80015ea <SensorTask+0xe>
 800167a:	bf00      	nop
 800167c:	200005e4 	.word	0x200005e4
 8001680:	200004f4 	.word	0x200004f4
 8001684:	200005e8 	.word	0x200005e8
 8001688:	200005e0 	.word	0x200005e0
 800168c:	00000000 	.word	0x00000000

08001690 <DetectTask>:
  }
}

static void DetectTask(void const * argument)
{
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	b0bb      	sub	sp, #236	@ 0xec
 8001694:	af08      	add	r7, sp, #32
 8001696:	60f8      	str	r0, [r7, #12]
  (void)argument;
  for(;;) {
    osEvent ev = osSignalWait(DETECT_SIGNAL_FLAG, osWaitForever);
 8001698:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fd1c 	bl	80050e0 <osSignalWait>
    if (ev.status != osEventSignal) continue;
 80016a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	f040 80fe 	bne.w	80018ae <DetectTask+0x21e>

    float ax = (float)g_sample.ax;
 80016b2:	4b83      	ldr	r3, [pc, #524]	@ (80018c0 <DetectTask+0x230>)
 80016b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fabf 	bl	8000c3c <__aeabi_i2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    float ay = (float)g_sample.ay;
 80016c4:	4b7e      	ldr	r3, [pc, #504]	@ (80018c0 <DetectTask+0x230>)
 80016c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fab6 	bl	8000c3c <__aeabi_i2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    float az = (float)g_sample.az;
 80016d6:	4b7a      	ldr	r3, [pc, #488]	@ (80018c0 <DetectTask+0x230>)
 80016d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff faad 	bl	8000c3c <__aeabi_i2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    float mag = sqrtf(ax*ax + ay*ay + az*az);
 80016e8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80016ec:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80016f0:	f7ff faf8 	bl	8000ce4 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461c      	mov	r4, r3
 80016f8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 80016fc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001700:	f7ff faf0 	bl	8000ce4 <__aeabi_fmul>
 8001704:	4603      	mov	r3, r0
 8001706:	4619      	mov	r1, r3
 8001708:	4620      	mov	r0, r4
 800170a:	f7ff f9e3 	bl	8000ad4 <__addsf3>
 800170e:	4603      	mov	r3, r0
 8001710:	461c      	mov	r4, r3
 8001712:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001716:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800171a:	f7ff fae3 	bl	8000ce4 <__aeabi_fmul>
 800171e:	4603      	mov	r3, r0
 8001720:	4619      	mov	r1, r3
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff f9d6 	bl	8000ad4 <__addsf3>
 8001728:	4603      	mov	r3, r0
 800172a:	4618      	mov	r0, r3
 800172c:	f00a fbb8 	bl	800bea0 <sqrtf>
 8001730:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

    if (mag > COLLISION_THRESHOLD_RAW) {
 8001734:	4963      	ldr	r1, [pc, #396]	@ (80018c4 <DetectTask+0x234>)
 8001736:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800173a:	f7ff fc8f 	bl	800105c <__aeabi_fcmpgt>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80b5 	beq.w	80018b0 <DetectTask+0x220>
      HAL_GPIO_WritePin(GLD_GPIO_Port, GLD_Pin, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	2140      	movs	r1, #64	@ 0x40
 800174a:	485f      	ldr	r0, [pc, #380]	@ (80018c8 <DetectTask+0x238>)
 800174c:	f001 f8f0 	bl	8002930 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RLD_GPIO_Port, RLD_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001756:	485c      	ldr	r0, [pc, #368]	@ (80018c8 <DetectTask+0x238>)
 8001758:	f001 f8ea 	bl	8002930 <HAL_GPIO_WritePin>

      GPSFix fix;
      if (GPS_GetLatestFix(&fix)) {
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fef5 	bl	8001550 <GPS_GetLatestFix>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8090 	beq.w	800188e <DetectTask+0x1fe>
        char out[96];
        // 정수 포맷(printf float 링크 안해도 됨)
        int32_t lat1e6 = (int32_t)(fix.latitude  * 1000000.0);
 800176e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001772:	a351      	add	r3, pc, #324	@ (adr r3, 80018b8 <DetectTask+0x228>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7fe feae 	bl	80004d8 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f7ff f958 	bl	8000a38 <__aeabi_d2iz>
 8001788:	4603      	mov	r3, r0
 800178a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        int32_t lon1e6 = (int32_t)(fix.longitude * 1000000.0);
 800178e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001792:	a349      	add	r3, pc, #292	@ (adr r3, 80018b8 <DetectTask+0x228>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe fe9e 	bl	80004d8 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff f948 	bl	8000a38 <__aeabi_d2iz>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        int32_t lat_abs = (lat1e6 < 0) ? -lat1e6 : lat1e6;
 80017ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bfb8      	it	lt
 80017b6:	425b      	neglt	r3, r3
 80017b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        int32_t lon_abs = (lon1e6 < 0) ? -lon1e6 : lon1e6;
 80017bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bfb8      	it	lt
 80017c4:	425b      	neglt	r3, r3
 80017c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        int n = snprintf(out, sizeof(out),
 80017ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da02      	bge.n	80017d8 <DetectTask+0x148>
 80017d2:	f04f 0c2d 	mov.w	ip, #45	@ 0x2d
 80017d6:	e001      	b.n	80017dc <DetectTask+0x14c>
 80017d8:	f04f 0c2b 	mov.w	ip, #43	@ 0x2b
 80017dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017e0:	4a3a      	ldr	r2, [pc, #232]	@ (80018cc <DetectTask+0x23c>)
 80017e2:	fb82 1203 	smull	r1, r2, r2, r3
 80017e6:	1492      	asrs	r2, r2, #18
 80017e8:	17db      	asrs	r3, r3, #31
 80017ea:	1ad0      	subs	r0, r2, r3
 80017ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80017f0:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <DetectTask+0x23c>)
 80017f2:	fb83 1302 	smull	r1, r3, r3, r2
 80017f6:	1499      	asrs	r1, r3, #18
 80017f8:	17d3      	asrs	r3, r2, #31
 80017fa:	1acb      	subs	r3, r1, r3
 80017fc:	4934      	ldr	r1, [pc, #208]	@ (80018d0 <DetectTask+0x240>)
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001808:	2a00      	cmp	r2, #0
 800180a:	da01      	bge.n	8001810 <DetectTask+0x180>
 800180c:	242d      	movs	r4, #45	@ 0x2d
 800180e:	e000      	b.n	8001812 <DetectTask+0x182>
 8001810:	242b      	movs	r4, #43	@ 0x2b
 8001812:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001816:	492d      	ldr	r1, [pc, #180]	@ (80018cc <DetectTask+0x23c>)
 8001818:	fb81 5102 	smull	r5, r1, r1, r2
 800181c:	1489      	asrs	r1, r1, #18
 800181e:	17d2      	asrs	r2, r2, #31
 8001820:	1a8d      	subs	r5, r1, r2
 8001822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001826:	4a29      	ldr	r2, [pc, #164]	@ (80018cc <DetectTask+0x23c>)
 8001828:	fb82 6201 	smull	r6, r2, r2, r1
 800182c:	1496      	asrs	r6, r2, #18
 800182e:	17ca      	asrs	r2, r1, #31
 8001830:	1ab2      	subs	r2, r6, r2
 8001832:	4e27      	ldr	r6, [pc, #156]	@ (80018d0 <DetectTask+0x240>)
 8001834:	fb06 f202 	mul.w	r2, r6, r2
 8001838:	1a8a      	subs	r2, r1, r2
                         "GPS: lat=%c%ld.%06ld lon=%c%ld.%06ld UTC=%02u:%02u:%02u\r\n",
                         (lat1e6<0)?'-':'+', (long)(lat_abs/1000000), (long)(lat_abs%1000000),
                         (lon1e6<0)?'-':'+', (long)(lon_abs/1000000), (long)(lon_abs%1000000),
                         fix.hh, fix.mm, fix.ss);
 800183a:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800183e:	f897 6029 	ldrb.w	r6, [r7, #41]	@ 0x29
        int n = snprintf(out, sizeof(out),
 8001842:	60be      	str	r6, [r7, #8]
                         fix.hh, fix.mm, fix.ss);
 8001844:	f897 602a 	ldrb.w	r6, [r7, #42]	@ 0x2a
        int n = snprintf(out, sizeof(out),
 8001848:	607e      	str	r6, [r7, #4]
 800184a:	f107 0634 	add.w	r6, r7, #52	@ 0x34
 800184e:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8001852:	f8cd e01c 	str.w	lr, [sp, #28]
 8001856:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800185a:	f8cd e018 	str.w	lr, [sp, #24]
 800185e:	9105      	str	r1, [sp, #20]
 8001860:	9204      	str	r2, [sp, #16]
 8001862:	9503      	str	r5, [sp, #12]
 8001864:	9402      	str	r4, [sp, #8]
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	9000      	str	r0, [sp, #0]
 800186a:	4663      	mov	r3, ip
 800186c:	4a19      	ldr	r2, [pc, #100]	@ (80018d4 <DetectTask+0x244>)
 800186e:	2160      	movs	r1, #96	@ 0x60
 8001870:	4630      	mov	r0, r6
 8001872:	f007 fd2d 	bl	80092d0 <sniprintf>
 8001876:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
        HAL_UART_Transmit(&huart2, (uint8_t*)out, n, 50);  // PC로 출력 (USART2)
 800187a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800187e:	b29a      	uxth	r2, r3
 8001880:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001884:	2332      	movs	r3, #50	@ 0x32
 8001886:	4814      	ldr	r0, [pc, #80]	@ (80018d8 <DetectTask+0x248>)
 8001888:	f002 fd30 	bl	80042ec <HAL_UART_Transmit>
 800188c:	e704      	b.n	8001698 <DetectTask+0x8>
      } else {
        const char *no = "GPS: no valid fix yet\r\n";
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <DetectTask+0x24c>)
 8001890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        HAL_UART_Transmit(&huart2, (uint8_t*)no, strlen(no), 20); // PC로 출력
 8001894:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001898:	f7fe fc5a 	bl	8000150 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	2314      	movs	r3, #20
 80018a2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80018a6:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <DetectTask+0x248>)
 80018a8:	f002 fd20 	bl	80042ec <HAL_UART_Transmit>
 80018ac:	e6f4      	b.n	8001698 <DetectTask+0x8>
    if (ev.status != osEventSignal) continue;
 80018ae:	bf00      	nop
  for(;;) {
 80018b0:	e6f2      	b.n	8001698 <DetectTask+0x8>
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	00000000 	.word	0x00000000
 80018bc:	412e8480 	.word	0x412e8480
 80018c0:	200005e8 	.word	0x200005e8
 80018c4:	46ea6000 	.word	0x46ea6000
 80018c8:	40011000 	.word	0x40011000
 80018cc:	431bde83 	.word	0x431bde83
 80018d0:	000f4240 	.word	0x000f4240
 80018d4:	0800bfe0 	.word	0x0800bfe0
 80018d8:	20000590 	.word	0x20000590
 80018dc:	0800c01c 	.word	0x0800c01c

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b098      	sub	sp, #96	@ 0x60
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e6:	f000 fc7d 	bl	80021e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ea:	f000 f87d 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ee:	f000 f943 	bl	8001b78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018f2:	f000 f917 	bl	8001b24 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80018f6:	f000 f8bd 	bl	8001a74 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80018fa:	f000 f8e9 	bl	8001ad0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // GPS 수신 시작 (USART1)
  GPS_Init();
 80018fe:	f7ff fdab 	bl	8001458 <GPS_Init>
  HAL_UART_Receive_IT(&huart1, &gps_rx_byte, 1);
 8001902:	2201      	movs	r2, #1
 8001904:	492e      	ldr	r1, [pc, #184]	@ (80019c0 <main+0xe0>)
 8001906:	482f      	ldr	r0, [pc, #188]	@ (80019c4 <main+0xe4>)
 8001908:	f002 fd7b 	bl	8004402 <HAL_UART_Receive_IT>

  // I2C 뮤텍스
  osMutexDef(I2C_MTX);
 800190c:	2300      	movs	r3, #0
 800190e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001910:	2300      	movs	r3, #0
 8001912:	65fb      	str	r3, [r7, #92]	@ 0x5c
  i2cMutexHandle = osMutexCreate(osMutex(I2C_MTX));
 8001914:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fc2d 	bl	8005178 <osMutexCreate>
 800191e:	4603      	mov	r3, r0
 8001920:	4a29      	ldr	r2, [pc, #164]	@ (80019c8 <main+0xe8>)
 8001922:	6013      	str	r3, [r2, #0]

  // MPU6050 초기화 (I2C 보호)
  if (i2cMutexHandle) {
 8001924:	4b28      	ldr	r3, [pc, #160]	@ (80019c8 <main+0xe8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00d      	beq.n	8001948 <main+0x68>
    osMutexWait(i2cMutexHandle, 100);
 800192c:	4b26      	ldr	r3, [pc, #152]	@ (80019c8 <main+0xe8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2164      	movs	r1, #100	@ 0x64
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fc38 	bl	80051a8 <osMutexWait>
    MPU6050_Init(&hi2c1);
 8001938:	4824      	ldr	r0, [pc, #144]	@ (80019cc <main+0xec>)
 800193a:	f000 f9ab 	bl	8001c94 <MPU6050_Init>
    osMutexRelease(i2cMutexHandle);
 800193e:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <main+0xe8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 fc7e 	bl	8005244 <osMutexRelease>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001948:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <main+0xf0>)
 800194a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800194e:	461d      	mov	r5, r3
 8001950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800195c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fb1b 	bl	8004f9e <osThreadCreate>
 8001968:	4603      	mov	r3, r0
 800196a:	4a1a      	ldr	r2, [pc, #104]	@ (80019d4 <main+0xf4>)
 800196c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(Sensor, SensorTask, osPriorityAboveNormal, 0, 256);
 800196e:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <main+0xf8>)
 8001970:	f107 0420 	add.w	r4, r7, #32
 8001974:	461d      	mov	r5, r3
 8001976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800197e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorTaskHandle = osThreadCreate(osThread(Sensor), NULL);
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fb08 	bl	8004f9e <osThreadCreate>
 800198e:	4603      	mov	r3, r0
 8001990:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <main+0xfc>)
 8001992:	6013      	str	r3, [r2, #0]

  osThreadDef(Detect, DetectTask, osPriorityNormal, 0, 256);
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <main+0x100>)
 8001996:	1d3c      	adds	r4, r7, #4
 8001998:	461d      	mov	r5, r3
 800199a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  detectTaskHandle = osThreadCreate(osThread(Detect), NULL);
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 faf7 	bl	8004f9e <osThreadCreate>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <main+0x104>)
 80019b4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80019b6:	f003 fadb 	bl	8004f70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019ba:	bf00      	nop
 80019bc:	e7fd      	b.n	80019ba <main+0xda>
 80019be:	bf00      	nop
 80019c0:	200005f4 	.word	0x200005f4
 80019c4:	20000548 	.word	0x20000548
 80019c8:	200005e4 	.word	0x200005e4
 80019cc:	200004f4 	.word	0x200004f4
 80019d0:	0800c040 	.word	0x0800c040
 80019d4:	200005d8 	.word	0x200005d8
 80019d8:	0800c064 	.word	0x0800c064
 80019dc:	200005dc 	.word	0x200005dc
 80019e0:	0800c088 	.word	0x0800c088
 80019e4:	200005e0 	.word	0x200005e0

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b090      	sub	sp, #64	@ 0x40
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	f107 0318 	add.w	r3, r7, #24
 80019f2:	2228      	movs	r2, #40	@ 0x28
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f007 fce3 	bl	80093c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a26:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fffb 	bl	8003a2c <HAL_RCC_OscConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a3c:	f000 f924 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a40:	230f      	movs	r3, #15
 8001a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a44:	2302      	movs	r3, #2
 8001a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fa68 	bl	8003f30 <HAL_RCC_ClockConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a66:	f000 f90f 	bl	8001c88 <Error_Handler>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3740      	adds	r7, #64	@ 0x40
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <MX_I2C1_Init+0x50>)
 8001a7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <MX_I2C1_Init+0x54>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <MX_I2C1_Init+0x50>)
 8001a80:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <MX_I2C1_Init+0x58>)
 8001a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <MX_I2C1_Init+0x50>)
 8001a92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <MX_I2C1_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <MX_I2C1_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <MX_I2C1_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <MX_I2C1_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	@ (8001ac4 <MX_I2C1_Init+0x50>)
 8001ab2:	f000 ff55 	bl	8002960 <HAL_I2C_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001abc:	f000 f8e4 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200004f4 	.word	0x200004f4
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	000186a0 	.word	0x000186a0

08001ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	@ (8001b20 <MX_USART1_UART_Init+0x50>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001adc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001b08:	f002 fba0 	bl	800424c <HAL_UART_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b12:	f000 f8b9 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000548 	.word	0x20000548
 8001b20:	40013800 	.word	0x40013800

08001b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	@ (8001b74 <MX_USART2_UART_Init+0x50>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b5a:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b5c:	f002 fb76 	bl	800424c <HAL_UART_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b66:	f000 f88f 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000590 	.word	0x20000590
 8001b74:	40004400 	.word	0x40004400

08001b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8c:	4b37      	ldr	r3, [pc, #220]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a36      	ldr	r2, [pc, #216]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba4:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a30      	ldr	r2, [pc, #192]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001baa:	f043 0320 	orr.w	r3, r3, #32
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd4:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a24      	ldr	r2, [pc, #144]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001bda:	f043 0308 	orr.w	r3, r3, #8
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <MX_GPIO_Init+0xf4>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bf2:	481f      	ldr	r0, [pc, #124]	@ (8001c70 <MX_GPIO_Init+0xf8>)
 8001bf4:	f000 fe9c 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RLD_GPIO_Port, RLD_Pin, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bfe:	481c      	ldr	r0, [pc, #112]	@ (8001c70 <MX_GPIO_Init+0xf8>)
 8001c00:	f000 fe96 	bl	8002930 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GLD_GPIO_Port, GLD_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2140      	movs	r1, #64	@ 0x40
 8001c08:	4819      	ldr	r0, [pc, #100]	@ (8001c70 <MX_GPIO_Init+0xf8>)
 8001c0a:	f000 fe91 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4812      	ldr	r0, [pc, #72]	@ (8001c70 <MX_GPIO_Init+0xf8>)
 8001c28:	f000 fcfe 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001c2c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4619      	mov	r1, r3
 8001c44:	480a      	ldr	r0, [pc, #40]	@ (8001c70 <MX_GPIO_Init+0xf8>)
 8001c46:	f000 fcef 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <MX_GPIO_Init+0xfc>)
 8001c60:	f000 fce2 	bl	8002628 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c64:	bf00      	nop
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40010c00 	.word	0x40010c00

08001c78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f003 f9d8 	bl	8005036 <osDelay>
 8001c86:	e7fb      	b.n	8001c80 <StartDefaultTask+0x8>

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <Error_Handler+0x8>

08001c94 <MPU6050_Init>:
#include "mpu6050.h"

// MPU6050 초기화
void MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af04      	add	r7, sp, #16
 8001c9a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t data;

    // WHO_AM_I 레지스터 읽기 (통신 확인)
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001c9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	f107 030f 	add.w	r3, r7, #15
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2301      	movs	r3, #1
 8001cae:	2275      	movs	r2, #117	@ 0x75
 8001cb0:	21d0      	movs	r1, #208	@ 0xd0
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f001 f892 	bl	8002ddc <HAL_I2C_Mem_Read>

    if (check == 0x68) { // MPU-6050의 WHO_AM_I 값
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b68      	cmp	r3, #104	@ 0x68
 8001cbc:	d12f      	bne.n	8001d1e <MPU6050_Init+0x8a>
        // 전원 관리 레지스터 설정 (슬립 모드 해제)
        data = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8001cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	f107 030e 	add.w	r3, r7, #14
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	226b      	movs	r2, #107	@ 0x6b
 8001cd6:	21d0      	movs	r1, #208	@ 0xd0
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 ff85 	bl	8002be8 <HAL_I2C_Mem_Write>

        // 샘플 레이트 분주기 설정 (1KHz)
        data = 0x07; // 1KHz / (7+1) = 125Hz
 8001cde:	2307      	movs	r3, #7
 8001ce0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	2301      	movs	r3, #1
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	f107 030e 	add.w	r3, r7, #14
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	2219      	movs	r2, #25
 8001cf6:	21d0      	movs	r1, #208	@ 0xd0
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 ff75 	bl	8002be8 <HAL_I2C_Mem_Write>

        // 가속도 센서 설정 (+-2g)
        data = 0x00; // FS_SEL_0
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8001d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d06:	9302      	str	r3, [sp, #8]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	f107 030e 	add.w	r3, r7, #14
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2301      	movs	r3, #1
 8001d14:	221c      	movs	r2, #28
 8001d16:	21d0      	movs	r1, #208	@ 0xd0
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 ff65 	bl	8002be8 <HAL_I2C_Mem_Write>
    }
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <MPU6050_Read_Accel>:

// 가속도 데이터 읽기
void MPU6050_Read_Accel(I2C_HandleTypeDef *hi2c, int16_t *accel_data) {
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b088      	sub	sp, #32
 8001d2a:	af04      	add	r7, sp, #16
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
    uint8_t Rx_data[6];

    // X, Y, Z 축 가속도 데이터 읽기 (6바이트)
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rx_data, 6, 1000);
 8001d30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d34:	9302      	str	r3, [sp, #8]
 8001d36:	2306      	movs	r3, #6
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	223b      	movs	r2, #59	@ 0x3b
 8001d44:	21d0      	movs	r1, #208	@ 0xd0
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f001 f848 	bl	8002ddc <HAL_I2C_Mem_Read>

    // 16비트 값으로 결합
    accel_data[0] = (int16_t)(Rx_data[0] << 8 | Rx_data[1]);
 8001d4c:	7a3b      	ldrb	r3, [r7, #8]
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	7a7b      	ldrb	r3, [r7, #9]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	801a      	strh	r2, [r3, #0]
    accel_data[1] = (int16_t)(Rx_data[2] << 8 | Rx_data[3]);
 8001d60:	7abb      	ldrb	r3, [r7, #10]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b219      	sxth	r1, r3
 8001d68:	7afb      	ldrb	r3, [r7, #11]
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	430a      	orrs	r2, r1
 8001d72:	b212      	sxth	r2, r2
 8001d74:	801a      	strh	r2, [r3, #0]
    accel_data[2] = (int16_t)(Rx_data[4] << 8 | Rx_data[5]);
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	b219      	sxth	r1, r3
 8001d7e:	7b7b      	ldrb	r3, [r7, #13]
 8001d80:	b21a      	sxth	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	3304      	adds	r3, #4
 8001d86:	430a      	orrs	r2, r1
 8001d88:	b212      	sxth	r2, r2
 8001d8a:	801a      	strh	r2, [r3, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d9a:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <HAL_MspInit+0x68>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	4a17      	ldr	r2, [pc, #92]	@ (8001dfc <HAL_MspInit+0x68>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6193      	str	r3, [r2, #24]
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <HAL_MspInit+0x68>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_MspInit+0x68>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a11      	ldr	r2, [pc, #68]	@ (8001dfc <HAL_MspInit+0x68>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <HAL_MspInit+0x68>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	210f      	movs	r1, #15
 8001dce:	f06f 0001 	mvn.w	r0, #1
 8001dd2:	f000 fb40 	bl	8002456 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <HAL_MspInit+0x6c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <HAL_MspInit+0x6c>)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000

08001e04 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	@ 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e94 <HAL_I2C_MspInit+0x90>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d132      	bne.n	8001e8a <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e24:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <HAL_I2C_MspInit+0x94>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <HAL_I2C_MspInit+0x94>)
 8001e2a:	f043 0308 	orr.w	r3, r3, #8
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_I2C_MspInit+0x94>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e42:	2312      	movs	r3, #18
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4812      	ldr	r0, [pc, #72]	@ (8001e9c <HAL_I2C_MspInit+0x98>)
 8001e52:	f000 fbe9 	bl	8002628 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001e56:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_I2C_MspInit+0x9c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea0 <HAL_I2C_MspInit+0x9c>)
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e72:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <HAL_I2C_MspInit+0x94>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a08      	ldr	r2, [pc, #32]	@ (8001e98 <HAL_I2C_MspInit+0x94>)
 8001e78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_I2C_MspInit+0x94>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40005400 	.word	0x40005400
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010c00 	.word	0x40010c00
 8001ea0:	40010000 	.word	0x40010000

08001ea4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0318 	add.w	r3, r7, #24
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a35      	ldr	r2, [pc, #212]	@ (8001f94 <HAL_UART_MspInit+0xf0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d132      	bne.n	8001f2a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec4:	4b34      	ldr	r3, [pc, #208]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a33      	ldr	r2, [pc, #204]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001eca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0318 	add.w	r3, r7, #24
 8001f06:	4619      	mov	r1, r3
 8001f08:	4824      	ldr	r0, [pc, #144]	@ (8001f9c <HAL_UART_MspInit+0xf8>)
 8001f0a:	f000 fb8d 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	4619      	mov	r1, r3
 8001f22:	481e      	ldr	r0, [pc, #120]	@ (8001f9c <HAL_UART_MspInit+0xf8>)
 8001f24:	f000 fb80 	bl	8002628 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f28:	e030      	b.n	8001f8c <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d12b      	bne.n	8001f8c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f34:	4b18      	ldr	r3, [pc, #96]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	4a17      	ldr	r2, [pc, #92]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f3e:	61d3      	str	r3, [r2, #28]
 8001f40:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a11      	ldr	r2, [pc, #68]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <HAL_UART_MspInit+0xf4>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f64:	230c      	movs	r3, #12
 8001f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 0318 	add.w	r3, r7, #24
 8001f74:	4619      	mov	r1, r3
 8001f76:	4809      	ldr	r0, [pc, #36]	@ (8001f9c <HAL_UART_MspInit+0xf8>)
 8001f78:	f000 fb56 	bl	8002628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2105      	movs	r1, #5
 8001f80:	2026      	movs	r0, #38	@ 0x26
 8001f82:	f000 fa68 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f86:	2026      	movs	r0, #38	@ 0x26
 8001f88:	f000 fa81 	bl	800248e <HAL_NVIC_EnableIRQ>
}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	@ 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	40004400 	.word	0x40004400

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <NMI_Handler+0x4>

08001fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fdc:	f000 f948 	bl	8002270 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001fe0:	f004 fde6 	bl	8006bb0 <xTaskGetSchedulerState>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001fea:	f005 fb65 	bl	80076b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <USART2_IRQHandler+0x10>)
 8001ffa:	f002 fa27 	bl	800444c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000590 	.word	0x20000590

08002008 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return 1;
 800200c:	2301      	movs	r3, #1
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <_kill>:

int _kill(int pid, int sig)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002020:	f007 fa56 	bl	80094d0 <__errno>
 8002024:	4603      	mov	r3, r0
 8002026:	2216      	movs	r2, #22
 8002028:	601a      	str	r2, [r3, #0]
  return -1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_exit>:

void _exit (int status)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800203e:	f04f 31ff 	mov.w	r1, #4294967295
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffe7 	bl	8002016 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <_exit+0x12>

0800204c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e00a      	b.n	8002074 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800205e:	f3af 8000 	nop.w
 8002062:	4601      	mov	r1, r0
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	60ba      	str	r2, [r7, #8]
 800206a:	b2ca      	uxtb	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	dbf0      	blt.n	800205e <_read+0x12>
  }

  return len;
 800207c:	687b      	ldr	r3, [r7, #4]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e009      	b.n	80020ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	60ba      	str	r2, [r7, #8]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3301      	adds	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	dbf1      	blt.n	8002098 <_write+0x12>
  }
  return len;
 80020b4:	687b      	ldr	r3, [r7, #4]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_close>:

int _close(int file)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e4:	605a      	str	r2, [r3, #4]
  return 0;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <_isatty>:

int _isatty(int file)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
	...

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	@ (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f007 f9be 	bl	80094d0 <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20005000 	.word	0x20005000
 8002180:	00000400 	.word	0x00000400
 8002184:	200005f8 	.word	0x200005f8
 8002188:	200014a0 	.word	0x200014a0

0800218c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002198:	f7ff fff8 	bl	800218c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800219c:	480b      	ldr	r0, [pc, #44]	@ (80021cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800219e:	490c      	ldr	r1, [pc, #48]	@ (80021d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021a0:	4a0c      	ldr	r2, [pc, #48]	@ (80021d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a4:	e002      	b.n	80021ac <LoopCopyDataInit>

080021a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021aa:	3304      	adds	r3, #4

080021ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b0:	d3f9      	bcc.n	80021a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b2:	4a09      	ldr	r2, [pc, #36]	@ (80021d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021b4:	4c09      	ldr	r4, [pc, #36]	@ (80021dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b8:	e001      	b.n	80021be <LoopFillZerobss>

080021ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021bc:	3204      	adds	r2, #4

080021be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c0:	d3fb      	bcc.n	80021ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c2:	f007 f98b 	bl	80094dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021c6:	f7ff fb8b 	bl	80018e0 <main>
  bx lr
 80021ca:	4770      	bx	lr
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80021d4:	0800c510 	.word	0x0800c510
  ldr r2, =_sbss
 80021d8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021dc:	200014a0 	.word	0x200014a0

080021e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC1_2_IRQHandler>
	...

080021e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	@ (800220c <HAL_Init+0x28>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	@ (800220c <HAL_Init+0x28>)
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f000 f923 	bl	8002440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fa:	200f      	movs	r0, #15
 80021fc:	f000 f808 	bl	8002210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002200:	f7ff fdc8 	bl	8001d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000

08002210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_InitTick+0x54>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_InitTick+0x58>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002226:	fbb3 f3f1 	udiv	r3, r3, r1
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f93b 	bl	80024aa <HAL_SYSTICK_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00e      	b.n	800225c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0f      	cmp	r3, #15
 8002242:	d80a      	bhi.n	800225a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002244:	2200      	movs	r2, #0
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f000 f903 	bl	8002456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002250:	4a06      	ldr	r2, [pc, #24]	@ (800226c <HAL_InitTick+0x5c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000000 	.word	0x20000000
 8002268:	20000008 	.word	0x20000008
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_IncTick+0x1c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_IncTick+0x20>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a03      	ldr	r2, [pc, #12]	@ (8002290 <HAL_IncTick+0x20>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	20000008 	.word	0x20000008
 8002290:	200005fc 	.word	0x200005fc

08002294 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b02      	ldr	r3, [pc, #8]	@ (80022a4 <HAL_GetTick+0x10>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	200005fc 	.word	0x200005fc

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4906      	ldr	r1, [pc, #24]	@ (8002340 <__NVIC_EnableIRQ+0x34>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	@ (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	@ (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	@ 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	@ 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800240c:	d301      	bcc.n	8002412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240e:	2301      	movs	r3, #1
 8002410:	e00f      	b.n	8002432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002412:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <SysTick_Config+0x40>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241a:	210f      	movs	r1, #15
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f7ff ff90 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002424:	4b05      	ldr	r3, [pc, #20]	@ (800243c <SysTick_Config+0x40>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242a:	4b04      	ldr	r3, [pc, #16]	@ (800243c <SysTick_Config+0x40>)
 800242c:	2207      	movs	r2, #7
 800242e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	e000e010 	.word	0xe000e010

08002440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff2d 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff ff42 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff90 	bl	8002398 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5f 	bl	8002344 <__NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff35 	bl	800230c <__NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffa2 	bl	80023fc <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b085      	sub	sp, #20
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d008      	beq.n	80024ec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2204      	movs	r2, #4
 80024de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e020      	b.n	800252e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 020e 	bic.w	r2, r2, #14
 80024fa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800252c:	7bfb      	ldrb	r3, [r7, #15]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d005      	beq.n	800255c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2204      	movs	r2, #4
 8002554:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e051      	b.n	8002600 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 020e 	bic.w	r2, r2, #14
 800256a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a22      	ldr	r2, [pc, #136]	@ (800260c <HAL_DMA_Abort_IT+0xd4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d029      	beq.n	80025da <HAL_DMA_Abort_IT+0xa2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a21      	ldr	r2, [pc, #132]	@ (8002610 <HAL_DMA_Abort_IT+0xd8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d022      	beq.n	80025d6 <HAL_DMA_Abort_IT+0x9e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1f      	ldr	r2, [pc, #124]	@ (8002614 <HAL_DMA_Abort_IT+0xdc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01a      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x98>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1e      	ldr	r2, [pc, #120]	@ (8002618 <HAL_DMA_Abort_IT+0xe0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d012      	beq.n	80025ca <HAL_DMA_Abort_IT+0x92>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <HAL_DMA_Abort_IT+0xe4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00a      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x8c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <HAL_DMA_Abort_IT+0xe8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d102      	bne.n	80025be <HAL_DMA_Abort_IT+0x86>
 80025b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80025bc:	e00e      	b.n	80025dc <HAL_DMA_Abort_IT+0xa4>
 80025be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025c2:	e00b      	b.n	80025dc <HAL_DMA_Abort_IT+0xa4>
 80025c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025c8:	e008      	b.n	80025dc <HAL_DMA_Abort_IT+0xa4>
 80025ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ce:	e005      	b.n	80025dc <HAL_DMA_Abort_IT+0xa4>
 80025d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025d4:	e002      	b.n	80025dc <HAL_DMA_Abort_IT+0xa4>
 80025d6:	2310      	movs	r3, #16
 80025d8:	e000      	b.n	80025dc <HAL_DMA_Abort_IT+0xa4>
 80025da:	2301      	movs	r3, #1
 80025dc:	4a11      	ldr	r2, [pc, #68]	@ (8002624 <HAL_DMA_Abort_IT+0xec>)
 80025de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
    } 
  }
  return status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40020008 	.word	0x40020008
 8002610:	4002001c 	.word	0x4002001c
 8002614:	40020030 	.word	0x40020030
 8002618:	40020044 	.word	0x40020044
 800261c:	40020058 	.word	0x40020058
 8002620:	4002006c 	.word	0x4002006c
 8002624:	40020000 	.word	0x40020000

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b480      	push	{r7}
 800262a:	b08b      	sub	sp, #44	@ 0x2c
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263a:	e169      	b.n	8002910 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800263c:	2201      	movs	r2, #1
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	429a      	cmp	r2, r3
 8002656:	f040 8158 	bne.w	800290a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a9a      	ldr	r2, [pc, #616]	@ (80028c8 <HAL_GPIO_Init+0x2a0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d05e      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
 8002664:	4a98      	ldr	r2, [pc, #608]	@ (80028c8 <HAL_GPIO_Init+0x2a0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d875      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 800266a:	4a98      	ldr	r2, [pc, #608]	@ (80028cc <HAL_GPIO_Init+0x2a4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d058      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
 8002670:	4a96      	ldr	r2, [pc, #600]	@ (80028cc <HAL_GPIO_Init+0x2a4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d86f      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 8002676:	4a96      	ldr	r2, [pc, #600]	@ (80028d0 <HAL_GPIO_Init+0x2a8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d052      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
 800267c:	4a94      	ldr	r2, [pc, #592]	@ (80028d0 <HAL_GPIO_Init+0x2a8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d869      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 8002682:	4a94      	ldr	r2, [pc, #592]	@ (80028d4 <HAL_GPIO_Init+0x2ac>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d04c      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
 8002688:	4a92      	ldr	r2, [pc, #584]	@ (80028d4 <HAL_GPIO_Init+0x2ac>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d863      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 800268e:	4a92      	ldr	r2, [pc, #584]	@ (80028d8 <HAL_GPIO_Init+0x2b0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d046      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
 8002694:	4a90      	ldr	r2, [pc, #576]	@ (80028d8 <HAL_GPIO_Init+0x2b0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d85d      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 800269a:	2b12      	cmp	r3, #18
 800269c:	d82a      	bhi.n	80026f4 <HAL_GPIO_Init+0xcc>
 800269e:	2b12      	cmp	r3, #18
 80026a0:	d859      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 80026a2:	a201      	add	r2, pc, #4	@ (adr r2, 80026a8 <HAL_GPIO_Init+0x80>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	08002723 	.word	0x08002723
 80026ac:	080026fd 	.word	0x080026fd
 80026b0:	0800270f 	.word	0x0800270f
 80026b4:	08002751 	.word	0x08002751
 80026b8:	08002757 	.word	0x08002757
 80026bc:	08002757 	.word	0x08002757
 80026c0:	08002757 	.word	0x08002757
 80026c4:	08002757 	.word	0x08002757
 80026c8:	08002757 	.word	0x08002757
 80026cc:	08002757 	.word	0x08002757
 80026d0:	08002757 	.word	0x08002757
 80026d4:	08002757 	.word	0x08002757
 80026d8:	08002757 	.word	0x08002757
 80026dc:	08002757 	.word	0x08002757
 80026e0:	08002757 	.word	0x08002757
 80026e4:	08002757 	.word	0x08002757
 80026e8:	08002757 	.word	0x08002757
 80026ec:	08002705 	.word	0x08002705
 80026f0:	08002719 	.word	0x08002719
 80026f4:	4a79      	ldr	r2, [pc, #484]	@ (80028dc <HAL_GPIO_Init+0x2b4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026fa:	e02c      	b.n	8002756 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	623b      	str	r3, [r7, #32]
          break;
 8002702:	e029      	b.n	8002758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	3304      	adds	r3, #4
 800270a:	623b      	str	r3, [r7, #32]
          break;
 800270c:	e024      	b.n	8002758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	3308      	adds	r3, #8
 8002714:	623b      	str	r3, [r7, #32]
          break;
 8002716:	e01f      	b.n	8002758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	330c      	adds	r3, #12
 800271e:	623b      	str	r3, [r7, #32]
          break;
 8002720:	e01a      	b.n	8002758 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800272a:	2304      	movs	r3, #4
 800272c:	623b      	str	r3, [r7, #32]
          break;
 800272e:	e013      	b.n	8002758 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002738:	2308      	movs	r3, #8
 800273a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	611a      	str	r2, [r3, #16]
          break;
 8002742:	e009      	b.n	8002758 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002744:	2308      	movs	r3, #8
 8002746:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	615a      	str	r2, [r3, #20]
          break;
 800274e:	e003      	b.n	8002758 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
          break;
 8002754:	e000      	b.n	8002758 <HAL_GPIO_Init+0x130>
          break;
 8002756:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2bff      	cmp	r3, #255	@ 0xff
 800275c:	d801      	bhi.n	8002762 <HAL_GPIO_Init+0x13a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	e001      	b.n	8002766 <HAL_GPIO_Init+0x13e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2bff      	cmp	r3, #255	@ 0xff
 800276c:	d802      	bhi.n	8002774 <HAL_GPIO_Init+0x14c>
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	e002      	b.n	800277a <HAL_GPIO_Init+0x152>
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	3b08      	subs	r3, #8
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	210f      	movs	r1, #15
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	401a      	ands	r2, r3
 800278c:	6a39      	ldr	r1, [r7, #32]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	431a      	orrs	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80b1 	beq.w	800290a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027a8:	4b4d      	ldr	r3, [pc, #308]	@ (80028e0 <HAL_GPIO_Init+0x2b8>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4a4c      	ldr	r2, [pc, #304]	@ (80028e0 <HAL_GPIO_Init+0x2b8>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6193      	str	r3, [r2, #24]
 80027b4:	4b4a      	ldr	r3, [pc, #296]	@ (80028e0 <HAL_GPIO_Init+0x2b8>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027c0:	4a48      	ldr	r2, [pc, #288]	@ (80028e4 <HAL_GPIO_Init+0x2bc>)
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	3302      	adds	r3, #2
 80027c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	220f      	movs	r2, #15
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a40      	ldr	r2, [pc, #256]	@ (80028e8 <HAL_GPIO_Init+0x2c0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_GPIO_Init+0x1ec>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a3f      	ldr	r2, [pc, #252]	@ (80028ec <HAL_GPIO_Init+0x2c4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00d      	beq.n	8002810 <HAL_GPIO_Init+0x1e8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a3e      	ldr	r2, [pc, #248]	@ (80028f0 <HAL_GPIO_Init+0x2c8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d007      	beq.n	800280c <HAL_GPIO_Init+0x1e4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a3d      	ldr	r2, [pc, #244]	@ (80028f4 <HAL_GPIO_Init+0x2cc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d101      	bne.n	8002808 <HAL_GPIO_Init+0x1e0>
 8002804:	2303      	movs	r3, #3
 8002806:	e006      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 8002808:	2304      	movs	r3, #4
 800280a:	e004      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 800280c:	2302      	movs	r3, #2
 800280e:	e002      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 8002814:	2300      	movs	r3, #0
 8002816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002818:	f002 0203 	and.w	r2, r2, #3
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	4093      	lsls	r3, r2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002826:	492f      	ldr	r1, [pc, #188]	@ (80028e4 <HAL_GPIO_Init+0x2bc>)
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d006      	beq.n	800284e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002840:	4b2d      	ldr	r3, [pc, #180]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	492c      	ldr	r1, [pc, #176]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800284e:	4b2a      	ldr	r3, [pc, #168]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	43db      	mvns	r3, r3
 8002856:	4928      	ldr	r1, [pc, #160]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002858:	4013      	ands	r3, r2
 800285a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002868:	4b23      	ldr	r3, [pc, #140]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	4922      	ldr	r1, [pc, #136]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	60cb      	str	r3, [r1, #12]
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	43db      	mvns	r3, r3
 800287e:	491e      	ldr	r1, [pc, #120]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002880:	4013      	ands	r3, r2
 8002882:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002890:	4b19      	ldr	r3, [pc, #100]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4918      	ldr	r1, [pc, #96]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800289e:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	4914      	ldr	r1, [pc, #80]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d021      	beq.n	80028fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	490e      	ldr	r1, [pc, #56]	@ (80028f8 <HAL_GPIO_Init+0x2d0>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]
 80028c4:	e021      	b.n	800290a <HAL_GPIO_Init+0x2e2>
 80028c6:	bf00      	nop
 80028c8:	10320000 	.word	0x10320000
 80028cc:	10310000 	.word	0x10310000
 80028d0:	10220000 	.word	0x10220000
 80028d4:	10210000 	.word	0x10210000
 80028d8:	10120000 	.word	0x10120000
 80028dc:	10110000 	.word	0x10110000
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40010000 	.word	0x40010000
 80028e8:	40010800 	.word	0x40010800
 80028ec:	40010c00 	.word	0x40010c00
 80028f0:	40011000 	.word	0x40011000
 80028f4:	40011400 	.word	0x40011400
 80028f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <HAL_GPIO_Init+0x304>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	43db      	mvns	r3, r3
 8002904:	4909      	ldr	r1, [pc, #36]	@ (800292c <HAL_GPIO_Init+0x304>)
 8002906:	4013      	ands	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	f47f ae8e 	bne.w	800263c <HAL_GPIO_Init+0x14>
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	372c      	adds	r7, #44	@ 0x2c
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	40010400 	.word	0x40010400

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800294c:	e003      	b.n	8002956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	611a      	str	r2, [r3, #16]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e12b      	b.n	8002bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fa3c 	bl	8001e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2224      	movs	r2, #36	@ 0x24
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c4:	f001 fbfc 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 80029c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a81      	ldr	r2, [pc, #516]	@ (8002bd4 <HAL_I2C_Init+0x274>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d807      	bhi.n	80029e4 <HAL_I2C_Init+0x84>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a80      	ldr	r2, [pc, #512]	@ (8002bd8 <HAL_I2C_Init+0x278>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	bf94      	ite	ls
 80029dc:	2301      	movls	r3, #1
 80029de:	2300      	movhi	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e006      	b.n	80029f2 <HAL_I2C_Init+0x92>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4a7d      	ldr	r2, [pc, #500]	@ (8002bdc <HAL_I2C_Init+0x27c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	bf94      	ite	ls
 80029ec:	2301      	movls	r3, #1
 80029ee:	2300      	movhi	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0e7      	b.n	8002bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4a78      	ldr	r2, [pc, #480]	@ (8002be0 <HAL_I2C_Init+0x280>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0c9b      	lsrs	r3, r3, #18
 8002a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd4 <HAL_I2C_Init+0x274>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d802      	bhi.n	8002a34 <HAL_I2C_Init+0xd4>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3301      	adds	r3, #1
 8002a32:	e009      	b.n	8002a48 <HAL_I2C_Init+0xe8>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	4a69      	ldr	r2, [pc, #420]	@ (8002be4 <HAL_I2C_Init+0x284>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	3301      	adds	r3, #1
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	495c      	ldr	r1, [pc, #368]	@ (8002bd4 <HAL_I2C_Init+0x274>)
 8002a64:	428b      	cmp	r3, r1
 8002a66:	d819      	bhi.n	8002a9c <HAL_I2C_Init+0x13c>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e59      	subs	r1, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a76:	1c59      	adds	r1, r3, #1
 8002a78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_I2C_Init+0x138>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1e59      	subs	r1, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a96:	e051      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	e04f      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <HAL_I2C_Init+0x168>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e012      	b.n	8002aee <HAL_I2C_Init+0x18e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Init+0x196>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e022      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10e      	bne.n	8002b1c <HAL_I2C_Init+0x1bc>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e58      	subs	r0, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	440b      	add	r3, r1
 8002b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	6809      	ldr	r1, [r1, #0]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6911      	ldr	r1, [r2, #16]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	000186a0 	.word	0x000186a0
 8002bd8:	001e847f 	.word	0x001e847f
 8002bdc:	003d08ff 	.word	0x003d08ff
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	4608      	mov	r0, r1
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	817b      	strh	r3, [r7, #10]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	813b      	strh	r3, [r7, #8]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c02:	f7ff fb47 	bl	8002294 <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	f040 80d9 	bne.w	8002dc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2319      	movs	r3, #25
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	496d      	ldr	r1, [pc, #436]	@ (8002dd4 <HAL_I2C_Mem_Write+0x1ec>)
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fccd 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0cc      	b.n	8002dca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_I2C_Mem_Write+0x56>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e0c5      	b.n	8002dca <HAL_I2C_Mem_Write+0x1e2>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d007      	beq.n	8002c64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2221      	movs	r2, #33	@ 0x21
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2240      	movs	r2, #64	@ 0x40
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd8 <HAL_I2C_Mem_Write+0x1f0>)
 8002ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ca6:	88f8      	ldrh	r0, [r7, #6]
 8002ca8:	893a      	ldrh	r2, [r7, #8]
 8002caa:	8979      	ldrh	r1, [r7, #10]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fb04 	bl	80032c4 <I2C_RequestMemoryWrite>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d052      	beq.n	8002d68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e081      	b.n	8002dca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fd92 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d107      	bne.n	8002cee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06b      	b.n	8002dca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d11b      	bne.n	8002d68 <HAL_I2C_Mem_Write+0x180>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d017      	beq.n	8002d68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1aa      	bne.n	8002cc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fd85 	bl	8003884 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d107      	bne.n	8002d98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e016      	b.n	8002dca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	00100002 	.word	0x00100002
 8002dd8:	ffff0000 	.word	0xffff0000

08002ddc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	@ 0x30
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	4608      	mov	r0, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	461a      	mov	r2, r3
 8002dea:	4603      	mov	r3, r0
 8002dec:	817b      	strh	r3, [r7, #10]
 8002dee:	460b      	mov	r3, r1
 8002df0:	813b      	strh	r3, [r7, #8]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dfa:	f7ff fa4b 	bl	8002294 <HAL_GetTick>
 8002dfe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	f040 8250 	bne.w	80032ae <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	2319      	movs	r3, #25
 8002e14:	2201      	movs	r2, #1
 8002e16:	4982      	ldr	r1, [pc, #520]	@ (8003020 <HAL_I2C_Mem_Read+0x244>)
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fbd1 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
 8002e26:	e243      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_I2C_Mem_Read+0x5a>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e23c      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4d4>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d007      	beq.n	8002e5c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2222      	movs	r2, #34	@ 0x22
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2240      	movs	r2, #64	@ 0x40
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a62      	ldr	r2, [pc, #392]	@ (8003024 <HAL_I2C_Mem_Read+0x248>)
 8002e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e9e:	88f8      	ldrh	r0, [r7, #6]
 8002ea0:	893a      	ldrh	r2, [r7, #8]
 8002ea2:	8979      	ldrh	r1, [r7, #10]
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	4603      	mov	r3, r0
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fa9e 	bl	80033f0 <I2C_RequestMemoryRead>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e1f8      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d113      	bne.n	8002eee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e1cc      	b.n	8003288 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d11e      	bne.n	8002f34 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f06:	b672      	cpsid	i
}
 8002f08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f30:	b662      	cpsie	i
}
 8002f32:	e035      	b.n	8002fa0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d11e      	bne.n	8002f7a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4c:	b672      	cpsid	i
}
 8002f4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f76:	b662      	cpsie	i
}
 8002f78:	e012      	b.n	8002fa0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f88:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002fa0:	e172      	b.n	8003288 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	f200 811f 	bhi.w	80031ea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d123      	bne.n	8002ffc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fcab 	bl	8003914 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e173      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ffa:	e145      	b.n	8003288 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	2b02      	cmp	r3, #2
 8003002:	d152      	bne.n	80030aa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300a:	2200      	movs	r2, #0
 800300c:	4906      	ldr	r1, [pc, #24]	@ (8003028 <HAL_I2C_Mem_Read+0x24c>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fad6 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e148      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4d4>
 800301e:	bf00      	nop
 8003020:	00100002 	.word	0x00100002
 8003024:	ffff0000 	.word	0xffff0000
 8003028:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800302c:	b672      	cpsid	i
}
 800302e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800303e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003072:	b662      	cpsie	i
}
 8003074:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030a8:	e0ee      	b.n	8003288 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b0:	2200      	movs	r2, #0
 80030b2:	4981      	ldr	r1, [pc, #516]	@ (80032b8 <HAL_I2C_Mem_Read+0x4dc>)
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fa83 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0f5      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030d4:	b672      	cpsid	i
}
 80030d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800310a:	4b6c      	ldr	r3, [pc, #432]	@ (80032bc <HAL_I2C_Mem_Read+0x4e0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	08db      	lsrs	r3, r3, #3
 8003110:	4a6b      	ldr	r2, [pc, #428]	@ (80032c0 <HAL_I2C_Mem_Read+0x4e4>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0a1a      	lsrs	r2, r3, #8
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00da      	lsls	r2, r3, #3
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	3b01      	subs	r3, #1
 8003128:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d118      	bne.n	8003162 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003152:	b662      	cpsie	i
}
 8003154:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0a6      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d1d9      	bne.n	8003124 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031b2:	b662      	cpsie	i
}
 80031b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031e8:	e04e      	b.n	8003288 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fb90 	bl	8003914 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e058      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d124      	bne.n	8003288 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003254:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	f47f ae88 	bne.w	8002fa2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	@ 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	00010004 	.word	0x00010004
 80032bc:	20000000 	.word	0x20000000
 80032c0:	14f8b589 	.word	0x14f8b589

080032c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	460b      	mov	r3, r1
 80032d8:	813b      	strh	r3, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f960 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003314:	d103      	bne.n	800331e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e05f      	b.n	80033e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003330:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	6a3a      	ldr	r2, [r7, #32]
 8003336:	492d      	ldr	r1, [pc, #180]	@ (80033ec <I2C_RequestMemoryWrite+0x128>)
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f9bb 	bl	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e04c      	b.n	80033e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003360:	6a39      	ldr	r1, [r7, #32]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fa46 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	2b04      	cmp	r3, #4
 8003374:	d107      	bne.n	8003386 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003384:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e02b      	b.n	80033e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003390:	893b      	ldrh	r3, [r7, #8]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	e021      	b.n	80033e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa20 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d107      	bne.n	80033d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e005      	b.n	80033e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033d6:	893b      	ldrh	r3, [r7, #8]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	00010002 	.word	0x00010002

080033f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	460b      	mov	r3, r1
 8003404:	813b      	strh	r3, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003418:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	2200      	movs	r2, #0
 8003432:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f8c2 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003450:	d103      	bne.n	800345a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e0aa      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800346c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	6a3a      	ldr	r2, [r7, #32]
 8003472:	4952      	ldr	r1, [pc, #328]	@ (80035bc <I2C_RequestMemoryRead+0x1cc>)
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f91d 	bl	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e097      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349c:	6a39      	ldr	r1, [r7, #32]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f9a8 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d107      	bne.n	80034c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e076      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034cc:	893b      	ldrh	r3, [r7, #8]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	e021      	b.n	800351c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034d8:	893b      	ldrh	r3, [r7, #8]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	b29b      	uxth	r3, r3
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e8:	6a39      	ldr	r1, [r7, #32]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f982 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d107      	bne.n	800350e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e050      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003512:	893b      	ldrh	r3, [r7, #8]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351e:	6a39      	ldr	r1, [r7, #32]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f967 	bl	80037f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	2b04      	cmp	r3, #4
 8003532:	d107      	bne.n	8003544 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003542:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e035      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003556:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	2200      	movs	r2, #0
 8003560:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f82b 	bl	80035c0 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800357e:	d103      	bne.n	8003588 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e013      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800358c:	897b      	ldrh	r3, [r7, #10]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	6a3a      	ldr	r2, [r7, #32]
 80035a0:	4906      	ldr	r1, [pc, #24]	@ (80035bc <I2C_RequestMemoryRead+0x1cc>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f886 	bl	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	00010002 	.word	0x00010002

080035c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d0:	e048      	b.n	8003664 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d044      	beq.n	8003664 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035da:	f7fe fe5b 	bl	8002294 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d302      	bcc.n	80035f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d139      	bne.n	8003664 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10d      	bne.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	43da      	mvns	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4013      	ands	r3, r2
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	e00c      	b.n	8003630 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	43da      	mvns	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	429a      	cmp	r2, r3
 8003634:	d116      	bne.n	8003664 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	f043 0220 	orr.w	r2, r3, #32
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e023      	b.n	80036ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	0c1b      	lsrs	r3, r3, #16
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d10d      	bne.n	800368a <I2C_WaitOnFlagUntilTimeout+0xca>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	43da      	mvns	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	4013      	ands	r3, r2
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	e00c      	b.n	80036a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	43da      	mvns	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d093      	beq.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036c2:	e071      	b.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d2:	d123      	bne.n	800371c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	f043 0204 	orr.w	r2, r3, #4
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e067      	b.n	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d041      	beq.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003724:	f7fe fdb6 	bl	8002294 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	d302      	bcc.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d136      	bne.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d10c      	bne.n	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf14      	ite	ne
 8003756:	2301      	movne	r3, #1
 8003758:	2300      	moveq	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e00b      	b.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	43da      	mvns	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4013      	ands	r3, r2
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e021      	b.n	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	0c1b      	lsrs	r3, r3, #16
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10c      	bne.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	43da      	mvns	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e00b      	b.n	80037e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f47f af6d 	bne.w	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003800:	e034      	b.n	800386c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f8e3 	bl	80039ce <I2C_IsAcknowledgeFailed>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e034      	b.n	800387c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d028      	beq.n	800386c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7fe fd3b 	bl	8002294 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d11d      	bne.n	800386c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383a:	2b80      	cmp	r3, #128	@ 0x80
 800383c:	d016      	beq.n	800386c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e007      	b.n	800387c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	2b80      	cmp	r3, #128	@ 0x80
 8003878:	d1c3      	bne.n	8003802 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003890:	e034      	b.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f89b 	bl	80039ce <I2C_IsAcknowledgeFailed>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e034      	b.n	800390c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d028      	beq.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7fe fcf3 	bl	8002294 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11d      	bne.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d016      	beq.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d1c3      	bne.n	8003892 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003920:	e049      	b.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b10      	cmp	r3, #16
 800392e:	d119      	bne.n	8003964 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0210 	mvn.w	r2, #16
 8003938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e030      	b.n	80039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003964:	f7fe fc96 	bl	8002294 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	429a      	cmp	r2, r3
 8003972:	d302      	bcc.n	800397a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11d      	bne.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003984:	2b40      	cmp	r3, #64	@ 0x40
 8003986:	d016      	beq.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e007      	b.n	80039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	2b40      	cmp	r3, #64	@ 0x40
 80039c2:	d1ae      	bne.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e4:	d11b      	bne.n	8003a1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	f043 0204 	orr.w	r2, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e272      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8087 	beq.w	8003b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a4c:	4b92      	ldr	r3, [pc, #584]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d00c      	beq.n	8003a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a58:	4b8f      	ldr	r3, [pc, #572]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d112      	bne.n	8003a8a <HAL_RCC_OscConfig+0x5e>
 8003a64:	4b8c      	ldr	r3, [pc, #560]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a70:	d10b      	bne.n	8003a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a72:	4b89      	ldr	r3, [pc, #548]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d06c      	beq.n	8003b58 <HAL_RCC_OscConfig+0x12c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d168      	bne.n	8003b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e24c      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a92:	d106      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x76>
 8003a94:	4b80      	ldr	r3, [pc, #512]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a7f      	ldr	r2, [pc, #508]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	e02e      	b.n	8003b00 <HAL_RCC_OscConfig+0xd4>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x98>
 8003aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a7a      	ldr	r2, [pc, #488]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b78      	ldr	r3, [pc, #480]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a77      	ldr	r2, [pc, #476]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e01d      	b.n	8003b00 <HAL_RCC_OscConfig+0xd4>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0xbc>
 8003ace:	4b72      	ldr	r3, [pc, #456]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a71      	ldr	r2, [pc, #452]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b6f      	ldr	r3, [pc, #444]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a6e      	ldr	r2, [pc, #440]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCC_OscConfig+0xd4>
 8003ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a6a      	ldr	r2, [pc, #424]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	4b68      	ldr	r3, [pc, #416]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a67      	ldr	r2, [pc, #412]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d013      	beq.n	8003b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fe fbc4 	bl	8002294 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fe fbc0 	bl	8002294 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	@ 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e200      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	4b5d      	ldr	r3, [pc, #372]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0xe4>
 8003b2e:	e014      	b.n	8003b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fe fbb0 	bl	8002294 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fe fbac 	bl	8002294 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	@ 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1ec      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	4b53      	ldr	r3, [pc, #332]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x10c>
 8003b56:	e000      	b.n	8003b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d063      	beq.n	8003c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b66:	4b4c      	ldr	r3, [pc, #304]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b72:	4b49      	ldr	r3, [pc, #292]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d11c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x18c>
 8003b7e:	4b46      	ldr	r3, [pc, #280]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d116      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8a:	4b43      	ldr	r3, [pc, #268]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x176>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e1c0      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4939      	ldr	r1, [pc, #228]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb6:	e03a      	b.n	8003c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d020      	beq.n	8003c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc0:	4b36      	ldr	r3, [pc, #216]	@ (8003c9c <HAL_RCC_OscConfig+0x270>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fb65 	bl	8002294 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bce:	f7fe fb61 	bl	8002294 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e1a1      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bec:	4b2a      	ldr	r3, [pc, #168]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4927      	ldr	r1, [pc, #156]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]
 8003c00:	e015      	b.n	8003c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c02:	4b26      	ldr	r3, [pc, #152]	@ (8003c9c <HAL_RCC_OscConfig+0x270>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7fe fb44 	bl	8002294 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c10:	f7fe fb40 	bl	8002294 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e180      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	4b1d      	ldr	r3, [pc, #116]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d03a      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d019      	beq.n	8003c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c42:	4b17      	ldr	r3, [pc, #92]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c48:	f7fe fb24 	bl	8002294 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c50:	f7fe fb20 	bl	8002294 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e160      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c62:	4b0d      	ldr	r3, [pc, #52]	@ (8003c98 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f000 face 	bl	8004210 <RCC_Delay>
 8003c74:	e01c      	b.n	8003cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7c:	f7fe fb0a 	bl	8002294 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c82:	e00f      	b.n	8003ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fe fb06 	bl	8002294 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d908      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e146      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	42420000 	.word	0x42420000
 8003ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	4b92      	ldr	r3, [pc, #584]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e9      	bne.n	8003c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a6 	beq.w	8003e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10d      	bne.n	8003cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cce:	4b88      	ldr	r3, [pc, #544]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	4a87      	ldr	r2, [pc, #540]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd8:	61d3      	str	r3, [r2, #28]
 8003cda:	4b85      	ldr	r3, [pc, #532]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b82      	ldr	r3, [pc, #520]	@ (8003ef4 <HAL_RCC_OscConfig+0x4c8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d118      	bne.n	8003d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef4 <HAL_RCC_OscConfig+0x4c8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8003ef4 <HAL_RCC_OscConfig+0x4c8>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d02:	f7fe fac7 	bl	8002294 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0a:	f7fe fac3 	bl	8002294 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b64      	cmp	r3, #100	@ 0x64
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e103      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	4b75      	ldr	r3, [pc, #468]	@ (8003ef4 <HAL_RCC_OscConfig+0x4c8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x312>
 8003d30:	4b6f      	ldr	r3, [pc, #444]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	4a6e      	ldr	r2, [pc, #440]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6213      	str	r3, [r2, #32]
 8003d3c:	e02d      	b.n	8003d9a <HAL_RCC_OscConfig+0x36e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x334>
 8003d46:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	4a69      	ldr	r2, [pc, #420]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6213      	str	r3, [r2, #32]
 8003d52:	4b67      	ldr	r3, [pc, #412]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4a66      	ldr	r2, [pc, #408]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	6213      	str	r3, [r2, #32]
 8003d5e:	e01c      	b.n	8003d9a <HAL_RCC_OscConfig+0x36e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCC_OscConfig+0x356>
 8003d68:	4b61      	ldr	r3, [pc, #388]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	4a60      	ldr	r2, [pc, #384]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6213      	str	r3, [r2, #32]
 8003d74:	4b5e      	ldr	r3, [pc, #376]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6213      	str	r3, [r2, #32]
 8003d80:	e00b      	b.n	8003d9a <HAL_RCC_OscConfig+0x36e>
 8003d82:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	6213      	str	r3, [r2, #32]
 8003d8e:	4b58      	ldr	r3, [pc, #352]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4a57      	ldr	r2, [pc, #348]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d015      	beq.n	8003dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fe fa77 	bl	8002294 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fe fa73 	bl	8002294 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0b1      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RCC_OscConfig+0x37e>
 8003dcc:	e014      	b.n	8003df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dce:	f7fe fa61 	bl	8002294 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fe fa5d 	bl	8002294 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e09b      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dec:	4b40      	ldr	r3, [pc, #256]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ee      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	4a3b      	ldr	r2, [pc, #236]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8087 	beq.w	8003f22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e14:	4b36      	ldr	r3, [pc, #216]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d061      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d146      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e28:	4b33      	ldr	r3, [pc, #204]	@ (8003ef8 <HAL_RCC_OscConfig+0x4cc>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fe fa31 	bl	8002294 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fe fa2d 	bl	8002294 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e06d      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e48:	4b29      	ldr	r3, [pc, #164]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e5c:	d108      	bne.n	8003e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e5e:	4b24      	ldr	r3, [pc, #144]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4921      	ldr	r1, [pc, #132]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e70:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a19      	ldr	r1, [r3, #32]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	430b      	orrs	r3, r1
 8003e82:	491b      	ldr	r1, [pc, #108]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef8 <HAL_RCC_OscConfig+0x4cc>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fe fa01 	bl	8002294 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fe f9fd 	bl	8002294 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e03d      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea8:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x46a>
 8003eb4:	e035      	b.n	8003f22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ef8 <HAL_RCC_OscConfig+0x4cc>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe f9ea 	bl	8002294 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fe f9e6 	bl	8002294 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e026      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed6:	4b06      	ldr	r3, [pc, #24]	@ (8003ef0 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x498>
 8003ee2:	e01e      	b.n	8003f22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e019      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003efc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d106      	bne.n	8003f1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021000 	.word	0x40021000

08003f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0d0      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	4b6a      	ldr	r3, [pc, #424]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d910      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b67      	ldr	r3, [pc, #412]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 0207 	bic.w	r2, r3, #7
 8003f5a:	4965      	ldr	r1, [pc, #404]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b63      	ldr	r3, [pc, #396]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0b8      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d020      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f8c:	4b59      	ldr	r3, [pc, #356]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4a58      	ldr	r2, [pc, #352]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa4:	4b53      	ldr	r3, [pc, #332]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	4a52      	ldr	r2, [pc, #328]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb0:	4b50      	ldr	r3, [pc, #320]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	494d      	ldr	r1, [pc, #308]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d040      	beq.n	8004050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	4b47      	ldr	r3, [pc, #284]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d115      	bne.n	800400e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e07f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fee:	4b41      	ldr	r3, [pc, #260]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e073      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e06b      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800400e:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f023 0203 	bic.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4936      	ldr	r1, [pc, #216]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004020:	f7fe f938 	bl	8002294 <HAL_GetTick>
 8004024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	e00a      	b.n	800403e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004028:	f7fe f934 	bl	8002294 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e053      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	4b2d      	ldr	r3, [pc, #180]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 020c 	and.w	r2, r3, #12
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	429a      	cmp	r2, r3
 800404e:	d1eb      	bne.n	8004028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004050:	4b27      	ldr	r3, [pc, #156]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d210      	bcs.n	8004080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405e:	4b24      	ldr	r3, [pc, #144]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 0207 	bic.w	r2, r3, #7
 8004066:	4922      	ldr	r1, [pc, #136]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e032      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800408c:	4b19      	ldr	r3, [pc, #100]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4916      	ldr	r1, [pc, #88]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040aa:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	490e      	ldr	r1, [pc, #56]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040be:	f000 f821 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80040c2:	4602      	mov	r2, r0
 80040c4:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	490a      	ldr	r1, [pc, #40]	@ (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	5ccb      	ldrb	r3, [r1, r3]
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	4a09      	ldr	r2, [pc, #36]	@ (80040fc <HAL_RCC_ClockConfig+0x1cc>)
 80040d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040da:	4b09      	ldr	r3, [pc, #36]	@ (8004100 <HAL_RCC_ClockConfig+0x1d0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe f896 	bl	8002210 <HAL_InitTick>

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40022000 	.word	0x40022000
 80040f4:	40021000 	.word	0x40021000
 80040f8:	0800c0ac 	.word	0x0800c0ac
 80040fc:	20000000 	.word	0x20000000
 8004100:	20000004 	.word	0x20000004

08004104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	2300      	movs	r3, #0
 8004118:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800411e:	4b1e      	ldr	r3, [pc, #120]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x94>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b04      	cmp	r3, #4
 800412c:	d002      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x30>
 800412e:	2b08      	cmp	r3, #8
 8004130:	d003      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x36>
 8004132:	e027      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004134:	4b19      	ldr	r3, [pc, #100]	@ (800419c <HAL_RCC_GetSysClockFreq+0x98>)
 8004136:	613b      	str	r3, [r7, #16]
      break;
 8004138:	e027      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	0c9b      	lsrs	r3, r3, #18
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	4a17      	ldr	r2, [pc, #92]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d010      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004152:	4b11      	ldr	r3, [pc, #68]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x94>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	0c5b      	lsrs	r3, r3, #17
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	4a11      	ldr	r2, [pc, #68]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800415e:	5cd3      	ldrb	r3, [r2, r3]
 8004160:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a0d      	ldr	r2, [pc, #52]	@ (800419c <HAL_RCC_GetSysClockFreq+0x98>)
 8004166:	fb03 f202 	mul.w	r2, r3, r2
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	e004      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a0c      	ldr	r2, [pc, #48]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004178:	fb02 f303 	mul.w	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	613b      	str	r3, [r7, #16]
      break;
 8004182:	e002      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b05      	ldr	r3, [pc, #20]	@ (800419c <HAL_RCC_GetSysClockFreq+0x98>)
 8004186:	613b      	str	r3, [r7, #16]
      break;
 8004188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800418a:	693b      	ldr	r3, [r7, #16]
}
 800418c:	4618      	mov	r0, r3
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	007a1200 	.word	0x007a1200
 80041a0:	0800c0c4 	.word	0x0800c0c4
 80041a4:	0800c0d4 	.word	0x0800c0d4
 80041a8:	003d0900 	.word	0x003d0900

080041ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b0:	4b02      	ldr	r3, [pc, #8]	@ (80041bc <HAL_RCC_GetHCLKFreq+0x10>)
 80041b2:	681b      	ldr	r3, [r3, #0]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	20000000 	.word	0x20000000

080041c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041c4:	f7ff fff2 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	4903      	ldr	r1, [pc, #12]	@ (80041e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40021000 	.word	0x40021000
 80041e4:	0800c0bc 	.word	0x0800c0bc

080041e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041ec:	f7ff ffde 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	0adb      	lsrs	r3, r3, #11
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	4903      	ldr	r1, [pc, #12]	@ (800420c <HAL_RCC_GetPCLK2Freq+0x24>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	0800c0bc 	.word	0x0800c0bc

08004210 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004218:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <RCC_Delay+0x34>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0a      	ldr	r2, [pc, #40]	@ (8004248 <RCC_Delay+0x38>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	0a5b      	lsrs	r3, r3, #9
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800422c:	bf00      	nop
  }
  while (Delay --);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1e5a      	subs	r2, r3, #1
 8004232:	60fa      	str	r2, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f9      	bne.n	800422c <RCC_Delay+0x1c>
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	20000000 	.word	0x20000000
 8004248:	10624dd3 	.word	0x10624dd3

0800424c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e042      	b.n	80042e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd fe16 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	@ 0x24
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800428e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fdb7 	bl	8004e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	@ 0x28
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b20      	cmp	r3, #32
 800430a:	d175      	bne.n	80043f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Transmit+0x2c>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e06e      	b.n	80043fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2221      	movs	r2, #33	@ 0x21
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432a:	f7fd ffb3 	bl	8002294 <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004344:	d108      	bne.n	8004358 <HAL_UART_Transmit+0x6c>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	e003      	b.n	8004360 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004360:	e02e      	b.n	80043c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	2180      	movs	r1, #128	@ 0x80
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fb1c 	bl	80049aa <UART_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e03a      	b.n	80043fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004398:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	3302      	adds	r3, #2
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e007      	b.n	80043b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	3301      	adds	r3, #1
 80043b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1cb      	bne.n	8004362 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	2140      	movs	r1, #64	@ 0x40
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fae8 	bl	80049aa <UART_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e006      	b.n	80043fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e000      	b.n	80043fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	4613      	mov	r3, r2
 800440e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b20      	cmp	r3, #32
 800441a:	d112      	bne.n	8004442 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_UART_Receive_IT+0x26>
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e00b      	b.n	8004444 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	461a      	mov	r2, r3
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fb0f 	bl	8004a5c <UART_Start_Receive_IT>
 800443e:	4603      	mov	r3, r0
 8004440:	e000      	b.n	8004444 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b0ba      	sub	sp, #232	@ 0xe8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800448a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <HAL_UART_IRQHandler+0x66>
 800449e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fbec 	bl	8004c88 <UART_Receive_IT>
      return;
 80044b0:	e25b      	b.n	800496a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80de 	beq.w	8004678 <HAL_UART_IRQHandler+0x22c>
 80044bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80d1 	beq.w	8004678 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_UART_IRQHandler+0xae>
 80044e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f2:	f043 0201 	orr.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_UART_IRQHandler+0xd2>
 8004506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004516:	f043 0202 	orr.w	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_UART_IRQHandler+0xf6>
 800452a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	f043 0204 	orr.w	r2, r3, #4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d011      	beq.n	8004572 <HAL_UART_IRQHandler+0x126>
 800454e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800455a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	f043 0208 	orr.w	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 81f2 	beq.w	8004960 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800457c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_UART_IRQHandler+0x14e>
 8004588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fb77 	bl	8004c88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf14      	ite	ne
 80045a8:	2301      	movne	r3, #1
 80045aa:	2300      	moveq	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d103      	bne.n	80045c6 <HAL_UART_IRQHandler+0x17a>
 80045be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d04f      	beq.n	8004666 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fa81 	bl	8004ace <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d041      	beq.n	800465e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3314      	adds	r3, #20
 80045e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004606:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800460a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800461e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1d9      	bne.n	80045da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d013      	beq.n	8004656 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004632:	4a7e      	ldr	r2, [pc, #504]	@ (800482c <HAL_UART_IRQHandler+0x3e0>)
 8004634:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463a:	4618      	mov	r0, r3
 800463c:	f7fd ff7c 	bl	8002538 <HAL_DMA_Abort_IT>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004650:	4610      	mov	r0, r2
 8004652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004654:	e00e      	b.n	8004674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f993 	bl	8004982 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	e00a      	b.n	8004674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f98f 	bl	8004982 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	e006      	b.n	8004674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f98b 	bl	8004982 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004672:	e175      	b.n	8004960 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	bf00      	nop
    return;
 8004676:	e173      	b.n	8004960 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467c:	2b01      	cmp	r3, #1
 800467e:	f040 814f 	bne.w	8004920 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8148 	beq.w	8004920 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8141 	beq.w	8004920 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80b6 	beq.w	8004830 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8145 	beq.w	8004964 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046e2:	429a      	cmp	r2, r3
 80046e4:	f080 813e 	bcs.w	8004964 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	f000 8088 	beq.w	800480c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004712:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004716:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800471a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004728:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800472c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004734:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1d9      	bne.n	80046fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004758:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800476c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004770:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004774:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800477e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e1      	bne.n	8004748 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3314      	adds	r3, #20
 800478a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800479a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3314      	adds	r3, #20
 80047a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80047b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e3      	bne.n	8004784 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047dc:	f023 0310 	bic.w	r3, r3, #16
 80047e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80047ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047f0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e3      	bne.n	80047ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd fe5b 	bl	80024c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800481a:	b29b      	uxth	r3, r3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8b6 	bl	8004994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004828:	e09c      	b.n	8004964 <HAL_UART_IRQHandler+0x518>
 800482a:	bf00      	nop
 800482c:	08004b93 	.word	0x08004b93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004838:	b29b      	uxth	r3, r3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 808e 	beq.w	8004968 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800484c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8089 	beq.w	8004968 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800486c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800487a:	647a      	str	r2, [r7, #68]	@ 0x44
 800487c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e3      	bne.n	8004856 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	623b      	str	r3, [r7, #32]
   return(result);
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3314      	adds	r3, #20
 80048ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80048b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e3      	bne.n	800488e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0310 	bic.w	r3, r3, #16
 80048ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80048f8:	61fa      	str	r2, [r7, #28]
 80048fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	69b9      	ldr	r1, [r7, #24]
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	617b      	str	r3, [r7, #20]
   return(result);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e3      	bne.n	80048d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004916:	4619      	mov	r1, r3
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f83b 	bl	8004994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800491e:	e023      	b.n	8004968 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <HAL_UART_IRQHandler+0x4f4>
 800492c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f93e 	bl	8004bba <UART_Transmit_IT>
    return;
 800493e:	e014      	b.n	800496a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00e      	beq.n	800496a <HAL_UART_IRQHandler+0x51e>
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f97d 	bl	8004c58 <UART_EndTransmit_IT>
    return;
 800495e:	e004      	b.n	800496a <HAL_UART_IRQHandler+0x51e>
    return;
 8004960:	bf00      	nop
 8004962:	e002      	b.n	800496a <HAL_UART_IRQHandler+0x51e>
      return;
 8004964:	bf00      	nop
 8004966:	e000      	b.n	800496a <HAL_UART_IRQHandler+0x51e>
      return;
 8004968:	bf00      	nop
  }
}
 800496a:	37e8      	adds	r7, #232	@ 0xe8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	4613      	mov	r3, r2
 80049b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ba:	e03b      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d037      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c4:	f7fd fc66 	bl	8002294 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d302      	bcc.n	80049da <UART_WaitOnFlagUntilTimeout+0x30>
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e03a      	b.n	8004a54 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d023      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b80      	cmp	r3, #128	@ 0x80
 80049f0:	d020      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d01d      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d116      	bne.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f856 	bl	8004ace <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2208      	movs	r2, #8
 8004a26:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e00f      	b.n	8004a54 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d0b4      	beq.n	80049bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	88fa      	ldrh	r2, [r7, #6]
 8004a7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2222      	movs	r2, #34	@ 0x22
 8004a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aa0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0220 	orr.w	r2, r2, #32
 8004ac0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b095      	sub	sp, #84	@ 0x54
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004af6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004afc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3314      	adds	r3, #20
 8004b28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e5      	bne.n	8004b0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d119      	bne.n	8004b7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f023 0310 	bic.w	r3, r3, #16
 8004b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	330c      	adds	r3, #12
 8004b64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b66:	61ba      	str	r2, [r7, #24]
 8004b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6979      	ldr	r1, [r7, #20]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	613b      	str	r3, [r7, #16]
   return(result);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e5      	bne.n	8004b46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b88:	bf00      	nop
 8004b8a:	3754      	adds	r7, #84	@ 0x54
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff fee8 	bl	8004982 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b21      	cmp	r3, #33	@ 0x21
 8004bcc:	d13e      	bne.n	8004c4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd6:	d114      	bne.n	8004c02 <UART_Transmit_IT+0x48>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d110      	bne.n	8004c02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bf4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	621a      	str	r2, [r3, #32]
 8004c00:	e008      	b.n	8004c14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	1c59      	adds	r1, r3, #1
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6211      	str	r1, [r2, #32]
 8004c0c:	781a      	ldrb	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4619      	mov	r1, r3
 8004c22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10f      	bne.n	8004c48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e000      	b.n	8004c4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fe79 	bl	8004970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08c      	sub	sp, #48	@ 0x30
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b22      	cmp	r3, #34	@ 0x22
 8004c9a:	f040 80ae 	bne.w	8004dfa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca6:	d117      	bne.n	8004cd8 <UART_Receive_IT+0x50>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d113      	bne.n	8004cd8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	1c9a      	adds	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cd6:	e026      	b.n	8004d26 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	d007      	beq.n	8004cfc <UART_Receive_IT+0x74>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <UART_Receive_IT+0x82>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e008      	b.n	8004d1c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4619      	mov	r1, r3
 8004d34:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d15d      	bne.n	8004df6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0220 	bic.w	r2, r2, #32
 8004d48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695a      	ldr	r2, [r3, #20]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d135      	bne.n	8004dec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	613b      	str	r3, [r7, #16]
   return(result);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f023 0310 	bic.w	r3, r3, #16
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da6:	623a      	str	r2, [r7, #32]
 8004da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	69f9      	ldr	r1, [r7, #28]
 8004dac:	6a3a      	ldr	r2, [r7, #32]
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d10a      	bne.n	8004dde <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fdd5 	bl	8004994 <HAL_UARTEx_RxEventCallback>
 8004dea:	e002      	b.n	8004df2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7fc fbd7 	bl	80015a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e002      	b.n	8004dfc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e000      	b.n	8004dfc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3730      	adds	r7, #48	@ 0x30
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e3e:	f023 030c 	bic.w	r3, r3, #12
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2c      	ldr	r2, [pc, #176]	@ (8004f18 <UART_SetConfig+0x114>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d103      	bne.n	8004e74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e6c:	f7ff f9bc 	bl	80041e8 <HAL_RCC_GetPCLK2Freq>
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	e002      	b.n	8004e7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e74:	f7ff f9a4 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 8004e78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009a      	lsls	r2, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	4a22      	ldr	r2, [pc, #136]	@ (8004f1c <UART_SetConfig+0x118>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	0119      	lsls	r1, r3, #4
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009a      	lsls	r2, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f1c <UART_SetConfig+0x118>)
 8004eb2:	fba3 0302 	umull	r0, r3, r3, r2
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2064      	movs	r0, #100	@ 0x64
 8004eba:	fb00 f303 	mul.w	r3, r0, r3
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	3332      	adds	r3, #50	@ 0x32
 8004ec4:	4a15      	ldr	r2, [pc, #84]	@ (8004f1c <UART_SetConfig+0x118>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ed0:	4419      	add	r1, r3
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009a      	lsls	r2, r3, #2
 8004edc:	441a      	add	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <UART_SetConfig+0x118>)
 8004eea:	fba3 0302 	umull	r0, r3, r3, r2
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2064      	movs	r0, #100	@ 0x64
 8004ef2:	fb00 f303 	mul.w	r3, r0, r3
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	3332      	adds	r3, #50	@ 0x32
 8004efc:	4a07      	ldr	r2, [pc, #28]	@ (8004f1c <UART_SetConfig+0x118>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	f003 020f 	and.w	r2, r3, #15
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40013800 	.word	0x40013800
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f32:	2b84      	cmp	r3, #132	@ 0x84
 8004f34:	d005      	beq.n	8004f42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	3303      	adds	r3, #3
 8004f40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f42:	68fb      	ldr	r3, [r7, #12]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr

08004f4e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f54:	f3ef 8305 	mrs	r3, IPSR
 8004f58:	607b      	str	r3, [r7, #4]
  return(result);
 8004f5a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f74:	f001 f9f2 	bl	800635c <vTaskStartScheduler>
  
  return osOK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004f82:	f7ff ffe4 	bl	8004f4e <inHandlerMode>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004f8c:	f001 fb02 	bl	8006594 <xTaskGetTickCountFromISR>
 8004f90:	4603      	mov	r3, r0
 8004f92:	e002      	b.n	8004f9a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004f94:	f001 faf0 	bl	8006578 <xTaskGetTickCount>
 8004f98:	4603      	mov	r3, r0
  }
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa0:	b089      	sub	sp, #36	@ 0x24
 8004fa2:	af04      	add	r7, sp, #16
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d020      	beq.n	8004ff2 <osThreadCreate+0x54>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01c      	beq.n	8004ff2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685c      	ldr	r4, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691e      	ldr	r6, [r3, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ffa8 	bl	8004f20 <makeFreeRtosPriority>
 8004fd0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fda:	9202      	str	r2, [sp, #8]
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	9100      	str	r1, [sp, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	4632      	mov	r2, r6
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 ffeb 	bl	8005fc2 <xTaskCreateStatic>
 8004fec:	4603      	mov	r3, r0
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e01c      	b.n	800502c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685c      	ldr	r4, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ffe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff ff8a 	bl	8004f20 <makeFreeRtosPriority>
 800500c:	4602      	mov	r2, r0
 800500e:	f107 030c 	add.w	r3, r7, #12
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	9200      	str	r2, [sp, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	4632      	mov	r2, r6
 800501a:	4629      	mov	r1, r5
 800501c:	4620      	mov	r0, r4
 800501e:	f001 f830 	bl	8006082 <xTaskCreate>
 8005022:	4603      	mov	r3, r0
 8005024:	2b01      	cmp	r3, #1
 8005026:	d001      	beq.n	800502c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800502c:	68fb      	ldr	r3, [r7, #12]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005036 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <osDelay+0x16>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	e000      	b.n	800504e <osDelay+0x18>
 800504c:	2301      	movs	r3, #1
 800504e:	4618      	mov	r0, r3
 8005050:	f001 f94e 	bl	80062f0 <vTaskDelay>
  
  return osOK;
 8005054:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af02      	add	r7, sp, #8
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8005072:	f7ff ff6c 	bl	8004f4e <inHandlerMode>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01c      	beq.n	80050b6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	f107 0208 	add.w	r2, r7, #8
 8005082:	f107 030c 	add.w	r3, r7, #12
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	2201      	movs	r2, #1
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f002 f861 	bl	8007154 <xTaskGenericNotifyFromISR>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d002      	beq.n	800509e <osSignalSet+0x3e>
      return 0x80000000;
 8005098:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800509c:	e019      	b.n	80050d2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <osSignalSet+0x70>
 80050a4:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <osSignalSet+0x7c>)
 80050a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	e00c      	b.n	80050d0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	f107 0308 	add.w	r3, r7, #8
 80050bc:	2201      	movs	r2, #1
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f001 ff90 	bl	8006fe4 <xTaskGenericNotify>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d002      	beq.n	80050d0 <osSignalSet+0x70>
    return 0x80000000;
 80050ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80050ce:	e000      	b.n	80050d2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80050d0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	e000ed04 	.word	0xe000ed04

080050e0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80050e0:	b590      	push	{r4, r7, lr}
 80050e2:	b089      	sub	sp, #36	@ 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fa:	d103      	bne.n	8005104 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80050fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	e009      	b.n	8005118 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d006      	beq.n	8005118 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <osSignalWait+0x38>
      ticks = 1;
 8005114:	2301      	movs	r3, #1
 8005116:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8005118:	f7ff ff19 	bl	8004f4e <inHandlerMode>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8005122:	2382      	movs	r3, #130	@ 0x82
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	e01b      	b.n	8005160 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	f107 0310 	add.w	r3, r7, #16
 800512e:	1d1a      	adds	r2, r3, #4
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2000      	movs	r0, #0
 8005134:	f001 fefc 	bl	8006f30 <xTaskNotifyWait>
 8005138:	4603      	mov	r3, r0
 800513a:	2b01      	cmp	r3, #1
 800513c:	d008      	beq.n	8005150 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <osSignalWait+0x6a>
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e00a      	b.n	8005160 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800514a:	2340      	movs	r3, #64	@ 0x40
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	e007      	b.n	8005160 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	da02      	bge.n	800515c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8005156:	2386      	movs	r3, #134	@ 0x86
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	e001      	b.n	8005160 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800515c:	2308      	movs	r3, #8
 800515e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	461c      	mov	r4, r3
 8005164:	f107 0310 	add.w	r3, r7, #16
 8005168:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800516c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	3724      	adds	r7, #36	@ 0x24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd90      	pop	{r4, r7, pc}

08005178 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4619      	mov	r1, r3
 800518e:	2001      	movs	r0, #1
 8005190:	f000 fab1 	bl	80056f6 <xQueueCreateMutexStatic>
 8005194:	4603      	mov	r3, r0
 8005196:	e003      	b.n	80051a0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005198:	2001      	movs	r0, #1
 800519a:	f000 fa94 	bl	80056c6 <xQueueCreateMutex>
 800519e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <osMutexWait+0x18>
    return osErrorParameter;
 80051bc:	2380      	movs	r3, #128	@ 0x80
 80051be:	e03a      	b.n	8005236 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d103      	bne.n	80051d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80051cc:	f04f 33ff 	mov.w	r3, #4294967295
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e009      	b.n	80051e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d006      	beq.n	80051e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <osMutexWait+0x40>
      ticks = 1;
 80051e4:	2301      	movs	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80051e8:	f7ff feb1 	bl	8004f4e <inHandlerMode>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d017      	beq.n	8005222 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80051f2:	f107 0308 	add.w	r3, r7, #8
 80051f6:	461a      	mov	r2, r3
 80051f8:	2100      	movs	r1, #0
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fd38 	bl	8005c70 <xQueueReceiveFromISR>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d001      	beq.n	800520a <osMutexWait+0x62>
      return osErrorOS;
 8005206:	23ff      	movs	r3, #255	@ 0xff
 8005208:	e015      	b.n	8005236 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d011      	beq.n	8005234 <osMutexWait+0x8c>
 8005210:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <osMutexWait+0x98>)
 8005212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	e008      	b.n	8005234 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fc13 	bl	8005a50 <xQueueSemaphoreTake>
 800522a:	4603      	mov	r3, r0
 800522c:	2b01      	cmp	r3, #1
 800522e:	d001      	beq.n	8005234 <osMutexWait+0x8c>
    return osErrorOS;
 8005230:	23ff      	movs	r3, #255	@ 0xff
 8005232:	e000      	b.n	8005236 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	e000ed04 	.word	0xe000ed04

08005244 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005250:	2300      	movs	r3, #0
 8005252:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005254:	f7ff fe7b 	bl	8004f4e <inHandlerMode>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800525e:	f107 0308 	add.w	r3, r7, #8
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fb63 	bl	8005930 <xQueueGiveFromISR>
 800526a:	4603      	mov	r3, r0
 800526c:	2b01      	cmp	r3, #1
 800526e:	d001      	beq.n	8005274 <osMutexRelease+0x30>
      return osErrorOS;
 8005270:	23ff      	movs	r3, #255	@ 0xff
 8005272:	e017      	b.n	80052a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d013      	beq.n	80052a2 <osMutexRelease+0x5e>
 800527a:	4b0c      	ldr	r3, [pc, #48]	@ (80052ac <osMutexRelease+0x68>)
 800527c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	e00a      	b.n	80052a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800528c:	2300      	movs	r3, #0
 800528e:	2200      	movs	r2, #0
 8005290:	2100      	movs	r1, #0
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa4a 	bl	800572c <xQueueGenericSend>
 8005298:	4603      	mov	r3, r0
 800529a:	2b01      	cmp	r3, #1
 800529c:	d001      	beq.n	80052a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800529e:	23ff      	movs	r3, #255	@ 0xff
 80052a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80052a2:	68fb      	ldr	r3, [r7, #12]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	e000ed04 	.word	0xe000ed04

080052b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f103 0208 	add.w	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f04f 32ff 	mov.w	r2, #4294967295
 80052c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f103 0208 	add.w	r2, r3, #8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f103 0208 	add.w	r2, r3, #8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr

08005306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d103      	bne.n	800536c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	e00c      	b.n	8005386 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3308      	adds	r3, #8
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	e002      	b.n	800537a <vListInsert+0x2e>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	429a      	cmp	r2, r3
 8005384:	d2f6      	bcs.n	8005374 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	601a      	str	r2, [r3, #0]
}
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6892      	ldr	r2, [r2, #8]
 80053d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6852      	ldr	r2, [r2, #4]
 80053dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d103      	bne.n	80053f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1e5a      	subs	r2, r3, #1
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr
	...

08005410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800543c:	f002 f8be 	bl	80075bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005448:	68f9      	ldr	r1, [r7, #12]
 800544a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	441a      	add	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546c:	3b01      	subs	r3, #1
 800546e:	68f9      	ldr	r1, [r7, #12]
 8005470:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	441a      	add	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	22ff      	movs	r2, #255	@ 0xff
 8005480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	22ff      	movs	r2, #255	@ 0xff
 8005488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d114      	bne.n	80054bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01a      	beq.n	80054d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3310      	adds	r3, #16
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 f9c6 	bl	8006830 <xTaskRemoveFromEventList>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d012      	beq.n	80054d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054aa:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <xQueueGenericReset+0xd0>)
 80054ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	e009      	b.n	80054d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3310      	adds	r3, #16
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fef5 	bl	80052b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3324      	adds	r3, #36	@ 0x24
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fef0 	bl	80052b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054d0:	f002 f8a4 	bl	800761c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054d4:	2301      	movs	r3, #1
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08e      	sub	sp, #56	@ 0x38
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10b      	bne.n	8005510 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800550a:	bf00      	nop
 800550c:	bf00      	nop
 800550e:	e7fd      	b.n	800550c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10b      	bne.n	800552e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	e7fd      	b.n	800552a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <xQueueGenericCreateStatic+0x56>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <xQueueGenericCreateStatic+0x5a>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <xQueueGenericCreateStatic+0x5c>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	623b      	str	r3, [r7, #32]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <xQueueGenericCreateStatic+0x84>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <xQueueGenericCreateStatic+0x88>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <xQueueGenericCreateStatic+0x8a>
 800556c:	2300      	movs	r3, #0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	61fb      	str	r3, [r7, #28]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800558a:	2348      	movs	r3, #72	@ 0x48
 800558c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b48      	cmp	r3, #72	@ 0x48
 8005592:	d00b      	beq.n	80055ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	61bb      	str	r3, [r7, #24]
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	e7fd      	b.n	80055a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80055b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00d      	beq.n	80055d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80055c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f840 	bl	8005654 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3730      	adds	r7, #48	@ 0x30
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b08a      	sub	sp, #40	@ 0x28
 80055e2:	af02      	add	r7, sp, #8
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	4613      	mov	r3, r2
 80055ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10b      	bne.n	800560a <xQueueGenericCreate+0x2c>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	613b      	str	r3, [r7, #16]
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop
 8005608:	e7fd      	b.n	8005606 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	fb02 f303 	mul.w	r3, r2, r3
 8005612:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	3348      	adds	r3, #72	@ 0x48
 8005618:	4618      	mov	r0, r3
 800561a:	f002 f8d1 	bl	80077c0 <pvPortMalloc>
 800561e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d011      	beq.n	800564a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	3348      	adds	r3, #72	@ 0x48
 800562e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005638:	79fa      	ldrb	r2, [r7, #7]
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f805 	bl	8005654 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800564a:	69bb      	ldr	r3, [r7, #24]
	}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d103      	bne.n	8005670 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e002      	b.n	8005676 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005682:	2101      	movs	r1, #1
 8005684:	69b8      	ldr	r0, [r7, #24]
 8005686:	f7ff fec3 	bl	8005410 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800568a:	bf00      	nop
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00e      	beq.n	80056be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80056b2:	2300      	movs	r3, #0
 80056b4:	2200      	movs	r2, #0
 80056b6:	2100      	movs	r1, #0
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f837 	bl	800572c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	4603      	mov	r3, r0
 80056ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80056d0:	2301      	movs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	461a      	mov	r2, r3
 80056dc:	6939      	ldr	r1, [r7, #16]
 80056de:	6978      	ldr	r0, [r7, #20]
 80056e0:	f7ff ff7d 	bl	80055de <xQueueGenericCreate>
 80056e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff ffd3 	bl	8005692 <prvInitialiseMutex>

		return xNewQueue;
 80056ec:	68fb      	ldr	r3, [r7, #12]
	}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b088      	sub	sp, #32
 80056fa:	af02      	add	r7, sp, #8
 80056fc:	4603      	mov	r3, r0
 80056fe:	6039      	str	r1, [r7, #0]
 8005700:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005702:	2301      	movs	r3, #1
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2200      	movs	r2, #0
 8005712:	6939      	ldr	r1, [r7, #16]
 8005714:	6978      	ldr	r0, [r7, #20]
 8005716:	f7ff fee5 	bl	80054e4 <xQueueGenericCreateStatic>
 800571a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff ffb8 	bl	8005692 <prvInitialiseMutex>

		return xNewQueue;
 8005722:	68fb      	ldr	r3, [r7, #12]
	}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08e      	sub	sp, #56	@ 0x38
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800573a:	2300      	movs	r3, #0
 800573c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <xQueueGenericSend+0x34>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	e7fd      	b.n	800575c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d103      	bne.n	800576e <xQueueGenericSend+0x42>
 8005766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <xQueueGenericSend+0x46>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <xQueueGenericSend+0x48>
 8005772:	2300      	movs	r3, #0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10b      	bne.n	8005790 <xQueueGenericSend+0x64>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800578a:	bf00      	nop
 800578c:	bf00      	nop
 800578e:	e7fd      	b.n	800578c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d103      	bne.n	800579e <xQueueGenericSend+0x72>
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <xQueueGenericSend+0x76>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <xQueueGenericSend+0x78>
 80057a2:	2300      	movs	r3, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <xQueueGenericSend+0x94>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	623b      	str	r3, [r7, #32]
}
 80057ba:	bf00      	nop
 80057bc:	bf00      	nop
 80057be:	e7fd      	b.n	80057bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057c0:	f001 f9f6 	bl	8006bb0 <xTaskGetSchedulerState>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <xQueueGenericSend+0xa4>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <xQueueGenericSend+0xa8>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <xQueueGenericSend+0xaa>
 80057d4:	2300      	movs	r3, #0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10b      	bne.n	80057f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	61fb      	str	r3, [r7, #28]
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	e7fd      	b.n	80057ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057f2:	f001 fee3 	bl	80075bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <xQueueGenericSend+0xdc>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d129      	bne.n	800585c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800580e:	f000 fac8 	bl	8005da2 <prvCopyDataToQueue>
 8005812:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	3324      	adds	r3, #36	@ 0x24
 8005820:	4618      	mov	r0, r3
 8005822:	f001 f805 	bl	8006830 <xTaskRemoveFromEventList>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d013      	beq.n	8005854 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800582c:	4b3f      	ldr	r3, [pc, #252]	@ (800592c <xQueueGenericSend+0x200>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	e00a      	b.n	8005854 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800583e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005844:	4b39      	ldr	r3, [pc, #228]	@ (800592c <xQueueGenericSend+0x200>)
 8005846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005854:	f001 fee2 	bl	800761c <vPortExitCritical>
				return pdPASS;
 8005858:	2301      	movs	r3, #1
 800585a:	e063      	b.n	8005924 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005862:	f001 fedb 	bl	800761c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005866:	2300      	movs	r3, #0
 8005868:	e05c      	b.n	8005924 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800586a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005870:	f107 0314 	add.w	r3, r7, #20
 8005874:	4618      	mov	r0, r3
 8005876:	f001 f83f 	bl	80068f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800587e:	f001 fecd 	bl	800761c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005882:	f000 fdcd 	bl	8006420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005886:	f001 fe99 	bl	80075bc <vPortEnterCritical>
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005890:	b25b      	sxtb	r3, r3
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d103      	bne.n	80058a0 <xQueueGenericSend+0x174>
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058a6:	b25b      	sxtb	r3, r3
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d103      	bne.n	80058b6 <xQueueGenericSend+0x18a>
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058b6:	f001 feb1 	bl	800761c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058ba:	1d3a      	adds	r2, r7, #4
 80058bc:	f107 0314 	add.w	r3, r7, #20
 80058c0:	4611      	mov	r1, r2
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 f82e 	bl	8006924 <xTaskCheckForTimeOut>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d124      	bne.n	8005918 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058d0:	f000 fb5f 	bl	8005f92 <prvIsQueueFull>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058dc:	3310      	adds	r3, #16
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4611      	mov	r1, r2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 ff7e 	bl	80067e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ea:	f000 faea 	bl	8005ec2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058ee:	f000 fda5 	bl	800643c <xTaskResumeAll>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f47f af7c 	bne.w	80057f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80058fa:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <xQueueGenericSend+0x200>)
 80058fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	e772      	b.n	80057f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800590c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800590e:	f000 fad8 	bl	8005ec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005912:	f000 fd93 	bl	800643c <xTaskResumeAll>
 8005916:	e76c      	b.n	80057f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800591a:	f000 fad2 	bl	8005ec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800591e:	f000 fd8d 	bl	800643c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005922:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005924:	4618      	mov	r0, r3
 8005926:	3738      	adds	r7, #56	@ 0x38
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08e      	sub	sp, #56	@ 0x38
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10b      	bne.n	800595c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	623b      	str	r3, [r7, #32]
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	e7fd      	b.n	8005958 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	61fb      	str	r3, [r7, #28]
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <xQueueGiveFromISR+0x5c>
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <xQueueGiveFromISR+0x60>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <xQueueGiveFromISR+0x62>
 8005990:	2300      	movs	r3, #0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	61bb      	str	r3, [r7, #24]
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	e7fd      	b.n	80059aa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059ae:	f001 fec7 	bl	8007740 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059b2:	f3ef 8211 	mrs	r2, BASEPRI
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	617a      	str	r2, [r7, #20]
 80059c8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059da:	429a      	cmp	r2, r3
 80059dc:	d22b      	bcs.n	8005a36 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d112      	bne.n	8005a20 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d016      	beq.n	8005a30 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	3324      	adds	r3, #36	@ 0x24
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 ff12 	bl	8006830 <xTaskRemoveFromEventList>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00e      	beq.n	8005a30 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00b      	beq.n	8005a30 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e007      	b.n	8005a30 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a24:	3301      	adds	r3, #1
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	b25a      	sxtb	r2, r3
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005a30:	2301      	movs	r3, #1
 8005a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a34:	e001      	b.n	8005a3a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3738      	adds	r7, #56	@ 0x38
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08e      	sub	sp, #56	@ 0x38
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10b      	bne.n	8005a84 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	623b      	str	r3, [r7, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	61fb      	str	r3, [r7, #28]
}
 8005a9e:	bf00      	nop
 8005aa0:	bf00      	nop
 8005aa2:	e7fd      	b.n	8005aa0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aa4:	f001 f884 	bl	8006bb0 <xTaskGetSchedulerState>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <xQueueSemaphoreTake+0x64>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <xQueueSemaphoreTake+0x68>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <xQueueSemaphoreTake+0x6a>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10b      	bne.n	8005ad6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	61bb      	str	r3, [r7, #24]
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	e7fd      	b.n	8005ad2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ad6:	f001 fd71 	bl	80075bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d024      	beq.n	8005b30 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae8:	1e5a      	subs	r2, r3, #1
 8005aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005af6:	f001 fa07 	bl	8006f08 <pvTaskIncrementMutexHeldCount>
 8005afa:	4602      	mov	r2, r0
 8005afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00f      	beq.n	8005b28 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0a:	3310      	adds	r3, #16
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fe8f 	bl	8006830 <xTaskRemoveFromEventList>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b18:	4b54      	ldr	r3, [pc, #336]	@ (8005c6c <xQueueSemaphoreTake+0x21c>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b28:	f001 fd78 	bl	800761c <vPortExitCritical>
				return pdPASS;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e098      	b.n	8005c62 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d112      	bne.n	8005b5c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	617b      	str	r3, [r7, #20]
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b54:	f001 fd62 	bl	800761c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e082      	b.n	8005c62 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b62:	f107 030c 	add.w	r3, r7, #12
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fec6 	bl	80068f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b70:	f001 fd54 	bl	800761c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b74:	f000 fc54 	bl	8006420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b78:	f001 fd20 	bl	80075bc <vPortEnterCritical>
 8005b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b82:	b25b      	sxtb	r3, r3
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d103      	bne.n	8005b92 <xQueueSemaphoreTake+0x142>
 8005b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b98:	b25b      	sxtb	r3, r3
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d103      	bne.n	8005ba8 <xQueueSemaphoreTake+0x158>
 8005ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ba8:	f001 fd38 	bl	800761c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bac:	463a      	mov	r2, r7
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 feb5 	bl	8006924 <xTaskCheckForTimeOut>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d132      	bne.n	8005c26 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bc2:	f000 f9d0 	bl	8005f66 <prvIsQueueEmpty>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d026      	beq.n	8005c1a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005bd4:	f001 fcf2 	bl	80075bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 f805 	bl	8006bec <xTaskPriorityInherit>
 8005be2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005be4:	f001 fd1a 	bl	800761c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bea:	3324      	adds	r3, #36	@ 0x24
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fdf7 	bl	80067e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bf8:	f000 f963 	bl	8005ec2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bfc:	f000 fc1e 	bl	800643c <xTaskResumeAll>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f47f af67 	bne.w	8005ad6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005c08:	4b18      	ldr	r3, [pc, #96]	@ (8005c6c <xQueueSemaphoreTake+0x21c>)
 8005c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	e75d      	b.n	8005ad6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c1c:	f000 f951 	bl	8005ec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c20:	f000 fc0c 	bl	800643c <xTaskResumeAll>
 8005c24:	e757      	b.n	8005ad6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c28:	f000 f94b 	bl	8005ec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c2c:	f000 fc06 	bl	800643c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c32:	f000 f998 	bl	8005f66 <prvIsQueueEmpty>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f43f af4c 	beq.w	8005ad6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00d      	beq.n	8005c60 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005c44:	f001 fcba 	bl	80075bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c4a:	f000 f893 	bl	8005d74 <prvGetDisinheritPriorityAfterTimeout>
 8005c4e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 f8c6 	bl	8006de8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c5c:	f001 fcde 	bl	800761c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3738      	adds	r7, #56	@ 0x38
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	e000ed04 	.word	0xe000ed04

08005c70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08e      	sub	sp, #56	@ 0x38
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10b      	bne.n	8005c9e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	623b      	str	r3, [r7, #32]
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	e7fd      	b.n	8005c9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d103      	bne.n	8005cac <xQueueReceiveFromISR+0x3c>
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <xQueueReceiveFromISR+0x40>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <xQueueReceiveFromISR+0x42>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10b      	bne.n	8005cce <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	61fb      	str	r3, [r7, #28]
}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	e7fd      	b.n	8005cca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cce:	f001 fd37 	bl	8007740 <vPortValidateInterruptPriority>
	__asm volatile
 8005cd2:	f3ef 8211 	mrs	r2, BASEPRI
 8005cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	61ba      	str	r2, [r7, #24]
 8005ce8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005cea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d02f      	beq.n	8005d5a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d08:	f000 f8b5 	bl	8005e76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0e:	1e5a      	subs	r2, r3, #1
 8005d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d112      	bne.n	8005d44 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d016      	beq.n	8005d54 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	3310      	adds	r3, #16
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fd80 	bl	8006830 <xTaskRemoveFromEventList>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00e      	beq.n	8005d54 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00b      	beq.n	8005d54 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	e007      	b.n	8005d54 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d48:	3301      	adds	r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	b25a      	sxtb	r2, r3
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005d54:	2301      	movs	r3, #1
 8005d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d58:	e001      	b.n	8005d5e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f383 8811 	msr	BASEPRI, r3
}
 8005d68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3738      	adds	r7, #56	@ 0x38
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d006      	beq.n	8005d92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f1c3 0307 	rsb	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e001      	b.n	8005d96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d96:	68fb      	ldr	r3, [r7, #12]
	}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b086      	sub	sp, #24
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10d      	bne.n	8005ddc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d14d      	bne.n	8005e64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 ff83 	bl	8006cd8 <xTaskPriorityDisinherit>
 8005dd2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	609a      	str	r2, [r3, #8]
 8005dda:	e043      	b.n	8005e64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d119      	bne.n	8005e16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6858      	ldr	r0, [r3, #4]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	461a      	mov	r2, r3
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	f003 fbaa 	bl	8009546 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	441a      	add	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d32b      	bcc.n	8005e64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	605a      	str	r2, [r3, #4]
 8005e14:	e026      	b.n	8005e64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	68d8      	ldr	r0, [r3, #12]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	f003 fb90 	bl	8009546 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	425b      	negs	r3, r3
 8005e30:	441a      	add	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d207      	bcs.n	8005e52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	425b      	negs	r3, r3
 8005e4c:	441a      	add	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d105      	bne.n	8005e64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005e6c:	697b      	ldr	r3, [r7, #20]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d018      	beq.n	8005eba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	441a      	add	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d303      	bcc.n	8005eaa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68d9      	ldr	r1, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6838      	ldr	r0, [r7, #0]
 8005eb6:	f003 fb46 	bl	8009546 <memcpy>
	}
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005eca:	f001 fb77 	bl	80075bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ed4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ed6:	e011      	b.n	8005efc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d012      	beq.n	8005f06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3324      	adds	r3, #36	@ 0x24
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fca3 	bl	8006830 <xTaskRemoveFromEventList>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ef0:	f000 fd7c 	bl	80069ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	dce9      	bgt.n	8005ed8 <prvUnlockQueue+0x16>
 8005f04:	e000      	b.n	8005f08 <prvUnlockQueue+0x46>
					break;
 8005f06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	22ff      	movs	r2, #255	@ 0xff
 8005f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f10:	f001 fb84 	bl	800761c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f14:	f001 fb52 	bl	80075bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f20:	e011      	b.n	8005f46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d012      	beq.n	8005f50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3310      	adds	r3, #16
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fc7e 	bl	8006830 <xTaskRemoveFromEventList>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f3a:	f000 fd57 	bl	80069ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dce9      	bgt.n	8005f22 <prvUnlockQueue+0x60>
 8005f4e:	e000      	b.n	8005f52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	22ff      	movs	r2, #255	@ 0xff
 8005f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f5a:	f001 fb5f 	bl	800761c <vPortExitCritical>
}
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f6e:	f001 fb25 	bl	80075bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	e001      	b.n	8005f84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f84:	f001 fb4a 	bl	800761c <vPortExitCritical>

	return xReturn;
 8005f88:	68fb      	ldr	r3, [r7, #12]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f9a:	f001 fb0f 	bl	80075bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d102      	bne.n	8005fb0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005faa:	2301      	movs	r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e001      	b.n	8005fb4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fb4:	f001 fb32 	bl	800761c <vPortExitCritical>

	return xReturn;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b08e      	sub	sp, #56	@ 0x38
 8005fc6:	af04      	add	r7, sp, #16
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10b      	bne.n	8005fee <xTaskCreateStatic+0x2c>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	623b      	str	r3, [r7, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	e7fd      	b.n	8005fea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10b      	bne.n	800600c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	61fb      	str	r3, [r7, #28]
}
 8006006:	bf00      	nop
 8006008:	bf00      	nop
 800600a:	e7fd      	b.n	8006008 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800600c:	2354      	movs	r3, #84	@ 0x54
 800600e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b54      	cmp	r3, #84	@ 0x54
 8006014:	d00b      	beq.n	800602e <xTaskCreateStatic+0x6c>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	61bb      	str	r3, [r7, #24]
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	e7fd      	b.n	800602a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800602e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01e      	beq.n	8006074 <xTaskCreateStatic+0xb2>
 8006036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01b      	beq.n	8006074 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800603c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006044:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	2202      	movs	r2, #2
 800604a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800604e:	2300      	movs	r3, #0
 8006050:	9303      	str	r3, [sp, #12]
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	9302      	str	r3, [sp, #8]
 8006056:	f107 0314 	add.w	r3, r7, #20
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f850 	bl	800610c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800606c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800606e:	f000 f8d5 	bl	800621c <prvAddNewTaskToReadyList>
 8006072:	e001      	b.n	8006078 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006078:	697b      	ldr	r3, [r7, #20]
	}
 800607a:	4618      	mov	r0, r3
 800607c:	3728      	adds	r7, #40	@ 0x28
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006082:	b580      	push	{r7, lr}
 8006084:	b08c      	sub	sp, #48	@ 0x30
 8006086:	af04      	add	r7, sp, #16
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	603b      	str	r3, [r7, #0]
 800608e:	4613      	mov	r3, r2
 8006090:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4618      	mov	r0, r3
 8006098:	f001 fb92 	bl	80077c0 <pvPortMalloc>
 800609c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00e      	beq.n	80060c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060a4:	2054      	movs	r0, #84	@ 0x54
 80060a6:	f001 fb8b 	bl	80077c0 <pvPortMalloc>
 80060aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80060b8:	e005      	b.n	80060c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060ba:	6978      	ldr	r0, [r7, #20]
 80060bc:	f001 fc4e 	bl	800795c <vPortFree>
 80060c0:	e001      	b.n	80060c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d017      	beq.n	80060fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060d4:	88fa      	ldrh	r2, [r7, #6]
 80060d6:	2300      	movs	r3, #0
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	9302      	str	r3, [sp, #8]
 80060de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f80e 	bl	800610c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060f0:	69f8      	ldr	r0, [r7, #28]
 80060f2:	f000 f893 	bl	800621c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060f6:	2301      	movs	r3, #1
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	e002      	b.n	8006102 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006100:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006102:	69bb      	ldr	r3, [r7, #24]
	}
 8006104:	4618      	mov	r0, r3
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006124:	3b01      	subs	r3, #1
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f023 0307 	bic.w	r3, r3, #7
 8006132:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	617b      	str	r3, [r7, #20]
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	e7fd      	b.n	8006152 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01f      	beq.n	800619c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800615c:	2300      	movs	r3, #0
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e012      	b.n	8006188 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	4413      	add	r3, r2
 8006168:	7819      	ldrb	r1, [r3, #0]
 800616a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	4413      	add	r3, r2
 8006170:	3334      	adds	r3, #52	@ 0x34
 8006172:	460a      	mov	r2, r1
 8006174:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d006      	beq.n	8006190 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	3301      	adds	r3, #1
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	2b0f      	cmp	r3, #15
 800618c:	d9e9      	bls.n	8006162 <prvInitialiseNewTask+0x56>
 800618e:	e000      	b.n	8006192 <prvInitialiseNewTask+0x86>
			{
				break;
 8006190:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800619a:	e003      	b.n	80061a4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	d901      	bls.n	80061ae <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061aa:	2306      	movs	r3, #6
 80061ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061b8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	2200      	movs	r2, #0
 80061be:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	3304      	adds	r3, #4
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff f892 	bl	80052ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	3318      	adds	r3, #24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff f88d 	bl	80052ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061dc:	f1c3 0207 	rsb	r2, r3, #7
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ec:	2200      	movs	r2, #0
 80061ee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	68f9      	ldr	r1, [r7, #12]
 80061fc:	69b8      	ldr	r0, [r7, #24]
 80061fe:	f001 f8ed 	bl	80073dc <pxPortInitialiseStack>
 8006202:	4602      	mov	r2, r0
 8006204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006206:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800620e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006212:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006214:	bf00      	nop
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006224:	f001 f9ca 	bl	80075bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006228:	4b2a      	ldr	r3, [pc, #168]	@ (80062d4 <prvAddNewTaskToReadyList+0xb8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3301      	adds	r3, #1
 800622e:	4a29      	ldr	r2, [pc, #164]	@ (80062d4 <prvAddNewTaskToReadyList+0xb8>)
 8006230:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006232:	4b29      	ldr	r3, [pc, #164]	@ (80062d8 <prvAddNewTaskToReadyList+0xbc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d109      	bne.n	800624e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800623a:	4a27      	ldr	r2, [pc, #156]	@ (80062d8 <prvAddNewTaskToReadyList+0xbc>)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006240:	4b24      	ldr	r3, [pc, #144]	@ (80062d4 <prvAddNewTaskToReadyList+0xb8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d110      	bne.n	800626a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006248:	f000 fbf4 	bl	8006a34 <prvInitialiseTaskLists>
 800624c:	e00d      	b.n	800626a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800624e:	4b23      	ldr	r3, [pc, #140]	@ (80062dc <prvAddNewTaskToReadyList+0xc0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006256:	4b20      	ldr	r3, [pc, #128]	@ (80062d8 <prvAddNewTaskToReadyList+0xbc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006260:	429a      	cmp	r2, r3
 8006262:	d802      	bhi.n	800626a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006264:	4a1c      	ldr	r2, [pc, #112]	@ (80062d8 <prvAddNewTaskToReadyList+0xbc>)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800626a:	4b1d      	ldr	r3, [pc, #116]	@ (80062e0 <prvAddNewTaskToReadyList+0xc4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3301      	adds	r3, #1
 8006270:	4a1b      	ldr	r2, [pc, #108]	@ (80062e0 <prvAddNewTaskToReadyList+0xc4>)
 8006272:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006278:	2201      	movs	r2, #1
 800627a:	409a      	lsls	r2, r3
 800627c:	4b19      	ldr	r3, [pc, #100]	@ (80062e4 <prvAddNewTaskToReadyList+0xc8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4313      	orrs	r3, r2
 8006282:	4a18      	ldr	r2, [pc, #96]	@ (80062e4 <prvAddNewTaskToReadyList+0xc8>)
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4a15      	ldr	r2, [pc, #84]	@ (80062e8 <prvAddNewTaskToReadyList+0xcc>)
 8006294:	441a      	add	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3304      	adds	r3, #4
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f7ff f832 	bl	8005306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062a2:	f001 f9bb 	bl	800761c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062a6:	4b0d      	ldr	r3, [pc, #52]	@ (80062dc <prvAddNewTaskToReadyList+0xc0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00e      	beq.n	80062cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062ae:	4b0a      	ldr	r3, [pc, #40]	@ (80062d8 <prvAddNewTaskToReadyList+0xbc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d207      	bcs.n	80062cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062bc:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <prvAddNewTaskToReadyList+0xd0>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000700 	.word	0x20000700
 80062d8:	20000600 	.word	0x20000600
 80062dc:	2000070c 	.word	0x2000070c
 80062e0:	2000071c 	.word	0x2000071c
 80062e4:	20000708 	.word	0x20000708
 80062e8:	20000604 	.word	0x20000604
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d018      	beq.n	8006334 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006302:	4b14      	ldr	r3, [pc, #80]	@ (8006354 <vTaskDelay+0x64>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <vTaskDelay+0x32>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	60bb      	str	r3, [r7, #8]
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	e7fd      	b.n	800631e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006322:	f000 f87d 	bl	8006420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006326:	2100      	movs	r1, #0
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fff1 	bl	8007310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800632e:	f000 f885 	bl	800643c <xTaskResumeAll>
 8006332:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d107      	bne.n	800634a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800633a:	4b07      	ldr	r3, [pc, #28]	@ (8006358 <vTaskDelay+0x68>)
 800633c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20000728 	.word	0x20000728
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	@ 0x28
 8006360:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800636a:	463a      	mov	r2, r7
 800636c:	1d39      	adds	r1, r7, #4
 800636e:	f107 0308 	add.w	r3, r7, #8
 8006372:	4618      	mov	r0, r3
 8006374:	f7fa fec8 	bl	8001108 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	9202      	str	r2, [sp, #8]
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	2300      	movs	r3, #0
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	2300      	movs	r3, #0
 8006388:	460a      	mov	r2, r1
 800638a:	491f      	ldr	r1, [pc, #124]	@ (8006408 <vTaskStartScheduler+0xac>)
 800638c:	481f      	ldr	r0, [pc, #124]	@ (800640c <vTaskStartScheduler+0xb0>)
 800638e:	f7ff fe18 	bl	8005fc2 <xTaskCreateStatic>
 8006392:	4603      	mov	r3, r0
 8006394:	4a1e      	ldr	r2, [pc, #120]	@ (8006410 <vTaskStartScheduler+0xb4>)
 8006396:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006398:	4b1d      	ldr	r3, [pc, #116]	@ (8006410 <vTaskStartScheduler+0xb4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063a0:	2301      	movs	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e001      	b.n	80063aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d116      	bne.n	80063de <vTaskStartScheduler+0x82>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063c4:	4b13      	ldr	r3, [pc, #76]	@ (8006414 <vTaskStartScheduler+0xb8>)
 80063c6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063cc:	4b12      	ldr	r3, [pc, #72]	@ (8006418 <vTaskStartScheduler+0xbc>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063d2:	4b12      	ldr	r3, [pc, #72]	@ (800641c <vTaskStartScheduler+0xc0>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063d8:	f001 f87e 	bl	80074d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063dc:	e00f      	b.n	80063fe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d10b      	bne.n	80063fe <vTaskStartScheduler+0xa2>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60fb      	str	r3, [r7, #12]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <vTaskStartScheduler+0x9e>
}
 80063fe:	bf00      	nop
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	0800c0a4 	.word	0x0800c0a4
 800640c:	08006a05 	.word	0x08006a05
 8006410:	20000724 	.word	0x20000724
 8006414:	20000720 	.word	0x20000720
 8006418:	2000070c 	.word	0x2000070c
 800641c:	20000704 	.word	0x20000704

08006420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006424:	4b04      	ldr	r3, [pc, #16]	@ (8006438 <vTaskSuspendAll+0x18>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	4a03      	ldr	r2, [pc, #12]	@ (8006438 <vTaskSuspendAll+0x18>)
 800642c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800642e:	bf00      	nop
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20000728 	.word	0x20000728

0800643c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800644a:	4b42      	ldr	r3, [pc, #264]	@ (8006554 <xTaskResumeAll+0x118>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <xTaskResumeAll+0x2e>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	603b      	str	r3, [r7, #0]
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800646a:	f001 f8a7 	bl	80075bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800646e:	4b39      	ldr	r3, [pc, #228]	@ (8006554 <xTaskResumeAll+0x118>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3b01      	subs	r3, #1
 8006474:	4a37      	ldr	r2, [pc, #220]	@ (8006554 <xTaskResumeAll+0x118>)
 8006476:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006478:	4b36      	ldr	r3, [pc, #216]	@ (8006554 <xTaskResumeAll+0x118>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d161      	bne.n	8006544 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006480:	4b35      	ldr	r3, [pc, #212]	@ (8006558 <xTaskResumeAll+0x11c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05d      	beq.n	8006544 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006488:	e02e      	b.n	80064e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800648a:	4b34      	ldr	r3, [pc, #208]	@ (800655c <xTaskResumeAll+0x120>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3318      	adds	r3, #24
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe ff90 	bl	80053bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3304      	adds	r3, #4
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe ff8b 	bl	80053bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	2201      	movs	r2, #1
 80064ac:	409a      	lsls	r2, r3
 80064ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006560 <xTaskResumeAll+0x124>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	4a2a      	ldr	r2, [pc, #168]	@ (8006560 <xTaskResumeAll+0x124>)
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4a27      	ldr	r2, [pc, #156]	@ (8006564 <xTaskResumeAll+0x128>)
 80064c6:	441a      	add	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f7fe ff19 	bl	8005306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d8:	4b23      	ldr	r3, [pc, #140]	@ (8006568 <xTaskResumeAll+0x12c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d302      	bcc.n	80064e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064e2:	4b22      	ldr	r3, [pc, #136]	@ (800656c <xTaskResumeAll+0x130>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064e8:	4b1c      	ldr	r3, [pc, #112]	@ (800655c <xTaskResumeAll+0x120>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1cc      	bne.n	800648a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064f6:	f000 fb3b 	bl	8006b70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006570 <xTaskResumeAll+0x134>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d010      	beq.n	8006528 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006506:	f000 f857 	bl	80065b8 <xTaskIncrementTick>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006510:	4b16      	ldr	r3, [pc, #88]	@ (800656c <xTaskResumeAll+0x130>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3b01      	subs	r3, #1
 800651a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f1      	bne.n	8006506 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006522:	4b13      	ldr	r3, [pc, #76]	@ (8006570 <xTaskResumeAll+0x134>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006528:	4b10      	ldr	r3, [pc, #64]	@ (800656c <xTaskResumeAll+0x130>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006534:	4b0f      	ldr	r3, [pc, #60]	@ (8006574 <xTaskResumeAll+0x138>)
 8006536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006544:	f001 f86a 	bl	800761c <vPortExitCritical>

	return xAlreadyYielded;
 8006548:	68bb      	ldr	r3, [r7, #8]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000728 	.word	0x20000728
 8006558:	20000700 	.word	0x20000700
 800655c:	200006c0 	.word	0x200006c0
 8006560:	20000708 	.word	0x20000708
 8006564:	20000604 	.word	0x20000604
 8006568:	20000600 	.word	0x20000600
 800656c:	20000714 	.word	0x20000714
 8006570:	20000710 	.word	0x20000710
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800657e:	4b04      	ldr	r3, [pc, #16]	@ (8006590 <xTaskGetTickCount+0x18>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006584:	687b      	ldr	r3, [r7, #4]
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	bc80      	pop	{r7}
 800658e:	4770      	bx	lr
 8006590:	20000704 	.word	0x20000704

08006594 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800659a:	f001 f8d1 	bl	8007740 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800659e:	2300      	movs	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80065a2:	4b04      	ldr	r3, [pc, #16]	@ (80065b4 <xTaskGetTickCountFromISR+0x20>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065a8:	683b      	ldr	r3, [r7, #0]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000704 	.word	0x20000704

080065b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006700 <xTaskIncrementTick+0x148>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f040 808f 	bne.w	80066ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065cc:	4b4d      	ldr	r3, [pc, #308]	@ (8006704 <xTaskIncrementTick+0x14c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065d4:	4a4b      	ldr	r2, [pc, #300]	@ (8006704 <xTaskIncrementTick+0x14c>)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d121      	bne.n	8006624 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80065e0:	4b49      	ldr	r3, [pc, #292]	@ (8006708 <xTaskIncrementTick+0x150>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00b      	beq.n	8006602 <xTaskIncrementTick+0x4a>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	603b      	str	r3, [r7, #0]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <xTaskIncrementTick+0x46>
 8006602:	4b41      	ldr	r3, [pc, #260]	@ (8006708 <xTaskIncrementTick+0x150>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	4b40      	ldr	r3, [pc, #256]	@ (800670c <xTaskIncrementTick+0x154>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a3e      	ldr	r2, [pc, #248]	@ (8006708 <xTaskIncrementTick+0x150>)
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	4a3e      	ldr	r2, [pc, #248]	@ (800670c <xTaskIncrementTick+0x154>)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4b3e      	ldr	r3, [pc, #248]	@ (8006710 <xTaskIncrementTick+0x158>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3301      	adds	r3, #1
 800661c:	4a3c      	ldr	r2, [pc, #240]	@ (8006710 <xTaskIncrementTick+0x158>)
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	f000 faa6 	bl	8006b70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006624:	4b3b      	ldr	r3, [pc, #236]	@ (8006714 <xTaskIncrementTick+0x15c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	429a      	cmp	r2, r3
 800662c:	d348      	bcc.n	80066c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800662e:	4b36      	ldr	r3, [pc, #216]	@ (8006708 <xTaskIncrementTick+0x150>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006638:	4b36      	ldr	r3, [pc, #216]	@ (8006714 <xTaskIncrementTick+0x15c>)
 800663a:	f04f 32ff 	mov.w	r2, #4294967295
 800663e:	601a      	str	r2, [r3, #0]
					break;
 8006640:	e03e      	b.n	80066c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006642:	4b31      	ldr	r3, [pc, #196]	@ (8006708 <xTaskIncrementTick+0x150>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	d203      	bcs.n	8006662 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800665a:	4a2e      	ldr	r2, [pc, #184]	@ (8006714 <xTaskIncrementTick+0x15c>)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006660:	e02e      	b.n	80066c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	3304      	adds	r3, #4
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe fea8 	bl	80053bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	3318      	adds	r3, #24
 8006678:	4618      	mov	r0, r3
 800667a:	f7fe fe9f 	bl	80053bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006682:	2201      	movs	r2, #1
 8006684:	409a      	lsls	r2, r3
 8006686:	4b24      	ldr	r3, [pc, #144]	@ (8006718 <xTaskIncrementTick+0x160>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4313      	orrs	r3, r2
 800668c:	4a22      	ldr	r2, [pc, #136]	@ (8006718 <xTaskIncrementTick+0x160>)
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4a1f      	ldr	r2, [pc, #124]	@ (800671c <xTaskIncrementTick+0x164>)
 800669e:	441a      	add	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7fe fe2d 	bl	8005306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006720 <xTaskIncrementTick+0x168>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d3b9      	bcc.n	800662e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80066ba:	2301      	movs	r3, #1
 80066bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066be:	e7b6      	b.n	800662e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066c0:	4b17      	ldr	r3, [pc, #92]	@ (8006720 <xTaskIncrementTick+0x168>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c6:	4915      	ldr	r1, [pc, #84]	@ (800671c <xTaskIncrementTick+0x164>)
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d901      	bls.n	80066dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80066d8:	2301      	movs	r3, #1
 80066da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066dc:	4b11      	ldr	r3, [pc, #68]	@ (8006724 <xTaskIncrementTick+0x16c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80066e4:	2301      	movs	r3, #1
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e004      	b.n	80066f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006728 <xTaskIncrementTick+0x170>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3301      	adds	r3, #1
 80066f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006728 <xTaskIncrementTick+0x170>)
 80066f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066f4:	697b      	ldr	r3, [r7, #20]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000728 	.word	0x20000728
 8006704:	20000704 	.word	0x20000704
 8006708:	200006b8 	.word	0x200006b8
 800670c:	200006bc 	.word	0x200006bc
 8006710:	20000718 	.word	0x20000718
 8006714:	20000720 	.word	0x20000720
 8006718:	20000708 	.word	0x20000708
 800671c:	20000604 	.word	0x20000604
 8006720:	20000600 	.word	0x20000600
 8006724:	20000714 	.word	0x20000714
 8006728:	20000710 	.word	0x20000710

0800672c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006732:	4b27      	ldr	r3, [pc, #156]	@ (80067d0 <vTaskSwitchContext+0xa4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800673a:	4b26      	ldr	r3, [pc, #152]	@ (80067d4 <vTaskSwitchContext+0xa8>)
 800673c:	2201      	movs	r2, #1
 800673e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006740:	e040      	b.n	80067c4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006742:	4b24      	ldr	r3, [pc, #144]	@ (80067d4 <vTaskSwitchContext+0xa8>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006748:	4b23      	ldr	r3, [pc, #140]	@ (80067d8 <vTaskSwitchContext+0xac>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	fab3 f383 	clz	r3, r3
 8006754:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006756:	7afb      	ldrb	r3, [r7, #11]
 8006758:	f1c3 031f 	rsb	r3, r3, #31
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	491f      	ldr	r1, [pc, #124]	@ (80067dc <vTaskSwitchContext+0xb0>)
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10b      	bne.n	800678a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	607b      	str	r3, [r7, #4]
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	e7fd      	b.n	8006786 <vTaskSwitchContext+0x5a>
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4a11      	ldr	r2, [pc, #68]	@ (80067dc <vTaskSwitchContext+0xb0>)
 8006796:	4413      	add	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	3308      	adds	r3, #8
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d104      	bne.n	80067ba <vTaskSwitchContext+0x8e>
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	605a      	str	r2, [r3, #4]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	4a07      	ldr	r2, [pc, #28]	@ (80067e0 <vTaskSwitchContext+0xb4>)
 80067c2:	6013      	str	r3, [r2, #0]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	20000728 	.word	0x20000728
 80067d4:	20000714 	.word	0x20000714
 80067d8:	20000708 	.word	0x20000708
 80067dc:	20000604 	.word	0x20000604
 80067e0:	20000600 	.word	0x20000600

080067e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10b      	bne.n	800680c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	60fb      	str	r3, [r7, #12]
}
 8006806:	bf00      	nop
 8006808:	bf00      	nop
 800680a:	e7fd      	b.n	8006808 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800680c:	4b07      	ldr	r3, [pc, #28]	@ (800682c <vTaskPlaceOnEventList+0x48>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3318      	adds	r3, #24
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7fe fd99 	bl	800534c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800681a:	2101      	movs	r1, #1
 800681c:	6838      	ldr	r0, [r7, #0]
 800681e:	f000 fd77 	bl	8007310 <prvAddCurrentTaskToDelayedList>
}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000600 	.word	0x20000600

08006830 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	60fb      	str	r3, [r7, #12]
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	3318      	adds	r3, #24
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fdaa 	bl	80053bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006868:	4b1d      	ldr	r3, [pc, #116]	@ (80068e0 <xTaskRemoveFromEventList+0xb0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d11c      	bne.n	80068aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	3304      	adds	r3, #4
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fda1 	bl	80053bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	2201      	movs	r2, #1
 8006880:	409a      	lsls	r2, r3
 8006882:	4b18      	ldr	r3, [pc, #96]	@ (80068e4 <xTaskRemoveFromEventList+0xb4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4313      	orrs	r3, r2
 8006888:	4a16      	ldr	r2, [pc, #88]	@ (80068e4 <xTaskRemoveFromEventList+0xb4>)
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4a13      	ldr	r2, [pc, #76]	@ (80068e8 <xTaskRemoveFromEventList+0xb8>)
 800689a:	441a      	add	r2, r3
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	3304      	adds	r3, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f7fe fd2f 	bl	8005306 <vListInsertEnd>
 80068a8:	e005      	b.n	80068b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	3318      	adds	r3, #24
 80068ae:	4619      	mov	r1, r3
 80068b0:	480e      	ldr	r0, [pc, #56]	@ (80068ec <xTaskRemoveFromEventList+0xbc>)
 80068b2:	f7fe fd28 	bl	8005306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ba:	4b0d      	ldr	r3, [pc, #52]	@ (80068f0 <xTaskRemoveFromEventList+0xc0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d905      	bls.n	80068d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068c4:	2301      	movs	r3, #1
 80068c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068c8:	4b0a      	ldr	r3, [pc, #40]	@ (80068f4 <xTaskRemoveFromEventList+0xc4>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	e001      	b.n	80068d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068d0:	2300      	movs	r3, #0
 80068d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068d4:	697b      	ldr	r3, [r7, #20]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000728 	.word	0x20000728
 80068e4:	20000708 	.word	0x20000708
 80068e8:	20000604 	.word	0x20000604
 80068ec:	200006c0 	.word	0x200006c0
 80068f0:	20000600 	.word	0x20000600
 80068f4:	20000714 	.word	0x20000714

080068f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006900:	4b06      	ldr	r3, [pc, #24]	@ (800691c <vTaskInternalSetTimeOutState+0x24>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006908:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <vTaskInternalSetTimeOutState+0x28>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	605a      	str	r2, [r3, #4]
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	bc80      	pop	{r7}
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000718 	.word	0x20000718
 8006920:	20000704 	.word	0x20000704

08006924 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10b      	bne.n	800694c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	613b      	str	r3, [r7, #16]
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	e7fd      	b.n	8006948 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10b      	bne.n	800696a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60fb      	str	r3, [r7, #12]
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	e7fd      	b.n	8006966 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800696a:	f000 fe27 	bl	80075bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800696e:	4b1d      	ldr	r3, [pc, #116]	@ (80069e4 <xTaskCheckForTimeOut+0xc0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006986:	d102      	bne.n	800698e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006988:	2300      	movs	r3, #0
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	e023      	b.n	80069d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b15      	ldr	r3, [pc, #84]	@ (80069e8 <xTaskCheckForTimeOut+0xc4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d007      	beq.n	80069aa <xTaskCheckForTimeOut+0x86>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d302      	bcc.n	80069aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	e015      	b.n	80069d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d20b      	bcs.n	80069cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff ff99 	bl	80068f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	e004      	b.n	80069d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069d2:	2301      	movs	r3, #1
 80069d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069d6:	f000 fe21 	bl	800761c <vPortExitCritical>

	return xReturn;
 80069da:	69fb      	ldr	r3, [r7, #28]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20000704 	.word	0x20000704
 80069e8:	20000718 	.word	0x20000718

080069ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069f0:	4b03      	ldr	r3, [pc, #12]	@ (8006a00 <vTaskMissedYield+0x14>)
 80069f2:	2201      	movs	r2, #1
 80069f4:	601a      	str	r2, [r3, #0]
}
 80069f6:	bf00      	nop
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20000714 	.word	0x20000714

08006a04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a0c:	f000 f852 	bl	8006ab4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a10:	4b06      	ldr	r3, [pc, #24]	@ (8006a2c <prvIdleTask+0x28>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d9f9      	bls.n	8006a0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a18:	4b05      	ldr	r3, [pc, #20]	@ (8006a30 <prvIdleTask+0x2c>)
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a28:	e7f0      	b.n	8006a0c <prvIdleTask+0x8>
 8006a2a:	bf00      	nop
 8006a2c:	20000604 	.word	0x20000604
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	607b      	str	r3, [r7, #4]
 8006a3e:	e00c      	b.n	8006a5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4a12      	ldr	r2, [pc, #72]	@ (8006a94 <prvInitialiseTaskLists+0x60>)
 8006a4c:	4413      	add	r3, r2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fc2e 	bl	80052b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3301      	adds	r3, #1
 8006a58:	607b      	str	r3, [r7, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b06      	cmp	r3, #6
 8006a5e:	d9ef      	bls.n	8006a40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a60:	480d      	ldr	r0, [pc, #52]	@ (8006a98 <prvInitialiseTaskLists+0x64>)
 8006a62:	f7fe fc25 	bl	80052b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a66:	480d      	ldr	r0, [pc, #52]	@ (8006a9c <prvInitialiseTaskLists+0x68>)
 8006a68:	f7fe fc22 	bl	80052b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a6c:	480c      	ldr	r0, [pc, #48]	@ (8006aa0 <prvInitialiseTaskLists+0x6c>)
 8006a6e:	f7fe fc1f 	bl	80052b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a72:	480c      	ldr	r0, [pc, #48]	@ (8006aa4 <prvInitialiseTaskLists+0x70>)
 8006a74:	f7fe fc1c 	bl	80052b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a78:	480b      	ldr	r0, [pc, #44]	@ (8006aa8 <prvInitialiseTaskLists+0x74>)
 8006a7a:	f7fe fc19 	bl	80052b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006aac <prvInitialiseTaskLists+0x78>)
 8006a80:	4a05      	ldr	r2, [pc, #20]	@ (8006a98 <prvInitialiseTaskLists+0x64>)
 8006a82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a84:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab0 <prvInitialiseTaskLists+0x7c>)
 8006a86:	4a05      	ldr	r2, [pc, #20]	@ (8006a9c <prvInitialiseTaskLists+0x68>)
 8006a88:	601a      	str	r2, [r3, #0]
}
 8006a8a:	bf00      	nop
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000604 	.word	0x20000604
 8006a98:	20000690 	.word	0x20000690
 8006a9c:	200006a4 	.word	0x200006a4
 8006aa0:	200006c0 	.word	0x200006c0
 8006aa4:	200006d4 	.word	0x200006d4
 8006aa8:	200006ec 	.word	0x200006ec
 8006aac:	200006b8 	.word	0x200006b8
 8006ab0:	200006bc 	.word	0x200006bc

08006ab4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aba:	e019      	b.n	8006af0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006abc:	f000 fd7e 	bl	80075bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac0:	4b10      	ldr	r3, [pc, #64]	@ (8006b04 <prvCheckTasksWaitingTermination+0x50>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3304      	adds	r3, #4
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe fc75 	bl	80053bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b08 <prvCheckTasksWaitingTermination+0x54>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8006b08 <prvCheckTasksWaitingTermination+0x54>)
 8006ada:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006adc:	4b0b      	ldr	r3, [pc, #44]	@ (8006b0c <prvCheckTasksWaitingTermination+0x58>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8006b0c <prvCheckTasksWaitingTermination+0x58>)
 8006ae4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ae6:	f000 fd99 	bl	800761c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f810 	bl	8006b10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006af0:	4b06      	ldr	r3, [pc, #24]	@ (8006b0c <prvCheckTasksWaitingTermination+0x58>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e1      	bne.n	8006abc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	200006d4 	.word	0x200006d4
 8006b08:	20000700 	.word	0x20000700
 8006b0c:	200006e8 	.word	0x200006e8

08006b10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d108      	bne.n	8006b34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 ff18 	bl	800795c <vPortFree>
				vPortFree( pxTCB );
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 ff15 	bl	800795c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b32:	e019      	b.n	8006b68 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d103      	bne.n	8006b46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 ff0c 	bl	800795c <vPortFree>
	}
 8006b44:	e010      	b.n	8006b68 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d00b      	beq.n	8006b68 <prvDeleteTCB+0x58>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	60fb      	str	r3, [r7, #12]
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <prvDeleteTCB+0x54>
	}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba8 <prvResetNextTaskUnblockTime+0x38>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b80:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <prvResetNextTaskUnblockTime+0x3c>)
 8006b82:	f04f 32ff 	mov.w	r2, #4294967295
 8006b86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b88:	e008      	b.n	8006b9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ba8 <prvResetNextTaskUnblockTime+0x38>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	4a04      	ldr	r2, [pc, #16]	@ (8006bac <prvResetNextTaskUnblockTime+0x3c>)
 8006b9a:	6013      	str	r3, [r2, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	200006b8 	.word	0x200006b8
 8006bac:	20000720 	.word	0x20000720

08006bb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006be4 <xTaskGetSchedulerState+0x34>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	607b      	str	r3, [r7, #4]
 8006bc2:	e008      	b.n	8006bd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc4:	4b08      	ldr	r3, [pc, #32]	@ (8006be8 <xTaskGetSchedulerState+0x38>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	607b      	str	r3, [r7, #4]
 8006bd0:	e001      	b.n	8006bd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bd6:	687b      	ldr	r3, [r7, #4]
	}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	2000070c 	.word	0x2000070c
 8006be8:	20000728 	.word	0x20000728

08006bec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d05e      	beq.n	8006cc0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c06:	4b31      	ldr	r3, [pc, #196]	@ (8006ccc <xTaskPriorityInherit+0xe0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d24e      	bcs.n	8006cae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	db06      	blt.n	8006c26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c18:	4b2c      	ldr	r3, [pc, #176]	@ (8006ccc <xTaskPriorityInherit+0xe0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1e:	f1c3 0207 	rsb	r2, r3, #7
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6959      	ldr	r1, [r3, #20]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4a26      	ldr	r2, [pc, #152]	@ (8006cd0 <xTaskPriorityInherit+0xe4>)
 8006c38:	4413      	add	r3, r2
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	d12f      	bne.n	8006c9e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fbba 	bl	80053bc <uxListRemove>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c52:	2201      	movs	r2, #1
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	43da      	mvns	r2, r3
 8006c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8006cd4 <xTaskPriorityInherit+0xe8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd4 <xTaskPriorityInherit+0xe8>)
 8006c62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c64:	4b19      	ldr	r3, [pc, #100]	@ (8006ccc <xTaskPriorityInherit+0xe0>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	2201      	movs	r2, #1
 8006c74:	409a      	lsls	r2, r3
 8006c76:	4b17      	ldr	r3, [pc, #92]	@ (8006cd4 <xTaskPriorityInherit+0xe8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	4a15      	ldr	r2, [pc, #84]	@ (8006cd4 <xTaskPriorityInherit+0xe8>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a10      	ldr	r2, [pc, #64]	@ (8006cd0 <xTaskPriorityInherit+0xe4>)
 8006c8e:	441a      	add	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7fe fb35 	bl	8005306 <vListInsertEnd>
 8006c9c:	e004      	b.n	8006ca8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006ccc <xTaskPriorityInherit+0xe0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	e008      	b.n	8006cc0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cb2:	4b06      	ldr	r3, [pc, #24]	@ (8006ccc <xTaskPriorityInherit+0xe0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d201      	bcs.n	8006cc0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
	}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000600 	.word	0x20000600
 8006cd0:	20000604 	.word	0x20000604
 8006cd4:	20000708 	.word	0x20000708

08006cd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d070      	beq.n	8006dd0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006cee:	4b3b      	ldr	r3, [pc, #236]	@ (8006ddc <xTaskPriorityDisinherit+0x104>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d00b      	beq.n	8006d10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	60fb      	str	r3, [r7, #12]
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	e7fd      	b.n	8006d0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10b      	bne.n	8006d30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	60bb      	str	r3, [r7, #8]
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	e7fd      	b.n	8006d2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d34:	1e5a      	subs	r2, r3, #1
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d044      	beq.n	8006dd0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d140      	bne.n	8006dd0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fb32 	bl	80053bc <uxListRemove>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d115      	bne.n	8006d8a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d62:	491f      	ldr	r1, [pc, #124]	@ (8006de0 <xTaskPriorityDisinherit+0x108>)
 8006d64:	4613      	mov	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <xTaskPriorityDisinherit+0xb2>
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d78:	2201      	movs	r2, #1
 8006d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7e:	43da      	mvns	r2, r3
 8006d80:	4b18      	ldr	r3, [pc, #96]	@ (8006de4 <xTaskPriorityDisinherit+0x10c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4013      	ands	r3, r2
 8006d86:	4a17      	ldr	r2, [pc, #92]	@ (8006de4 <xTaskPriorityDisinherit+0x10c>)
 8006d88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	f1c3 0207 	rsb	r2, r3, #7
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da2:	2201      	movs	r2, #1
 8006da4:	409a      	lsls	r2, r3
 8006da6:	4b0f      	ldr	r3, [pc, #60]	@ (8006de4 <xTaskPriorityDisinherit+0x10c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	4a0d      	ldr	r2, [pc, #52]	@ (8006de4 <xTaskPriorityDisinherit+0x10c>)
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4a08      	ldr	r2, [pc, #32]	@ (8006de0 <xTaskPriorityDisinherit+0x108>)
 8006dbe:	441a      	add	r2, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f7fe fa9d 	bl	8005306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dd0:	697b      	ldr	r3, [r7, #20]
	}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000600 	.word	0x20000600
 8006de0:	20000604 	.word	0x20000604
 8006de4:	20000708 	.word	0x20000708

08006de8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006df6:	2301      	movs	r3, #1
 8006df8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d079      	beq.n	8006ef4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10b      	bne.n	8006e20 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	60fb      	str	r3, [r7, #12]
}
 8006e1a:	bf00      	nop
 8006e1c:	bf00      	nop
 8006e1e:	e7fd      	b.n	8006e1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d902      	bls.n	8006e30 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	e002      	b.n	8006e36 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d059      	beq.n	8006ef4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d154      	bne.n	8006ef4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8006efc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d10b      	bne.n	8006e6c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	60bb      	str	r3, [r7, #8]
}
 8006e66:	bf00      	nop
 8006e68:	bf00      	nop
 8006e6a:	e7fd      	b.n	8006e68 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	db04      	blt.n	8006e8a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f1c3 0207 	rsb	r2, r3, #7
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	6959      	ldr	r1, [r3, #20]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4a19      	ldr	r2, [pc, #100]	@ (8006f00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006e9a:	4413      	add	r3, r2
 8006e9c:	4299      	cmp	r1, r3
 8006e9e:	d129      	bne.n	8006ef4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe fa89 	bl	80053bc <uxListRemove>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eba:	43da      	mvns	r2, r3
 8006ebc:	4b11      	ldr	r3, [pc, #68]	@ (8006f04 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	4a10      	ldr	r2, [pc, #64]	@ (8006f04 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006ec4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	2201      	movs	r2, #1
 8006ecc:	409a      	lsls	r2, r3
 8006ece:	4b0d      	ldr	r3, [pc, #52]	@ (8006f04 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8006f04 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4a06      	ldr	r2, [pc, #24]	@ (8006f00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006ee6:	441a      	add	r2, r3
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f7fe fa09 	bl	8005306 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ef4:	bf00      	nop
 8006ef6:	3720      	adds	r7, #32
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20000600 	.word	0x20000600
 8006f00:	20000604 	.word	0x20000604
 8006f04:	20000708 	.word	0x20000708

08006f08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f0c:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f14:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f1a:	3201      	adds	r2, #1
 8006f1c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006f1e:	4b03      	ldr	r3, [pc, #12]	@ (8006f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f20:	681b      	ldr	r3, [r3, #0]
	}
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20000600 	.word	0x20000600

08006f30 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006f3e:	f000 fb3d 	bl	80075bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006f42:	4b26      	ldr	r3, [pc, #152]	@ (8006fdc <xTaskNotifyWait+0xac>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d01a      	beq.n	8006f86 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006f50:	4b22      	ldr	r3, [pc, #136]	@ (8006fdc <xTaskNotifyWait+0xac>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	43d2      	mvns	r2, r2
 8006f5a:	400a      	ands	r2, r1
 8006f5c:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8006fdc <xTaskNotifyWait+0xac>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f6e:	2101      	movs	r1, #1
 8006f70:	6838      	ldr	r0, [r7, #0]
 8006f72:	f000 f9cd 	bl	8007310 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006f76:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe0 <xTaskNotifyWait+0xb0>)
 8006f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006f86:	f000 fb49 	bl	800761c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006f8a:	f000 fb17 	bl	80075bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006f94:	4b11      	ldr	r3, [pc, #68]	@ (8006fdc <xTaskNotifyWait+0xac>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006fdc <xTaskNotifyWait+0xac>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d002      	beq.n	8006fb2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006fac:	2300      	movs	r3, #0
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	e008      	b.n	8006fc4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fdc <xTaskNotifyWait+0xac>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	43d2      	mvns	r2, r2
 8006fbc:	400a      	ands	r2, r1
 8006fbe:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fc4:	4b05      	ldr	r3, [pc, #20]	@ (8006fdc <xTaskNotifyWait+0xac>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8006fce:	f000 fb25 	bl	800761c <vPortExitCritical>

		return xReturn;
 8006fd2:	697b      	ldr	r3, [r7, #20]
	}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20000600 	.word	0x20000600
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08a      	sub	sp, #40	@ 0x28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <xTaskGenericNotify+0x32>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	61bb      	str	r3, [r7, #24]
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	e7fd      	b.n	8007012 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800701a:	f000 facf 	bl	80075bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007032:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d827      	bhi.n	8007092 <xTaskGenericNotify+0xae>
 8007042:	a201      	add	r2, pc, #4	@ (adr r2, 8007048 <xTaskGenericNotify+0x64>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	080070b5 	.word	0x080070b5
 800704c:	0800705d 	.word	0x0800705d
 8007050:	0800706b 	.word	0x0800706b
 8007054:	08007077 	.word	0x08007077
 8007058:	0800707f 	.word	0x0800707f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	431a      	orrs	r2, r3
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007068:	e027      	b.n	80070ba <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007074:	e021      	b.n	80070ba <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800707c:	e01d      	b.n	80070ba <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800707e:	7ffb      	ldrb	r3, [r7, #31]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d003      	beq.n	800708c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800708a:	e016      	b.n	80070ba <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800708c:	2300      	movs	r3, #0
 800708e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007090:	e013      	b.n	80070ba <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709a:	d00d      	beq.n	80070b8 <xTaskGenericNotify+0xd4>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	617b      	str	r3, [r7, #20]
}
 80070ae:	bf00      	nop
 80070b0:	bf00      	nop
 80070b2:	e7fd      	b.n	80070b0 <xTaskGenericNotify+0xcc>
					break;
 80070b4:	bf00      	nop
 80070b6:	e000      	b.n	80070ba <xTaskGenericNotify+0xd6>

					break;
 80070b8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80070ba:	7ffb      	ldrb	r3, [r7, #31]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d13a      	bne.n	8007136 <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe f979 	bl	80053bc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ce:	2201      	movs	r2, #1
 80070d0:	409a      	lsls	r2, r3
 80070d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007144 <xTaskGenericNotify+0x160>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007144 <xTaskGenericNotify+0x160>)
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4a17      	ldr	r2, [pc, #92]	@ (8007148 <xTaskGenericNotify+0x164>)
 80070ea:	441a      	add	r2, r3
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4619      	mov	r1, r3
 80070f2:	4610      	mov	r0, r2
 80070f4:	f7fe f907 	bl	8005306 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00b      	beq.n	8007118 <xTaskGenericNotify+0x134>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	613b      	str	r3, [r7, #16]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <xTaskGenericNotify+0x168>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	429a      	cmp	r2, r3
 8007124:	d907      	bls.n	8007136 <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007126:	4b0a      	ldr	r3, [pc, #40]	@ (8007150 <xTaskGenericNotify+0x16c>)
 8007128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007136:	f000 fa71 	bl	800761c <vPortExitCritical>

		return xReturn;
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800713c:	4618      	mov	r0, r3
 800713e:	3728      	adds	r7, #40	@ 0x28
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000708 	.word	0x20000708
 8007148:	20000604 	.word	0x20000604
 800714c:	20000600 	.word	0x20000600
 8007150:	e000ed04 	.word	0xe000ed04

08007154 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	@ 0x38
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	4613      	mov	r3, r2
 8007162:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007164:	2301      	movs	r3, #1
 8007166:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10b      	bne.n	8007186 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007180:	bf00      	nop
 8007182:	bf00      	nop
 8007184:	e7fd      	b.n	8007182 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007186:	f000 fadb 	bl	8007740 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800718e:	f3ef 8211 	mrs	r2, BASEPRI
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	623a      	str	r2, [r7, #32]
 80071a4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80071a6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80071b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80071b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80071c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c4:	2202      	movs	r2, #2
 80071c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d829      	bhi.n	8007224 <xTaskGenericNotifyFromISR+0xd0>
 80071d0:	a201      	add	r2, pc, #4	@ (adr r2, 80071d8 <xTaskGenericNotifyFromISR+0x84>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	08007247 	.word	0x08007247
 80071dc:	080071ed 	.word	0x080071ed
 80071e0:	080071fb 	.word	0x080071fb
 80071e4:	08007207 	.word	0x08007207
 80071e8:	0800720f 	.word	0x0800720f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80071ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80071f8:	e028      	b.n	800724c <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007204:	e022      	b.n	800724c <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800720c:	e01e      	b.n	800724c <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800720e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007212:	2b02      	cmp	r3, #2
 8007214:	d003      	beq.n	800721e <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800721c:	e016      	b.n	800724c <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800721e:	2300      	movs	r3, #0
 8007220:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007222:	e013      	b.n	800724c <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d00d      	beq.n	800724a <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	61bb      	str	r3, [r7, #24]
}
 8007240:	bf00      	nop
 8007242:	bf00      	nop
 8007244:	e7fd      	b.n	8007242 <xTaskGenericNotifyFromISR+0xee>
					break;
 8007246:	bf00      	nop
 8007248:	e000      	b.n	800724c <xTaskGenericNotifyFromISR+0xf8>
					break;
 800724a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800724c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007250:	2b01      	cmp	r3, #1
 8007252:	d146      	bne.n	80072e2 <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	617b      	str	r3, [r7, #20]
}
 800726e:	bf00      	nop
 8007270:	bf00      	nop
 8007272:	e7fd      	b.n	8007270 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007274:	4b20      	ldr	r3, [pc, #128]	@ (80072f8 <xTaskGenericNotifyFromISR+0x1a4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d11c      	bne.n	80072b6 <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800727c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727e:	3304      	adds	r3, #4
 8007280:	4618      	mov	r0, r3
 8007282:	f7fe f89b 	bl	80053bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728a:	2201      	movs	r2, #1
 800728c:	409a      	lsls	r2, r3
 800728e:	4b1b      	ldr	r3, [pc, #108]	@ (80072fc <xTaskGenericNotifyFromISR+0x1a8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4313      	orrs	r3, r2
 8007294:	4a19      	ldr	r2, [pc, #100]	@ (80072fc <xTaskGenericNotifyFromISR+0x1a8>)
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4a16      	ldr	r2, [pc, #88]	@ (8007300 <xTaskGenericNotifyFromISR+0x1ac>)
 80072a6:	441a      	add	r2, r3
 80072a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072aa:	3304      	adds	r3, #4
 80072ac:	4619      	mov	r1, r3
 80072ae:	4610      	mov	r0, r2
 80072b0:	f7fe f829 	bl	8005306 <vListInsertEnd>
 80072b4:	e005      	b.n	80072c2 <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80072b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b8:	3318      	adds	r3, #24
 80072ba:	4619      	mov	r1, r3
 80072bc:	4811      	ldr	r0, [pc, #68]	@ (8007304 <xTaskGenericNotifyFromISR+0x1b0>)
 80072be:	f7fe f822 	bl	8005306 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c6:	4b10      	ldr	r3, [pc, #64]	@ (8007308 <xTaskGenericNotifyFromISR+0x1b4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d908      	bls.n	80072e2 <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80072d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80072d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80072dc:	4b0b      	ldr	r3, [pc, #44]	@ (800730c <xTaskGenericNotifyFromISR+0x1b8>)
 80072de:	2201      	movs	r2, #1
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f383 8811 	msr	BASEPRI, r3
}
 80072ec:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80072ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3738      	adds	r7, #56	@ 0x38
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20000728 	.word	0x20000728
 80072fc:	20000708 	.word	0x20000708
 8007300:	20000604 	.word	0x20000604
 8007304:	200006c0 	.word	0x200006c0
 8007308:	20000600 	.word	0x20000600
 800730c:	20000714 	.word	0x20000714

08007310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800731a:	4b29      	ldr	r3, [pc, #164]	@ (80073c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007320:	4b28      	ldr	r3, [pc, #160]	@ (80073c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3304      	adds	r3, #4
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe f848 	bl	80053bc <uxListRemove>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007332:	4b24      	ldr	r3, [pc, #144]	@ (80073c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007338:	2201      	movs	r2, #1
 800733a:	fa02 f303 	lsl.w	r3, r2, r3
 800733e:	43da      	mvns	r2, r3
 8007340:	4b21      	ldr	r3, [pc, #132]	@ (80073c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4013      	ands	r3, r2
 8007346:	4a20      	ldr	r2, [pc, #128]	@ (80073c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007348:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d10a      	bne.n	8007368 <prvAddCurrentTaskToDelayedList+0x58>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d007      	beq.n	8007368 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007358:	4b1a      	ldr	r3, [pc, #104]	@ (80073c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3304      	adds	r3, #4
 800735e:	4619      	mov	r1, r3
 8007360:	481a      	ldr	r0, [pc, #104]	@ (80073cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007362:	f7fd ffd0 	bl	8005306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007366:	e026      	b.n	80073b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007370:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	429a      	cmp	r2, r3
 800737e:	d209      	bcs.n	8007394 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007380:	4b13      	ldr	r3, [pc, #76]	@ (80073d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	4b0f      	ldr	r3, [pc, #60]	@ (80073c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3304      	adds	r3, #4
 800738a:	4619      	mov	r1, r3
 800738c:	4610      	mov	r0, r2
 800738e:	f7fd ffdd 	bl	800534c <vListInsert>
}
 8007392:	e010      	b.n	80073b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007394:	4b0f      	ldr	r3, [pc, #60]	@ (80073d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3304      	adds	r3, #4
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7fd ffd3 	bl	800534c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073a6:	4b0c      	ldr	r3, [pc, #48]	@ (80073d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d202      	bcs.n	80073b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80073b0:	4a09      	ldr	r2, [pc, #36]	@ (80073d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6013      	str	r3, [r2, #0]
}
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000704 	.word	0x20000704
 80073c4:	20000600 	.word	0x20000600
 80073c8:	20000708 	.word	0x20000708
 80073cc:	200006ec 	.word	0x200006ec
 80073d0:	200006bc 	.word	0x200006bc
 80073d4:	200006b8 	.word	0x200006b8
 80073d8:	20000720 	.word	0x20000720

080073dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3b04      	subs	r3, #4
 80073ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3b04      	subs	r3, #4
 80073fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f023 0201 	bic.w	r2, r3, #1
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3b04      	subs	r3, #4
 800740a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800740c:	4a08      	ldr	r2, [pc, #32]	@ (8007430 <pxPortInitialiseStack+0x54>)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3b14      	subs	r3, #20
 8007416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3b20      	subs	r3, #32
 8007422:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007424:	68fb      	ldr	r3, [r7, #12]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr
 8007430:	08007435 	.word	0x08007435

08007434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800743a:	2300      	movs	r3, #0
 800743c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800743e:	4b12      	ldr	r3, [pc, #72]	@ (8007488 <prvTaskExitError+0x54>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007446:	d00b      	beq.n	8007460 <prvTaskExitError+0x2c>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	60fb      	str	r3, [r7, #12]
}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	e7fd      	b.n	800745c <prvTaskExitError+0x28>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	60bb      	str	r3, [r7, #8]
}
 8007472:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007474:	bf00      	nop
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0fc      	beq.n	8007476 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr
 8007488:	2000000c 	.word	0x2000000c
 800748c:	00000000 	.word	0x00000000

08007490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007490:	4b07      	ldr	r3, [pc, #28]	@ (80074b0 <pxCurrentTCBConst2>)
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	6808      	ldr	r0, [r1, #0]
 8007496:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800749a:	f380 8809 	msr	PSP, r0
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8811 	msr	BASEPRI, r0
 80074aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80074ae:	4770      	bx	lr

080074b0 <pxCurrentTCBConst2>:
 80074b0:	20000600 	.word	0x20000600
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80074b8:	4806      	ldr	r0, [pc, #24]	@ (80074d4 <prvPortStartFirstTask+0x1c>)
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	6800      	ldr	r0, [r0, #0]
 80074be:	f380 8808 	msr	MSP, r0
 80074c2:	b662      	cpsie	i
 80074c4:	b661      	cpsie	f
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	df00      	svc	0
 80074d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074d2:	bf00      	nop
 80074d4:	e000ed08 	.word	0xe000ed08

080074d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074de:	4b32      	ldr	r3, [pc, #200]	@ (80075a8 <xPortStartScheduler+0xd0>)
 80074e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	22ff      	movs	r2, #255	@ 0xff
 80074ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007500:	b2da      	uxtb	r2, r3
 8007502:	4b2a      	ldr	r3, [pc, #168]	@ (80075ac <xPortStartScheduler+0xd4>)
 8007504:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007506:	4b2a      	ldr	r3, [pc, #168]	@ (80075b0 <xPortStartScheduler+0xd8>)
 8007508:	2207      	movs	r2, #7
 800750a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800750c:	e009      	b.n	8007522 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800750e:	4b28      	ldr	r3, [pc, #160]	@ (80075b0 <xPortStartScheduler+0xd8>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3b01      	subs	r3, #1
 8007514:	4a26      	ldr	r2, [pc, #152]	@ (80075b0 <xPortStartScheduler+0xd8>)
 8007516:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	b2db      	uxtb	r3, r3
 8007520:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800752a:	2b80      	cmp	r3, #128	@ 0x80
 800752c:	d0ef      	beq.n	800750e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800752e:	4b20      	ldr	r3, [pc, #128]	@ (80075b0 <xPortStartScheduler+0xd8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f1c3 0307 	rsb	r3, r3, #7
 8007536:	2b04      	cmp	r3, #4
 8007538:	d00b      	beq.n	8007552 <xPortStartScheduler+0x7a>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	60bb      	str	r3, [r7, #8]
}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	e7fd      	b.n	800754e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007552:	4b17      	ldr	r3, [pc, #92]	@ (80075b0 <xPortStartScheduler+0xd8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	4a15      	ldr	r2, [pc, #84]	@ (80075b0 <xPortStartScheduler+0xd8>)
 800755a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800755c:	4b14      	ldr	r3, [pc, #80]	@ (80075b0 <xPortStartScheduler+0xd8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007564:	4a12      	ldr	r2, [pc, #72]	@ (80075b0 <xPortStartScheduler+0xd8>)
 8007566:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	b2da      	uxtb	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007570:	4b10      	ldr	r3, [pc, #64]	@ (80075b4 <xPortStartScheduler+0xdc>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a0f      	ldr	r2, [pc, #60]	@ (80075b4 <xPortStartScheduler+0xdc>)
 8007576:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800757a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800757c:	4b0d      	ldr	r3, [pc, #52]	@ (80075b4 <xPortStartScheduler+0xdc>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a0c      	ldr	r2, [pc, #48]	@ (80075b4 <xPortStartScheduler+0xdc>)
 8007582:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007586:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007588:	f000 f8b8 	bl	80076fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800758c:	4b0a      	ldr	r3, [pc, #40]	@ (80075b8 <xPortStartScheduler+0xe0>)
 800758e:	2200      	movs	r2, #0
 8007590:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007592:	f7ff ff91 	bl	80074b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007596:	f7ff f8c9 	bl	800672c <vTaskSwitchContext>
	prvTaskExitError();
 800759a:	f7ff ff4b 	bl	8007434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	e000e400 	.word	0xe000e400
 80075ac:	2000072c 	.word	0x2000072c
 80075b0:	20000730 	.word	0x20000730
 80075b4:	e000ed20 	.word	0xe000ed20
 80075b8:	2000000c 	.word	0x2000000c

080075bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	607b      	str	r3, [r7, #4]
}
 80075d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007614 <vPortEnterCritical+0x58>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3301      	adds	r3, #1
 80075dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007614 <vPortEnterCritical+0x58>)
 80075de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007614 <vPortEnterCritical+0x58>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d110      	bne.n	800760a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007618 <vPortEnterCritical+0x5c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00b      	beq.n	800760a <vPortEnterCritical+0x4e>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	603b      	str	r3, [r7, #0]
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop
 8007608:	e7fd      	b.n	8007606 <vPortEnterCritical+0x4a>
	}
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr
 8007614:	2000000c 	.word	0x2000000c
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007622:	4b12      	ldr	r3, [pc, #72]	@ (800766c <vPortExitCritical+0x50>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10b      	bne.n	8007642 <vPortExitCritical+0x26>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	607b      	str	r3, [r7, #4]
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	e7fd      	b.n	800763e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007642:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <vPortExitCritical+0x50>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3b01      	subs	r3, #1
 8007648:	4a08      	ldr	r2, [pc, #32]	@ (800766c <vPortExitCritical+0x50>)
 800764a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800764c:	4b07      	ldr	r3, [pc, #28]	@ (800766c <vPortExitCritical+0x50>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d105      	bne.n	8007660 <vPortExitCritical+0x44>
 8007654:	2300      	movs	r3, #0
 8007656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f383 8811 	msr	BASEPRI, r3
}
 800765e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	2000000c 	.word	0x2000000c

08007670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007670:	f3ef 8009 	mrs	r0, PSP
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	4b0d      	ldr	r3, [pc, #52]	@ (80076b0 <pxCurrentTCBConst>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007680:	6010      	str	r0, [r2, #0]
 8007682:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007686:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800768a:	f380 8811 	msr	BASEPRI, r0
 800768e:	f7ff f84d 	bl	800672c <vTaskSwitchContext>
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	6808      	ldr	r0, [r1, #0]
 80076a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076a6:	f380 8809 	msr	PSP, r0
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	4770      	bx	lr

080076b0 <pxCurrentTCBConst>:
 80076b0:	20000600 	.word	0x20000600
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	607b      	str	r3, [r7, #4]
}
 80076d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076d2:	f7fe ff71 	bl	80065b8 <xTaskIncrementTick>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076dc:	4b06      	ldr	r3, [pc, #24]	@ (80076f8 <xPortSysTickHandler+0x40>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007700:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <vPortSetupTimerInterrupt+0x30>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007706:	4b0a      	ldr	r3, [pc, #40]	@ (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800770c:	4b09      	ldr	r3, [pc, #36]	@ (8007734 <vPortSetupTimerInterrupt+0x38>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a09      	ldr	r2, [pc, #36]	@ (8007738 <vPortSetupTimerInterrupt+0x3c>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	4a08      	ldr	r2, [pc, #32]	@ (800773c <vPortSetupTimerInterrupt+0x40>)
 800771a:	3b01      	subs	r3, #1
 800771c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800771e:	4b03      	ldr	r3, [pc, #12]	@ (800772c <vPortSetupTimerInterrupt+0x30>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr
 800772c:	e000e010 	.word	0xe000e010
 8007730:	e000e018 	.word	0xe000e018
 8007734:	20000000 	.word	0x20000000
 8007738:	10624dd3 	.word	0x10624dd3
 800773c:	e000e014 	.word	0xe000e014

08007740 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007746:	f3ef 8305 	mrs	r3, IPSR
 800774a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b0f      	cmp	r3, #15
 8007750:	d915      	bls.n	800777e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007752:	4a17      	ldr	r2, [pc, #92]	@ (80077b0 <vPortValidateInterruptPriority+0x70>)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4413      	add	r3, r2
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800775c:	4b15      	ldr	r3, [pc, #84]	@ (80077b4 <vPortValidateInterruptPriority+0x74>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	7afa      	ldrb	r2, [r7, #11]
 8007762:	429a      	cmp	r2, r3
 8007764:	d20b      	bcs.n	800777e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	607b      	str	r3, [r7, #4]
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800777e:	4b0e      	ldr	r3, [pc, #56]	@ (80077b8 <vPortValidateInterruptPriority+0x78>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007786:	4b0d      	ldr	r3, [pc, #52]	@ (80077bc <vPortValidateInterruptPriority+0x7c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d90b      	bls.n	80077a6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	603b      	str	r3, [r7, #0]
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	e7fd      	b.n	80077a2 <vPortValidateInterruptPriority+0x62>
	}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr
 80077b0:	e000e3f0 	.word	0xe000e3f0
 80077b4:	2000072c 	.word	0x2000072c
 80077b8:	e000ed0c 	.word	0xe000ed0c
 80077bc:	20000730 	.word	0x20000730

080077c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08a      	sub	sp, #40	@ 0x28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077cc:	f7fe fe28 	bl	8006420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077d0:	4b5c      	ldr	r3, [pc, #368]	@ (8007944 <pvPortMalloc+0x184>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077d8:	f000 f924 	bl	8007a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077dc:	4b5a      	ldr	r3, [pc, #360]	@ (8007948 <pvPortMalloc+0x188>)
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4013      	ands	r3, r2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f040 8095 	bne.w	8007914 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01e      	beq.n	800782e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80077f0:	2208      	movs	r2, #8
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d015      	beq.n	800782e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f023 0307 	bic.w	r3, r3, #7
 8007808:	3308      	adds	r3, #8
 800780a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00b      	beq.n	800782e <pvPortMalloc+0x6e>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	617b      	str	r3, [r7, #20]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d06f      	beq.n	8007914 <pvPortMalloc+0x154>
 8007834:	4b45      	ldr	r3, [pc, #276]	@ (800794c <pvPortMalloc+0x18c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	429a      	cmp	r2, r3
 800783c:	d86a      	bhi.n	8007914 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800783e:	4b44      	ldr	r3, [pc, #272]	@ (8007950 <pvPortMalloc+0x190>)
 8007840:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007842:	4b43      	ldr	r3, [pc, #268]	@ (8007950 <pvPortMalloc+0x190>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007848:	e004      	b.n	8007854 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	429a      	cmp	r2, r3
 800785c:	d903      	bls.n	8007866 <pvPortMalloc+0xa6>
 800785e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f1      	bne.n	800784a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007866:	4b37      	ldr	r3, [pc, #220]	@ (8007944 <pvPortMalloc+0x184>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800786c:	429a      	cmp	r2, r3
 800786e:	d051      	beq.n	8007914 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2208      	movs	r2, #8
 8007876:	4413      	add	r3, r2
 8007878:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	1ad2      	subs	r2, r2, r3
 800788a:	2308      	movs	r3, #8
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	429a      	cmp	r2, r3
 8007890:	d920      	bls.n	80078d4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4413      	add	r3, r2
 8007898:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f003 0307 	and.w	r3, r3, #7
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <pvPortMalloc+0xfc>
	__asm volatile
 80078a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	613b      	str	r3, [r7, #16]
}
 80078b6:	bf00      	nop
 80078b8:	bf00      	nop
 80078ba:	e7fd      	b.n	80078b8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	1ad2      	subs	r2, r2, r3
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078ce:	69b8      	ldr	r0, [r7, #24]
 80078d0:	f000 f90a 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078d4:	4b1d      	ldr	r3, [pc, #116]	@ (800794c <pvPortMalloc+0x18c>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	4a1b      	ldr	r2, [pc, #108]	@ (800794c <pvPortMalloc+0x18c>)
 80078e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078e2:	4b1a      	ldr	r3, [pc, #104]	@ (800794c <pvPortMalloc+0x18c>)
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007954 <pvPortMalloc+0x194>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d203      	bcs.n	80078f6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078ee:	4b17      	ldr	r3, [pc, #92]	@ (800794c <pvPortMalloc+0x18c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a18      	ldr	r2, [pc, #96]	@ (8007954 <pvPortMalloc+0x194>)
 80078f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	4b13      	ldr	r3, [pc, #76]	@ (8007948 <pvPortMalloc+0x188>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	431a      	orrs	r2, r3
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800790a:	4b13      	ldr	r3, [pc, #76]	@ (8007958 <pvPortMalloc+0x198>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3301      	adds	r3, #1
 8007910:	4a11      	ldr	r2, [pc, #68]	@ (8007958 <pvPortMalloc+0x198>)
 8007912:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007914:	f7fe fd92 	bl	800643c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00b      	beq.n	800793a <pvPortMalloc+0x17a>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60fb      	str	r3, [r7, #12]
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
 8007938:	e7fd      	b.n	8007936 <pvPortMalloc+0x176>
	return pvReturn;
 800793a:	69fb      	ldr	r3, [r7, #28]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3728      	adds	r7, #40	@ 0x28
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	2000133c 	.word	0x2000133c
 8007948:	20001350 	.word	0x20001350
 800794c:	20001340 	.word	0x20001340
 8007950:	20001334 	.word	0x20001334
 8007954:	20001344 	.word	0x20001344
 8007958:	20001348 	.word	0x20001348

0800795c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d04f      	beq.n	8007a0e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800796e:	2308      	movs	r3, #8
 8007970:	425b      	negs	r3, r3
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4413      	add	r3, r2
 8007976:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	4b25      	ldr	r3, [pc, #148]	@ (8007a18 <vPortFree+0xbc>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4013      	ands	r3, r2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <vPortFree+0x46>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	60fb      	str	r3, [r7, #12]
}
 800799c:	bf00      	nop
 800799e:	bf00      	nop
 80079a0:	e7fd      	b.n	800799e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00b      	beq.n	80079c2 <vPortFree+0x66>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	60bb      	str	r3, [r7, #8]
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	4b14      	ldr	r3, [pc, #80]	@ (8007a18 <vPortFree+0xbc>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4013      	ands	r3, r2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01e      	beq.n	8007a0e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d11a      	bne.n	8007a0e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007a18 <vPortFree+0xbc>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	43db      	mvns	r3, r3
 80079e2:	401a      	ands	r2, r3
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079e8:	f7fe fd1a 	bl	8006420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	4b0a      	ldr	r3, [pc, #40]	@ (8007a1c <vPortFree+0xc0>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	4a09      	ldr	r2, [pc, #36]	@ (8007a1c <vPortFree+0xc0>)
 80079f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079fa:	6938      	ldr	r0, [r7, #16]
 80079fc:	f000 f874 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a00:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <vPortFree+0xc4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	4a06      	ldr	r2, [pc, #24]	@ (8007a20 <vPortFree+0xc4>)
 8007a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a0a:	f7fe fd17 	bl	800643c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a0e:	bf00      	nop
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20001350 	.word	0x20001350
 8007a1c:	20001340 	.word	0x20001340
 8007a20:	2000134c 	.word	0x2000134c

08007a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a30:	4b27      	ldr	r3, [pc, #156]	@ (8007ad0 <prvHeapInit+0xac>)
 8007a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3307      	adds	r3, #7
 8007a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad0 <prvHeapInit+0xac>)
 8007a54:	4413      	add	r3, r2
 8007a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ad4 <prvHeapInit+0xb0>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a62:	4b1c      	ldr	r3, [pc, #112]	@ (8007ad4 <prvHeapInit+0xb0>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a70:	2208      	movs	r2, #8
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0307 	bic.w	r3, r3, #7
 8007a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4a15      	ldr	r2, [pc, #84]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a86:	4b14      	ldr	r3, [pc, #80]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a8e:	4b12      	ldr	r3, [pc, #72]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8007adc <prvHeapInit+0xb8>)
 8007ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a09      	ldr	r2, [pc, #36]	@ (8007ae0 <prvHeapInit+0xbc>)
 8007aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007abc:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <prvHeapInit+0xc0>)
 8007abe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc80      	pop	{r7}
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20000734 	.word	0x20000734
 8007ad4:	20001334 	.word	0x20001334
 8007ad8:	2000133c 	.word	0x2000133c
 8007adc:	20001344 	.word	0x20001344
 8007ae0:	20001340 	.word	0x20001340
 8007ae4:	20001350 	.word	0x20001350

08007ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007af0:	4b27      	ldr	r3, [pc, #156]	@ (8007b90 <prvInsertBlockIntoFreeList+0xa8>)
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e002      	b.n	8007afc <prvInsertBlockIntoFreeList+0x14>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d8f7      	bhi.n	8007af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4413      	add	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d108      	bne.n	8007b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	441a      	add	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d118      	bne.n	8007b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4b14      	ldr	r3, [pc, #80]	@ (8007b94 <prvInsertBlockIntoFreeList+0xac>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d00d      	beq.n	8007b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e008      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b66:	4b0b      	ldr	r3, [pc, #44]	@ (8007b94 <prvInsertBlockIntoFreeList+0xac>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e003      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d002      	beq.n	8007b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr
 8007b90:	20001334 	.word	0x20001334
 8007b94:	2000133c 	.word	0x2000133c

08007b98 <atof>:
 8007b98:	2100      	movs	r1, #0
 8007b9a:	f000 bdf9 	b.w	8008790 <strtod>

08007b9e <sulp>:
 8007b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba2:	460f      	mov	r7, r1
 8007ba4:	4690      	mov	r8, r2
 8007ba6:	f003 faf5 	bl	800b194 <__ulp>
 8007baa:	4604      	mov	r4, r0
 8007bac:	460d      	mov	r5, r1
 8007bae:	f1b8 0f00 	cmp.w	r8, #0
 8007bb2:	d011      	beq.n	8007bd8 <sulp+0x3a>
 8007bb4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007bb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dd0b      	ble.n	8007bd8 <sulp+0x3a>
 8007bc0:	2400      	movs	r4, #0
 8007bc2:	051b      	lsls	r3, r3, #20
 8007bc4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007bc8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007bcc:	4622      	mov	r2, r4
 8007bce:	462b      	mov	r3, r5
 8007bd0:	f7f8 fc82 	bl	80004d8 <__aeabi_dmul>
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	4620      	mov	r0, r4
 8007bda:	4629      	mov	r1, r5
 8007bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007be0 <_strtod_l>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	b09f      	sub	sp, #124	@ 0x7c
 8007be6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007be8:	2200      	movs	r2, #0
 8007bea:	460c      	mov	r4, r1
 8007bec:	921a      	str	r2, [sp, #104]	@ 0x68
 8007bee:	f04f 0a00 	mov.w	sl, #0
 8007bf2:	f04f 0b00 	mov.w	fp, #0
 8007bf6:	460a      	mov	r2, r1
 8007bf8:	9005      	str	r0, [sp, #20]
 8007bfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bfc:	7811      	ldrb	r1, [r2, #0]
 8007bfe:	292b      	cmp	r1, #43	@ 0x2b
 8007c00:	d048      	beq.n	8007c94 <_strtod_l+0xb4>
 8007c02:	d836      	bhi.n	8007c72 <_strtod_l+0x92>
 8007c04:	290d      	cmp	r1, #13
 8007c06:	d830      	bhi.n	8007c6a <_strtod_l+0x8a>
 8007c08:	2908      	cmp	r1, #8
 8007c0a:	d830      	bhi.n	8007c6e <_strtod_l+0x8e>
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d039      	beq.n	8007c84 <_strtod_l+0xa4>
 8007c10:	2200      	movs	r2, #0
 8007c12:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007c16:	782a      	ldrb	r2, [r5, #0]
 8007c18:	2a30      	cmp	r2, #48	@ 0x30
 8007c1a:	f040 80b0 	bne.w	8007d7e <_strtod_l+0x19e>
 8007c1e:	786a      	ldrb	r2, [r5, #1]
 8007c20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c24:	2a58      	cmp	r2, #88	@ 0x58
 8007c26:	d16c      	bne.n	8007d02 <_strtod_l+0x122>
 8007c28:	9302      	str	r3, [sp, #8]
 8007c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c2c:	4a8f      	ldr	r2, [pc, #572]	@ (8007e6c <_strtod_l+0x28c>)
 8007c2e:	9301      	str	r3, [sp, #4]
 8007c30:	ab1a      	add	r3, sp, #104	@ 0x68
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	9805      	ldr	r0, [sp, #20]
 8007c36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007c38:	a919      	add	r1, sp, #100	@ 0x64
 8007c3a:	f002 fba5 	bl	800a388 <__gethex>
 8007c3e:	f010 060f 	ands.w	r6, r0, #15
 8007c42:	4604      	mov	r4, r0
 8007c44:	d005      	beq.n	8007c52 <_strtod_l+0x72>
 8007c46:	2e06      	cmp	r6, #6
 8007c48:	d126      	bne.n	8007c98 <_strtod_l+0xb8>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	3501      	adds	r5, #1
 8007c4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007c50:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f040 8582 	bne.w	800875e <_strtod_l+0xb7e>
 8007c5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c5c:	b1bb      	cbz	r3, 8007c8e <_strtod_l+0xae>
 8007c5e:	4650      	mov	r0, sl
 8007c60:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007c64:	b01f      	add	sp, #124	@ 0x7c
 8007c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6a:	2920      	cmp	r1, #32
 8007c6c:	d1d0      	bne.n	8007c10 <_strtod_l+0x30>
 8007c6e:	3201      	adds	r2, #1
 8007c70:	e7c3      	b.n	8007bfa <_strtod_l+0x1a>
 8007c72:	292d      	cmp	r1, #45	@ 0x2d
 8007c74:	d1cc      	bne.n	8007c10 <_strtod_l+0x30>
 8007c76:	2101      	movs	r1, #1
 8007c78:	910e      	str	r1, [sp, #56]	@ 0x38
 8007c7a:	1c51      	adds	r1, r2, #1
 8007c7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c7e:	7852      	ldrb	r2, [r2, #1]
 8007c80:	2a00      	cmp	r2, #0
 8007c82:	d1c7      	bne.n	8007c14 <_strtod_l+0x34>
 8007c84:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c86:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f040 8566 	bne.w	800875a <_strtod_l+0xb7a>
 8007c8e:	4650      	mov	r0, sl
 8007c90:	4659      	mov	r1, fp
 8007c92:	e7e7      	b.n	8007c64 <_strtod_l+0x84>
 8007c94:	2100      	movs	r1, #0
 8007c96:	e7ef      	b.n	8007c78 <_strtod_l+0x98>
 8007c98:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c9a:	b13a      	cbz	r2, 8007cac <_strtod_l+0xcc>
 8007c9c:	2135      	movs	r1, #53	@ 0x35
 8007c9e:	a81c      	add	r0, sp, #112	@ 0x70
 8007ca0:	f003 fb68 	bl	800b374 <__copybits>
 8007ca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ca6:	9805      	ldr	r0, [sp, #20]
 8007ca8:	f002 ff48 	bl	800ab3c <_Bfree>
 8007cac:	3e01      	subs	r6, #1
 8007cae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007cb0:	2e04      	cmp	r6, #4
 8007cb2:	d806      	bhi.n	8007cc2 <_strtod_l+0xe2>
 8007cb4:	e8df f006 	tbb	[pc, r6]
 8007cb8:	201d0314 	.word	0x201d0314
 8007cbc:	14          	.byte	0x14
 8007cbd:	00          	.byte	0x00
 8007cbe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007cc2:	05e1      	lsls	r1, r4, #23
 8007cc4:	bf48      	it	mi
 8007cc6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007cca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cce:	0d1b      	lsrs	r3, r3, #20
 8007cd0:	051b      	lsls	r3, r3, #20
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1bd      	bne.n	8007c52 <_strtod_l+0x72>
 8007cd6:	f001 fbfb 	bl	80094d0 <__errno>
 8007cda:	2322      	movs	r3, #34	@ 0x22
 8007cdc:	6003      	str	r3, [r0, #0]
 8007cde:	e7b8      	b.n	8007c52 <_strtod_l+0x72>
 8007ce0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007ce4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007ce8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007cec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007cf0:	e7e7      	b.n	8007cc2 <_strtod_l+0xe2>
 8007cf2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007e70 <_strtod_l+0x290>
 8007cf6:	e7e4      	b.n	8007cc2 <_strtod_l+0xe2>
 8007cf8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007cfc:	f04f 3aff 	mov.w	sl, #4294967295
 8007d00:	e7df      	b.n	8007cc2 <_strtod_l+0xe2>
 8007d02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d08:	785b      	ldrb	r3, [r3, #1]
 8007d0a:	2b30      	cmp	r3, #48	@ 0x30
 8007d0c:	d0f9      	beq.n	8007d02 <_strtod_l+0x122>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d09f      	beq.n	8007c52 <_strtod_l+0x72>
 8007d12:	2301      	movs	r3, #1
 8007d14:	2700      	movs	r7, #0
 8007d16:	220a      	movs	r2, #10
 8007d18:	46b9      	mov	r9, r7
 8007d1a:	9308      	str	r3, [sp, #32]
 8007d1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d1e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007d20:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d22:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007d24:	7805      	ldrb	r5, [r0, #0]
 8007d26:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007d2a:	b2d9      	uxtb	r1, r3
 8007d2c:	2909      	cmp	r1, #9
 8007d2e:	d928      	bls.n	8007d82 <_strtod_l+0x1a2>
 8007d30:	2201      	movs	r2, #1
 8007d32:	4950      	ldr	r1, [pc, #320]	@ (8007e74 <_strtod_l+0x294>)
 8007d34:	f001 fb5a 	bl	80093ec <strncmp>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d032      	beq.n	8007da2 <_strtod_l+0x1c2>
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	462a      	mov	r2, r5
 8007d40:	4603      	mov	r3, r0
 8007d42:	464d      	mov	r5, r9
 8007d44:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d46:	2a65      	cmp	r2, #101	@ 0x65
 8007d48:	d001      	beq.n	8007d4e <_strtod_l+0x16e>
 8007d4a:	2a45      	cmp	r2, #69	@ 0x45
 8007d4c:	d114      	bne.n	8007d78 <_strtod_l+0x198>
 8007d4e:	b91d      	cbnz	r5, 8007d58 <_strtod_l+0x178>
 8007d50:	9a08      	ldr	r2, [sp, #32]
 8007d52:	4302      	orrs	r2, r0
 8007d54:	d096      	beq.n	8007c84 <_strtod_l+0xa4>
 8007d56:	2500      	movs	r5, #0
 8007d58:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007d5a:	1c62      	adds	r2, r4, #1
 8007d5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d5e:	7862      	ldrb	r2, [r4, #1]
 8007d60:	2a2b      	cmp	r2, #43	@ 0x2b
 8007d62:	d07a      	beq.n	8007e5a <_strtod_l+0x27a>
 8007d64:	2a2d      	cmp	r2, #45	@ 0x2d
 8007d66:	d07e      	beq.n	8007e66 <_strtod_l+0x286>
 8007d68:	f04f 0c00 	mov.w	ip, #0
 8007d6c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007d70:	2909      	cmp	r1, #9
 8007d72:	f240 8085 	bls.w	8007e80 <_strtod_l+0x2a0>
 8007d76:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d78:	f04f 0800 	mov.w	r8, #0
 8007d7c:	e0a5      	b.n	8007eca <_strtod_l+0x2ea>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e7c8      	b.n	8007d14 <_strtod_l+0x134>
 8007d82:	f1b9 0f08 	cmp.w	r9, #8
 8007d86:	bfd8      	it	le
 8007d88:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007d8a:	f100 0001 	add.w	r0, r0, #1
 8007d8e:	bfd6      	itet	le
 8007d90:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d94:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007d98:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007d9a:	f109 0901 	add.w	r9, r9, #1
 8007d9e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007da0:	e7bf      	b.n	8007d22 <_strtod_l+0x142>
 8007da2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007da8:	785a      	ldrb	r2, [r3, #1]
 8007daa:	f1b9 0f00 	cmp.w	r9, #0
 8007dae:	d03b      	beq.n	8007e28 <_strtod_l+0x248>
 8007db0:	464d      	mov	r5, r9
 8007db2:	900a      	str	r0, [sp, #40]	@ 0x28
 8007db4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007db8:	2b09      	cmp	r3, #9
 8007dba:	d912      	bls.n	8007de2 <_strtod_l+0x202>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e7c2      	b.n	8007d46 <_strtod_l+0x166>
 8007dc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dc8:	785a      	ldrb	r2, [r3, #1]
 8007dca:	2a30      	cmp	r2, #48	@ 0x30
 8007dcc:	d0f8      	beq.n	8007dc0 <_strtod_l+0x1e0>
 8007dce:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	f200 84c8 	bhi.w	8008768 <_strtod_l+0xb88>
 8007dd8:	900a      	str	r0, [sp, #40]	@ 0x28
 8007dda:	2000      	movs	r0, #0
 8007ddc:	4605      	mov	r5, r0
 8007dde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007de0:	930c      	str	r3, [sp, #48]	@ 0x30
 8007de2:	3a30      	subs	r2, #48	@ 0x30
 8007de4:	f100 0301 	add.w	r3, r0, #1
 8007de8:	d018      	beq.n	8007e1c <_strtod_l+0x23c>
 8007dea:	462e      	mov	r6, r5
 8007dec:	f04f 0e0a 	mov.w	lr, #10
 8007df0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007df2:	4419      	add	r1, r3
 8007df4:	910a      	str	r1, [sp, #40]	@ 0x28
 8007df6:	1c71      	adds	r1, r6, #1
 8007df8:	eba1 0c05 	sub.w	ip, r1, r5
 8007dfc:	4563      	cmp	r3, ip
 8007dfe:	dc15      	bgt.n	8007e2c <_strtod_l+0x24c>
 8007e00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007e04:	182b      	adds	r3, r5, r0
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	f105 0501 	add.w	r5, r5, #1
 8007e0c:	4405      	add	r5, r0
 8007e0e:	dc1a      	bgt.n	8007e46 <_strtod_l+0x266>
 8007e10:	230a      	movs	r3, #10
 8007e12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e14:	fb03 2301 	mla	r3, r3, r1, r2
 8007e18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e1e:	4618      	mov	r0, r3
 8007e20:	1c51      	adds	r1, r2, #1
 8007e22:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e24:	7852      	ldrb	r2, [r2, #1]
 8007e26:	e7c5      	b.n	8007db4 <_strtod_l+0x1d4>
 8007e28:	4648      	mov	r0, r9
 8007e2a:	e7ce      	b.n	8007dca <_strtod_l+0x1ea>
 8007e2c:	2e08      	cmp	r6, #8
 8007e2e:	dc05      	bgt.n	8007e3c <_strtod_l+0x25c>
 8007e30:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007e32:	fb0e f606 	mul.w	r6, lr, r6
 8007e36:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007e38:	460e      	mov	r6, r1
 8007e3a:	e7dc      	b.n	8007df6 <_strtod_l+0x216>
 8007e3c:	2910      	cmp	r1, #16
 8007e3e:	bfd8      	it	le
 8007e40:	fb0e f707 	mulle.w	r7, lr, r7
 8007e44:	e7f8      	b.n	8007e38 <_strtod_l+0x258>
 8007e46:	2b0f      	cmp	r3, #15
 8007e48:	bfdc      	itt	le
 8007e4a:	230a      	movle	r3, #10
 8007e4c:	fb03 2707 	mlale	r7, r3, r7, r2
 8007e50:	e7e3      	b.n	8007e1a <_strtod_l+0x23a>
 8007e52:	2300      	movs	r3, #0
 8007e54:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e56:	2301      	movs	r3, #1
 8007e58:	e77a      	b.n	8007d50 <_strtod_l+0x170>
 8007e5a:	f04f 0c00 	mov.w	ip, #0
 8007e5e:	1ca2      	adds	r2, r4, #2
 8007e60:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e62:	78a2      	ldrb	r2, [r4, #2]
 8007e64:	e782      	b.n	8007d6c <_strtod_l+0x18c>
 8007e66:	f04f 0c01 	mov.w	ip, #1
 8007e6a:	e7f8      	b.n	8007e5e <_strtod_l+0x27e>
 8007e6c:	0800c2bc 	.word	0x0800c2bc
 8007e70:	7ff00000 	.word	0x7ff00000
 8007e74:	0800c0d6 	.word	0x0800c0d6
 8007e78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e7a:	1c51      	adds	r1, r2, #1
 8007e7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e7e:	7852      	ldrb	r2, [r2, #1]
 8007e80:	2a30      	cmp	r2, #48	@ 0x30
 8007e82:	d0f9      	beq.n	8007e78 <_strtod_l+0x298>
 8007e84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007e88:	2908      	cmp	r1, #8
 8007e8a:	f63f af75 	bhi.w	8007d78 <_strtod_l+0x198>
 8007e8e:	f04f 080a 	mov.w	r8, #10
 8007e92:	3a30      	subs	r2, #48	@ 0x30
 8007e94:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e98:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e9c:	1c56      	adds	r6, r2, #1
 8007e9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007ea0:	7852      	ldrb	r2, [r2, #1]
 8007ea2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007ea6:	f1be 0f09 	cmp.w	lr, #9
 8007eaa:	d939      	bls.n	8007f20 <_strtod_l+0x340>
 8007eac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007eae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007eb2:	1a76      	subs	r6, r6, r1
 8007eb4:	2e08      	cmp	r6, #8
 8007eb6:	dc03      	bgt.n	8007ec0 <_strtod_l+0x2e0>
 8007eb8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007eba:	4588      	cmp	r8, r1
 8007ebc:	bfa8      	it	ge
 8007ebe:	4688      	movge	r8, r1
 8007ec0:	f1bc 0f00 	cmp.w	ip, #0
 8007ec4:	d001      	beq.n	8007eca <_strtod_l+0x2ea>
 8007ec6:	f1c8 0800 	rsb	r8, r8, #0
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	d14e      	bne.n	8007f6c <_strtod_l+0x38c>
 8007ece:	9908      	ldr	r1, [sp, #32]
 8007ed0:	4308      	orrs	r0, r1
 8007ed2:	f47f aebe 	bne.w	8007c52 <_strtod_l+0x72>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f47f aed4 	bne.w	8007c84 <_strtod_l+0xa4>
 8007edc:	2a69      	cmp	r2, #105	@ 0x69
 8007ede:	d028      	beq.n	8007f32 <_strtod_l+0x352>
 8007ee0:	dc25      	bgt.n	8007f2e <_strtod_l+0x34e>
 8007ee2:	2a49      	cmp	r2, #73	@ 0x49
 8007ee4:	d025      	beq.n	8007f32 <_strtod_l+0x352>
 8007ee6:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ee8:	f47f aecc 	bne.w	8007c84 <_strtod_l+0xa4>
 8007eec:	4999      	ldr	r1, [pc, #612]	@ (8008154 <_strtod_l+0x574>)
 8007eee:	a819      	add	r0, sp, #100	@ 0x64
 8007ef0:	f002 fc6c 	bl	800a7cc <__match>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f43f aec5 	beq.w	8007c84 <_strtod_l+0xa4>
 8007efa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b28      	cmp	r3, #40	@ 0x28
 8007f00:	d12e      	bne.n	8007f60 <_strtod_l+0x380>
 8007f02:	4995      	ldr	r1, [pc, #596]	@ (8008158 <_strtod_l+0x578>)
 8007f04:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f06:	a819      	add	r0, sp, #100	@ 0x64
 8007f08:	f002 fc74 	bl	800a7f4 <__hexnan>
 8007f0c:	2805      	cmp	r0, #5
 8007f0e:	d127      	bne.n	8007f60 <_strtod_l+0x380>
 8007f10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007f16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007f1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007f1e:	e698      	b.n	8007c52 <_strtod_l+0x72>
 8007f20:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f22:	fb08 2101 	mla	r1, r8, r1, r2
 8007f26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007f2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f2c:	e7b5      	b.n	8007e9a <_strtod_l+0x2ba>
 8007f2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007f30:	e7da      	b.n	8007ee8 <_strtod_l+0x308>
 8007f32:	498a      	ldr	r1, [pc, #552]	@ (800815c <_strtod_l+0x57c>)
 8007f34:	a819      	add	r0, sp, #100	@ 0x64
 8007f36:	f002 fc49 	bl	800a7cc <__match>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	f43f aea2 	beq.w	8007c84 <_strtod_l+0xa4>
 8007f40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f42:	4987      	ldr	r1, [pc, #540]	@ (8008160 <_strtod_l+0x580>)
 8007f44:	3b01      	subs	r3, #1
 8007f46:	a819      	add	r0, sp, #100	@ 0x64
 8007f48:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f4a:	f002 fc3f 	bl	800a7cc <__match>
 8007f4e:	b910      	cbnz	r0, 8007f56 <_strtod_l+0x376>
 8007f50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f52:	3301      	adds	r3, #1
 8007f54:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f56:	f04f 0a00 	mov.w	sl, #0
 8007f5a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8008164 <_strtod_l+0x584>
 8007f5e:	e678      	b.n	8007c52 <_strtod_l+0x72>
 8007f60:	4881      	ldr	r0, [pc, #516]	@ (8008168 <_strtod_l+0x588>)
 8007f62:	f001 faff 	bl	8009564 <nan>
 8007f66:	4682      	mov	sl, r0
 8007f68:	468b      	mov	fp, r1
 8007f6a:	e672      	b.n	8007c52 <_strtod_l+0x72>
 8007f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f6e:	f1b9 0f00 	cmp.w	r9, #0
 8007f72:	bf08      	it	eq
 8007f74:	46a9      	moveq	r9, r5
 8007f76:	eba8 0303 	sub.w	r3, r8, r3
 8007f7a:	2d10      	cmp	r5, #16
 8007f7c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007f7e:	462c      	mov	r4, r5
 8007f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f82:	bfa8      	it	ge
 8007f84:	2410      	movge	r4, #16
 8007f86:	f7f8 fa2d 	bl	80003e4 <__aeabi_ui2d>
 8007f8a:	2d09      	cmp	r5, #9
 8007f8c:	4682      	mov	sl, r0
 8007f8e:	468b      	mov	fp, r1
 8007f90:	dc11      	bgt.n	8007fb6 <_strtod_l+0x3d6>
 8007f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f43f ae5c 	beq.w	8007c52 <_strtod_l+0x72>
 8007f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9c:	dd76      	ble.n	800808c <_strtod_l+0x4ac>
 8007f9e:	2b16      	cmp	r3, #22
 8007fa0:	dc5d      	bgt.n	800805e <_strtod_l+0x47e>
 8007fa2:	4972      	ldr	r1, [pc, #456]	@ (800816c <_strtod_l+0x58c>)
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007faa:	465b      	mov	r3, fp
 8007fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb0:	f7f8 fa92 	bl	80004d8 <__aeabi_dmul>
 8007fb4:	e7d7      	b.n	8007f66 <_strtod_l+0x386>
 8007fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800816c <_strtod_l+0x58c>)
 8007fb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007fc0:	f7f8 fa8a 	bl	80004d8 <__aeabi_dmul>
 8007fc4:	4682      	mov	sl, r0
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	468b      	mov	fp, r1
 8007fca:	f7f8 fa0b 	bl	80003e4 <__aeabi_ui2d>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4650      	mov	r0, sl
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	f7f8 f8c9 	bl	800016c <__adddf3>
 8007fda:	2d0f      	cmp	r5, #15
 8007fdc:	4682      	mov	sl, r0
 8007fde:	468b      	mov	fp, r1
 8007fe0:	ddd7      	ble.n	8007f92 <_strtod_l+0x3b2>
 8007fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe4:	1b2c      	subs	r4, r5, r4
 8007fe6:	441c      	add	r4, r3
 8007fe8:	2c00      	cmp	r4, #0
 8007fea:	f340 8093 	ble.w	8008114 <_strtod_l+0x534>
 8007fee:	f014 030f 	ands.w	r3, r4, #15
 8007ff2:	d00a      	beq.n	800800a <_strtod_l+0x42a>
 8007ff4:	495d      	ldr	r1, [pc, #372]	@ (800816c <_strtod_l+0x58c>)
 8007ff6:	4652      	mov	r2, sl
 8007ff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008000:	465b      	mov	r3, fp
 8008002:	f7f8 fa69 	bl	80004d8 <__aeabi_dmul>
 8008006:	4682      	mov	sl, r0
 8008008:	468b      	mov	fp, r1
 800800a:	f034 040f 	bics.w	r4, r4, #15
 800800e:	d073      	beq.n	80080f8 <_strtod_l+0x518>
 8008010:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008014:	dd49      	ble.n	80080aa <_strtod_l+0x4ca>
 8008016:	2400      	movs	r4, #0
 8008018:	46a0      	mov	r8, r4
 800801a:	46a1      	mov	r9, r4
 800801c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800801e:	2322      	movs	r3, #34	@ 0x22
 8008020:	f04f 0a00 	mov.w	sl, #0
 8008024:	9a05      	ldr	r2, [sp, #20]
 8008026:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8008164 <_strtod_l+0x584>
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	f43f ae0f 	beq.w	8007c52 <_strtod_l+0x72>
 8008034:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008036:	9805      	ldr	r0, [sp, #20]
 8008038:	f002 fd80 	bl	800ab3c <_Bfree>
 800803c:	4649      	mov	r1, r9
 800803e:	9805      	ldr	r0, [sp, #20]
 8008040:	f002 fd7c 	bl	800ab3c <_Bfree>
 8008044:	4641      	mov	r1, r8
 8008046:	9805      	ldr	r0, [sp, #20]
 8008048:	f002 fd78 	bl	800ab3c <_Bfree>
 800804c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800804e:	9805      	ldr	r0, [sp, #20]
 8008050:	f002 fd74 	bl	800ab3c <_Bfree>
 8008054:	4621      	mov	r1, r4
 8008056:	9805      	ldr	r0, [sp, #20]
 8008058:	f002 fd70 	bl	800ab3c <_Bfree>
 800805c:	e5f9      	b.n	8007c52 <_strtod_l+0x72>
 800805e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008060:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008064:	4293      	cmp	r3, r2
 8008066:	dbbc      	blt.n	8007fe2 <_strtod_l+0x402>
 8008068:	4c40      	ldr	r4, [pc, #256]	@ (800816c <_strtod_l+0x58c>)
 800806a:	f1c5 050f 	rsb	r5, r5, #15
 800806e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008072:	4652      	mov	r2, sl
 8008074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008078:	465b      	mov	r3, fp
 800807a:	f7f8 fa2d 	bl	80004d8 <__aeabi_dmul>
 800807e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008080:	1b5d      	subs	r5, r3, r5
 8008082:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008086:	e9d4 2300 	ldrd	r2, r3, [r4]
 800808a:	e791      	b.n	8007fb0 <_strtod_l+0x3d0>
 800808c:	3316      	adds	r3, #22
 800808e:	dba8      	blt.n	8007fe2 <_strtod_l+0x402>
 8008090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008092:	4650      	mov	r0, sl
 8008094:	eba3 0808 	sub.w	r8, r3, r8
 8008098:	4b34      	ldr	r3, [pc, #208]	@ (800816c <_strtod_l+0x58c>)
 800809a:	4659      	mov	r1, fp
 800809c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80080a0:	e9d8 2300 	ldrd	r2, r3, [r8]
 80080a4:	f7f8 fb42 	bl	800072c <__aeabi_ddiv>
 80080a8:	e75d      	b.n	8007f66 <_strtod_l+0x386>
 80080aa:	2300      	movs	r3, #0
 80080ac:	4650      	mov	r0, sl
 80080ae:	4659      	mov	r1, fp
 80080b0:	461e      	mov	r6, r3
 80080b2:	4f2f      	ldr	r7, [pc, #188]	@ (8008170 <_strtod_l+0x590>)
 80080b4:	1124      	asrs	r4, r4, #4
 80080b6:	2c01      	cmp	r4, #1
 80080b8:	dc21      	bgt.n	80080fe <_strtod_l+0x51e>
 80080ba:	b10b      	cbz	r3, 80080c0 <_strtod_l+0x4e0>
 80080bc:	4682      	mov	sl, r0
 80080be:	468b      	mov	fp, r1
 80080c0:	492b      	ldr	r1, [pc, #172]	@ (8008170 <_strtod_l+0x590>)
 80080c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80080c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80080ca:	4652      	mov	r2, sl
 80080cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d0:	465b      	mov	r3, fp
 80080d2:	f7f8 fa01 	bl	80004d8 <__aeabi_dmul>
 80080d6:	4b23      	ldr	r3, [pc, #140]	@ (8008164 <_strtod_l+0x584>)
 80080d8:	460a      	mov	r2, r1
 80080da:	400b      	ands	r3, r1
 80080dc:	4925      	ldr	r1, [pc, #148]	@ (8008174 <_strtod_l+0x594>)
 80080de:	4682      	mov	sl, r0
 80080e0:	428b      	cmp	r3, r1
 80080e2:	d898      	bhi.n	8008016 <_strtod_l+0x436>
 80080e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80080e8:	428b      	cmp	r3, r1
 80080ea:	bf86      	itte	hi
 80080ec:	f04f 3aff 	movhi.w	sl, #4294967295
 80080f0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8008178 <_strtod_l+0x598>
 80080f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80080f8:	2300      	movs	r3, #0
 80080fa:	9308      	str	r3, [sp, #32]
 80080fc:	e076      	b.n	80081ec <_strtod_l+0x60c>
 80080fe:	07e2      	lsls	r2, r4, #31
 8008100:	d504      	bpl.n	800810c <_strtod_l+0x52c>
 8008102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008106:	f7f8 f9e7 	bl	80004d8 <__aeabi_dmul>
 800810a:	2301      	movs	r3, #1
 800810c:	3601      	adds	r6, #1
 800810e:	1064      	asrs	r4, r4, #1
 8008110:	3708      	adds	r7, #8
 8008112:	e7d0      	b.n	80080b6 <_strtod_l+0x4d6>
 8008114:	d0f0      	beq.n	80080f8 <_strtod_l+0x518>
 8008116:	4264      	negs	r4, r4
 8008118:	f014 020f 	ands.w	r2, r4, #15
 800811c:	d00a      	beq.n	8008134 <_strtod_l+0x554>
 800811e:	4b13      	ldr	r3, [pc, #76]	@ (800816c <_strtod_l+0x58c>)
 8008120:	4650      	mov	r0, sl
 8008122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008126:	4659      	mov	r1, fp
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f8 fafe 	bl	800072c <__aeabi_ddiv>
 8008130:	4682      	mov	sl, r0
 8008132:	468b      	mov	fp, r1
 8008134:	1124      	asrs	r4, r4, #4
 8008136:	d0df      	beq.n	80080f8 <_strtod_l+0x518>
 8008138:	2c1f      	cmp	r4, #31
 800813a:	dd1f      	ble.n	800817c <_strtod_l+0x59c>
 800813c:	2400      	movs	r4, #0
 800813e:	46a0      	mov	r8, r4
 8008140:	46a1      	mov	r9, r4
 8008142:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008144:	2322      	movs	r3, #34	@ 0x22
 8008146:	9a05      	ldr	r2, [sp, #20]
 8008148:	f04f 0a00 	mov.w	sl, #0
 800814c:	f04f 0b00 	mov.w	fp, #0
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	e76b      	b.n	800802c <_strtod_l+0x44c>
 8008154:	0800c0e5 	.word	0x0800c0e5
 8008158:	0800c2a8 	.word	0x0800c2a8
 800815c:	0800c0dd 	.word	0x0800c0dd
 8008160:	0800c117 	.word	0x0800c117
 8008164:	7ff00000 	.word	0x7ff00000
 8008168:	0800c2a6 	.word	0x0800c2a6
 800816c:	0800c430 	.word	0x0800c430
 8008170:	0800c408 	.word	0x0800c408
 8008174:	7ca00000 	.word	0x7ca00000
 8008178:	7fefffff 	.word	0x7fefffff
 800817c:	f014 0310 	ands.w	r3, r4, #16
 8008180:	bf18      	it	ne
 8008182:	236a      	movne	r3, #106	@ 0x6a
 8008184:	4650      	mov	r0, sl
 8008186:	9308      	str	r3, [sp, #32]
 8008188:	4659      	mov	r1, fp
 800818a:	2300      	movs	r3, #0
 800818c:	4e77      	ldr	r6, [pc, #476]	@ (800836c <_strtod_l+0x78c>)
 800818e:	07e7      	lsls	r7, r4, #31
 8008190:	d504      	bpl.n	800819c <_strtod_l+0x5bc>
 8008192:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008196:	f7f8 f99f 	bl	80004d8 <__aeabi_dmul>
 800819a:	2301      	movs	r3, #1
 800819c:	1064      	asrs	r4, r4, #1
 800819e:	f106 0608 	add.w	r6, r6, #8
 80081a2:	d1f4      	bne.n	800818e <_strtod_l+0x5ae>
 80081a4:	b10b      	cbz	r3, 80081aa <_strtod_l+0x5ca>
 80081a6:	4682      	mov	sl, r0
 80081a8:	468b      	mov	fp, r1
 80081aa:	9b08      	ldr	r3, [sp, #32]
 80081ac:	b1b3      	cbz	r3, 80081dc <_strtod_l+0x5fc>
 80081ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80081b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	4659      	mov	r1, fp
 80081ba:	dd0f      	ble.n	80081dc <_strtod_l+0x5fc>
 80081bc:	2b1f      	cmp	r3, #31
 80081be:	dd58      	ble.n	8008272 <_strtod_l+0x692>
 80081c0:	2b34      	cmp	r3, #52	@ 0x34
 80081c2:	bfd8      	it	le
 80081c4:	f04f 33ff 	movle.w	r3, #4294967295
 80081c8:	f04f 0a00 	mov.w	sl, #0
 80081cc:	bfcf      	iteee	gt
 80081ce:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80081d2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80081d6:	4093      	lslle	r3, r2
 80081d8:	ea03 0b01 	andle.w	fp, r3, r1
 80081dc:	2200      	movs	r2, #0
 80081de:	2300      	movs	r3, #0
 80081e0:	4650      	mov	r0, sl
 80081e2:	4659      	mov	r1, fp
 80081e4:	f7f8 fbe0 	bl	80009a8 <__aeabi_dcmpeq>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d1a7      	bne.n	800813c <_strtod_l+0x55c>
 80081ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081ee:	464a      	mov	r2, r9
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80081f4:	462b      	mov	r3, r5
 80081f6:	9805      	ldr	r0, [sp, #20]
 80081f8:	f002 fd08 	bl	800ac0c <__s2b>
 80081fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80081fe:	2800      	cmp	r0, #0
 8008200:	f43f af09 	beq.w	8008016 <_strtod_l+0x436>
 8008204:	2400      	movs	r4, #0
 8008206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800820a:	2a00      	cmp	r2, #0
 800820c:	eba3 0308 	sub.w	r3, r3, r8
 8008210:	bfa8      	it	ge
 8008212:	2300      	movge	r3, #0
 8008214:	46a0      	mov	r8, r4
 8008216:	9312      	str	r3, [sp, #72]	@ 0x48
 8008218:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800821c:	9316      	str	r3, [sp, #88]	@ 0x58
 800821e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008220:	9805      	ldr	r0, [sp, #20]
 8008222:	6859      	ldr	r1, [r3, #4]
 8008224:	f002 fc4a 	bl	800aabc <_Balloc>
 8008228:	4681      	mov	r9, r0
 800822a:	2800      	cmp	r0, #0
 800822c:	f43f aef7 	beq.w	800801e <_strtod_l+0x43e>
 8008230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008232:	300c      	adds	r0, #12
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	f103 010c 	add.w	r1, r3, #12
 800823a:	3202      	adds	r2, #2
 800823c:	0092      	lsls	r2, r2, #2
 800823e:	f001 f982 	bl	8009546 <memcpy>
 8008242:	ab1c      	add	r3, sp, #112	@ 0x70
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	4652      	mov	r2, sl
 800824c:	465b      	mov	r3, fp
 800824e:	9805      	ldr	r0, [sp, #20]
 8008250:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008254:	f003 f806 	bl	800b264 <__d2b>
 8008258:	901a      	str	r0, [sp, #104]	@ 0x68
 800825a:	2800      	cmp	r0, #0
 800825c:	f43f aedf 	beq.w	800801e <_strtod_l+0x43e>
 8008260:	2101      	movs	r1, #1
 8008262:	9805      	ldr	r0, [sp, #20]
 8008264:	f002 fd68 	bl	800ad38 <__i2b>
 8008268:	4680      	mov	r8, r0
 800826a:	b948      	cbnz	r0, 8008280 <_strtod_l+0x6a0>
 800826c:	f04f 0800 	mov.w	r8, #0
 8008270:	e6d5      	b.n	800801e <_strtod_l+0x43e>
 8008272:	f04f 32ff 	mov.w	r2, #4294967295
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	ea03 0a0a 	and.w	sl, r3, sl
 800827e:	e7ad      	b.n	80081dc <_strtod_l+0x5fc>
 8008280:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008282:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008284:	2d00      	cmp	r5, #0
 8008286:	bfab      	itete	ge
 8008288:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800828a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800828c:	18ef      	addge	r7, r5, r3
 800828e:	1b5e      	sublt	r6, r3, r5
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	bfa8      	it	ge
 8008294:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008296:	eba5 0503 	sub.w	r5, r5, r3
 800829a:	4415      	add	r5, r2
 800829c:	4b34      	ldr	r3, [pc, #208]	@ (8008370 <_strtod_l+0x790>)
 800829e:	f105 35ff 	add.w	r5, r5, #4294967295
 80082a2:	bfb8      	it	lt
 80082a4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80082a6:	429d      	cmp	r5, r3
 80082a8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80082ac:	da50      	bge.n	8008350 <_strtod_l+0x770>
 80082ae:	1b5b      	subs	r3, r3, r5
 80082b0:	2b1f      	cmp	r3, #31
 80082b2:	f04f 0101 	mov.w	r1, #1
 80082b6:	eba2 0203 	sub.w	r2, r2, r3
 80082ba:	dc3d      	bgt.n	8008338 <_strtod_l+0x758>
 80082bc:	fa01 f303 	lsl.w	r3, r1, r3
 80082c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082c2:	2300      	movs	r3, #0
 80082c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80082c6:	18bd      	adds	r5, r7, r2
 80082c8:	9b08      	ldr	r3, [sp, #32]
 80082ca:	42af      	cmp	r7, r5
 80082cc:	4416      	add	r6, r2
 80082ce:	441e      	add	r6, r3
 80082d0:	463b      	mov	r3, r7
 80082d2:	bfa8      	it	ge
 80082d4:	462b      	movge	r3, r5
 80082d6:	42b3      	cmp	r3, r6
 80082d8:	bfa8      	it	ge
 80082da:	4633      	movge	r3, r6
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bfc2      	ittt	gt
 80082e0:	1aed      	subgt	r5, r5, r3
 80082e2:	1af6      	subgt	r6, r6, r3
 80082e4:	1aff      	subgt	r7, r7, r3
 80082e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dd16      	ble.n	800831a <_strtod_l+0x73a>
 80082ec:	4641      	mov	r1, r8
 80082ee:	461a      	mov	r2, r3
 80082f0:	9805      	ldr	r0, [sp, #20]
 80082f2:	f002 fdd9 	bl	800aea8 <__pow5mult>
 80082f6:	4680      	mov	r8, r0
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d0b7      	beq.n	800826c <_strtod_l+0x68c>
 80082fc:	4601      	mov	r1, r0
 80082fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008300:	9805      	ldr	r0, [sp, #20]
 8008302:	f002 fd2f 	bl	800ad64 <__multiply>
 8008306:	900a      	str	r0, [sp, #40]	@ 0x28
 8008308:	2800      	cmp	r0, #0
 800830a:	f43f ae88 	beq.w	800801e <_strtod_l+0x43e>
 800830e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008310:	9805      	ldr	r0, [sp, #20]
 8008312:	f002 fc13 	bl	800ab3c <_Bfree>
 8008316:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008318:	931a      	str	r3, [sp, #104]	@ 0x68
 800831a:	2d00      	cmp	r5, #0
 800831c:	dc1d      	bgt.n	800835a <_strtod_l+0x77a>
 800831e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	dd27      	ble.n	8008374 <_strtod_l+0x794>
 8008324:	4649      	mov	r1, r9
 8008326:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008328:	9805      	ldr	r0, [sp, #20]
 800832a:	f002 fdbd 	bl	800aea8 <__pow5mult>
 800832e:	4681      	mov	r9, r0
 8008330:	bb00      	cbnz	r0, 8008374 <_strtod_l+0x794>
 8008332:	f04f 0900 	mov.w	r9, #0
 8008336:	e672      	b.n	800801e <_strtod_l+0x43e>
 8008338:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800833c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008340:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008344:	35e2      	adds	r5, #226	@ 0xe2
 8008346:	fa01 f305 	lsl.w	r3, r1, r5
 800834a:	9310      	str	r3, [sp, #64]	@ 0x40
 800834c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800834e:	e7ba      	b.n	80082c6 <_strtod_l+0x6e6>
 8008350:	2300      	movs	r3, #0
 8008352:	9310      	str	r3, [sp, #64]	@ 0x40
 8008354:	2301      	movs	r3, #1
 8008356:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008358:	e7b5      	b.n	80082c6 <_strtod_l+0x6e6>
 800835a:	462a      	mov	r2, r5
 800835c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800835e:	9805      	ldr	r0, [sp, #20]
 8008360:	f002 fdfc 	bl	800af5c <__lshift>
 8008364:	901a      	str	r0, [sp, #104]	@ 0x68
 8008366:	2800      	cmp	r0, #0
 8008368:	d1d9      	bne.n	800831e <_strtod_l+0x73e>
 800836a:	e658      	b.n	800801e <_strtod_l+0x43e>
 800836c:	0800c2d0 	.word	0x0800c2d0
 8008370:	fffffc02 	.word	0xfffffc02
 8008374:	2e00      	cmp	r6, #0
 8008376:	dd07      	ble.n	8008388 <_strtod_l+0x7a8>
 8008378:	4649      	mov	r1, r9
 800837a:	4632      	mov	r2, r6
 800837c:	9805      	ldr	r0, [sp, #20]
 800837e:	f002 fded 	bl	800af5c <__lshift>
 8008382:	4681      	mov	r9, r0
 8008384:	2800      	cmp	r0, #0
 8008386:	d0d4      	beq.n	8008332 <_strtod_l+0x752>
 8008388:	2f00      	cmp	r7, #0
 800838a:	dd08      	ble.n	800839e <_strtod_l+0x7be>
 800838c:	4641      	mov	r1, r8
 800838e:	463a      	mov	r2, r7
 8008390:	9805      	ldr	r0, [sp, #20]
 8008392:	f002 fde3 	bl	800af5c <__lshift>
 8008396:	4680      	mov	r8, r0
 8008398:	2800      	cmp	r0, #0
 800839a:	f43f ae40 	beq.w	800801e <_strtod_l+0x43e>
 800839e:	464a      	mov	r2, r9
 80083a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083a2:	9805      	ldr	r0, [sp, #20]
 80083a4:	f002 fe62 	bl	800b06c <__mdiff>
 80083a8:	4604      	mov	r4, r0
 80083aa:	2800      	cmp	r0, #0
 80083ac:	f43f ae37 	beq.w	800801e <_strtod_l+0x43e>
 80083b0:	68c3      	ldr	r3, [r0, #12]
 80083b2:	4641      	mov	r1, r8
 80083b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083b6:	2300      	movs	r3, #0
 80083b8:	60c3      	str	r3, [r0, #12]
 80083ba:	f002 fe3b 	bl	800b034 <__mcmp>
 80083be:	2800      	cmp	r0, #0
 80083c0:	da3d      	bge.n	800843e <_strtod_l+0x85e>
 80083c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083c4:	ea53 030a 	orrs.w	r3, r3, sl
 80083c8:	d163      	bne.n	8008492 <_strtod_l+0x8b2>
 80083ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d15f      	bne.n	8008492 <_strtod_l+0x8b2>
 80083d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083d6:	0d1b      	lsrs	r3, r3, #20
 80083d8:	051b      	lsls	r3, r3, #20
 80083da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083de:	d958      	bls.n	8008492 <_strtod_l+0x8b2>
 80083e0:	6963      	ldr	r3, [r4, #20]
 80083e2:	b913      	cbnz	r3, 80083ea <_strtod_l+0x80a>
 80083e4:	6923      	ldr	r3, [r4, #16]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	dd53      	ble.n	8008492 <_strtod_l+0x8b2>
 80083ea:	4621      	mov	r1, r4
 80083ec:	2201      	movs	r2, #1
 80083ee:	9805      	ldr	r0, [sp, #20]
 80083f0:	f002 fdb4 	bl	800af5c <__lshift>
 80083f4:	4641      	mov	r1, r8
 80083f6:	4604      	mov	r4, r0
 80083f8:	f002 fe1c 	bl	800b034 <__mcmp>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	dd48      	ble.n	8008492 <_strtod_l+0x8b2>
 8008400:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008404:	9a08      	ldr	r2, [sp, #32]
 8008406:	0d1b      	lsrs	r3, r3, #20
 8008408:	051b      	lsls	r3, r3, #20
 800840a:	2a00      	cmp	r2, #0
 800840c:	d062      	beq.n	80084d4 <_strtod_l+0x8f4>
 800840e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008412:	d85f      	bhi.n	80084d4 <_strtod_l+0x8f4>
 8008414:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008418:	f67f ae94 	bls.w	8008144 <_strtod_l+0x564>
 800841c:	4650      	mov	r0, sl
 800841e:	4659      	mov	r1, fp
 8008420:	4ba3      	ldr	r3, [pc, #652]	@ (80086b0 <_strtod_l+0xad0>)
 8008422:	2200      	movs	r2, #0
 8008424:	f7f8 f858 	bl	80004d8 <__aeabi_dmul>
 8008428:	4ba2      	ldr	r3, [pc, #648]	@ (80086b4 <_strtod_l+0xad4>)
 800842a:	4682      	mov	sl, r0
 800842c:	400b      	ands	r3, r1
 800842e:	468b      	mov	fp, r1
 8008430:	2b00      	cmp	r3, #0
 8008432:	f47f adff 	bne.w	8008034 <_strtod_l+0x454>
 8008436:	2322      	movs	r3, #34	@ 0x22
 8008438:	9a05      	ldr	r2, [sp, #20]
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	e5fa      	b.n	8008034 <_strtod_l+0x454>
 800843e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008442:	d165      	bne.n	8008510 <_strtod_l+0x930>
 8008444:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008446:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800844a:	b35a      	cbz	r2, 80084a4 <_strtod_l+0x8c4>
 800844c:	4a9a      	ldr	r2, [pc, #616]	@ (80086b8 <_strtod_l+0xad8>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d12b      	bne.n	80084aa <_strtod_l+0x8ca>
 8008452:	9b08      	ldr	r3, [sp, #32]
 8008454:	4651      	mov	r1, sl
 8008456:	b303      	cbz	r3, 800849a <_strtod_l+0x8ba>
 8008458:	465a      	mov	r2, fp
 800845a:	4b96      	ldr	r3, [pc, #600]	@ (80086b4 <_strtod_l+0xad4>)
 800845c:	4013      	ands	r3, r2
 800845e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008462:	f04f 32ff 	mov.w	r2, #4294967295
 8008466:	d81b      	bhi.n	80084a0 <_strtod_l+0x8c0>
 8008468:	0d1b      	lsrs	r3, r3, #20
 800846a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800846e:	fa02 f303 	lsl.w	r3, r2, r3
 8008472:	4299      	cmp	r1, r3
 8008474:	d119      	bne.n	80084aa <_strtod_l+0x8ca>
 8008476:	4b91      	ldr	r3, [pc, #580]	@ (80086bc <_strtod_l+0xadc>)
 8008478:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800847a:	429a      	cmp	r2, r3
 800847c:	d102      	bne.n	8008484 <_strtod_l+0x8a4>
 800847e:	3101      	adds	r1, #1
 8008480:	f43f adcd 	beq.w	800801e <_strtod_l+0x43e>
 8008484:	f04f 0a00 	mov.w	sl, #0
 8008488:	4b8a      	ldr	r3, [pc, #552]	@ (80086b4 <_strtod_l+0xad4>)
 800848a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800848c:	401a      	ands	r2, r3
 800848e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008492:	9b08      	ldr	r3, [sp, #32]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1c1      	bne.n	800841c <_strtod_l+0x83c>
 8008498:	e5cc      	b.n	8008034 <_strtod_l+0x454>
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
 800849e:	e7e8      	b.n	8008472 <_strtod_l+0x892>
 80084a0:	4613      	mov	r3, r2
 80084a2:	e7e6      	b.n	8008472 <_strtod_l+0x892>
 80084a4:	ea53 030a 	orrs.w	r3, r3, sl
 80084a8:	d0aa      	beq.n	8008400 <_strtod_l+0x820>
 80084aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084ac:	b1db      	cbz	r3, 80084e6 <_strtod_l+0x906>
 80084ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084b0:	4213      	tst	r3, r2
 80084b2:	d0ee      	beq.n	8008492 <_strtod_l+0x8b2>
 80084b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084b6:	4650      	mov	r0, sl
 80084b8:	4659      	mov	r1, fp
 80084ba:	9a08      	ldr	r2, [sp, #32]
 80084bc:	b1bb      	cbz	r3, 80084ee <_strtod_l+0x90e>
 80084be:	f7ff fb6e 	bl	8007b9e <sulp>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084ca:	f7f7 fe4f 	bl	800016c <__adddf3>
 80084ce:	4682      	mov	sl, r0
 80084d0:	468b      	mov	fp, r1
 80084d2:	e7de      	b.n	8008492 <_strtod_l+0x8b2>
 80084d4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80084d8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084dc:	f04f 3aff 	mov.w	sl, #4294967295
 80084e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084e4:	e7d5      	b.n	8008492 <_strtod_l+0x8b2>
 80084e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084e8:	ea13 0f0a 	tst.w	r3, sl
 80084ec:	e7e1      	b.n	80084b2 <_strtod_l+0x8d2>
 80084ee:	f7ff fb56 	bl	8007b9e <sulp>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084fa:	f7f7 fe35 	bl	8000168 <__aeabi_dsub>
 80084fe:	2200      	movs	r2, #0
 8008500:	2300      	movs	r3, #0
 8008502:	4682      	mov	sl, r0
 8008504:	468b      	mov	fp, r1
 8008506:	f7f8 fa4f 	bl	80009a8 <__aeabi_dcmpeq>
 800850a:	2800      	cmp	r0, #0
 800850c:	d0c1      	beq.n	8008492 <_strtod_l+0x8b2>
 800850e:	e619      	b.n	8008144 <_strtod_l+0x564>
 8008510:	4641      	mov	r1, r8
 8008512:	4620      	mov	r0, r4
 8008514:	f002 fefe 	bl	800b314 <__ratio>
 8008518:	2200      	movs	r2, #0
 800851a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800851e:	4606      	mov	r6, r0
 8008520:	460f      	mov	r7, r1
 8008522:	f7f8 fa55 	bl	80009d0 <__aeabi_dcmple>
 8008526:	2800      	cmp	r0, #0
 8008528:	d06d      	beq.n	8008606 <_strtod_l+0xa26>
 800852a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800852c:	2b00      	cmp	r3, #0
 800852e:	d178      	bne.n	8008622 <_strtod_l+0xa42>
 8008530:	f1ba 0f00 	cmp.w	sl, #0
 8008534:	d156      	bne.n	80085e4 <_strtod_l+0xa04>
 8008536:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800853c:	2b00      	cmp	r3, #0
 800853e:	d158      	bne.n	80085f2 <_strtod_l+0xa12>
 8008540:	2200      	movs	r2, #0
 8008542:	4630      	mov	r0, r6
 8008544:	4639      	mov	r1, r7
 8008546:	4b5e      	ldr	r3, [pc, #376]	@ (80086c0 <_strtod_l+0xae0>)
 8008548:	f7f8 fa38 	bl	80009bc <__aeabi_dcmplt>
 800854c:	2800      	cmp	r0, #0
 800854e:	d157      	bne.n	8008600 <_strtod_l+0xa20>
 8008550:	4630      	mov	r0, r6
 8008552:	4639      	mov	r1, r7
 8008554:	2200      	movs	r2, #0
 8008556:	4b5b      	ldr	r3, [pc, #364]	@ (80086c4 <_strtod_l+0xae4>)
 8008558:	f7f7 ffbe 	bl	80004d8 <__aeabi_dmul>
 800855c:	4606      	mov	r6, r0
 800855e:	460f      	mov	r7, r1
 8008560:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008564:	9606      	str	r6, [sp, #24]
 8008566:	9307      	str	r3, [sp, #28]
 8008568:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800856c:	4d51      	ldr	r5, [pc, #324]	@ (80086b4 <_strtod_l+0xad4>)
 800856e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008574:	401d      	ands	r5, r3
 8008576:	4b54      	ldr	r3, [pc, #336]	@ (80086c8 <_strtod_l+0xae8>)
 8008578:	429d      	cmp	r5, r3
 800857a:	f040 80ab 	bne.w	80086d4 <_strtod_l+0xaf4>
 800857e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008580:	4650      	mov	r0, sl
 8008582:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008586:	4659      	mov	r1, fp
 8008588:	f002 fe04 	bl	800b194 <__ulp>
 800858c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008590:	f7f7 ffa2 	bl	80004d8 <__aeabi_dmul>
 8008594:	4652      	mov	r2, sl
 8008596:	465b      	mov	r3, fp
 8008598:	f7f7 fde8 	bl	800016c <__adddf3>
 800859c:	460b      	mov	r3, r1
 800859e:	4945      	ldr	r1, [pc, #276]	@ (80086b4 <_strtod_l+0xad4>)
 80085a0:	4a4a      	ldr	r2, [pc, #296]	@ (80086cc <_strtod_l+0xaec>)
 80085a2:	4019      	ands	r1, r3
 80085a4:	4291      	cmp	r1, r2
 80085a6:	4682      	mov	sl, r0
 80085a8:	d942      	bls.n	8008630 <_strtod_l+0xa50>
 80085aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085ac:	4b43      	ldr	r3, [pc, #268]	@ (80086bc <_strtod_l+0xadc>)
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d103      	bne.n	80085ba <_strtod_l+0x9da>
 80085b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085b4:	3301      	adds	r3, #1
 80085b6:	f43f ad32 	beq.w	800801e <_strtod_l+0x43e>
 80085ba:	f04f 3aff 	mov.w	sl, #4294967295
 80085be:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80086bc <_strtod_l+0xadc>
 80085c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085c4:	9805      	ldr	r0, [sp, #20]
 80085c6:	f002 fab9 	bl	800ab3c <_Bfree>
 80085ca:	4649      	mov	r1, r9
 80085cc:	9805      	ldr	r0, [sp, #20]
 80085ce:	f002 fab5 	bl	800ab3c <_Bfree>
 80085d2:	4641      	mov	r1, r8
 80085d4:	9805      	ldr	r0, [sp, #20]
 80085d6:	f002 fab1 	bl	800ab3c <_Bfree>
 80085da:	4621      	mov	r1, r4
 80085dc:	9805      	ldr	r0, [sp, #20]
 80085de:	f002 faad 	bl	800ab3c <_Bfree>
 80085e2:	e61c      	b.n	800821e <_strtod_l+0x63e>
 80085e4:	f1ba 0f01 	cmp.w	sl, #1
 80085e8:	d103      	bne.n	80085f2 <_strtod_l+0xa12>
 80085ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f43f ada9 	beq.w	8008144 <_strtod_l+0x564>
 80085f2:	2200      	movs	r2, #0
 80085f4:	4b36      	ldr	r3, [pc, #216]	@ (80086d0 <_strtod_l+0xaf0>)
 80085f6:	2600      	movs	r6, #0
 80085f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80085fc:	4f30      	ldr	r7, [pc, #192]	@ (80086c0 <_strtod_l+0xae0>)
 80085fe:	e7b3      	b.n	8008568 <_strtod_l+0x988>
 8008600:	2600      	movs	r6, #0
 8008602:	4f30      	ldr	r7, [pc, #192]	@ (80086c4 <_strtod_l+0xae4>)
 8008604:	e7ac      	b.n	8008560 <_strtod_l+0x980>
 8008606:	4630      	mov	r0, r6
 8008608:	4639      	mov	r1, r7
 800860a:	4b2e      	ldr	r3, [pc, #184]	@ (80086c4 <_strtod_l+0xae4>)
 800860c:	2200      	movs	r2, #0
 800860e:	f7f7 ff63 	bl	80004d8 <__aeabi_dmul>
 8008612:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008614:	4606      	mov	r6, r0
 8008616:	460f      	mov	r7, r1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d0a1      	beq.n	8008560 <_strtod_l+0x980>
 800861c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008620:	e7a2      	b.n	8008568 <_strtod_l+0x988>
 8008622:	2200      	movs	r2, #0
 8008624:	4b26      	ldr	r3, [pc, #152]	@ (80086c0 <_strtod_l+0xae0>)
 8008626:	4616      	mov	r6, r2
 8008628:	461f      	mov	r7, r3
 800862a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800862e:	e79b      	b.n	8008568 <_strtod_l+0x988>
 8008630:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008634:	9b08      	ldr	r3, [sp, #32]
 8008636:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1c1      	bne.n	80085c2 <_strtod_l+0x9e2>
 800863e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008642:	0d1b      	lsrs	r3, r3, #20
 8008644:	051b      	lsls	r3, r3, #20
 8008646:	429d      	cmp	r5, r3
 8008648:	d1bb      	bne.n	80085c2 <_strtod_l+0x9e2>
 800864a:	4630      	mov	r0, r6
 800864c:	4639      	mov	r1, r7
 800864e:	f7f8 fd25 	bl	800109c <__aeabi_d2lz>
 8008652:	f7f7 ff13 	bl	800047c <__aeabi_l2d>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4630      	mov	r0, r6
 800865c:	4639      	mov	r1, r7
 800865e:	f7f7 fd83 	bl	8000168 <__aeabi_dsub>
 8008662:	460b      	mov	r3, r1
 8008664:	4602      	mov	r2, r0
 8008666:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800866a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800866e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008670:	ea46 060a 	orr.w	r6, r6, sl
 8008674:	431e      	orrs	r6, r3
 8008676:	d06a      	beq.n	800874e <_strtod_l+0xb6e>
 8008678:	a309      	add	r3, pc, #36	@ (adr r3, 80086a0 <_strtod_l+0xac0>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f8 f99d 	bl	80009bc <__aeabi_dcmplt>
 8008682:	2800      	cmp	r0, #0
 8008684:	f47f acd6 	bne.w	8008034 <_strtod_l+0x454>
 8008688:	a307      	add	r3, pc, #28	@ (adr r3, 80086a8 <_strtod_l+0xac8>)
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008692:	f7f8 f9b1 	bl	80009f8 <__aeabi_dcmpgt>
 8008696:	2800      	cmp	r0, #0
 8008698:	d093      	beq.n	80085c2 <_strtod_l+0x9e2>
 800869a:	e4cb      	b.n	8008034 <_strtod_l+0x454>
 800869c:	f3af 8000 	nop.w
 80086a0:	94a03595 	.word	0x94a03595
 80086a4:	3fdfffff 	.word	0x3fdfffff
 80086a8:	35afe535 	.word	0x35afe535
 80086ac:	3fe00000 	.word	0x3fe00000
 80086b0:	39500000 	.word	0x39500000
 80086b4:	7ff00000 	.word	0x7ff00000
 80086b8:	000fffff 	.word	0x000fffff
 80086bc:	7fefffff 	.word	0x7fefffff
 80086c0:	3ff00000 	.word	0x3ff00000
 80086c4:	3fe00000 	.word	0x3fe00000
 80086c8:	7fe00000 	.word	0x7fe00000
 80086cc:	7c9fffff 	.word	0x7c9fffff
 80086d0:	bff00000 	.word	0xbff00000
 80086d4:	9b08      	ldr	r3, [sp, #32]
 80086d6:	b323      	cbz	r3, 8008722 <_strtod_l+0xb42>
 80086d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80086dc:	d821      	bhi.n	8008722 <_strtod_l+0xb42>
 80086de:	a328      	add	r3, pc, #160	@ (adr r3, 8008780 <_strtod_l+0xba0>)
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	4630      	mov	r0, r6
 80086e6:	4639      	mov	r1, r7
 80086e8:	f7f8 f972 	bl	80009d0 <__aeabi_dcmple>
 80086ec:	b1a0      	cbz	r0, 8008718 <_strtod_l+0xb38>
 80086ee:	4639      	mov	r1, r7
 80086f0:	4630      	mov	r0, r6
 80086f2:	f7f8 f9c9 	bl	8000a88 <__aeabi_d2uiz>
 80086f6:	2801      	cmp	r0, #1
 80086f8:	bf38      	it	cc
 80086fa:	2001      	movcc	r0, #1
 80086fc:	f7f7 fe72 	bl	80003e4 <__aeabi_ui2d>
 8008700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008702:	4606      	mov	r6, r0
 8008704:	460f      	mov	r7, r1
 8008706:	b9fb      	cbnz	r3, 8008748 <_strtod_l+0xb68>
 8008708:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800870c:	9014      	str	r0, [sp, #80]	@ 0x50
 800870e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008710:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008714:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008718:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800871a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800871e:	1b5b      	subs	r3, r3, r5
 8008720:	9311      	str	r3, [sp, #68]	@ 0x44
 8008722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008726:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800872a:	f002 fd33 	bl	800b194 <__ulp>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	4650      	mov	r0, sl
 8008734:	4659      	mov	r1, fp
 8008736:	f7f7 fecf 	bl	80004d8 <__aeabi_dmul>
 800873a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800873e:	f7f7 fd15 	bl	800016c <__adddf3>
 8008742:	4682      	mov	sl, r0
 8008744:	468b      	mov	fp, r1
 8008746:	e775      	b.n	8008634 <_strtod_l+0xa54>
 8008748:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800874c:	e7e0      	b.n	8008710 <_strtod_l+0xb30>
 800874e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008788 <_strtod_l+0xba8>)
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f7f8 f932 	bl	80009bc <__aeabi_dcmplt>
 8008758:	e79d      	b.n	8008696 <_strtod_l+0xab6>
 800875a:	2300      	movs	r3, #0
 800875c:	930e      	str	r3, [sp, #56]	@ 0x38
 800875e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008760:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	f7ff ba79 	b.w	8007c5a <_strtod_l+0x7a>
 8008768:	2a65      	cmp	r2, #101	@ 0x65
 800876a:	f43f ab72 	beq.w	8007e52 <_strtod_l+0x272>
 800876e:	2a45      	cmp	r2, #69	@ 0x45
 8008770:	f43f ab6f 	beq.w	8007e52 <_strtod_l+0x272>
 8008774:	2301      	movs	r3, #1
 8008776:	f7ff bbaa 	b.w	8007ece <_strtod_l+0x2ee>
 800877a:	bf00      	nop
 800877c:	f3af 8000 	nop.w
 8008780:	ffc00000 	.word	0xffc00000
 8008784:	41dfffff 	.word	0x41dfffff
 8008788:	94a03595 	.word	0x94a03595
 800878c:	3fcfffff 	.word	0x3fcfffff

08008790 <strtod>:
 8008790:	460a      	mov	r2, r1
 8008792:	4601      	mov	r1, r0
 8008794:	4802      	ldr	r0, [pc, #8]	@ (80087a0 <strtod+0x10>)
 8008796:	4b03      	ldr	r3, [pc, #12]	@ (80087a4 <strtod+0x14>)
 8008798:	6800      	ldr	r0, [r0, #0]
 800879a:	f7ff ba21 	b.w	8007be0 <_strtod_l>
 800879e:	bf00      	nop
 80087a0:	20000188 	.word	0x20000188
 80087a4:	2000001c 	.word	0x2000001c

080087a8 <_strtoul_l.isra.0>:
 80087a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087ac:	4686      	mov	lr, r0
 80087ae:	460d      	mov	r5, r1
 80087b0:	4e33      	ldr	r6, [pc, #204]	@ (8008880 <_strtoul_l.isra.0+0xd8>)
 80087b2:	4628      	mov	r0, r5
 80087b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087b8:	5d37      	ldrb	r7, [r6, r4]
 80087ba:	f017 0708 	ands.w	r7, r7, #8
 80087be:	d1f8      	bne.n	80087b2 <_strtoul_l.isra.0+0xa>
 80087c0:	2c2d      	cmp	r4, #45	@ 0x2d
 80087c2:	d110      	bne.n	80087e6 <_strtoul_l.isra.0+0x3e>
 80087c4:	2701      	movs	r7, #1
 80087c6:	782c      	ldrb	r4, [r5, #0]
 80087c8:	1c85      	adds	r5, r0, #2
 80087ca:	f033 0010 	bics.w	r0, r3, #16
 80087ce:	d115      	bne.n	80087fc <_strtoul_l.isra.0+0x54>
 80087d0:	2c30      	cmp	r4, #48	@ 0x30
 80087d2:	d10d      	bne.n	80087f0 <_strtoul_l.isra.0+0x48>
 80087d4:	7828      	ldrb	r0, [r5, #0]
 80087d6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80087da:	2858      	cmp	r0, #88	@ 0x58
 80087dc:	d108      	bne.n	80087f0 <_strtoul_l.isra.0+0x48>
 80087de:	786c      	ldrb	r4, [r5, #1]
 80087e0:	3502      	adds	r5, #2
 80087e2:	2310      	movs	r3, #16
 80087e4:	e00a      	b.n	80087fc <_strtoul_l.isra.0+0x54>
 80087e6:	2c2b      	cmp	r4, #43	@ 0x2b
 80087e8:	bf04      	itt	eq
 80087ea:	782c      	ldrbeq	r4, [r5, #0]
 80087ec:	1c85      	addeq	r5, r0, #2
 80087ee:	e7ec      	b.n	80087ca <_strtoul_l.isra.0+0x22>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f6      	bne.n	80087e2 <_strtoul_l.isra.0+0x3a>
 80087f4:	2c30      	cmp	r4, #48	@ 0x30
 80087f6:	bf14      	ite	ne
 80087f8:	230a      	movne	r3, #10
 80087fa:	2308      	moveq	r3, #8
 80087fc:	f04f 38ff 	mov.w	r8, #4294967295
 8008800:	fbb8 f8f3 	udiv	r8, r8, r3
 8008804:	2600      	movs	r6, #0
 8008806:	fb03 f908 	mul.w	r9, r3, r8
 800880a:	4630      	mov	r0, r6
 800880c:	ea6f 0909 	mvn.w	r9, r9
 8008810:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008814:	f1bc 0f09 	cmp.w	ip, #9
 8008818:	d810      	bhi.n	800883c <_strtoul_l.isra.0+0x94>
 800881a:	4664      	mov	r4, ip
 800881c:	42a3      	cmp	r3, r4
 800881e:	dd1e      	ble.n	800885e <_strtoul_l.isra.0+0xb6>
 8008820:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008824:	d007      	beq.n	8008836 <_strtoul_l.isra.0+0x8e>
 8008826:	4580      	cmp	r8, r0
 8008828:	d316      	bcc.n	8008858 <_strtoul_l.isra.0+0xb0>
 800882a:	d101      	bne.n	8008830 <_strtoul_l.isra.0+0x88>
 800882c:	45a1      	cmp	r9, r4
 800882e:	db13      	blt.n	8008858 <_strtoul_l.isra.0+0xb0>
 8008830:	2601      	movs	r6, #1
 8008832:	fb00 4003 	mla	r0, r0, r3, r4
 8008836:	f815 4b01 	ldrb.w	r4, [r5], #1
 800883a:	e7e9      	b.n	8008810 <_strtoul_l.isra.0+0x68>
 800883c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008840:	f1bc 0f19 	cmp.w	ip, #25
 8008844:	d801      	bhi.n	800884a <_strtoul_l.isra.0+0xa2>
 8008846:	3c37      	subs	r4, #55	@ 0x37
 8008848:	e7e8      	b.n	800881c <_strtoul_l.isra.0+0x74>
 800884a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800884e:	f1bc 0f19 	cmp.w	ip, #25
 8008852:	d804      	bhi.n	800885e <_strtoul_l.isra.0+0xb6>
 8008854:	3c57      	subs	r4, #87	@ 0x57
 8008856:	e7e1      	b.n	800881c <_strtoul_l.isra.0+0x74>
 8008858:	f04f 36ff 	mov.w	r6, #4294967295
 800885c:	e7eb      	b.n	8008836 <_strtoul_l.isra.0+0x8e>
 800885e:	1c73      	adds	r3, r6, #1
 8008860:	d106      	bne.n	8008870 <_strtoul_l.isra.0+0xc8>
 8008862:	2322      	movs	r3, #34	@ 0x22
 8008864:	4630      	mov	r0, r6
 8008866:	f8ce 3000 	str.w	r3, [lr]
 800886a:	b932      	cbnz	r2, 800887a <_strtoul_l.isra.0+0xd2>
 800886c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008870:	b107      	cbz	r7, 8008874 <_strtoul_l.isra.0+0xcc>
 8008872:	4240      	negs	r0, r0
 8008874:	2a00      	cmp	r2, #0
 8008876:	d0f9      	beq.n	800886c <_strtoul_l.isra.0+0xc4>
 8008878:	b106      	cbz	r6, 800887c <_strtoul_l.isra.0+0xd4>
 800887a:	1e69      	subs	r1, r5, #1
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	e7f5      	b.n	800886c <_strtoul_l.isra.0+0xc4>
 8008880:	0800c2f9 	.word	0x0800c2f9

08008884 <strtoul>:
 8008884:	4613      	mov	r3, r2
 8008886:	460a      	mov	r2, r1
 8008888:	4601      	mov	r1, r0
 800888a:	4802      	ldr	r0, [pc, #8]	@ (8008894 <strtoul+0x10>)
 800888c:	6800      	ldr	r0, [r0, #0]
 800888e:	f7ff bf8b 	b.w	80087a8 <_strtoul_l.isra.0>
 8008892:	bf00      	nop
 8008894:	20000188 	.word	0x20000188

08008898 <__cvt>:
 8008898:	2b00      	cmp	r3, #0
 800889a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800889e:	461d      	mov	r5, r3
 80088a0:	bfbb      	ittet	lt
 80088a2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80088a6:	461d      	movlt	r5, r3
 80088a8:	2300      	movge	r3, #0
 80088aa:	232d      	movlt	r3, #45	@ 0x2d
 80088ac:	b088      	sub	sp, #32
 80088ae:	4614      	mov	r4, r2
 80088b0:	bfb8      	it	lt
 80088b2:	4614      	movlt	r4, r2
 80088b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80088b6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80088b8:	7013      	strb	r3, [r2, #0]
 80088ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80088c0:	f023 0820 	bic.w	r8, r3, #32
 80088c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088c8:	d005      	beq.n	80088d6 <__cvt+0x3e>
 80088ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80088ce:	d100      	bne.n	80088d2 <__cvt+0x3a>
 80088d0:	3601      	adds	r6, #1
 80088d2:	2302      	movs	r3, #2
 80088d4:	e000      	b.n	80088d8 <__cvt+0x40>
 80088d6:	2303      	movs	r3, #3
 80088d8:	aa07      	add	r2, sp, #28
 80088da:	9204      	str	r2, [sp, #16]
 80088dc:	aa06      	add	r2, sp, #24
 80088de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80088e2:	e9cd 3600 	strd	r3, r6, [sp]
 80088e6:	4622      	mov	r2, r4
 80088e8:	462b      	mov	r3, r5
 80088ea:	f000 fec9 	bl	8009680 <_dtoa_r>
 80088ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80088f2:	4607      	mov	r7, r0
 80088f4:	d119      	bne.n	800892a <__cvt+0x92>
 80088f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80088f8:	07db      	lsls	r3, r3, #31
 80088fa:	d50e      	bpl.n	800891a <__cvt+0x82>
 80088fc:	eb00 0906 	add.w	r9, r0, r6
 8008900:	2200      	movs	r2, #0
 8008902:	2300      	movs	r3, #0
 8008904:	4620      	mov	r0, r4
 8008906:	4629      	mov	r1, r5
 8008908:	f7f8 f84e 	bl	80009a8 <__aeabi_dcmpeq>
 800890c:	b108      	cbz	r0, 8008912 <__cvt+0x7a>
 800890e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008912:	2230      	movs	r2, #48	@ 0x30
 8008914:	9b07      	ldr	r3, [sp, #28]
 8008916:	454b      	cmp	r3, r9
 8008918:	d31e      	bcc.n	8008958 <__cvt+0xc0>
 800891a:	4638      	mov	r0, r7
 800891c:	9b07      	ldr	r3, [sp, #28]
 800891e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008920:	1bdb      	subs	r3, r3, r7
 8008922:	6013      	str	r3, [r2, #0]
 8008924:	b008      	add	sp, #32
 8008926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800892e:	eb00 0906 	add.w	r9, r0, r6
 8008932:	d1e5      	bne.n	8008900 <__cvt+0x68>
 8008934:	7803      	ldrb	r3, [r0, #0]
 8008936:	2b30      	cmp	r3, #48	@ 0x30
 8008938:	d10a      	bne.n	8008950 <__cvt+0xb8>
 800893a:	2200      	movs	r2, #0
 800893c:	2300      	movs	r3, #0
 800893e:	4620      	mov	r0, r4
 8008940:	4629      	mov	r1, r5
 8008942:	f7f8 f831 	bl	80009a8 <__aeabi_dcmpeq>
 8008946:	b918      	cbnz	r0, 8008950 <__cvt+0xb8>
 8008948:	f1c6 0601 	rsb	r6, r6, #1
 800894c:	f8ca 6000 	str.w	r6, [sl]
 8008950:	f8da 3000 	ldr.w	r3, [sl]
 8008954:	4499      	add	r9, r3
 8008956:	e7d3      	b.n	8008900 <__cvt+0x68>
 8008958:	1c59      	adds	r1, r3, #1
 800895a:	9107      	str	r1, [sp, #28]
 800895c:	701a      	strb	r2, [r3, #0]
 800895e:	e7d9      	b.n	8008914 <__cvt+0x7c>

08008960 <__exponent>:
 8008960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008962:	2900      	cmp	r1, #0
 8008964:	bfb6      	itet	lt
 8008966:	232d      	movlt	r3, #45	@ 0x2d
 8008968:	232b      	movge	r3, #43	@ 0x2b
 800896a:	4249      	neglt	r1, r1
 800896c:	2909      	cmp	r1, #9
 800896e:	7002      	strb	r2, [r0, #0]
 8008970:	7043      	strb	r3, [r0, #1]
 8008972:	dd29      	ble.n	80089c8 <__exponent+0x68>
 8008974:	f10d 0307 	add.w	r3, sp, #7
 8008978:	461d      	mov	r5, r3
 800897a:	270a      	movs	r7, #10
 800897c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008980:	461a      	mov	r2, r3
 8008982:	fb07 1416 	mls	r4, r7, r6, r1
 8008986:	3430      	adds	r4, #48	@ 0x30
 8008988:	f802 4c01 	strb.w	r4, [r2, #-1]
 800898c:	460c      	mov	r4, r1
 800898e:	2c63      	cmp	r4, #99	@ 0x63
 8008990:	4631      	mov	r1, r6
 8008992:	f103 33ff 	add.w	r3, r3, #4294967295
 8008996:	dcf1      	bgt.n	800897c <__exponent+0x1c>
 8008998:	3130      	adds	r1, #48	@ 0x30
 800899a:	1e94      	subs	r4, r2, #2
 800899c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80089a0:	4623      	mov	r3, r4
 80089a2:	1c41      	adds	r1, r0, #1
 80089a4:	42ab      	cmp	r3, r5
 80089a6:	d30a      	bcc.n	80089be <__exponent+0x5e>
 80089a8:	f10d 0309 	add.w	r3, sp, #9
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	42ac      	cmp	r4, r5
 80089b0:	bf88      	it	hi
 80089b2:	2300      	movhi	r3, #0
 80089b4:	3302      	adds	r3, #2
 80089b6:	4403      	add	r3, r0
 80089b8:	1a18      	subs	r0, r3, r0
 80089ba:	b003      	add	sp, #12
 80089bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089be:	f813 6b01 	ldrb.w	r6, [r3], #1
 80089c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80089c6:	e7ed      	b.n	80089a4 <__exponent+0x44>
 80089c8:	2330      	movs	r3, #48	@ 0x30
 80089ca:	3130      	adds	r1, #48	@ 0x30
 80089cc:	7083      	strb	r3, [r0, #2]
 80089ce:	70c1      	strb	r1, [r0, #3]
 80089d0:	1d03      	adds	r3, r0, #4
 80089d2:	e7f1      	b.n	80089b8 <__exponent+0x58>

080089d4 <_printf_float>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	b091      	sub	sp, #68	@ 0x44
 80089da:	460c      	mov	r4, r1
 80089dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80089e0:	4616      	mov	r6, r2
 80089e2:	461f      	mov	r7, r3
 80089e4:	4605      	mov	r5, r0
 80089e6:	f000 fd29 	bl	800943c <_localeconv_r>
 80089ea:	6803      	ldr	r3, [r0, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	9308      	str	r3, [sp, #32]
 80089f0:	f7f7 fbae 	bl	8000150 <strlen>
 80089f4:	2300      	movs	r3, #0
 80089f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80089f8:	f8d8 3000 	ldr.w	r3, [r8]
 80089fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80089fe:	3307      	adds	r3, #7
 8008a00:	f023 0307 	bic.w	r3, r3, #7
 8008a04:	f103 0208 	add.w	r2, r3, #8
 8008a08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a0c:	f8d4 b000 	ldr.w	fp, [r4]
 8008a10:	f8c8 2000 	str.w	r2, [r8]
 8008a14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008a1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a1e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008a22:	f04f 32ff 	mov.w	r2, #4294967295
 8008a26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008a2e:	4b9c      	ldr	r3, [pc, #624]	@ (8008ca0 <_printf_float+0x2cc>)
 8008a30:	f7f7 ffec 	bl	8000a0c <__aeabi_dcmpun>
 8008a34:	bb70      	cbnz	r0, 8008a94 <_printf_float+0xc0>
 8008a36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3e:	4b98      	ldr	r3, [pc, #608]	@ (8008ca0 <_printf_float+0x2cc>)
 8008a40:	f7f7 ffc6 	bl	80009d0 <__aeabi_dcmple>
 8008a44:	bb30      	cbnz	r0, 8008a94 <_printf_float+0xc0>
 8008a46:	2200      	movs	r2, #0
 8008a48:	2300      	movs	r3, #0
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	f7f7 ffb5 	bl	80009bc <__aeabi_dcmplt>
 8008a52:	b110      	cbz	r0, 8008a5a <_printf_float+0x86>
 8008a54:	232d      	movs	r3, #45	@ 0x2d
 8008a56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a5a:	4a92      	ldr	r2, [pc, #584]	@ (8008ca4 <_printf_float+0x2d0>)
 8008a5c:	4b92      	ldr	r3, [pc, #584]	@ (8008ca8 <_printf_float+0x2d4>)
 8008a5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a62:	bf8c      	ite	hi
 8008a64:	4690      	movhi	r8, r2
 8008a66:	4698      	movls	r8, r3
 8008a68:	2303      	movs	r3, #3
 8008a6a:	f04f 0900 	mov.w	r9, #0
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	f02b 0304 	bic.w	r3, fp, #4
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	4633      	mov	r3, r6
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	9700      	str	r7, [sp, #0]
 8008a7e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008a80:	f000 f9d4 	bl	8008e2c <_printf_common>
 8008a84:	3001      	adds	r0, #1
 8008a86:	f040 8090 	bne.w	8008baa <_printf_float+0x1d6>
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8e:	b011      	add	sp, #68	@ 0x44
 8008a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a94:	4642      	mov	r2, r8
 8008a96:	464b      	mov	r3, r9
 8008a98:	4640      	mov	r0, r8
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	f7f7 ffb6 	bl	8000a0c <__aeabi_dcmpun>
 8008aa0:	b148      	cbz	r0, 8008ab6 <_printf_float+0xe2>
 8008aa2:	464b      	mov	r3, r9
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	bfb8      	it	lt
 8008aa8:	232d      	movlt	r3, #45	@ 0x2d
 8008aaa:	4a80      	ldr	r2, [pc, #512]	@ (8008cac <_printf_float+0x2d8>)
 8008aac:	bfb8      	it	lt
 8008aae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8008cb0 <_printf_float+0x2dc>)
 8008ab4:	e7d3      	b.n	8008a5e <_printf_float+0x8a>
 8008ab6:	6863      	ldr	r3, [r4, #4]
 8008ab8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	d13f      	bne.n	8008b40 <_printf_float+0x16c>
 8008ac0:	2306      	movs	r3, #6
 8008ac2:	6063      	str	r3, [r4, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	9206      	str	r2, [sp, #24]
 8008ace:	aa0e      	add	r2, sp, #56	@ 0x38
 8008ad0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008ad4:	aa0d      	add	r2, sp, #52	@ 0x34
 8008ad6:	9203      	str	r2, [sp, #12]
 8008ad8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008adc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	464b      	mov	r3, r9
 8008aea:	910a      	str	r1, [sp, #40]	@ 0x28
 8008aec:	f7ff fed4 	bl	8008898 <__cvt>
 8008af0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008af2:	4680      	mov	r8, r0
 8008af4:	2947      	cmp	r1, #71	@ 0x47
 8008af6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008af8:	d128      	bne.n	8008b4c <_printf_float+0x178>
 8008afa:	1cc8      	adds	r0, r1, #3
 8008afc:	db02      	blt.n	8008b04 <_printf_float+0x130>
 8008afe:	6863      	ldr	r3, [r4, #4]
 8008b00:	4299      	cmp	r1, r3
 8008b02:	dd40      	ble.n	8008b86 <_printf_float+0x1b2>
 8008b04:	f1aa 0a02 	sub.w	sl, sl, #2
 8008b08:	fa5f fa8a 	uxtb.w	sl, sl
 8008b0c:	4652      	mov	r2, sl
 8008b0e:	3901      	subs	r1, #1
 8008b10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008b14:	910d      	str	r1, [sp, #52]	@ 0x34
 8008b16:	f7ff ff23 	bl	8008960 <__exponent>
 8008b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b1c:	4681      	mov	r9, r0
 8008b1e:	1813      	adds	r3, r2, r0
 8008b20:	2a01      	cmp	r2, #1
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	dc02      	bgt.n	8008b2c <_printf_float+0x158>
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	07d2      	lsls	r2, r2, #31
 8008b2a:	d501      	bpl.n	8008b30 <_printf_float+0x15c>
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d09e      	beq.n	8008a76 <_printf_float+0xa2>
 8008b38:	232d      	movs	r3, #45	@ 0x2d
 8008b3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b3e:	e79a      	b.n	8008a76 <_printf_float+0xa2>
 8008b40:	2947      	cmp	r1, #71	@ 0x47
 8008b42:	d1bf      	bne.n	8008ac4 <_printf_float+0xf0>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1bd      	bne.n	8008ac4 <_printf_float+0xf0>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e7ba      	b.n	8008ac2 <_printf_float+0xee>
 8008b4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b50:	d9dc      	bls.n	8008b0c <_printf_float+0x138>
 8008b52:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008b56:	d118      	bne.n	8008b8a <_printf_float+0x1b6>
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	6863      	ldr	r3, [r4, #4]
 8008b5c:	dd0b      	ble.n	8008b76 <_printf_float+0x1a2>
 8008b5e:	6121      	str	r1, [r4, #16]
 8008b60:	b913      	cbnz	r3, 8008b68 <_printf_float+0x194>
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	07d0      	lsls	r0, r2, #31
 8008b66:	d502      	bpl.n	8008b6e <_printf_float+0x19a>
 8008b68:	3301      	adds	r3, #1
 8008b6a:	440b      	add	r3, r1
 8008b6c:	6123      	str	r3, [r4, #16]
 8008b6e:	f04f 0900 	mov.w	r9, #0
 8008b72:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b74:	e7dc      	b.n	8008b30 <_printf_float+0x15c>
 8008b76:	b913      	cbnz	r3, 8008b7e <_printf_float+0x1aa>
 8008b78:	6822      	ldr	r2, [r4, #0]
 8008b7a:	07d2      	lsls	r2, r2, #31
 8008b7c:	d501      	bpl.n	8008b82 <_printf_float+0x1ae>
 8008b7e:	3302      	adds	r3, #2
 8008b80:	e7f4      	b.n	8008b6c <_printf_float+0x198>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e7f2      	b.n	8008b6c <_printf_float+0x198>
 8008b86:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b8c:	4299      	cmp	r1, r3
 8008b8e:	db05      	blt.n	8008b9c <_printf_float+0x1c8>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	6121      	str	r1, [r4, #16]
 8008b94:	07d8      	lsls	r0, r3, #31
 8008b96:	d5ea      	bpl.n	8008b6e <_printf_float+0x19a>
 8008b98:	1c4b      	adds	r3, r1, #1
 8008b9a:	e7e7      	b.n	8008b6c <_printf_float+0x198>
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	bfcc      	ite	gt
 8008ba0:	2201      	movgt	r2, #1
 8008ba2:	f1c1 0202 	rsble	r2, r1, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	e7e0      	b.n	8008b6c <_printf_float+0x198>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	055a      	lsls	r2, r3, #21
 8008bae:	d407      	bmi.n	8008bc0 <_printf_float+0x1ec>
 8008bb0:	6923      	ldr	r3, [r4, #16]
 8008bb2:	4642      	mov	r2, r8
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b8      	blx	r7
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d12b      	bne.n	8008c16 <_printf_float+0x242>
 8008bbe:	e764      	b.n	8008a8a <_printf_float+0xb6>
 8008bc0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008bc4:	f240 80dc 	bls.w	8008d80 <_printf_float+0x3ac>
 8008bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f7f7 feea 	bl	80009a8 <__aeabi_dcmpeq>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d033      	beq.n	8008c40 <_printf_float+0x26c>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4628      	mov	r0, r5
 8008bde:	4a35      	ldr	r2, [pc, #212]	@ (8008cb4 <_printf_float+0x2e0>)
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f af51 	beq.w	8008a8a <_printf_float+0xb6>
 8008be8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008bec:	4543      	cmp	r3, r8
 8008bee:	db02      	blt.n	8008bf6 <_printf_float+0x222>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	07d8      	lsls	r0, r3, #31
 8008bf4:	d50f      	bpl.n	8008c16 <_printf_float+0x242>
 8008bf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	f43f af42 	beq.w	8008a8a <_printf_float+0xb6>
 8008c06:	f04f 0900 	mov.w	r9, #0
 8008c0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c0e:	f104 0a1a 	add.w	sl, r4, #26
 8008c12:	45c8      	cmp	r8, r9
 8008c14:	dc09      	bgt.n	8008c2a <_printf_float+0x256>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	079b      	lsls	r3, r3, #30
 8008c1a:	f100 8102 	bmi.w	8008e22 <_printf_float+0x44e>
 8008c1e:	68e0      	ldr	r0, [r4, #12]
 8008c20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c22:	4298      	cmp	r0, r3
 8008c24:	bfb8      	it	lt
 8008c26:	4618      	movlt	r0, r3
 8008c28:	e731      	b.n	8008a8e <_printf_float+0xba>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4652      	mov	r2, sl
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	f43f af28 	beq.w	8008a8a <_printf_float+0xb6>
 8008c3a:	f109 0901 	add.w	r9, r9, #1
 8008c3e:	e7e8      	b.n	8008c12 <_printf_float+0x23e>
 8008c40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dc38      	bgt.n	8008cb8 <_printf_float+0x2e4>
 8008c46:	2301      	movs	r3, #1
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	4a19      	ldr	r2, [pc, #100]	@ (8008cb4 <_printf_float+0x2e0>)
 8008c4e:	47b8      	blx	r7
 8008c50:	3001      	adds	r0, #1
 8008c52:	f43f af1a 	beq.w	8008a8a <_printf_float+0xb6>
 8008c56:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008c5a:	ea59 0303 	orrs.w	r3, r9, r3
 8008c5e:	d102      	bne.n	8008c66 <_printf_float+0x292>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	07d9      	lsls	r1, r3, #31
 8008c64:	d5d7      	bpl.n	8008c16 <_printf_float+0x242>
 8008c66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	47b8      	blx	r7
 8008c70:	3001      	adds	r0, #1
 8008c72:	f43f af0a 	beq.w	8008a8a <_printf_float+0xb6>
 8008c76:	f04f 0a00 	mov.w	sl, #0
 8008c7a:	f104 0b1a 	add.w	fp, r4, #26
 8008c7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c80:	425b      	negs	r3, r3
 8008c82:	4553      	cmp	r3, sl
 8008c84:	dc01      	bgt.n	8008c8a <_printf_float+0x2b6>
 8008c86:	464b      	mov	r3, r9
 8008c88:	e793      	b.n	8008bb2 <_printf_float+0x1de>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	465a      	mov	r2, fp
 8008c8e:	4631      	mov	r1, r6
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b8      	blx	r7
 8008c94:	3001      	adds	r0, #1
 8008c96:	f43f aef8 	beq.w	8008a8a <_printf_float+0xb6>
 8008c9a:	f10a 0a01 	add.w	sl, sl, #1
 8008c9e:	e7ee      	b.n	8008c7e <_printf_float+0x2aa>
 8008ca0:	7fefffff 	.word	0x7fefffff
 8008ca4:	0800c0dc 	.word	0x0800c0dc
 8008ca8:	0800c0d8 	.word	0x0800c0d8
 8008cac:	0800c0e4 	.word	0x0800c0e4
 8008cb0:	0800c0e0 	.word	0x0800c0e0
 8008cb4:	0800c0e8 	.word	0x0800c0e8
 8008cb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008cba:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008cbe:	4553      	cmp	r3, sl
 8008cc0:	bfa8      	it	ge
 8008cc2:	4653      	movge	r3, sl
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	4699      	mov	r9, r3
 8008cc8:	dc36      	bgt.n	8008d38 <_printf_float+0x364>
 8008cca:	f04f 0b00 	mov.w	fp, #0
 8008cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cd2:	f104 021a 	add.w	r2, r4, #26
 8008cd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008cd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cda:	eba3 0309 	sub.w	r3, r3, r9
 8008cde:	455b      	cmp	r3, fp
 8008ce0:	dc31      	bgt.n	8008d46 <_printf_float+0x372>
 8008ce2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ce4:	459a      	cmp	sl, r3
 8008ce6:	dc3a      	bgt.n	8008d5e <_printf_float+0x38a>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	07da      	lsls	r2, r3, #31
 8008cec:	d437      	bmi.n	8008d5e <_printf_float+0x38a>
 8008cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cf0:	ebaa 0903 	sub.w	r9, sl, r3
 8008cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cf6:	ebaa 0303 	sub.w	r3, sl, r3
 8008cfa:	4599      	cmp	r9, r3
 8008cfc:	bfa8      	it	ge
 8008cfe:	4699      	movge	r9, r3
 8008d00:	f1b9 0f00 	cmp.w	r9, #0
 8008d04:	dc33      	bgt.n	8008d6e <_printf_float+0x39a>
 8008d06:	f04f 0800 	mov.w	r8, #0
 8008d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d0e:	f104 0b1a 	add.w	fp, r4, #26
 8008d12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d14:	ebaa 0303 	sub.w	r3, sl, r3
 8008d18:	eba3 0309 	sub.w	r3, r3, r9
 8008d1c:	4543      	cmp	r3, r8
 8008d1e:	f77f af7a 	ble.w	8008c16 <_printf_float+0x242>
 8008d22:	2301      	movs	r3, #1
 8008d24:	465a      	mov	r2, fp
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f43f aeac 	beq.w	8008a8a <_printf_float+0xb6>
 8008d32:	f108 0801 	add.w	r8, r8, #1
 8008d36:	e7ec      	b.n	8008d12 <_printf_float+0x33e>
 8008d38:	4642      	mov	r2, r8
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	47b8      	blx	r7
 8008d40:	3001      	adds	r0, #1
 8008d42:	d1c2      	bne.n	8008cca <_printf_float+0x2f6>
 8008d44:	e6a1      	b.n	8008a8a <_printf_float+0xb6>
 8008d46:	2301      	movs	r3, #1
 8008d48:	4631      	mov	r1, r6
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	920a      	str	r2, [sp, #40]	@ 0x28
 8008d4e:	47b8      	blx	r7
 8008d50:	3001      	adds	r0, #1
 8008d52:	f43f ae9a 	beq.w	8008a8a <_printf_float+0xb6>
 8008d56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d58:	f10b 0b01 	add.w	fp, fp, #1
 8008d5c:	e7bb      	b.n	8008cd6 <_printf_float+0x302>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d64:	4628      	mov	r0, r5
 8008d66:	47b8      	blx	r7
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d1c0      	bne.n	8008cee <_printf_float+0x31a>
 8008d6c:	e68d      	b.n	8008a8a <_printf_float+0xb6>
 8008d6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d70:	464b      	mov	r3, r9
 8008d72:	4631      	mov	r1, r6
 8008d74:	4628      	mov	r0, r5
 8008d76:	4442      	add	r2, r8
 8008d78:	47b8      	blx	r7
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d1c3      	bne.n	8008d06 <_printf_float+0x332>
 8008d7e:	e684      	b.n	8008a8a <_printf_float+0xb6>
 8008d80:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008d84:	f1ba 0f01 	cmp.w	sl, #1
 8008d88:	dc01      	bgt.n	8008d8e <_printf_float+0x3ba>
 8008d8a:	07db      	lsls	r3, r3, #31
 8008d8c:	d536      	bpl.n	8008dfc <_printf_float+0x428>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4642      	mov	r2, r8
 8008d92:	4631      	mov	r1, r6
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b8      	blx	r7
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f43f ae76 	beq.w	8008a8a <_printf_float+0xb6>
 8008d9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008da2:	4631      	mov	r1, r6
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b8      	blx	r7
 8008da8:	3001      	adds	r0, #1
 8008daa:	f43f ae6e 	beq.w	8008a8a <_printf_float+0xb6>
 8008dae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008db2:	2200      	movs	r2, #0
 8008db4:	2300      	movs	r3, #0
 8008db6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dba:	f7f7 fdf5 	bl	80009a8 <__aeabi_dcmpeq>
 8008dbe:	b9c0      	cbnz	r0, 8008df2 <_printf_float+0x41e>
 8008dc0:	4653      	mov	r3, sl
 8008dc2:	f108 0201 	add.w	r2, r8, #1
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4628      	mov	r0, r5
 8008dca:	47b8      	blx	r7
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d10c      	bne.n	8008dea <_printf_float+0x416>
 8008dd0:	e65b      	b.n	8008a8a <_printf_float+0xb6>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	465a      	mov	r2, fp
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	4628      	mov	r0, r5
 8008dda:	47b8      	blx	r7
 8008ddc:	3001      	adds	r0, #1
 8008dde:	f43f ae54 	beq.w	8008a8a <_printf_float+0xb6>
 8008de2:	f108 0801 	add.w	r8, r8, #1
 8008de6:	45d0      	cmp	r8, sl
 8008de8:	dbf3      	blt.n	8008dd2 <_printf_float+0x3fe>
 8008dea:	464b      	mov	r3, r9
 8008dec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008df0:	e6e0      	b.n	8008bb4 <_printf_float+0x1e0>
 8008df2:	f04f 0800 	mov.w	r8, #0
 8008df6:	f104 0b1a 	add.w	fp, r4, #26
 8008dfa:	e7f4      	b.n	8008de6 <_printf_float+0x412>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	4642      	mov	r2, r8
 8008e00:	e7e1      	b.n	8008dc6 <_printf_float+0x3f2>
 8008e02:	2301      	movs	r3, #1
 8008e04:	464a      	mov	r2, r9
 8008e06:	4631      	mov	r1, r6
 8008e08:	4628      	mov	r0, r5
 8008e0a:	47b8      	blx	r7
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	f43f ae3c 	beq.w	8008a8a <_printf_float+0xb6>
 8008e12:	f108 0801 	add.w	r8, r8, #1
 8008e16:	68e3      	ldr	r3, [r4, #12]
 8008e18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008e1a:	1a5b      	subs	r3, r3, r1
 8008e1c:	4543      	cmp	r3, r8
 8008e1e:	dcf0      	bgt.n	8008e02 <_printf_float+0x42e>
 8008e20:	e6fd      	b.n	8008c1e <_printf_float+0x24a>
 8008e22:	f04f 0800 	mov.w	r8, #0
 8008e26:	f104 0919 	add.w	r9, r4, #25
 8008e2a:	e7f4      	b.n	8008e16 <_printf_float+0x442>

08008e2c <_printf_common>:
 8008e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e30:	4616      	mov	r6, r2
 8008e32:	4698      	mov	r8, r3
 8008e34:	688a      	ldr	r2, [r1, #8]
 8008e36:	690b      	ldr	r3, [r1, #16]
 8008e38:	4607      	mov	r7, r0
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	bfb8      	it	lt
 8008e3e:	4613      	movlt	r3, r2
 8008e40:	6033      	str	r3, [r6, #0]
 8008e42:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e46:	460c      	mov	r4, r1
 8008e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e4c:	b10a      	cbz	r2, 8008e52 <_printf_common+0x26>
 8008e4e:	3301      	adds	r3, #1
 8008e50:	6033      	str	r3, [r6, #0]
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	0699      	lsls	r1, r3, #26
 8008e56:	bf42      	ittt	mi
 8008e58:	6833      	ldrmi	r3, [r6, #0]
 8008e5a:	3302      	addmi	r3, #2
 8008e5c:	6033      	strmi	r3, [r6, #0]
 8008e5e:	6825      	ldr	r5, [r4, #0]
 8008e60:	f015 0506 	ands.w	r5, r5, #6
 8008e64:	d106      	bne.n	8008e74 <_printf_common+0x48>
 8008e66:	f104 0a19 	add.w	sl, r4, #25
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	6832      	ldr	r2, [r6, #0]
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	dc2b      	bgt.n	8008ecc <_printf_common+0xa0>
 8008e74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e78:	6822      	ldr	r2, [r4, #0]
 8008e7a:	3b00      	subs	r3, #0
 8008e7c:	bf18      	it	ne
 8008e7e:	2301      	movne	r3, #1
 8008e80:	0692      	lsls	r2, r2, #26
 8008e82:	d430      	bmi.n	8008ee6 <_printf_common+0xba>
 8008e84:	4641      	mov	r1, r8
 8008e86:	4638      	mov	r0, r7
 8008e88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e8c:	47c8      	blx	r9
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d023      	beq.n	8008eda <_printf_common+0xae>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	6922      	ldr	r2, [r4, #16]
 8008e96:	f003 0306 	and.w	r3, r3, #6
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	bf14      	ite	ne
 8008e9e:	2500      	movne	r5, #0
 8008ea0:	6833      	ldreq	r3, [r6, #0]
 8008ea2:	f04f 0600 	mov.w	r6, #0
 8008ea6:	bf08      	it	eq
 8008ea8:	68e5      	ldreq	r5, [r4, #12]
 8008eaa:	f104 041a 	add.w	r4, r4, #26
 8008eae:	bf08      	it	eq
 8008eb0:	1aed      	subeq	r5, r5, r3
 8008eb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008eb6:	bf08      	it	eq
 8008eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	bfc4      	itt	gt
 8008ec0:	1a9b      	subgt	r3, r3, r2
 8008ec2:	18ed      	addgt	r5, r5, r3
 8008ec4:	42b5      	cmp	r5, r6
 8008ec6:	d11a      	bne.n	8008efe <_printf_common+0xd2>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e008      	b.n	8008ede <_printf_common+0xb2>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	4652      	mov	r2, sl
 8008ed0:	4641      	mov	r1, r8
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	47c8      	blx	r9
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	d103      	bne.n	8008ee2 <_printf_common+0xb6>
 8008eda:	f04f 30ff 	mov.w	r0, #4294967295
 8008ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee2:	3501      	adds	r5, #1
 8008ee4:	e7c1      	b.n	8008e6a <_printf_common+0x3e>
 8008ee6:	2030      	movs	r0, #48	@ 0x30
 8008ee8:	18e1      	adds	r1, r4, r3
 8008eea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ef4:	4422      	add	r2, r4
 8008ef6:	3302      	adds	r3, #2
 8008ef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008efc:	e7c2      	b.n	8008e84 <_printf_common+0x58>
 8008efe:	2301      	movs	r3, #1
 8008f00:	4622      	mov	r2, r4
 8008f02:	4641      	mov	r1, r8
 8008f04:	4638      	mov	r0, r7
 8008f06:	47c8      	blx	r9
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d0e6      	beq.n	8008eda <_printf_common+0xae>
 8008f0c:	3601      	adds	r6, #1
 8008f0e:	e7d9      	b.n	8008ec4 <_printf_common+0x98>

08008f10 <_printf_i>:
 8008f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f14:	7e0f      	ldrb	r7, [r1, #24]
 8008f16:	4691      	mov	r9, r2
 8008f18:	2f78      	cmp	r7, #120	@ 0x78
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	469a      	mov	sl, r3
 8008f20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f26:	d807      	bhi.n	8008f38 <_printf_i+0x28>
 8008f28:	2f62      	cmp	r7, #98	@ 0x62
 8008f2a:	d80a      	bhi.n	8008f42 <_printf_i+0x32>
 8008f2c:	2f00      	cmp	r7, #0
 8008f2e:	f000 80d1 	beq.w	80090d4 <_printf_i+0x1c4>
 8008f32:	2f58      	cmp	r7, #88	@ 0x58
 8008f34:	f000 80b8 	beq.w	80090a8 <_printf_i+0x198>
 8008f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f40:	e03a      	b.n	8008fb8 <_printf_i+0xa8>
 8008f42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f46:	2b15      	cmp	r3, #21
 8008f48:	d8f6      	bhi.n	8008f38 <_printf_i+0x28>
 8008f4a:	a101      	add	r1, pc, #4	@ (adr r1, 8008f50 <_printf_i+0x40>)
 8008f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f50:	08008fa9 	.word	0x08008fa9
 8008f54:	08008fbd 	.word	0x08008fbd
 8008f58:	08008f39 	.word	0x08008f39
 8008f5c:	08008f39 	.word	0x08008f39
 8008f60:	08008f39 	.word	0x08008f39
 8008f64:	08008f39 	.word	0x08008f39
 8008f68:	08008fbd 	.word	0x08008fbd
 8008f6c:	08008f39 	.word	0x08008f39
 8008f70:	08008f39 	.word	0x08008f39
 8008f74:	08008f39 	.word	0x08008f39
 8008f78:	08008f39 	.word	0x08008f39
 8008f7c:	080090bb 	.word	0x080090bb
 8008f80:	08008fe7 	.word	0x08008fe7
 8008f84:	08009075 	.word	0x08009075
 8008f88:	08008f39 	.word	0x08008f39
 8008f8c:	08008f39 	.word	0x08008f39
 8008f90:	080090dd 	.word	0x080090dd
 8008f94:	08008f39 	.word	0x08008f39
 8008f98:	08008fe7 	.word	0x08008fe7
 8008f9c:	08008f39 	.word	0x08008f39
 8008fa0:	08008f39 	.word	0x08008f39
 8008fa4:	0800907d 	.word	0x0800907d
 8008fa8:	6833      	ldr	r3, [r6, #0]
 8008faa:	1d1a      	adds	r2, r3, #4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6032      	str	r2, [r6, #0]
 8008fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e09c      	b.n	80090f6 <_printf_i+0x1e6>
 8008fbc:	6833      	ldr	r3, [r6, #0]
 8008fbe:	6820      	ldr	r0, [r4, #0]
 8008fc0:	1d19      	adds	r1, r3, #4
 8008fc2:	6031      	str	r1, [r6, #0]
 8008fc4:	0606      	lsls	r6, r0, #24
 8008fc6:	d501      	bpl.n	8008fcc <_printf_i+0xbc>
 8008fc8:	681d      	ldr	r5, [r3, #0]
 8008fca:	e003      	b.n	8008fd4 <_printf_i+0xc4>
 8008fcc:	0645      	lsls	r5, r0, #25
 8008fce:	d5fb      	bpl.n	8008fc8 <_printf_i+0xb8>
 8008fd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	da03      	bge.n	8008fe0 <_printf_i+0xd0>
 8008fd8:	232d      	movs	r3, #45	@ 0x2d
 8008fda:	426d      	negs	r5, r5
 8008fdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fe0:	230a      	movs	r3, #10
 8008fe2:	4858      	ldr	r0, [pc, #352]	@ (8009144 <_printf_i+0x234>)
 8008fe4:	e011      	b.n	800900a <_printf_i+0xfa>
 8008fe6:	6821      	ldr	r1, [r4, #0]
 8008fe8:	6833      	ldr	r3, [r6, #0]
 8008fea:	0608      	lsls	r0, r1, #24
 8008fec:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ff0:	d402      	bmi.n	8008ff8 <_printf_i+0xe8>
 8008ff2:	0649      	lsls	r1, r1, #25
 8008ff4:	bf48      	it	mi
 8008ff6:	b2ad      	uxthmi	r5, r5
 8008ff8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ffa:	6033      	str	r3, [r6, #0]
 8008ffc:	bf14      	ite	ne
 8008ffe:	230a      	movne	r3, #10
 8009000:	2308      	moveq	r3, #8
 8009002:	4850      	ldr	r0, [pc, #320]	@ (8009144 <_printf_i+0x234>)
 8009004:	2100      	movs	r1, #0
 8009006:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800900a:	6866      	ldr	r6, [r4, #4]
 800900c:	2e00      	cmp	r6, #0
 800900e:	60a6      	str	r6, [r4, #8]
 8009010:	db05      	blt.n	800901e <_printf_i+0x10e>
 8009012:	6821      	ldr	r1, [r4, #0]
 8009014:	432e      	orrs	r6, r5
 8009016:	f021 0104 	bic.w	r1, r1, #4
 800901a:	6021      	str	r1, [r4, #0]
 800901c:	d04b      	beq.n	80090b6 <_printf_i+0x1a6>
 800901e:	4616      	mov	r6, r2
 8009020:	fbb5 f1f3 	udiv	r1, r5, r3
 8009024:	fb03 5711 	mls	r7, r3, r1, r5
 8009028:	5dc7      	ldrb	r7, [r0, r7]
 800902a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800902e:	462f      	mov	r7, r5
 8009030:	42bb      	cmp	r3, r7
 8009032:	460d      	mov	r5, r1
 8009034:	d9f4      	bls.n	8009020 <_printf_i+0x110>
 8009036:	2b08      	cmp	r3, #8
 8009038:	d10b      	bne.n	8009052 <_printf_i+0x142>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	07df      	lsls	r7, r3, #31
 800903e:	d508      	bpl.n	8009052 <_printf_i+0x142>
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	6861      	ldr	r1, [r4, #4]
 8009044:	4299      	cmp	r1, r3
 8009046:	bfde      	ittt	le
 8009048:	2330      	movle	r3, #48	@ 0x30
 800904a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800904e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009052:	1b92      	subs	r2, r2, r6
 8009054:	6122      	str	r2, [r4, #16]
 8009056:	464b      	mov	r3, r9
 8009058:	4621      	mov	r1, r4
 800905a:	4640      	mov	r0, r8
 800905c:	f8cd a000 	str.w	sl, [sp]
 8009060:	aa03      	add	r2, sp, #12
 8009062:	f7ff fee3 	bl	8008e2c <_printf_common>
 8009066:	3001      	adds	r0, #1
 8009068:	d14a      	bne.n	8009100 <_printf_i+0x1f0>
 800906a:	f04f 30ff 	mov.w	r0, #4294967295
 800906e:	b004      	add	sp, #16
 8009070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	f043 0320 	orr.w	r3, r3, #32
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	2778      	movs	r7, #120	@ 0x78
 800907e:	4832      	ldr	r0, [pc, #200]	@ (8009148 <_printf_i+0x238>)
 8009080:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	6831      	ldr	r1, [r6, #0]
 8009088:	061f      	lsls	r7, r3, #24
 800908a:	f851 5b04 	ldr.w	r5, [r1], #4
 800908e:	d402      	bmi.n	8009096 <_printf_i+0x186>
 8009090:	065f      	lsls	r7, r3, #25
 8009092:	bf48      	it	mi
 8009094:	b2ad      	uxthmi	r5, r5
 8009096:	6031      	str	r1, [r6, #0]
 8009098:	07d9      	lsls	r1, r3, #31
 800909a:	bf44      	itt	mi
 800909c:	f043 0320 	orrmi.w	r3, r3, #32
 80090a0:	6023      	strmi	r3, [r4, #0]
 80090a2:	b11d      	cbz	r5, 80090ac <_printf_i+0x19c>
 80090a4:	2310      	movs	r3, #16
 80090a6:	e7ad      	b.n	8009004 <_printf_i+0xf4>
 80090a8:	4826      	ldr	r0, [pc, #152]	@ (8009144 <_printf_i+0x234>)
 80090aa:	e7e9      	b.n	8009080 <_printf_i+0x170>
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	f023 0320 	bic.w	r3, r3, #32
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	e7f6      	b.n	80090a4 <_printf_i+0x194>
 80090b6:	4616      	mov	r6, r2
 80090b8:	e7bd      	b.n	8009036 <_printf_i+0x126>
 80090ba:	6833      	ldr	r3, [r6, #0]
 80090bc:	6825      	ldr	r5, [r4, #0]
 80090be:	1d18      	adds	r0, r3, #4
 80090c0:	6961      	ldr	r1, [r4, #20]
 80090c2:	6030      	str	r0, [r6, #0]
 80090c4:	062e      	lsls	r6, r5, #24
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	d501      	bpl.n	80090ce <_printf_i+0x1be>
 80090ca:	6019      	str	r1, [r3, #0]
 80090cc:	e002      	b.n	80090d4 <_printf_i+0x1c4>
 80090ce:	0668      	lsls	r0, r5, #25
 80090d0:	d5fb      	bpl.n	80090ca <_printf_i+0x1ba>
 80090d2:	8019      	strh	r1, [r3, #0]
 80090d4:	2300      	movs	r3, #0
 80090d6:	4616      	mov	r6, r2
 80090d8:	6123      	str	r3, [r4, #16]
 80090da:	e7bc      	b.n	8009056 <_printf_i+0x146>
 80090dc:	6833      	ldr	r3, [r6, #0]
 80090de:	2100      	movs	r1, #0
 80090e0:	1d1a      	adds	r2, r3, #4
 80090e2:	6032      	str	r2, [r6, #0]
 80090e4:	681e      	ldr	r6, [r3, #0]
 80090e6:	6862      	ldr	r2, [r4, #4]
 80090e8:	4630      	mov	r0, r6
 80090ea:	f000 fa1e 	bl	800952a <memchr>
 80090ee:	b108      	cbz	r0, 80090f4 <_printf_i+0x1e4>
 80090f0:	1b80      	subs	r0, r0, r6
 80090f2:	6060      	str	r0, [r4, #4]
 80090f4:	6863      	ldr	r3, [r4, #4]
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	2300      	movs	r3, #0
 80090fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090fe:	e7aa      	b.n	8009056 <_printf_i+0x146>
 8009100:	4632      	mov	r2, r6
 8009102:	4649      	mov	r1, r9
 8009104:	4640      	mov	r0, r8
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	47d0      	blx	sl
 800910a:	3001      	adds	r0, #1
 800910c:	d0ad      	beq.n	800906a <_printf_i+0x15a>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	079b      	lsls	r3, r3, #30
 8009112:	d413      	bmi.n	800913c <_printf_i+0x22c>
 8009114:	68e0      	ldr	r0, [r4, #12]
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	4298      	cmp	r0, r3
 800911a:	bfb8      	it	lt
 800911c:	4618      	movlt	r0, r3
 800911e:	e7a6      	b.n	800906e <_printf_i+0x15e>
 8009120:	2301      	movs	r3, #1
 8009122:	4632      	mov	r2, r6
 8009124:	4649      	mov	r1, r9
 8009126:	4640      	mov	r0, r8
 8009128:	47d0      	blx	sl
 800912a:	3001      	adds	r0, #1
 800912c:	d09d      	beq.n	800906a <_printf_i+0x15a>
 800912e:	3501      	adds	r5, #1
 8009130:	68e3      	ldr	r3, [r4, #12]
 8009132:	9903      	ldr	r1, [sp, #12]
 8009134:	1a5b      	subs	r3, r3, r1
 8009136:	42ab      	cmp	r3, r5
 8009138:	dcf2      	bgt.n	8009120 <_printf_i+0x210>
 800913a:	e7eb      	b.n	8009114 <_printf_i+0x204>
 800913c:	2500      	movs	r5, #0
 800913e:	f104 0619 	add.w	r6, r4, #25
 8009142:	e7f5      	b.n	8009130 <_printf_i+0x220>
 8009144:	0800c0ea 	.word	0x0800c0ea
 8009148:	0800c0fb 	.word	0x0800c0fb

0800914c <std>:
 800914c:	2300      	movs	r3, #0
 800914e:	b510      	push	{r4, lr}
 8009150:	4604      	mov	r4, r0
 8009152:	e9c0 3300 	strd	r3, r3, [r0]
 8009156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800915a:	6083      	str	r3, [r0, #8]
 800915c:	8181      	strh	r1, [r0, #12]
 800915e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009160:	81c2      	strh	r2, [r0, #14]
 8009162:	6183      	str	r3, [r0, #24]
 8009164:	4619      	mov	r1, r3
 8009166:	2208      	movs	r2, #8
 8009168:	305c      	adds	r0, #92	@ 0x5c
 800916a:	f000 f92a 	bl	80093c2 <memset>
 800916e:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <std+0x58>)
 8009170:	6224      	str	r4, [r4, #32]
 8009172:	6263      	str	r3, [r4, #36]	@ 0x24
 8009174:	4b0c      	ldr	r3, [pc, #48]	@ (80091a8 <std+0x5c>)
 8009176:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009178:	4b0c      	ldr	r3, [pc, #48]	@ (80091ac <std+0x60>)
 800917a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800917c:	4b0c      	ldr	r3, [pc, #48]	@ (80091b0 <std+0x64>)
 800917e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009180:	4b0c      	ldr	r3, [pc, #48]	@ (80091b4 <std+0x68>)
 8009182:	429c      	cmp	r4, r3
 8009184:	d006      	beq.n	8009194 <std+0x48>
 8009186:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800918a:	4294      	cmp	r4, r2
 800918c:	d002      	beq.n	8009194 <std+0x48>
 800918e:	33d0      	adds	r3, #208	@ 0xd0
 8009190:	429c      	cmp	r4, r3
 8009192:	d105      	bne.n	80091a0 <std+0x54>
 8009194:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800919c:	f000 b9c2 	b.w	8009524 <__retarget_lock_init_recursive>
 80091a0:	bd10      	pop	{r4, pc}
 80091a2:	bf00      	nop
 80091a4:	0800933d 	.word	0x0800933d
 80091a8:	0800935f 	.word	0x0800935f
 80091ac:	08009397 	.word	0x08009397
 80091b0:	080093bb 	.word	0x080093bb
 80091b4:	20001354 	.word	0x20001354

080091b8 <stdio_exit_handler>:
 80091b8:	4a02      	ldr	r2, [pc, #8]	@ (80091c4 <stdio_exit_handler+0xc>)
 80091ba:	4903      	ldr	r1, [pc, #12]	@ (80091c8 <stdio_exit_handler+0x10>)
 80091bc:	4803      	ldr	r0, [pc, #12]	@ (80091cc <stdio_exit_handler+0x14>)
 80091be:	f000 b869 	b.w	8009294 <_fwalk_sglue>
 80091c2:	bf00      	nop
 80091c4:	20000010 	.word	0x20000010
 80091c8:	0800b7c5 	.word	0x0800b7c5
 80091cc:	2000018c 	.word	0x2000018c

080091d0 <cleanup_stdio>:
 80091d0:	6841      	ldr	r1, [r0, #4]
 80091d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009204 <cleanup_stdio+0x34>)
 80091d4:	b510      	push	{r4, lr}
 80091d6:	4299      	cmp	r1, r3
 80091d8:	4604      	mov	r4, r0
 80091da:	d001      	beq.n	80091e0 <cleanup_stdio+0x10>
 80091dc:	f002 faf2 	bl	800b7c4 <_fflush_r>
 80091e0:	68a1      	ldr	r1, [r4, #8]
 80091e2:	4b09      	ldr	r3, [pc, #36]	@ (8009208 <cleanup_stdio+0x38>)
 80091e4:	4299      	cmp	r1, r3
 80091e6:	d002      	beq.n	80091ee <cleanup_stdio+0x1e>
 80091e8:	4620      	mov	r0, r4
 80091ea:	f002 faeb 	bl	800b7c4 <_fflush_r>
 80091ee:	68e1      	ldr	r1, [r4, #12]
 80091f0:	4b06      	ldr	r3, [pc, #24]	@ (800920c <cleanup_stdio+0x3c>)
 80091f2:	4299      	cmp	r1, r3
 80091f4:	d004      	beq.n	8009200 <cleanup_stdio+0x30>
 80091f6:	4620      	mov	r0, r4
 80091f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091fc:	f002 bae2 	b.w	800b7c4 <_fflush_r>
 8009200:	bd10      	pop	{r4, pc}
 8009202:	bf00      	nop
 8009204:	20001354 	.word	0x20001354
 8009208:	200013bc 	.word	0x200013bc
 800920c:	20001424 	.word	0x20001424

08009210 <global_stdio_init.part.0>:
 8009210:	b510      	push	{r4, lr}
 8009212:	4b0b      	ldr	r3, [pc, #44]	@ (8009240 <global_stdio_init.part.0+0x30>)
 8009214:	4c0b      	ldr	r4, [pc, #44]	@ (8009244 <global_stdio_init.part.0+0x34>)
 8009216:	4a0c      	ldr	r2, [pc, #48]	@ (8009248 <global_stdio_init.part.0+0x38>)
 8009218:	4620      	mov	r0, r4
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	2104      	movs	r1, #4
 800921e:	2200      	movs	r2, #0
 8009220:	f7ff ff94 	bl	800914c <std>
 8009224:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009228:	2201      	movs	r2, #1
 800922a:	2109      	movs	r1, #9
 800922c:	f7ff ff8e 	bl	800914c <std>
 8009230:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009234:	2202      	movs	r2, #2
 8009236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800923a:	2112      	movs	r1, #18
 800923c:	f7ff bf86 	b.w	800914c <std>
 8009240:	2000148c 	.word	0x2000148c
 8009244:	20001354 	.word	0x20001354
 8009248:	080091b9 	.word	0x080091b9

0800924c <__sfp_lock_acquire>:
 800924c:	4801      	ldr	r0, [pc, #4]	@ (8009254 <__sfp_lock_acquire+0x8>)
 800924e:	f000 b96a 	b.w	8009526 <__retarget_lock_acquire_recursive>
 8009252:	bf00      	nop
 8009254:	20001495 	.word	0x20001495

08009258 <__sfp_lock_release>:
 8009258:	4801      	ldr	r0, [pc, #4]	@ (8009260 <__sfp_lock_release+0x8>)
 800925a:	f000 b965 	b.w	8009528 <__retarget_lock_release_recursive>
 800925e:	bf00      	nop
 8009260:	20001495 	.word	0x20001495

08009264 <__sinit>:
 8009264:	b510      	push	{r4, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	f7ff fff0 	bl	800924c <__sfp_lock_acquire>
 800926c:	6a23      	ldr	r3, [r4, #32]
 800926e:	b11b      	cbz	r3, 8009278 <__sinit+0x14>
 8009270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009274:	f7ff bff0 	b.w	8009258 <__sfp_lock_release>
 8009278:	4b04      	ldr	r3, [pc, #16]	@ (800928c <__sinit+0x28>)
 800927a:	6223      	str	r3, [r4, #32]
 800927c:	4b04      	ldr	r3, [pc, #16]	@ (8009290 <__sinit+0x2c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1f5      	bne.n	8009270 <__sinit+0xc>
 8009284:	f7ff ffc4 	bl	8009210 <global_stdio_init.part.0>
 8009288:	e7f2      	b.n	8009270 <__sinit+0xc>
 800928a:	bf00      	nop
 800928c:	080091d1 	.word	0x080091d1
 8009290:	2000148c 	.word	0x2000148c

08009294 <_fwalk_sglue>:
 8009294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009298:	4607      	mov	r7, r0
 800929a:	4688      	mov	r8, r1
 800929c:	4614      	mov	r4, r2
 800929e:	2600      	movs	r6, #0
 80092a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092a4:	f1b9 0901 	subs.w	r9, r9, #1
 80092a8:	d505      	bpl.n	80092b6 <_fwalk_sglue+0x22>
 80092aa:	6824      	ldr	r4, [r4, #0]
 80092ac:	2c00      	cmp	r4, #0
 80092ae:	d1f7      	bne.n	80092a0 <_fwalk_sglue+0xc>
 80092b0:	4630      	mov	r0, r6
 80092b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d907      	bls.n	80092cc <_fwalk_sglue+0x38>
 80092bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092c0:	3301      	adds	r3, #1
 80092c2:	d003      	beq.n	80092cc <_fwalk_sglue+0x38>
 80092c4:	4629      	mov	r1, r5
 80092c6:	4638      	mov	r0, r7
 80092c8:	47c0      	blx	r8
 80092ca:	4306      	orrs	r6, r0
 80092cc:	3568      	adds	r5, #104	@ 0x68
 80092ce:	e7e9      	b.n	80092a4 <_fwalk_sglue+0x10>

080092d0 <sniprintf>:
 80092d0:	b40c      	push	{r2, r3}
 80092d2:	b530      	push	{r4, r5, lr}
 80092d4:	4b18      	ldr	r3, [pc, #96]	@ (8009338 <sniprintf+0x68>)
 80092d6:	1e0c      	subs	r4, r1, #0
 80092d8:	681d      	ldr	r5, [r3, #0]
 80092da:	b09d      	sub	sp, #116	@ 0x74
 80092dc:	da08      	bge.n	80092f0 <sniprintf+0x20>
 80092de:	238b      	movs	r3, #139	@ 0x8b
 80092e0:	f04f 30ff 	mov.w	r0, #4294967295
 80092e4:	602b      	str	r3, [r5, #0]
 80092e6:	b01d      	add	sp, #116	@ 0x74
 80092e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092ec:	b002      	add	sp, #8
 80092ee:	4770      	bx	lr
 80092f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80092f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092f8:	f04f 0300 	mov.w	r3, #0
 80092fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80092fe:	bf0c      	ite	eq
 8009300:	4623      	moveq	r3, r4
 8009302:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009306:	9304      	str	r3, [sp, #16]
 8009308:	9307      	str	r3, [sp, #28]
 800930a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800930e:	9002      	str	r0, [sp, #8]
 8009310:	9006      	str	r0, [sp, #24]
 8009312:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009316:	4628      	mov	r0, r5
 8009318:	ab21      	add	r3, sp, #132	@ 0x84
 800931a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800931c:	a902      	add	r1, sp, #8
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	f002 f8d4 	bl	800b4cc <_svfiprintf_r>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	bfbc      	itt	lt
 8009328:	238b      	movlt	r3, #139	@ 0x8b
 800932a:	602b      	strlt	r3, [r5, #0]
 800932c:	2c00      	cmp	r4, #0
 800932e:	d0da      	beq.n	80092e6 <sniprintf+0x16>
 8009330:	2200      	movs	r2, #0
 8009332:	9b02      	ldr	r3, [sp, #8]
 8009334:	701a      	strb	r2, [r3, #0]
 8009336:	e7d6      	b.n	80092e6 <sniprintf+0x16>
 8009338:	20000188 	.word	0x20000188

0800933c <__sread>:
 800933c:	b510      	push	{r4, lr}
 800933e:	460c      	mov	r4, r1
 8009340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009344:	f000 f8a0 	bl	8009488 <_read_r>
 8009348:	2800      	cmp	r0, #0
 800934a:	bfab      	itete	ge
 800934c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800934e:	89a3      	ldrhlt	r3, [r4, #12]
 8009350:	181b      	addge	r3, r3, r0
 8009352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009356:	bfac      	ite	ge
 8009358:	6563      	strge	r3, [r4, #84]	@ 0x54
 800935a:	81a3      	strhlt	r3, [r4, #12]
 800935c:	bd10      	pop	{r4, pc}

0800935e <__swrite>:
 800935e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009362:	461f      	mov	r7, r3
 8009364:	898b      	ldrh	r3, [r1, #12]
 8009366:	4605      	mov	r5, r0
 8009368:	05db      	lsls	r3, r3, #23
 800936a:	460c      	mov	r4, r1
 800936c:	4616      	mov	r6, r2
 800936e:	d505      	bpl.n	800937c <__swrite+0x1e>
 8009370:	2302      	movs	r3, #2
 8009372:	2200      	movs	r2, #0
 8009374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009378:	f000 f874 	bl	8009464 <_lseek_r>
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	4632      	mov	r2, r6
 8009380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	4628      	mov	r0, r5
 8009388:	463b      	mov	r3, r7
 800938a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800938e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009392:	f000 b88b 	b.w	80094ac <_write_r>

08009396 <__sseek>:
 8009396:	b510      	push	{r4, lr}
 8009398:	460c      	mov	r4, r1
 800939a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800939e:	f000 f861 	bl	8009464 <_lseek_r>
 80093a2:	1c43      	adds	r3, r0, #1
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	bf15      	itete	ne
 80093a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093b2:	81a3      	strheq	r3, [r4, #12]
 80093b4:	bf18      	it	ne
 80093b6:	81a3      	strhne	r3, [r4, #12]
 80093b8:	bd10      	pop	{r4, pc}

080093ba <__sclose>:
 80093ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093be:	f000 b841 	b.w	8009444 <_close_r>

080093c2 <memset>:
 80093c2:	4603      	mov	r3, r0
 80093c4:	4402      	add	r2, r0
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d100      	bne.n	80093cc <memset+0xa>
 80093ca:	4770      	bx	lr
 80093cc:	f803 1b01 	strb.w	r1, [r3], #1
 80093d0:	e7f9      	b.n	80093c6 <memset+0x4>

080093d2 <strchr>:
 80093d2:	4603      	mov	r3, r0
 80093d4:	b2c9      	uxtb	r1, r1
 80093d6:	4618      	mov	r0, r3
 80093d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093dc:	b112      	cbz	r2, 80093e4 <strchr+0x12>
 80093de:	428a      	cmp	r2, r1
 80093e0:	d1f9      	bne.n	80093d6 <strchr+0x4>
 80093e2:	4770      	bx	lr
 80093e4:	2900      	cmp	r1, #0
 80093e6:	bf18      	it	ne
 80093e8:	2000      	movne	r0, #0
 80093ea:	4770      	bx	lr

080093ec <strncmp>:
 80093ec:	b510      	push	{r4, lr}
 80093ee:	b16a      	cbz	r2, 800940c <strncmp+0x20>
 80093f0:	3901      	subs	r1, #1
 80093f2:	1884      	adds	r4, r0, r2
 80093f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d103      	bne.n	8009408 <strncmp+0x1c>
 8009400:	42a0      	cmp	r0, r4
 8009402:	d001      	beq.n	8009408 <strncmp+0x1c>
 8009404:	2a00      	cmp	r2, #0
 8009406:	d1f5      	bne.n	80093f4 <strncmp+0x8>
 8009408:	1ad0      	subs	r0, r2, r3
 800940a:	bd10      	pop	{r4, pc}
 800940c:	4610      	mov	r0, r2
 800940e:	e7fc      	b.n	800940a <strncmp+0x1e>

08009410 <strstr>:
 8009410:	780a      	ldrb	r2, [r1, #0]
 8009412:	b570      	push	{r4, r5, r6, lr}
 8009414:	b96a      	cbnz	r2, 8009432 <strstr+0x22>
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	429a      	cmp	r2, r3
 800941a:	d109      	bne.n	8009430 <strstr+0x20>
 800941c:	460c      	mov	r4, r1
 800941e:	4605      	mov	r5, r0
 8009420:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0f6      	beq.n	8009416 <strstr+0x6>
 8009428:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800942c:	429e      	cmp	r6, r3
 800942e:	d0f7      	beq.n	8009420 <strstr+0x10>
 8009430:	3001      	adds	r0, #1
 8009432:	7803      	ldrb	r3, [r0, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1ef      	bne.n	8009418 <strstr+0x8>
 8009438:	4618      	mov	r0, r3
 800943a:	e7ec      	b.n	8009416 <strstr+0x6>

0800943c <_localeconv_r>:
 800943c:	4800      	ldr	r0, [pc, #0]	@ (8009440 <_localeconv_r+0x4>)
 800943e:	4770      	bx	lr
 8009440:	2000010c 	.word	0x2000010c

08009444 <_close_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	2300      	movs	r3, #0
 8009448:	4d05      	ldr	r5, [pc, #20]	@ (8009460 <_close_r+0x1c>)
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	602b      	str	r3, [r5, #0]
 8009450:	f7f8 fe35 	bl	80020be <_close>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d102      	bne.n	800945e <_close_r+0x1a>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	b103      	cbz	r3, 800945e <_close_r+0x1a>
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	20001490 	.word	0x20001490

08009464 <_lseek_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4604      	mov	r4, r0
 8009468:	4608      	mov	r0, r1
 800946a:	4611      	mov	r1, r2
 800946c:	2200      	movs	r2, #0
 800946e:	4d05      	ldr	r5, [pc, #20]	@ (8009484 <_lseek_r+0x20>)
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f7f8 fe47 	bl	8002106 <_lseek>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_lseek_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_lseek_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	20001490 	.word	0x20001490

08009488 <_read_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	4611      	mov	r1, r2
 8009490:	2200      	movs	r2, #0
 8009492:	4d05      	ldr	r5, [pc, #20]	@ (80094a8 <_read_r+0x20>)
 8009494:	602a      	str	r2, [r5, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	f7f8 fdd8 	bl	800204c <_read>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_read_r+0x1e>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_read_r+0x1e>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20001490 	.word	0x20001490

080094ac <_write_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	2200      	movs	r2, #0
 80094b6:	4d05      	ldr	r5, [pc, #20]	@ (80094cc <_write_r+0x20>)
 80094b8:	602a      	str	r2, [r5, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f7f8 fde3 	bl	8002086 <_write>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_write_r+0x1e>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_write_r+0x1e>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	20001490 	.word	0x20001490

080094d0 <__errno>:
 80094d0:	4b01      	ldr	r3, [pc, #4]	@ (80094d8 <__errno+0x8>)
 80094d2:	6818      	ldr	r0, [r3, #0]
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	20000188 	.word	0x20000188

080094dc <__libc_init_array>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	2600      	movs	r6, #0
 80094e0:	4d0c      	ldr	r5, [pc, #48]	@ (8009514 <__libc_init_array+0x38>)
 80094e2:	4c0d      	ldr	r4, [pc, #52]	@ (8009518 <__libc_init_array+0x3c>)
 80094e4:	1b64      	subs	r4, r4, r5
 80094e6:	10a4      	asrs	r4, r4, #2
 80094e8:	42a6      	cmp	r6, r4
 80094ea:	d109      	bne.n	8009500 <__libc_init_array+0x24>
 80094ec:	f002 fd62 	bl	800bfb4 <_init>
 80094f0:	2600      	movs	r6, #0
 80094f2:	4d0a      	ldr	r5, [pc, #40]	@ (800951c <__libc_init_array+0x40>)
 80094f4:	4c0a      	ldr	r4, [pc, #40]	@ (8009520 <__libc_init_array+0x44>)
 80094f6:	1b64      	subs	r4, r4, r5
 80094f8:	10a4      	asrs	r4, r4, #2
 80094fa:	42a6      	cmp	r6, r4
 80094fc:	d105      	bne.n	800950a <__libc_init_array+0x2e>
 80094fe:	bd70      	pop	{r4, r5, r6, pc}
 8009500:	f855 3b04 	ldr.w	r3, [r5], #4
 8009504:	4798      	blx	r3
 8009506:	3601      	adds	r6, #1
 8009508:	e7ee      	b.n	80094e8 <__libc_init_array+0xc>
 800950a:	f855 3b04 	ldr.w	r3, [r5], #4
 800950e:	4798      	blx	r3
 8009510:	3601      	adds	r6, #1
 8009512:	e7f2      	b.n	80094fa <__libc_init_array+0x1e>
 8009514:	0800c508 	.word	0x0800c508
 8009518:	0800c508 	.word	0x0800c508
 800951c:	0800c508 	.word	0x0800c508
 8009520:	0800c50c 	.word	0x0800c50c

08009524 <__retarget_lock_init_recursive>:
 8009524:	4770      	bx	lr

08009526 <__retarget_lock_acquire_recursive>:
 8009526:	4770      	bx	lr

08009528 <__retarget_lock_release_recursive>:
 8009528:	4770      	bx	lr

0800952a <memchr>:
 800952a:	4603      	mov	r3, r0
 800952c:	b510      	push	{r4, lr}
 800952e:	b2c9      	uxtb	r1, r1
 8009530:	4402      	add	r2, r0
 8009532:	4293      	cmp	r3, r2
 8009534:	4618      	mov	r0, r3
 8009536:	d101      	bne.n	800953c <memchr+0x12>
 8009538:	2000      	movs	r0, #0
 800953a:	e003      	b.n	8009544 <memchr+0x1a>
 800953c:	7804      	ldrb	r4, [r0, #0]
 800953e:	3301      	adds	r3, #1
 8009540:	428c      	cmp	r4, r1
 8009542:	d1f6      	bne.n	8009532 <memchr+0x8>
 8009544:	bd10      	pop	{r4, pc}

08009546 <memcpy>:
 8009546:	440a      	add	r2, r1
 8009548:	4291      	cmp	r1, r2
 800954a:	f100 33ff 	add.w	r3, r0, #4294967295
 800954e:	d100      	bne.n	8009552 <memcpy+0xc>
 8009550:	4770      	bx	lr
 8009552:	b510      	push	{r4, lr}
 8009554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009558:	4291      	cmp	r1, r2
 800955a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800955e:	d1f9      	bne.n	8009554 <memcpy+0xe>
 8009560:	bd10      	pop	{r4, pc}
	...

08009564 <nan>:
 8009564:	2000      	movs	r0, #0
 8009566:	4901      	ldr	r1, [pc, #4]	@ (800956c <nan+0x8>)
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	7ff80000 	.word	0x7ff80000

08009570 <quorem>:
 8009570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	6903      	ldr	r3, [r0, #16]
 8009576:	690c      	ldr	r4, [r1, #16]
 8009578:	4607      	mov	r7, r0
 800957a:	42a3      	cmp	r3, r4
 800957c:	db7e      	blt.n	800967c <quorem+0x10c>
 800957e:	3c01      	subs	r4, #1
 8009580:	00a3      	lsls	r3, r4, #2
 8009582:	f100 0514 	add.w	r5, r0, #20
 8009586:	f101 0814 	add.w	r8, r1, #20
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800959a:	3301      	adds	r3, #1
 800959c:	429a      	cmp	r2, r3
 800959e:	fbb2 f6f3 	udiv	r6, r2, r3
 80095a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095a6:	d32e      	bcc.n	8009606 <quorem+0x96>
 80095a8:	f04f 0a00 	mov.w	sl, #0
 80095ac:	46c4      	mov	ip, r8
 80095ae:	46ae      	mov	lr, r5
 80095b0:	46d3      	mov	fp, sl
 80095b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80095b6:	b298      	uxth	r0, r3
 80095b8:	fb06 a000 	mla	r0, r6, r0, sl
 80095bc:	0c1b      	lsrs	r3, r3, #16
 80095be:	0c02      	lsrs	r2, r0, #16
 80095c0:	fb06 2303 	mla	r3, r6, r3, r2
 80095c4:	f8de 2000 	ldr.w	r2, [lr]
 80095c8:	b280      	uxth	r0, r0
 80095ca:	b292      	uxth	r2, r2
 80095cc:	1a12      	subs	r2, r2, r0
 80095ce:	445a      	add	r2, fp
 80095d0:	f8de 0000 	ldr.w	r0, [lr]
 80095d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095d8:	b29b      	uxth	r3, r3
 80095da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80095de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80095e2:	b292      	uxth	r2, r2
 80095e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80095e8:	45e1      	cmp	r9, ip
 80095ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095ee:	f84e 2b04 	str.w	r2, [lr], #4
 80095f2:	d2de      	bcs.n	80095b2 <quorem+0x42>
 80095f4:	9b00      	ldr	r3, [sp, #0]
 80095f6:	58eb      	ldr	r3, [r5, r3]
 80095f8:	b92b      	cbnz	r3, 8009606 <quorem+0x96>
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	3b04      	subs	r3, #4
 80095fe:	429d      	cmp	r5, r3
 8009600:	461a      	mov	r2, r3
 8009602:	d32f      	bcc.n	8009664 <quorem+0xf4>
 8009604:	613c      	str	r4, [r7, #16]
 8009606:	4638      	mov	r0, r7
 8009608:	f001 fd14 	bl	800b034 <__mcmp>
 800960c:	2800      	cmp	r0, #0
 800960e:	db25      	blt.n	800965c <quorem+0xec>
 8009610:	4629      	mov	r1, r5
 8009612:	2000      	movs	r0, #0
 8009614:	f858 2b04 	ldr.w	r2, [r8], #4
 8009618:	f8d1 c000 	ldr.w	ip, [r1]
 800961c:	fa1f fe82 	uxth.w	lr, r2
 8009620:	fa1f f38c 	uxth.w	r3, ip
 8009624:	eba3 030e 	sub.w	r3, r3, lr
 8009628:	4403      	add	r3, r0
 800962a:	0c12      	lsrs	r2, r2, #16
 800962c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009630:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009634:	b29b      	uxth	r3, r3
 8009636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800963a:	45c1      	cmp	r9, r8
 800963c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009640:	f841 3b04 	str.w	r3, [r1], #4
 8009644:	d2e6      	bcs.n	8009614 <quorem+0xa4>
 8009646:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800964a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800964e:	b922      	cbnz	r2, 800965a <quorem+0xea>
 8009650:	3b04      	subs	r3, #4
 8009652:	429d      	cmp	r5, r3
 8009654:	461a      	mov	r2, r3
 8009656:	d30b      	bcc.n	8009670 <quorem+0x100>
 8009658:	613c      	str	r4, [r7, #16]
 800965a:	3601      	adds	r6, #1
 800965c:	4630      	mov	r0, r6
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	6812      	ldr	r2, [r2, #0]
 8009666:	3b04      	subs	r3, #4
 8009668:	2a00      	cmp	r2, #0
 800966a:	d1cb      	bne.n	8009604 <quorem+0x94>
 800966c:	3c01      	subs	r4, #1
 800966e:	e7c6      	b.n	80095fe <quorem+0x8e>
 8009670:	6812      	ldr	r2, [r2, #0]
 8009672:	3b04      	subs	r3, #4
 8009674:	2a00      	cmp	r2, #0
 8009676:	d1ef      	bne.n	8009658 <quorem+0xe8>
 8009678:	3c01      	subs	r4, #1
 800967a:	e7ea      	b.n	8009652 <quorem+0xe2>
 800967c:	2000      	movs	r0, #0
 800967e:	e7ee      	b.n	800965e <quorem+0xee>

08009680 <_dtoa_r>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	4614      	mov	r4, r2
 8009686:	461d      	mov	r5, r3
 8009688:	69c7      	ldr	r7, [r0, #28]
 800968a:	b097      	sub	sp, #92	@ 0x5c
 800968c:	4681      	mov	r9, r0
 800968e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009692:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009694:	b97f      	cbnz	r7, 80096b6 <_dtoa_r+0x36>
 8009696:	2010      	movs	r0, #16
 8009698:	f001 f948 	bl	800a92c <malloc>
 800969c:	4602      	mov	r2, r0
 800969e:	f8c9 001c 	str.w	r0, [r9, #28]
 80096a2:	b920      	cbnz	r0, 80096ae <_dtoa_r+0x2e>
 80096a4:	21ef      	movs	r1, #239	@ 0xef
 80096a6:	4bac      	ldr	r3, [pc, #688]	@ (8009958 <_dtoa_r+0x2d8>)
 80096a8:	48ac      	ldr	r0, [pc, #688]	@ (800995c <_dtoa_r+0x2dc>)
 80096aa:	f002 f8dd 	bl	800b868 <__assert_func>
 80096ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80096b2:	6007      	str	r7, [r0, #0]
 80096b4:	60c7      	str	r7, [r0, #12]
 80096b6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80096ba:	6819      	ldr	r1, [r3, #0]
 80096bc:	b159      	cbz	r1, 80096d6 <_dtoa_r+0x56>
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	2301      	movs	r3, #1
 80096c2:	4093      	lsls	r3, r2
 80096c4:	604a      	str	r2, [r1, #4]
 80096c6:	608b      	str	r3, [r1, #8]
 80096c8:	4648      	mov	r0, r9
 80096ca:	f001 fa37 	bl	800ab3c <_Bfree>
 80096ce:	2200      	movs	r2, #0
 80096d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	1e2b      	subs	r3, r5, #0
 80096d8:	bfaf      	iteee	ge
 80096da:	2300      	movge	r3, #0
 80096dc:	2201      	movlt	r2, #1
 80096de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096e2:	9307      	strlt	r3, [sp, #28]
 80096e4:	bfa8      	it	ge
 80096e6:	6033      	strge	r3, [r6, #0]
 80096e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80096ec:	4b9c      	ldr	r3, [pc, #624]	@ (8009960 <_dtoa_r+0x2e0>)
 80096ee:	bfb8      	it	lt
 80096f0:	6032      	strlt	r2, [r6, #0]
 80096f2:	ea33 0308 	bics.w	r3, r3, r8
 80096f6:	d112      	bne.n	800971e <_dtoa_r+0x9e>
 80096f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80096fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009704:	4323      	orrs	r3, r4
 8009706:	f000 855e 	beq.w	800a1c6 <_dtoa_r+0xb46>
 800970a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800970c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009964 <_dtoa_r+0x2e4>
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 8560 	beq.w	800a1d6 <_dtoa_r+0xb56>
 8009716:	f10a 0303 	add.w	r3, sl, #3
 800971a:	f000 bd5a 	b.w	800a1d2 <_dtoa_r+0xb52>
 800971e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009722:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800972a:	2200      	movs	r2, #0
 800972c:	2300      	movs	r3, #0
 800972e:	f7f7 f93b 	bl	80009a8 <__aeabi_dcmpeq>
 8009732:	4607      	mov	r7, r0
 8009734:	b158      	cbz	r0, 800974e <_dtoa_r+0xce>
 8009736:	2301      	movs	r3, #1
 8009738:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800973e:	b113      	cbz	r3, 8009746 <_dtoa_r+0xc6>
 8009740:	4b89      	ldr	r3, [pc, #548]	@ (8009968 <_dtoa_r+0x2e8>)
 8009742:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800996c <_dtoa_r+0x2ec>
 800974a:	f000 bd44 	b.w	800a1d6 <_dtoa_r+0xb56>
 800974e:	ab14      	add	r3, sp, #80	@ 0x50
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	ab15      	add	r3, sp, #84	@ 0x54
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	4648      	mov	r0, r9
 8009758:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800975c:	f001 fd82 	bl	800b264 <__d2b>
 8009760:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009764:	9003      	str	r0, [sp, #12]
 8009766:	2e00      	cmp	r6, #0
 8009768:	d078      	beq.n	800985c <_dtoa_r+0x1dc>
 800976a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800976e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009770:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009778:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800977c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009780:	9712      	str	r7, [sp, #72]	@ 0x48
 8009782:	4619      	mov	r1, r3
 8009784:	2200      	movs	r2, #0
 8009786:	4b7a      	ldr	r3, [pc, #488]	@ (8009970 <_dtoa_r+0x2f0>)
 8009788:	f7f6 fcee 	bl	8000168 <__aeabi_dsub>
 800978c:	a36c      	add	r3, pc, #432	@ (adr r3, 8009940 <_dtoa_r+0x2c0>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	f7f6 fea1 	bl	80004d8 <__aeabi_dmul>
 8009796:	a36c      	add	r3, pc, #432	@ (adr r3, 8009948 <_dtoa_r+0x2c8>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7f6 fce6 	bl	800016c <__adddf3>
 80097a0:	4604      	mov	r4, r0
 80097a2:	4630      	mov	r0, r6
 80097a4:	460d      	mov	r5, r1
 80097a6:	f7f6 fe2d 	bl	8000404 <__aeabi_i2d>
 80097aa:	a369      	add	r3, pc, #420	@ (adr r3, 8009950 <_dtoa_r+0x2d0>)
 80097ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b0:	f7f6 fe92 	bl	80004d8 <__aeabi_dmul>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4620      	mov	r0, r4
 80097ba:	4629      	mov	r1, r5
 80097bc:	f7f6 fcd6 	bl	800016c <__adddf3>
 80097c0:	4604      	mov	r4, r0
 80097c2:	460d      	mov	r5, r1
 80097c4:	f7f7 f938 	bl	8000a38 <__aeabi_d2iz>
 80097c8:	2200      	movs	r2, #0
 80097ca:	4607      	mov	r7, r0
 80097cc:	2300      	movs	r3, #0
 80097ce:	4620      	mov	r0, r4
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7f7 f8f3 	bl	80009bc <__aeabi_dcmplt>
 80097d6:	b140      	cbz	r0, 80097ea <_dtoa_r+0x16a>
 80097d8:	4638      	mov	r0, r7
 80097da:	f7f6 fe13 	bl	8000404 <__aeabi_i2d>
 80097de:	4622      	mov	r2, r4
 80097e0:	462b      	mov	r3, r5
 80097e2:	f7f7 f8e1 	bl	80009a8 <__aeabi_dcmpeq>
 80097e6:	b900      	cbnz	r0, 80097ea <_dtoa_r+0x16a>
 80097e8:	3f01      	subs	r7, #1
 80097ea:	2f16      	cmp	r7, #22
 80097ec:	d854      	bhi.n	8009898 <_dtoa_r+0x218>
 80097ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097f2:	4b60      	ldr	r3, [pc, #384]	@ (8009974 <_dtoa_r+0x2f4>)
 80097f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	f7f7 f8de 	bl	80009bc <__aeabi_dcmplt>
 8009800:	2800      	cmp	r0, #0
 8009802:	d04b      	beq.n	800989c <_dtoa_r+0x21c>
 8009804:	2300      	movs	r3, #0
 8009806:	3f01      	subs	r7, #1
 8009808:	930f      	str	r3, [sp, #60]	@ 0x3c
 800980a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800980c:	1b9b      	subs	r3, r3, r6
 800980e:	1e5a      	subs	r2, r3, #1
 8009810:	bf49      	itett	mi
 8009812:	f1c3 0301 	rsbmi	r3, r3, #1
 8009816:	2300      	movpl	r3, #0
 8009818:	9304      	strmi	r3, [sp, #16]
 800981a:	2300      	movmi	r3, #0
 800981c:	9209      	str	r2, [sp, #36]	@ 0x24
 800981e:	bf54      	ite	pl
 8009820:	9304      	strpl	r3, [sp, #16]
 8009822:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009824:	2f00      	cmp	r7, #0
 8009826:	db3b      	blt.n	80098a0 <_dtoa_r+0x220>
 8009828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800982a:	970e      	str	r7, [sp, #56]	@ 0x38
 800982c:	443b      	add	r3, r7
 800982e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009830:	2300      	movs	r3, #0
 8009832:	930a      	str	r3, [sp, #40]	@ 0x28
 8009834:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009836:	2b09      	cmp	r3, #9
 8009838:	d865      	bhi.n	8009906 <_dtoa_r+0x286>
 800983a:	2b05      	cmp	r3, #5
 800983c:	bfc4      	itt	gt
 800983e:	3b04      	subgt	r3, #4
 8009840:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009842:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009844:	bfc8      	it	gt
 8009846:	2400      	movgt	r4, #0
 8009848:	f1a3 0302 	sub.w	r3, r3, #2
 800984c:	bfd8      	it	le
 800984e:	2401      	movle	r4, #1
 8009850:	2b03      	cmp	r3, #3
 8009852:	d864      	bhi.n	800991e <_dtoa_r+0x29e>
 8009854:	e8df f003 	tbb	[pc, r3]
 8009858:	2c385553 	.word	0x2c385553
 800985c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009860:	441e      	add	r6, r3
 8009862:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009866:	2b20      	cmp	r3, #32
 8009868:	bfc1      	itttt	gt
 800986a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800986e:	fa08 f803 	lslgt.w	r8, r8, r3
 8009872:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009876:	fa24 f303 	lsrgt.w	r3, r4, r3
 800987a:	bfd6      	itet	le
 800987c:	f1c3 0320 	rsble	r3, r3, #32
 8009880:	ea48 0003 	orrgt.w	r0, r8, r3
 8009884:	fa04 f003 	lslle.w	r0, r4, r3
 8009888:	f7f6 fdac 	bl	80003e4 <__aeabi_ui2d>
 800988c:	2201      	movs	r2, #1
 800988e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009892:	3e01      	subs	r6, #1
 8009894:	9212      	str	r2, [sp, #72]	@ 0x48
 8009896:	e774      	b.n	8009782 <_dtoa_r+0x102>
 8009898:	2301      	movs	r3, #1
 800989a:	e7b5      	b.n	8009808 <_dtoa_r+0x188>
 800989c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800989e:	e7b4      	b.n	800980a <_dtoa_r+0x18a>
 80098a0:	9b04      	ldr	r3, [sp, #16]
 80098a2:	1bdb      	subs	r3, r3, r7
 80098a4:	9304      	str	r3, [sp, #16]
 80098a6:	427b      	negs	r3, r7
 80098a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80098aa:	2300      	movs	r3, #0
 80098ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80098ae:	e7c1      	b.n	8009834 <_dtoa_r+0x1b4>
 80098b0:	2301      	movs	r3, #1
 80098b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098b6:	eb07 0b03 	add.w	fp, r7, r3
 80098ba:	f10b 0301 	add.w	r3, fp, #1
 80098be:	2b01      	cmp	r3, #1
 80098c0:	9308      	str	r3, [sp, #32]
 80098c2:	bfb8      	it	lt
 80098c4:	2301      	movlt	r3, #1
 80098c6:	e006      	b.n	80098d6 <_dtoa_r+0x256>
 80098c8:	2301      	movs	r3, #1
 80098ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	dd28      	ble.n	8009924 <_dtoa_r+0x2a4>
 80098d2:	469b      	mov	fp, r3
 80098d4:	9308      	str	r3, [sp, #32]
 80098d6:	2100      	movs	r1, #0
 80098d8:	2204      	movs	r2, #4
 80098da:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80098de:	f102 0514 	add.w	r5, r2, #20
 80098e2:	429d      	cmp	r5, r3
 80098e4:	d926      	bls.n	8009934 <_dtoa_r+0x2b4>
 80098e6:	6041      	str	r1, [r0, #4]
 80098e8:	4648      	mov	r0, r9
 80098ea:	f001 f8e7 	bl	800aabc <_Balloc>
 80098ee:	4682      	mov	sl, r0
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d143      	bne.n	800997c <_dtoa_r+0x2fc>
 80098f4:	4602      	mov	r2, r0
 80098f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80098fa:	4b1f      	ldr	r3, [pc, #124]	@ (8009978 <_dtoa_r+0x2f8>)
 80098fc:	e6d4      	b.n	80096a8 <_dtoa_r+0x28>
 80098fe:	2300      	movs	r3, #0
 8009900:	e7e3      	b.n	80098ca <_dtoa_r+0x24a>
 8009902:	2300      	movs	r3, #0
 8009904:	e7d5      	b.n	80098b2 <_dtoa_r+0x232>
 8009906:	2401      	movs	r4, #1
 8009908:	2300      	movs	r3, #0
 800990a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800990c:	9320      	str	r3, [sp, #128]	@ 0x80
 800990e:	f04f 3bff 	mov.w	fp, #4294967295
 8009912:	2200      	movs	r2, #0
 8009914:	2312      	movs	r3, #18
 8009916:	f8cd b020 	str.w	fp, [sp, #32]
 800991a:	9221      	str	r2, [sp, #132]	@ 0x84
 800991c:	e7db      	b.n	80098d6 <_dtoa_r+0x256>
 800991e:	2301      	movs	r3, #1
 8009920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009922:	e7f4      	b.n	800990e <_dtoa_r+0x28e>
 8009924:	f04f 0b01 	mov.w	fp, #1
 8009928:	465b      	mov	r3, fp
 800992a:	f8cd b020 	str.w	fp, [sp, #32]
 800992e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8009932:	e7d0      	b.n	80098d6 <_dtoa_r+0x256>
 8009934:	3101      	adds	r1, #1
 8009936:	0052      	lsls	r2, r2, #1
 8009938:	e7d1      	b.n	80098de <_dtoa_r+0x25e>
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w
 8009940:	636f4361 	.word	0x636f4361
 8009944:	3fd287a7 	.word	0x3fd287a7
 8009948:	8b60c8b3 	.word	0x8b60c8b3
 800994c:	3fc68a28 	.word	0x3fc68a28
 8009950:	509f79fb 	.word	0x509f79fb
 8009954:	3fd34413 	.word	0x3fd34413
 8009958:	0800c121 	.word	0x0800c121
 800995c:	0800c138 	.word	0x0800c138
 8009960:	7ff00000 	.word	0x7ff00000
 8009964:	0800c11d 	.word	0x0800c11d
 8009968:	0800c0e9 	.word	0x0800c0e9
 800996c:	0800c0e8 	.word	0x0800c0e8
 8009970:	3ff80000 	.word	0x3ff80000
 8009974:	0800c430 	.word	0x0800c430
 8009978:	0800c190 	.word	0x0800c190
 800997c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009980:	6018      	str	r0, [r3, #0]
 8009982:	9b08      	ldr	r3, [sp, #32]
 8009984:	2b0e      	cmp	r3, #14
 8009986:	f200 80a1 	bhi.w	8009acc <_dtoa_r+0x44c>
 800998a:	2c00      	cmp	r4, #0
 800998c:	f000 809e 	beq.w	8009acc <_dtoa_r+0x44c>
 8009990:	2f00      	cmp	r7, #0
 8009992:	dd33      	ble.n	80099fc <_dtoa_r+0x37c>
 8009994:	4b9c      	ldr	r3, [pc, #624]	@ (8009c08 <_dtoa_r+0x588>)
 8009996:	f007 020f 	and.w	r2, r7, #15
 800999a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800999e:	05f8      	lsls	r0, r7, #23
 80099a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80099a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80099a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80099ac:	d516      	bpl.n	80099dc <_dtoa_r+0x35c>
 80099ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099b2:	4b96      	ldr	r3, [pc, #600]	@ (8009c0c <_dtoa_r+0x58c>)
 80099b4:	2603      	movs	r6, #3
 80099b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099ba:	f7f6 feb7 	bl	800072c <__aeabi_ddiv>
 80099be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099c2:	f004 040f 	and.w	r4, r4, #15
 80099c6:	4d91      	ldr	r5, [pc, #580]	@ (8009c0c <_dtoa_r+0x58c>)
 80099c8:	b954      	cbnz	r4, 80099e0 <_dtoa_r+0x360>
 80099ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099d2:	f7f6 feab 	bl	800072c <__aeabi_ddiv>
 80099d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099da:	e028      	b.n	8009a2e <_dtoa_r+0x3ae>
 80099dc:	2602      	movs	r6, #2
 80099de:	e7f2      	b.n	80099c6 <_dtoa_r+0x346>
 80099e0:	07e1      	lsls	r1, r4, #31
 80099e2:	d508      	bpl.n	80099f6 <_dtoa_r+0x376>
 80099e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099ec:	f7f6 fd74 	bl	80004d8 <__aeabi_dmul>
 80099f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099f4:	3601      	adds	r6, #1
 80099f6:	1064      	asrs	r4, r4, #1
 80099f8:	3508      	adds	r5, #8
 80099fa:	e7e5      	b.n	80099c8 <_dtoa_r+0x348>
 80099fc:	f000 80af 	beq.w	8009b5e <_dtoa_r+0x4de>
 8009a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a04:	427c      	negs	r4, r7
 8009a06:	4b80      	ldr	r3, [pc, #512]	@ (8009c08 <_dtoa_r+0x588>)
 8009a08:	f004 020f 	and.w	r2, r4, #15
 8009a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	f7f6 fd60 	bl	80004d8 <__aeabi_dmul>
 8009a18:	2602      	movs	r6, #2
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a20:	4d7a      	ldr	r5, [pc, #488]	@ (8009c0c <_dtoa_r+0x58c>)
 8009a22:	1124      	asrs	r4, r4, #4
 8009a24:	2c00      	cmp	r4, #0
 8009a26:	f040 808f 	bne.w	8009b48 <_dtoa_r+0x4c8>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1d3      	bne.n	80099d6 <_dtoa_r+0x356>
 8009a2e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009a32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 8094 	beq.w	8009b62 <_dtoa_r+0x4e2>
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	4629      	mov	r1, r5
 8009a40:	4b73      	ldr	r3, [pc, #460]	@ (8009c10 <_dtoa_r+0x590>)
 8009a42:	f7f6 ffbb 	bl	80009bc <__aeabi_dcmplt>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	f000 808b 	beq.w	8009b62 <_dtoa_r+0x4e2>
 8009a4c:	9b08      	ldr	r3, [sp, #32]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 8087 	beq.w	8009b62 <_dtoa_r+0x4e2>
 8009a54:	f1bb 0f00 	cmp.w	fp, #0
 8009a58:	dd34      	ble.n	8009ac4 <_dtoa_r+0x444>
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4b6c      	ldr	r3, [pc, #432]	@ (8009c14 <_dtoa_r+0x594>)
 8009a62:	f7f6 fd39 	bl	80004d8 <__aeabi_dmul>
 8009a66:	465c      	mov	r4, fp
 8009a68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a6c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009a70:	3601      	adds	r6, #1
 8009a72:	4630      	mov	r0, r6
 8009a74:	f7f6 fcc6 	bl	8000404 <__aeabi_i2d>
 8009a78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a7c:	f7f6 fd2c 	bl	80004d8 <__aeabi_dmul>
 8009a80:	2200      	movs	r2, #0
 8009a82:	4b65      	ldr	r3, [pc, #404]	@ (8009c18 <_dtoa_r+0x598>)
 8009a84:	f7f6 fb72 	bl	800016c <__adddf3>
 8009a88:	4605      	mov	r5, r0
 8009a8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a8e:	2c00      	cmp	r4, #0
 8009a90:	d16a      	bne.n	8009b68 <_dtoa_r+0x4e8>
 8009a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a96:	2200      	movs	r2, #0
 8009a98:	4b60      	ldr	r3, [pc, #384]	@ (8009c1c <_dtoa_r+0x59c>)
 8009a9a:	f7f6 fb65 	bl	8000168 <__aeabi_dsub>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	4633      	mov	r3, r6
 8009aaa:	f7f6 ffa5 	bl	80009f8 <__aeabi_dcmpgt>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f040 8298 	bne.w	8009fe4 <_dtoa_r+0x964>
 8009ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ab8:	462a      	mov	r2, r5
 8009aba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009abe:	f7f6 ff7d 	bl	80009bc <__aeabi_dcmplt>
 8009ac2:	bb38      	cbnz	r0, 8009b14 <_dtoa_r+0x494>
 8009ac4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009ac8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009acc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f2c0 8157 	blt.w	8009d82 <_dtoa_r+0x702>
 8009ad4:	2f0e      	cmp	r7, #14
 8009ad6:	f300 8154 	bgt.w	8009d82 <_dtoa_r+0x702>
 8009ada:	4b4b      	ldr	r3, [pc, #300]	@ (8009c08 <_dtoa_r+0x588>)
 8009adc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ae4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009ae8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f280 80e5 	bge.w	8009cba <_dtoa_r+0x63a>
 8009af0:	9b08      	ldr	r3, [sp, #32]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f300 80e1 	bgt.w	8009cba <_dtoa_r+0x63a>
 8009af8:	d10c      	bne.n	8009b14 <_dtoa_r+0x494>
 8009afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009afe:	2200      	movs	r2, #0
 8009b00:	4b46      	ldr	r3, [pc, #280]	@ (8009c1c <_dtoa_r+0x59c>)
 8009b02:	f7f6 fce9 	bl	80004d8 <__aeabi_dmul>
 8009b06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b0a:	f7f6 ff6b 	bl	80009e4 <__aeabi_dcmpge>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f000 8266 	beq.w	8009fe0 <_dtoa_r+0x960>
 8009b14:	2400      	movs	r4, #0
 8009b16:	4625      	mov	r5, r4
 8009b18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b1a:	4656      	mov	r6, sl
 8009b1c:	ea6f 0803 	mvn.w	r8, r3
 8009b20:	2700      	movs	r7, #0
 8009b22:	4621      	mov	r1, r4
 8009b24:	4648      	mov	r0, r9
 8009b26:	f001 f809 	bl	800ab3c <_Bfree>
 8009b2a:	2d00      	cmp	r5, #0
 8009b2c:	f000 80bd 	beq.w	8009caa <_dtoa_r+0x62a>
 8009b30:	b12f      	cbz	r7, 8009b3e <_dtoa_r+0x4be>
 8009b32:	42af      	cmp	r7, r5
 8009b34:	d003      	beq.n	8009b3e <_dtoa_r+0x4be>
 8009b36:	4639      	mov	r1, r7
 8009b38:	4648      	mov	r0, r9
 8009b3a:	f000 ffff 	bl	800ab3c <_Bfree>
 8009b3e:	4629      	mov	r1, r5
 8009b40:	4648      	mov	r0, r9
 8009b42:	f000 fffb 	bl	800ab3c <_Bfree>
 8009b46:	e0b0      	b.n	8009caa <_dtoa_r+0x62a>
 8009b48:	07e2      	lsls	r2, r4, #31
 8009b4a:	d505      	bpl.n	8009b58 <_dtoa_r+0x4d8>
 8009b4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b50:	f7f6 fcc2 	bl	80004d8 <__aeabi_dmul>
 8009b54:	2301      	movs	r3, #1
 8009b56:	3601      	adds	r6, #1
 8009b58:	1064      	asrs	r4, r4, #1
 8009b5a:	3508      	adds	r5, #8
 8009b5c:	e762      	b.n	8009a24 <_dtoa_r+0x3a4>
 8009b5e:	2602      	movs	r6, #2
 8009b60:	e765      	b.n	8009a2e <_dtoa_r+0x3ae>
 8009b62:	46b8      	mov	r8, r7
 8009b64:	9c08      	ldr	r4, [sp, #32]
 8009b66:	e784      	b.n	8009a72 <_dtoa_r+0x3f2>
 8009b68:	4b27      	ldr	r3, [pc, #156]	@ (8009c08 <_dtoa_r+0x588>)
 8009b6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b74:	4454      	add	r4, sl
 8009b76:	2900      	cmp	r1, #0
 8009b78:	d054      	beq.n	8009c24 <_dtoa_r+0x5a4>
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	4928      	ldr	r1, [pc, #160]	@ (8009c20 <_dtoa_r+0x5a0>)
 8009b7e:	f7f6 fdd5 	bl	800072c <__aeabi_ddiv>
 8009b82:	4633      	mov	r3, r6
 8009b84:	462a      	mov	r2, r5
 8009b86:	f7f6 faef 	bl	8000168 <__aeabi_dsub>
 8009b8a:	4656      	mov	r6, sl
 8009b8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b94:	f7f6 ff50 	bl	8000a38 <__aeabi_d2iz>
 8009b98:	4605      	mov	r5, r0
 8009b9a:	f7f6 fc33 	bl	8000404 <__aeabi_i2d>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ba6:	f7f6 fadf 	bl	8000168 <__aeabi_dsub>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	3530      	adds	r5, #48	@ 0x30
 8009bb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009bb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bb8:	f806 5b01 	strb.w	r5, [r6], #1
 8009bbc:	f7f6 fefe 	bl	80009bc <__aeabi_dcmplt>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d172      	bne.n	8009caa <_dtoa_r+0x62a>
 8009bc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bc8:	2000      	movs	r0, #0
 8009bca:	4911      	ldr	r1, [pc, #68]	@ (8009c10 <_dtoa_r+0x590>)
 8009bcc:	f7f6 facc 	bl	8000168 <__aeabi_dsub>
 8009bd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bd4:	f7f6 fef2 	bl	80009bc <__aeabi_dcmplt>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	f040 80b4 	bne.w	8009d46 <_dtoa_r+0x6c6>
 8009bde:	42a6      	cmp	r6, r4
 8009be0:	f43f af70 	beq.w	8009ac4 <_dtoa_r+0x444>
 8009be4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009be8:	2200      	movs	r2, #0
 8009bea:	4b0a      	ldr	r3, [pc, #40]	@ (8009c14 <_dtoa_r+0x594>)
 8009bec:	f7f6 fc74 	bl	80004d8 <__aeabi_dmul>
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bfa:	4b06      	ldr	r3, [pc, #24]	@ (8009c14 <_dtoa_r+0x594>)
 8009bfc:	f7f6 fc6c 	bl	80004d8 <__aeabi_dmul>
 8009c00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c04:	e7c4      	b.n	8009b90 <_dtoa_r+0x510>
 8009c06:	bf00      	nop
 8009c08:	0800c430 	.word	0x0800c430
 8009c0c:	0800c408 	.word	0x0800c408
 8009c10:	3ff00000 	.word	0x3ff00000
 8009c14:	40240000 	.word	0x40240000
 8009c18:	401c0000 	.word	0x401c0000
 8009c1c:	40140000 	.word	0x40140000
 8009c20:	3fe00000 	.word	0x3fe00000
 8009c24:	4631      	mov	r1, r6
 8009c26:	4628      	mov	r0, r5
 8009c28:	f7f6 fc56 	bl	80004d8 <__aeabi_dmul>
 8009c2c:	4656      	mov	r6, sl
 8009c2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c32:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009c34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c38:	f7f6 fefe 	bl	8000a38 <__aeabi_d2iz>
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	f7f6 fbe1 	bl	8000404 <__aeabi_i2d>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c4a:	f7f6 fa8d 	bl	8000168 <__aeabi_dsub>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	3530      	adds	r5, #48	@ 0x30
 8009c54:	f806 5b01 	strb.w	r5, [r6], #1
 8009c58:	42a6      	cmp	r6, r4
 8009c5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c5e:	f04f 0200 	mov.w	r2, #0
 8009c62:	d124      	bne.n	8009cae <_dtoa_r+0x62e>
 8009c64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c68:	4bae      	ldr	r3, [pc, #696]	@ (8009f24 <_dtoa_r+0x8a4>)
 8009c6a:	f7f6 fa7f 	bl	800016c <__adddf3>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c76:	f7f6 febf 	bl	80009f8 <__aeabi_dcmpgt>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d163      	bne.n	8009d46 <_dtoa_r+0x6c6>
 8009c7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c82:	2000      	movs	r0, #0
 8009c84:	49a7      	ldr	r1, [pc, #668]	@ (8009f24 <_dtoa_r+0x8a4>)
 8009c86:	f7f6 fa6f 	bl	8000168 <__aeabi_dsub>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c92:	f7f6 fe93 	bl	80009bc <__aeabi_dcmplt>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f43f af14 	beq.w	8009ac4 <_dtoa_r+0x444>
 8009c9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009c9e:	1e73      	subs	r3, r6, #1
 8009ca0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ca2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ca6:	2b30      	cmp	r3, #48	@ 0x30
 8009ca8:	d0f8      	beq.n	8009c9c <_dtoa_r+0x61c>
 8009caa:	4647      	mov	r7, r8
 8009cac:	e03b      	b.n	8009d26 <_dtoa_r+0x6a6>
 8009cae:	4b9e      	ldr	r3, [pc, #632]	@ (8009f28 <_dtoa_r+0x8a8>)
 8009cb0:	f7f6 fc12 	bl	80004d8 <__aeabi_dmul>
 8009cb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cb8:	e7bc      	b.n	8009c34 <_dtoa_r+0x5b4>
 8009cba:	4656      	mov	r6, sl
 8009cbc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7f6 fd30 	bl	800072c <__aeabi_ddiv>
 8009ccc:	f7f6 feb4 	bl	8000a38 <__aeabi_d2iz>
 8009cd0:	4680      	mov	r8, r0
 8009cd2:	f7f6 fb97 	bl	8000404 <__aeabi_i2d>
 8009cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cda:	f7f6 fbfd 	bl	80004d8 <__aeabi_dmul>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	f7f6 fa3f 	bl	8000168 <__aeabi_dsub>
 8009cea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009cee:	9d08      	ldr	r5, [sp, #32]
 8009cf0:	f806 4b01 	strb.w	r4, [r6], #1
 8009cf4:	eba6 040a 	sub.w	r4, r6, sl
 8009cf8:	42a5      	cmp	r5, r4
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	d133      	bne.n	8009d68 <_dtoa_r+0x6e8>
 8009d00:	f7f6 fa34 	bl	800016c <__adddf3>
 8009d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d08:	4604      	mov	r4, r0
 8009d0a:	460d      	mov	r5, r1
 8009d0c:	f7f6 fe74 	bl	80009f8 <__aeabi_dcmpgt>
 8009d10:	b9c0      	cbnz	r0, 8009d44 <_dtoa_r+0x6c4>
 8009d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d16:	4620      	mov	r0, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7f6 fe45 	bl	80009a8 <__aeabi_dcmpeq>
 8009d1e:	b110      	cbz	r0, 8009d26 <_dtoa_r+0x6a6>
 8009d20:	f018 0f01 	tst.w	r8, #1
 8009d24:	d10e      	bne.n	8009d44 <_dtoa_r+0x6c4>
 8009d26:	4648      	mov	r0, r9
 8009d28:	9903      	ldr	r1, [sp, #12]
 8009d2a:	f000 ff07 	bl	800ab3c <_Bfree>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	7033      	strb	r3, [r6, #0]
 8009d32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009d34:	3701      	adds	r7, #1
 8009d36:	601f      	str	r7, [r3, #0]
 8009d38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 824b 	beq.w	800a1d6 <_dtoa_r+0xb56>
 8009d40:	601e      	str	r6, [r3, #0]
 8009d42:	e248      	b.n	800a1d6 <_dtoa_r+0xb56>
 8009d44:	46b8      	mov	r8, r7
 8009d46:	4633      	mov	r3, r6
 8009d48:	461e      	mov	r6, r3
 8009d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d4e:	2a39      	cmp	r2, #57	@ 0x39
 8009d50:	d106      	bne.n	8009d60 <_dtoa_r+0x6e0>
 8009d52:	459a      	cmp	sl, r3
 8009d54:	d1f8      	bne.n	8009d48 <_dtoa_r+0x6c8>
 8009d56:	2230      	movs	r2, #48	@ 0x30
 8009d58:	f108 0801 	add.w	r8, r8, #1
 8009d5c:	f88a 2000 	strb.w	r2, [sl]
 8009d60:	781a      	ldrb	r2, [r3, #0]
 8009d62:	3201      	adds	r2, #1
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e7a0      	b.n	8009caa <_dtoa_r+0x62a>
 8009d68:	2200      	movs	r2, #0
 8009d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8009f28 <_dtoa_r+0x8a8>)
 8009d6c:	f7f6 fbb4 	bl	80004d8 <__aeabi_dmul>
 8009d70:	2200      	movs	r2, #0
 8009d72:	2300      	movs	r3, #0
 8009d74:	4604      	mov	r4, r0
 8009d76:	460d      	mov	r5, r1
 8009d78:	f7f6 fe16 	bl	80009a8 <__aeabi_dcmpeq>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d09f      	beq.n	8009cc0 <_dtoa_r+0x640>
 8009d80:	e7d1      	b.n	8009d26 <_dtoa_r+0x6a6>
 8009d82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	f000 80ea 	beq.w	8009f5e <_dtoa_r+0x8de>
 8009d8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d8c:	2a01      	cmp	r2, #1
 8009d8e:	f300 80cd 	bgt.w	8009f2c <_dtoa_r+0x8ac>
 8009d92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009d94:	2a00      	cmp	r2, #0
 8009d96:	f000 80c1 	beq.w	8009f1c <_dtoa_r+0x89c>
 8009d9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009da0:	9e04      	ldr	r6, [sp, #16]
 8009da2:	9a04      	ldr	r2, [sp, #16]
 8009da4:	2101      	movs	r1, #1
 8009da6:	441a      	add	r2, r3
 8009da8:	9204      	str	r2, [sp, #16]
 8009daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dac:	4648      	mov	r0, r9
 8009dae:	441a      	add	r2, r3
 8009db0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009db2:	f000 ffc1 	bl	800ad38 <__i2b>
 8009db6:	4605      	mov	r5, r0
 8009db8:	b166      	cbz	r6, 8009dd4 <_dtoa_r+0x754>
 8009dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dd09      	ble.n	8009dd4 <_dtoa_r+0x754>
 8009dc0:	42b3      	cmp	r3, r6
 8009dc2:	bfa8      	it	ge
 8009dc4:	4633      	movge	r3, r6
 8009dc6:	9a04      	ldr	r2, [sp, #16]
 8009dc8:	1af6      	subs	r6, r6, r3
 8009dca:	1ad2      	subs	r2, r2, r3
 8009dcc:	9204      	str	r2, [sp, #16]
 8009dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dd6:	b30b      	cbz	r3, 8009e1c <_dtoa_r+0x79c>
 8009dd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 80c6 	beq.w	8009f6c <_dtoa_r+0x8ec>
 8009de0:	2c00      	cmp	r4, #0
 8009de2:	f000 80c0 	beq.w	8009f66 <_dtoa_r+0x8e6>
 8009de6:	4629      	mov	r1, r5
 8009de8:	4622      	mov	r2, r4
 8009dea:	4648      	mov	r0, r9
 8009dec:	f001 f85c 	bl	800aea8 <__pow5mult>
 8009df0:	9a03      	ldr	r2, [sp, #12]
 8009df2:	4601      	mov	r1, r0
 8009df4:	4605      	mov	r5, r0
 8009df6:	4648      	mov	r0, r9
 8009df8:	f000 ffb4 	bl	800ad64 <__multiply>
 8009dfc:	9903      	ldr	r1, [sp, #12]
 8009dfe:	4680      	mov	r8, r0
 8009e00:	4648      	mov	r0, r9
 8009e02:	f000 fe9b 	bl	800ab3c <_Bfree>
 8009e06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e08:	1b1b      	subs	r3, r3, r4
 8009e0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e0c:	f000 80b1 	beq.w	8009f72 <_dtoa_r+0x8f2>
 8009e10:	4641      	mov	r1, r8
 8009e12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e14:	4648      	mov	r0, r9
 8009e16:	f001 f847 	bl	800aea8 <__pow5mult>
 8009e1a:	9003      	str	r0, [sp, #12]
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	4648      	mov	r0, r9
 8009e20:	f000 ff8a 	bl	800ad38 <__i2b>
 8009e24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e26:	4604      	mov	r4, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f000 81d8 	beq.w	800a1de <_dtoa_r+0xb5e>
 8009e2e:	461a      	mov	r2, r3
 8009e30:	4601      	mov	r1, r0
 8009e32:	4648      	mov	r0, r9
 8009e34:	f001 f838 	bl	800aea8 <__pow5mult>
 8009e38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	f300 809f 	bgt.w	8009f80 <_dtoa_r+0x900>
 8009e42:	9b06      	ldr	r3, [sp, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f040 8097 	bne.w	8009f78 <_dtoa_r+0x8f8>
 8009e4a:	9b07      	ldr	r3, [sp, #28]
 8009e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f040 8093 	bne.w	8009f7c <_dtoa_r+0x8fc>
 8009e56:	9b07      	ldr	r3, [sp, #28]
 8009e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e5c:	0d1b      	lsrs	r3, r3, #20
 8009e5e:	051b      	lsls	r3, r3, #20
 8009e60:	b133      	cbz	r3, 8009e70 <_dtoa_r+0x7f0>
 8009e62:	9b04      	ldr	r3, [sp, #16]
 8009e64:	3301      	adds	r3, #1
 8009e66:	9304      	str	r3, [sp, #16]
 8009e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e6e:	2301      	movs	r3, #1
 8009e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 81b8 	beq.w	800a1ea <_dtoa_r+0xb6a>
 8009e7a:	6923      	ldr	r3, [r4, #16]
 8009e7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e80:	6918      	ldr	r0, [r3, #16]
 8009e82:	f000 ff0d 	bl	800aca0 <__hi0bits>
 8009e86:	f1c0 0020 	rsb	r0, r0, #32
 8009e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e8c:	4418      	add	r0, r3
 8009e8e:	f010 001f 	ands.w	r0, r0, #31
 8009e92:	f000 8082 	beq.w	8009f9a <_dtoa_r+0x91a>
 8009e96:	f1c0 0320 	rsb	r3, r0, #32
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	dd73      	ble.n	8009f86 <_dtoa_r+0x906>
 8009e9e:	9b04      	ldr	r3, [sp, #16]
 8009ea0:	f1c0 001c 	rsb	r0, r0, #28
 8009ea4:	4403      	add	r3, r0
 8009ea6:	9304      	str	r3, [sp, #16]
 8009ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eaa:	4406      	add	r6, r0
 8009eac:	4403      	add	r3, r0
 8009eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eb0:	9b04      	ldr	r3, [sp, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	dd05      	ble.n	8009ec2 <_dtoa_r+0x842>
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	4648      	mov	r0, r9
 8009eba:	9903      	ldr	r1, [sp, #12]
 8009ebc:	f001 f84e 	bl	800af5c <__lshift>
 8009ec0:	9003      	str	r0, [sp, #12]
 8009ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	dd05      	ble.n	8009ed4 <_dtoa_r+0x854>
 8009ec8:	4621      	mov	r1, r4
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4648      	mov	r0, r9
 8009ece:	f001 f845 	bl	800af5c <__lshift>
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d061      	beq.n	8009f9e <_dtoa_r+0x91e>
 8009eda:	4621      	mov	r1, r4
 8009edc:	9803      	ldr	r0, [sp, #12]
 8009ede:	f001 f8a9 	bl	800b034 <__mcmp>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	da5b      	bge.n	8009f9e <_dtoa_r+0x91e>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	220a      	movs	r2, #10
 8009eea:	4648      	mov	r0, r9
 8009eec:	9903      	ldr	r1, [sp, #12]
 8009eee:	f000 fe47 	bl	800ab80 <__multadd>
 8009ef2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ef4:	f107 38ff 	add.w	r8, r7, #4294967295
 8009ef8:	9003      	str	r0, [sp, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 8177 	beq.w	800a1ee <_dtoa_r+0xb6e>
 8009f00:	4629      	mov	r1, r5
 8009f02:	2300      	movs	r3, #0
 8009f04:	220a      	movs	r2, #10
 8009f06:	4648      	mov	r0, r9
 8009f08:	f000 fe3a 	bl	800ab80 <__multadd>
 8009f0c:	f1bb 0f00 	cmp.w	fp, #0
 8009f10:	4605      	mov	r5, r0
 8009f12:	dc6f      	bgt.n	8009ff4 <_dtoa_r+0x974>
 8009f14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	dc49      	bgt.n	8009fae <_dtoa_r+0x92e>
 8009f1a:	e06b      	b.n	8009ff4 <_dtoa_r+0x974>
 8009f1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f22:	e73c      	b.n	8009d9e <_dtoa_r+0x71e>
 8009f24:	3fe00000 	.word	0x3fe00000
 8009f28:	40240000 	.word	0x40240000
 8009f2c:	9b08      	ldr	r3, [sp, #32]
 8009f2e:	1e5c      	subs	r4, r3, #1
 8009f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f32:	42a3      	cmp	r3, r4
 8009f34:	db09      	blt.n	8009f4a <_dtoa_r+0x8ca>
 8009f36:	1b1c      	subs	r4, r3, r4
 8009f38:	9b08      	ldr	r3, [sp, #32]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f6bf af30 	bge.w	8009da0 <_dtoa_r+0x720>
 8009f40:	9b04      	ldr	r3, [sp, #16]
 8009f42:	9a08      	ldr	r2, [sp, #32]
 8009f44:	1a9e      	subs	r6, r3, r2
 8009f46:	2300      	movs	r3, #0
 8009f48:	e72b      	b.n	8009da2 <_dtoa_r+0x722>
 8009f4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f4e:	1ae3      	subs	r3, r4, r3
 8009f50:	441a      	add	r2, r3
 8009f52:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f54:	9e04      	ldr	r6, [sp, #16]
 8009f56:	2400      	movs	r4, #0
 8009f58:	9b08      	ldr	r3, [sp, #32]
 8009f5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f5c:	e721      	b.n	8009da2 <_dtoa_r+0x722>
 8009f5e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f60:	9e04      	ldr	r6, [sp, #16]
 8009f62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009f64:	e728      	b.n	8009db8 <_dtoa_r+0x738>
 8009f66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f6a:	e751      	b.n	8009e10 <_dtoa_r+0x790>
 8009f6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f6e:	9903      	ldr	r1, [sp, #12]
 8009f70:	e750      	b.n	8009e14 <_dtoa_r+0x794>
 8009f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f76:	e751      	b.n	8009e1c <_dtoa_r+0x79c>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	e779      	b.n	8009e70 <_dtoa_r+0x7f0>
 8009f7c:	9b06      	ldr	r3, [sp, #24]
 8009f7e:	e777      	b.n	8009e70 <_dtoa_r+0x7f0>
 8009f80:	2300      	movs	r3, #0
 8009f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f84:	e779      	b.n	8009e7a <_dtoa_r+0x7fa>
 8009f86:	d093      	beq.n	8009eb0 <_dtoa_r+0x830>
 8009f88:	9a04      	ldr	r2, [sp, #16]
 8009f8a:	331c      	adds	r3, #28
 8009f8c:	441a      	add	r2, r3
 8009f8e:	9204      	str	r2, [sp, #16]
 8009f90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f92:	441e      	add	r6, r3
 8009f94:	441a      	add	r2, r3
 8009f96:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f98:	e78a      	b.n	8009eb0 <_dtoa_r+0x830>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	e7f4      	b.n	8009f88 <_dtoa_r+0x908>
 8009f9e:	9b08      	ldr	r3, [sp, #32]
 8009fa0:	46b8      	mov	r8, r7
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dc20      	bgt.n	8009fe8 <_dtoa_r+0x968>
 8009fa6:	469b      	mov	fp, r3
 8009fa8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	dd1e      	ble.n	8009fec <_dtoa_r+0x96c>
 8009fae:	f1bb 0f00 	cmp.w	fp, #0
 8009fb2:	f47f adb1 	bne.w	8009b18 <_dtoa_r+0x498>
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	465b      	mov	r3, fp
 8009fba:	2205      	movs	r2, #5
 8009fbc:	4648      	mov	r0, r9
 8009fbe:	f000 fddf 	bl	800ab80 <__multadd>
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	9803      	ldr	r0, [sp, #12]
 8009fc8:	f001 f834 	bl	800b034 <__mcmp>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	f77f ada3 	ble.w	8009b18 <_dtoa_r+0x498>
 8009fd2:	4656      	mov	r6, sl
 8009fd4:	2331      	movs	r3, #49	@ 0x31
 8009fd6:	f108 0801 	add.w	r8, r8, #1
 8009fda:	f806 3b01 	strb.w	r3, [r6], #1
 8009fde:	e59f      	b.n	8009b20 <_dtoa_r+0x4a0>
 8009fe0:	46b8      	mov	r8, r7
 8009fe2:	9c08      	ldr	r4, [sp, #32]
 8009fe4:	4625      	mov	r5, r4
 8009fe6:	e7f4      	b.n	8009fd2 <_dtoa_r+0x952>
 8009fe8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009fec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 8101 	beq.w	800a1f6 <_dtoa_r+0xb76>
 8009ff4:	2e00      	cmp	r6, #0
 8009ff6:	dd05      	ble.n	800a004 <_dtoa_r+0x984>
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	4632      	mov	r2, r6
 8009ffc:	4648      	mov	r0, r9
 8009ffe:	f000 ffad 	bl	800af5c <__lshift>
 800a002:	4605      	mov	r5, r0
 800a004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a006:	2b00      	cmp	r3, #0
 800a008:	d05c      	beq.n	800a0c4 <_dtoa_r+0xa44>
 800a00a:	4648      	mov	r0, r9
 800a00c:	6869      	ldr	r1, [r5, #4]
 800a00e:	f000 fd55 	bl	800aabc <_Balloc>
 800a012:	4606      	mov	r6, r0
 800a014:	b928      	cbnz	r0, 800a022 <_dtoa_r+0x9a2>
 800a016:	4602      	mov	r2, r0
 800a018:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a01c:	4b80      	ldr	r3, [pc, #512]	@ (800a220 <_dtoa_r+0xba0>)
 800a01e:	f7ff bb43 	b.w	80096a8 <_dtoa_r+0x28>
 800a022:	692a      	ldr	r2, [r5, #16]
 800a024:	f105 010c 	add.w	r1, r5, #12
 800a028:	3202      	adds	r2, #2
 800a02a:	0092      	lsls	r2, r2, #2
 800a02c:	300c      	adds	r0, #12
 800a02e:	f7ff fa8a 	bl	8009546 <memcpy>
 800a032:	2201      	movs	r2, #1
 800a034:	4631      	mov	r1, r6
 800a036:	4648      	mov	r0, r9
 800a038:	f000 ff90 	bl	800af5c <__lshift>
 800a03c:	462f      	mov	r7, r5
 800a03e:	4605      	mov	r5, r0
 800a040:	f10a 0301 	add.w	r3, sl, #1
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	eb0a 030b 	add.w	r3, sl, fp
 800a04a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a04c:	9b06      	ldr	r3, [sp, #24]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	9309      	str	r3, [sp, #36]	@ 0x24
 800a054:	9b04      	ldr	r3, [sp, #16]
 800a056:	4621      	mov	r1, r4
 800a058:	9803      	ldr	r0, [sp, #12]
 800a05a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a05e:	f7ff fa87 	bl	8009570 <quorem>
 800a062:	4603      	mov	r3, r0
 800a064:	4639      	mov	r1, r7
 800a066:	3330      	adds	r3, #48	@ 0x30
 800a068:	9006      	str	r0, [sp, #24]
 800a06a:	9803      	ldr	r0, [sp, #12]
 800a06c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a06e:	f000 ffe1 	bl	800b034 <__mcmp>
 800a072:	462a      	mov	r2, r5
 800a074:	9008      	str	r0, [sp, #32]
 800a076:	4621      	mov	r1, r4
 800a078:	4648      	mov	r0, r9
 800a07a:	f000 fff7 	bl	800b06c <__mdiff>
 800a07e:	68c2      	ldr	r2, [r0, #12]
 800a080:	4606      	mov	r6, r0
 800a082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a084:	bb02      	cbnz	r2, 800a0c8 <_dtoa_r+0xa48>
 800a086:	4601      	mov	r1, r0
 800a088:	9803      	ldr	r0, [sp, #12]
 800a08a:	f000 ffd3 	bl	800b034 <__mcmp>
 800a08e:	4602      	mov	r2, r0
 800a090:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a092:	4631      	mov	r1, r6
 800a094:	4648      	mov	r0, r9
 800a096:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800a09a:	f000 fd4f 	bl	800ab3c <_Bfree>
 800a09e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a0a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a0a2:	9e04      	ldr	r6, [sp, #16]
 800a0a4:	ea42 0103 	orr.w	r1, r2, r3
 800a0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0aa:	4319      	orrs	r1, r3
 800a0ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0ae:	d10d      	bne.n	800a0cc <_dtoa_r+0xa4c>
 800a0b0:	2b39      	cmp	r3, #57	@ 0x39
 800a0b2:	d027      	beq.n	800a104 <_dtoa_r+0xa84>
 800a0b4:	9a08      	ldr	r2, [sp, #32]
 800a0b6:	2a00      	cmp	r2, #0
 800a0b8:	dd01      	ble.n	800a0be <_dtoa_r+0xa3e>
 800a0ba:	9b06      	ldr	r3, [sp, #24]
 800a0bc:	3331      	adds	r3, #49	@ 0x31
 800a0be:	f88b 3000 	strb.w	r3, [fp]
 800a0c2:	e52e      	b.n	8009b22 <_dtoa_r+0x4a2>
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	e7b9      	b.n	800a03c <_dtoa_r+0x9bc>
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	e7e2      	b.n	800a092 <_dtoa_r+0xa12>
 800a0cc:	9908      	ldr	r1, [sp, #32]
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	db04      	blt.n	800a0dc <_dtoa_r+0xa5c>
 800a0d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800a0d4:	4301      	orrs	r1, r0
 800a0d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0d8:	4301      	orrs	r1, r0
 800a0da:	d120      	bne.n	800a11e <_dtoa_r+0xa9e>
 800a0dc:	2a00      	cmp	r2, #0
 800a0de:	ddee      	ble.n	800a0be <_dtoa_r+0xa3e>
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	9903      	ldr	r1, [sp, #12]
 800a0e4:	4648      	mov	r0, r9
 800a0e6:	9304      	str	r3, [sp, #16]
 800a0e8:	f000 ff38 	bl	800af5c <__lshift>
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	9003      	str	r0, [sp, #12]
 800a0f0:	f000 ffa0 	bl	800b034 <__mcmp>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	9b04      	ldr	r3, [sp, #16]
 800a0f8:	dc02      	bgt.n	800a100 <_dtoa_r+0xa80>
 800a0fa:	d1e0      	bne.n	800a0be <_dtoa_r+0xa3e>
 800a0fc:	07da      	lsls	r2, r3, #31
 800a0fe:	d5de      	bpl.n	800a0be <_dtoa_r+0xa3e>
 800a100:	2b39      	cmp	r3, #57	@ 0x39
 800a102:	d1da      	bne.n	800a0ba <_dtoa_r+0xa3a>
 800a104:	2339      	movs	r3, #57	@ 0x39
 800a106:	f88b 3000 	strb.w	r3, [fp]
 800a10a:	4633      	mov	r3, r6
 800a10c:	461e      	mov	r6, r3
 800a10e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a112:	3b01      	subs	r3, #1
 800a114:	2a39      	cmp	r2, #57	@ 0x39
 800a116:	d04e      	beq.n	800a1b6 <_dtoa_r+0xb36>
 800a118:	3201      	adds	r2, #1
 800a11a:	701a      	strb	r2, [r3, #0]
 800a11c:	e501      	b.n	8009b22 <_dtoa_r+0x4a2>
 800a11e:	2a00      	cmp	r2, #0
 800a120:	dd03      	ble.n	800a12a <_dtoa_r+0xaaa>
 800a122:	2b39      	cmp	r3, #57	@ 0x39
 800a124:	d0ee      	beq.n	800a104 <_dtoa_r+0xa84>
 800a126:	3301      	adds	r3, #1
 800a128:	e7c9      	b.n	800a0be <_dtoa_r+0xa3e>
 800a12a:	9a04      	ldr	r2, [sp, #16]
 800a12c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a12e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a132:	428a      	cmp	r2, r1
 800a134:	d028      	beq.n	800a188 <_dtoa_r+0xb08>
 800a136:	2300      	movs	r3, #0
 800a138:	220a      	movs	r2, #10
 800a13a:	9903      	ldr	r1, [sp, #12]
 800a13c:	4648      	mov	r0, r9
 800a13e:	f000 fd1f 	bl	800ab80 <__multadd>
 800a142:	42af      	cmp	r7, r5
 800a144:	9003      	str	r0, [sp, #12]
 800a146:	f04f 0300 	mov.w	r3, #0
 800a14a:	f04f 020a 	mov.w	r2, #10
 800a14e:	4639      	mov	r1, r7
 800a150:	4648      	mov	r0, r9
 800a152:	d107      	bne.n	800a164 <_dtoa_r+0xae4>
 800a154:	f000 fd14 	bl	800ab80 <__multadd>
 800a158:	4607      	mov	r7, r0
 800a15a:	4605      	mov	r5, r0
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	3301      	adds	r3, #1
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	e777      	b.n	800a054 <_dtoa_r+0x9d4>
 800a164:	f000 fd0c 	bl	800ab80 <__multadd>
 800a168:	4629      	mov	r1, r5
 800a16a:	4607      	mov	r7, r0
 800a16c:	2300      	movs	r3, #0
 800a16e:	220a      	movs	r2, #10
 800a170:	4648      	mov	r0, r9
 800a172:	f000 fd05 	bl	800ab80 <__multadd>
 800a176:	4605      	mov	r5, r0
 800a178:	e7f0      	b.n	800a15c <_dtoa_r+0xadc>
 800a17a:	f1bb 0f00 	cmp.w	fp, #0
 800a17e:	bfcc      	ite	gt
 800a180:	465e      	movgt	r6, fp
 800a182:	2601      	movle	r6, #1
 800a184:	2700      	movs	r7, #0
 800a186:	4456      	add	r6, sl
 800a188:	2201      	movs	r2, #1
 800a18a:	9903      	ldr	r1, [sp, #12]
 800a18c:	4648      	mov	r0, r9
 800a18e:	9304      	str	r3, [sp, #16]
 800a190:	f000 fee4 	bl	800af5c <__lshift>
 800a194:	4621      	mov	r1, r4
 800a196:	9003      	str	r0, [sp, #12]
 800a198:	f000 ff4c 	bl	800b034 <__mcmp>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	dcb4      	bgt.n	800a10a <_dtoa_r+0xa8a>
 800a1a0:	d102      	bne.n	800a1a8 <_dtoa_r+0xb28>
 800a1a2:	9b04      	ldr	r3, [sp, #16]
 800a1a4:	07db      	lsls	r3, r3, #31
 800a1a6:	d4b0      	bmi.n	800a10a <_dtoa_r+0xa8a>
 800a1a8:	4633      	mov	r3, r6
 800a1aa:	461e      	mov	r6, r3
 800a1ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1b0:	2a30      	cmp	r2, #48	@ 0x30
 800a1b2:	d0fa      	beq.n	800a1aa <_dtoa_r+0xb2a>
 800a1b4:	e4b5      	b.n	8009b22 <_dtoa_r+0x4a2>
 800a1b6:	459a      	cmp	sl, r3
 800a1b8:	d1a8      	bne.n	800a10c <_dtoa_r+0xa8c>
 800a1ba:	2331      	movs	r3, #49	@ 0x31
 800a1bc:	f108 0801 	add.w	r8, r8, #1
 800a1c0:	f88a 3000 	strb.w	r3, [sl]
 800a1c4:	e4ad      	b.n	8009b22 <_dtoa_r+0x4a2>
 800a1c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a1c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a224 <_dtoa_r+0xba4>
 800a1cc:	b11b      	cbz	r3, 800a1d6 <_dtoa_r+0xb56>
 800a1ce:	f10a 0308 	add.w	r3, sl, #8
 800a1d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	4650      	mov	r0, sl
 800a1d8:	b017      	add	sp, #92	@ 0x5c
 800a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	f77f ae2e 	ble.w	8009e42 <_dtoa_r+0x7c2>
 800a1e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ea:	2001      	movs	r0, #1
 800a1ec:	e64d      	b.n	8009e8a <_dtoa_r+0x80a>
 800a1ee:	f1bb 0f00 	cmp.w	fp, #0
 800a1f2:	f77f aed9 	ble.w	8009fa8 <_dtoa_r+0x928>
 800a1f6:	4656      	mov	r6, sl
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	9803      	ldr	r0, [sp, #12]
 800a1fc:	f7ff f9b8 	bl	8009570 <quorem>
 800a200:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a204:	f806 3b01 	strb.w	r3, [r6], #1
 800a208:	eba6 020a 	sub.w	r2, r6, sl
 800a20c:	4593      	cmp	fp, r2
 800a20e:	ddb4      	ble.n	800a17a <_dtoa_r+0xafa>
 800a210:	2300      	movs	r3, #0
 800a212:	220a      	movs	r2, #10
 800a214:	4648      	mov	r0, r9
 800a216:	9903      	ldr	r1, [sp, #12]
 800a218:	f000 fcb2 	bl	800ab80 <__multadd>
 800a21c:	9003      	str	r0, [sp, #12]
 800a21e:	e7eb      	b.n	800a1f8 <_dtoa_r+0xb78>
 800a220:	0800c190 	.word	0x0800c190
 800a224:	0800c114 	.word	0x0800c114

0800a228 <_free_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4605      	mov	r5, r0
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d040      	beq.n	800a2b2 <_free_r+0x8a>
 800a230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a234:	1f0c      	subs	r4, r1, #4
 800a236:	2b00      	cmp	r3, #0
 800a238:	bfb8      	it	lt
 800a23a:	18e4      	addlt	r4, r4, r3
 800a23c:	f000 fc32 	bl	800aaa4 <__malloc_lock>
 800a240:	4a1c      	ldr	r2, [pc, #112]	@ (800a2b4 <_free_r+0x8c>)
 800a242:	6813      	ldr	r3, [r2, #0]
 800a244:	b933      	cbnz	r3, 800a254 <_free_r+0x2c>
 800a246:	6063      	str	r3, [r4, #4]
 800a248:	6014      	str	r4, [r2, #0]
 800a24a:	4628      	mov	r0, r5
 800a24c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a250:	f000 bc2e 	b.w	800aab0 <__malloc_unlock>
 800a254:	42a3      	cmp	r3, r4
 800a256:	d908      	bls.n	800a26a <_free_r+0x42>
 800a258:	6820      	ldr	r0, [r4, #0]
 800a25a:	1821      	adds	r1, r4, r0
 800a25c:	428b      	cmp	r3, r1
 800a25e:	bf01      	itttt	eq
 800a260:	6819      	ldreq	r1, [r3, #0]
 800a262:	685b      	ldreq	r3, [r3, #4]
 800a264:	1809      	addeq	r1, r1, r0
 800a266:	6021      	streq	r1, [r4, #0]
 800a268:	e7ed      	b.n	800a246 <_free_r+0x1e>
 800a26a:	461a      	mov	r2, r3
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	b10b      	cbz	r3, 800a274 <_free_r+0x4c>
 800a270:	42a3      	cmp	r3, r4
 800a272:	d9fa      	bls.n	800a26a <_free_r+0x42>
 800a274:	6811      	ldr	r1, [r2, #0]
 800a276:	1850      	adds	r0, r2, r1
 800a278:	42a0      	cmp	r0, r4
 800a27a:	d10b      	bne.n	800a294 <_free_r+0x6c>
 800a27c:	6820      	ldr	r0, [r4, #0]
 800a27e:	4401      	add	r1, r0
 800a280:	1850      	adds	r0, r2, r1
 800a282:	4283      	cmp	r3, r0
 800a284:	6011      	str	r1, [r2, #0]
 800a286:	d1e0      	bne.n	800a24a <_free_r+0x22>
 800a288:	6818      	ldr	r0, [r3, #0]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	4408      	add	r0, r1
 800a28e:	6010      	str	r0, [r2, #0]
 800a290:	6053      	str	r3, [r2, #4]
 800a292:	e7da      	b.n	800a24a <_free_r+0x22>
 800a294:	d902      	bls.n	800a29c <_free_r+0x74>
 800a296:	230c      	movs	r3, #12
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	e7d6      	b.n	800a24a <_free_r+0x22>
 800a29c:	6820      	ldr	r0, [r4, #0]
 800a29e:	1821      	adds	r1, r4, r0
 800a2a0:	428b      	cmp	r3, r1
 800a2a2:	bf01      	itttt	eq
 800a2a4:	6819      	ldreq	r1, [r3, #0]
 800a2a6:	685b      	ldreq	r3, [r3, #4]
 800a2a8:	1809      	addeq	r1, r1, r0
 800a2aa:	6021      	streq	r1, [r4, #0]
 800a2ac:	6063      	str	r3, [r4, #4]
 800a2ae:	6054      	str	r4, [r2, #4]
 800a2b0:	e7cb      	b.n	800a24a <_free_r+0x22>
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	2000149c 	.word	0x2000149c

0800a2b8 <rshift>:
 800a2b8:	6903      	ldr	r3, [r0, #16]
 800a2ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2c2:	f100 0414 	add.w	r4, r0, #20
 800a2c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2ca:	dd46      	ble.n	800a35a <rshift+0xa2>
 800a2cc:	f011 011f 	ands.w	r1, r1, #31
 800a2d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2d8:	d10c      	bne.n	800a2f4 <rshift+0x3c>
 800a2da:	4629      	mov	r1, r5
 800a2dc:	f100 0710 	add.w	r7, r0, #16
 800a2e0:	42b1      	cmp	r1, r6
 800a2e2:	d335      	bcc.n	800a350 <rshift+0x98>
 800a2e4:	1a9b      	subs	r3, r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	1eea      	subs	r2, r5, #3
 800a2ea:	4296      	cmp	r6, r2
 800a2ec:	bf38      	it	cc
 800a2ee:	2300      	movcc	r3, #0
 800a2f0:	4423      	add	r3, r4
 800a2f2:	e015      	b.n	800a320 <rshift+0x68>
 800a2f4:	46a1      	mov	r9, r4
 800a2f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a2fa:	f1c1 0820 	rsb	r8, r1, #32
 800a2fe:	40cf      	lsrs	r7, r1
 800a300:	f105 0e04 	add.w	lr, r5, #4
 800a304:	4576      	cmp	r6, lr
 800a306:	46f4      	mov	ip, lr
 800a308:	d816      	bhi.n	800a338 <rshift+0x80>
 800a30a:	1a9a      	subs	r2, r3, r2
 800a30c:	0092      	lsls	r2, r2, #2
 800a30e:	3a04      	subs	r2, #4
 800a310:	3501      	adds	r5, #1
 800a312:	42ae      	cmp	r6, r5
 800a314:	bf38      	it	cc
 800a316:	2200      	movcc	r2, #0
 800a318:	18a3      	adds	r3, r4, r2
 800a31a:	50a7      	str	r7, [r4, r2]
 800a31c:	b107      	cbz	r7, 800a320 <rshift+0x68>
 800a31e:	3304      	adds	r3, #4
 800a320:	42a3      	cmp	r3, r4
 800a322:	eba3 0204 	sub.w	r2, r3, r4
 800a326:	bf08      	it	eq
 800a328:	2300      	moveq	r3, #0
 800a32a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a32e:	6102      	str	r2, [r0, #16]
 800a330:	bf08      	it	eq
 800a332:	6143      	streq	r3, [r0, #20]
 800a334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a338:	f8dc c000 	ldr.w	ip, [ip]
 800a33c:	fa0c fc08 	lsl.w	ip, ip, r8
 800a340:	ea4c 0707 	orr.w	r7, ip, r7
 800a344:	f849 7b04 	str.w	r7, [r9], #4
 800a348:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a34c:	40cf      	lsrs	r7, r1
 800a34e:	e7d9      	b.n	800a304 <rshift+0x4c>
 800a350:	f851 cb04 	ldr.w	ip, [r1], #4
 800a354:	f847 cf04 	str.w	ip, [r7, #4]!
 800a358:	e7c2      	b.n	800a2e0 <rshift+0x28>
 800a35a:	4623      	mov	r3, r4
 800a35c:	e7e0      	b.n	800a320 <rshift+0x68>

0800a35e <__hexdig_fun>:
 800a35e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a362:	2b09      	cmp	r3, #9
 800a364:	d802      	bhi.n	800a36c <__hexdig_fun+0xe>
 800a366:	3820      	subs	r0, #32
 800a368:	b2c0      	uxtb	r0, r0
 800a36a:	4770      	bx	lr
 800a36c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a370:	2b05      	cmp	r3, #5
 800a372:	d801      	bhi.n	800a378 <__hexdig_fun+0x1a>
 800a374:	3847      	subs	r0, #71	@ 0x47
 800a376:	e7f7      	b.n	800a368 <__hexdig_fun+0xa>
 800a378:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a37c:	2b05      	cmp	r3, #5
 800a37e:	d801      	bhi.n	800a384 <__hexdig_fun+0x26>
 800a380:	3827      	subs	r0, #39	@ 0x27
 800a382:	e7f1      	b.n	800a368 <__hexdig_fun+0xa>
 800a384:	2000      	movs	r0, #0
 800a386:	4770      	bx	lr

0800a388 <__gethex>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	468a      	mov	sl, r1
 800a38e:	4690      	mov	r8, r2
 800a390:	b085      	sub	sp, #20
 800a392:	9302      	str	r3, [sp, #8]
 800a394:	680b      	ldr	r3, [r1, #0]
 800a396:	9001      	str	r0, [sp, #4]
 800a398:	1c9c      	adds	r4, r3, #2
 800a39a:	46a1      	mov	r9, r4
 800a39c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a3a0:	2830      	cmp	r0, #48	@ 0x30
 800a3a2:	d0fa      	beq.n	800a39a <__gethex+0x12>
 800a3a4:	eba9 0303 	sub.w	r3, r9, r3
 800a3a8:	f1a3 0b02 	sub.w	fp, r3, #2
 800a3ac:	f7ff ffd7 	bl	800a35e <__hexdig_fun>
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d168      	bne.n	800a488 <__gethex+0x100>
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	4648      	mov	r0, r9
 800a3ba:	499f      	ldr	r1, [pc, #636]	@ (800a638 <__gethex+0x2b0>)
 800a3bc:	f7ff f816 	bl	80093ec <strncmp>
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d167      	bne.n	800a496 <__gethex+0x10e>
 800a3c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a3ca:	4626      	mov	r6, r4
 800a3cc:	f7ff ffc7 	bl	800a35e <__hexdig_fun>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d062      	beq.n	800a49a <__gethex+0x112>
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	7818      	ldrb	r0, [r3, #0]
 800a3d8:	4699      	mov	r9, r3
 800a3da:	2830      	cmp	r0, #48	@ 0x30
 800a3dc:	f103 0301 	add.w	r3, r3, #1
 800a3e0:	d0f9      	beq.n	800a3d6 <__gethex+0x4e>
 800a3e2:	f7ff ffbc 	bl	800a35e <__hexdig_fun>
 800a3e6:	fab0 f580 	clz	r5, r0
 800a3ea:	f04f 0b01 	mov.w	fp, #1
 800a3ee:	096d      	lsrs	r5, r5, #5
 800a3f0:	464a      	mov	r2, r9
 800a3f2:	4616      	mov	r6, r2
 800a3f4:	7830      	ldrb	r0, [r6, #0]
 800a3f6:	3201      	adds	r2, #1
 800a3f8:	f7ff ffb1 	bl	800a35e <__hexdig_fun>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d1f8      	bne.n	800a3f2 <__gethex+0x6a>
 800a400:	2201      	movs	r2, #1
 800a402:	4630      	mov	r0, r6
 800a404:	498c      	ldr	r1, [pc, #560]	@ (800a638 <__gethex+0x2b0>)
 800a406:	f7fe fff1 	bl	80093ec <strncmp>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d13f      	bne.n	800a48e <__gethex+0x106>
 800a40e:	b944      	cbnz	r4, 800a422 <__gethex+0x9a>
 800a410:	1c74      	adds	r4, r6, #1
 800a412:	4622      	mov	r2, r4
 800a414:	4616      	mov	r6, r2
 800a416:	7830      	ldrb	r0, [r6, #0]
 800a418:	3201      	adds	r2, #1
 800a41a:	f7ff ffa0 	bl	800a35e <__hexdig_fun>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d1f8      	bne.n	800a414 <__gethex+0x8c>
 800a422:	1ba4      	subs	r4, r4, r6
 800a424:	00a7      	lsls	r7, r4, #2
 800a426:	7833      	ldrb	r3, [r6, #0]
 800a428:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a42c:	2b50      	cmp	r3, #80	@ 0x50
 800a42e:	d13e      	bne.n	800a4ae <__gethex+0x126>
 800a430:	7873      	ldrb	r3, [r6, #1]
 800a432:	2b2b      	cmp	r3, #43	@ 0x2b
 800a434:	d033      	beq.n	800a49e <__gethex+0x116>
 800a436:	2b2d      	cmp	r3, #45	@ 0x2d
 800a438:	d034      	beq.n	800a4a4 <__gethex+0x11c>
 800a43a:	2400      	movs	r4, #0
 800a43c:	1c71      	adds	r1, r6, #1
 800a43e:	7808      	ldrb	r0, [r1, #0]
 800a440:	f7ff ff8d 	bl	800a35e <__hexdig_fun>
 800a444:	1e43      	subs	r3, r0, #1
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b18      	cmp	r3, #24
 800a44a:	d830      	bhi.n	800a4ae <__gethex+0x126>
 800a44c:	f1a0 0210 	sub.w	r2, r0, #16
 800a450:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a454:	f7ff ff83 	bl	800a35e <__hexdig_fun>
 800a458:	f100 3cff 	add.w	ip, r0, #4294967295
 800a45c:	fa5f fc8c 	uxtb.w	ip, ip
 800a460:	f1bc 0f18 	cmp.w	ip, #24
 800a464:	f04f 030a 	mov.w	r3, #10
 800a468:	d91e      	bls.n	800a4a8 <__gethex+0x120>
 800a46a:	b104      	cbz	r4, 800a46e <__gethex+0xe6>
 800a46c:	4252      	negs	r2, r2
 800a46e:	4417      	add	r7, r2
 800a470:	f8ca 1000 	str.w	r1, [sl]
 800a474:	b1ed      	cbz	r5, 800a4b2 <__gethex+0x12a>
 800a476:	f1bb 0f00 	cmp.w	fp, #0
 800a47a:	bf0c      	ite	eq
 800a47c:	2506      	moveq	r5, #6
 800a47e:	2500      	movne	r5, #0
 800a480:	4628      	mov	r0, r5
 800a482:	b005      	add	sp, #20
 800a484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a488:	2500      	movs	r5, #0
 800a48a:	462c      	mov	r4, r5
 800a48c:	e7b0      	b.n	800a3f0 <__gethex+0x68>
 800a48e:	2c00      	cmp	r4, #0
 800a490:	d1c7      	bne.n	800a422 <__gethex+0x9a>
 800a492:	4627      	mov	r7, r4
 800a494:	e7c7      	b.n	800a426 <__gethex+0x9e>
 800a496:	464e      	mov	r6, r9
 800a498:	462f      	mov	r7, r5
 800a49a:	2501      	movs	r5, #1
 800a49c:	e7c3      	b.n	800a426 <__gethex+0x9e>
 800a49e:	2400      	movs	r4, #0
 800a4a0:	1cb1      	adds	r1, r6, #2
 800a4a2:	e7cc      	b.n	800a43e <__gethex+0xb6>
 800a4a4:	2401      	movs	r4, #1
 800a4a6:	e7fb      	b.n	800a4a0 <__gethex+0x118>
 800a4a8:	fb03 0002 	mla	r0, r3, r2, r0
 800a4ac:	e7ce      	b.n	800a44c <__gethex+0xc4>
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	e7de      	b.n	800a470 <__gethex+0xe8>
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	eba6 0309 	sub.w	r3, r6, r9
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	2b07      	cmp	r3, #7
 800a4bc:	dc0a      	bgt.n	800a4d4 <__gethex+0x14c>
 800a4be:	9801      	ldr	r0, [sp, #4]
 800a4c0:	f000 fafc 	bl	800aabc <_Balloc>
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	b940      	cbnz	r0, 800a4da <__gethex+0x152>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	21e4      	movs	r1, #228	@ 0xe4
 800a4cc:	4b5b      	ldr	r3, [pc, #364]	@ (800a63c <__gethex+0x2b4>)
 800a4ce:	485c      	ldr	r0, [pc, #368]	@ (800a640 <__gethex+0x2b8>)
 800a4d0:	f001 f9ca 	bl	800b868 <__assert_func>
 800a4d4:	3101      	adds	r1, #1
 800a4d6:	105b      	asrs	r3, r3, #1
 800a4d8:	e7ef      	b.n	800a4ba <__gethex+0x132>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	f100 0a14 	add.w	sl, r0, #20
 800a4e0:	4655      	mov	r5, sl
 800a4e2:	469b      	mov	fp, r3
 800a4e4:	45b1      	cmp	r9, r6
 800a4e6:	d337      	bcc.n	800a558 <__gethex+0x1d0>
 800a4e8:	f845 bb04 	str.w	fp, [r5], #4
 800a4ec:	eba5 050a 	sub.w	r5, r5, sl
 800a4f0:	10ad      	asrs	r5, r5, #2
 800a4f2:	6125      	str	r5, [r4, #16]
 800a4f4:	4658      	mov	r0, fp
 800a4f6:	f000 fbd3 	bl	800aca0 <__hi0bits>
 800a4fa:	016d      	lsls	r5, r5, #5
 800a4fc:	f8d8 6000 	ldr.w	r6, [r8]
 800a500:	1a2d      	subs	r5, r5, r0
 800a502:	42b5      	cmp	r5, r6
 800a504:	dd54      	ble.n	800a5b0 <__gethex+0x228>
 800a506:	1bad      	subs	r5, r5, r6
 800a508:	4629      	mov	r1, r5
 800a50a:	4620      	mov	r0, r4
 800a50c:	f000 ff55 	bl	800b3ba <__any_on>
 800a510:	4681      	mov	r9, r0
 800a512:	b178      	cbz	r0, 800a534 <__gethex+0x1ac>
 800a514:	f04f 0901 	mov.w	r9, #1
 800a518:	1e6b      	subs	r3, r5, #1
 800a51a:	1159      	asrs	r1, r3, #5
 800a51c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a520:	f003 021f 	and.w	r2, r3, #31
 800a524:	fa09 f202 	lsl.w	r2, r9, r2
 800a528:	420a      	tst	r2, r1
 800a52a:	d003      	beq.n	800a534 <__gethex+0x1ac>
 800a52c:	454b      	cmp	r3, r9
 800a52e:	dc36      	bgt.n	800a59e <__gethex+0x216>
 800a530:	f04f 0902 	mov.w	r9, #2
 800a534:	4629      	mov	r1, r5
 800a536:	4620      	mov	r0, r4
 800a538:	f7ff febe 	bl	800a2b8 <rshift>
 800a53c:	442f      	add	r7, r5
 800a53e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a542:	42bb      	cmp	r3, r7
 800a544:	da42      	bge.n	800a5cc <__gethex+0x244>
 800a546:	4621      	mov	r1, r4
 800a548:	9801      	ldr	r0, [sp, #4]
 800a54a:	f000 faf7 	bl	800ab3c <_Bfree>
 800a54e:	2300      	movs	r3, #0
 800a550:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a552:	25a3      	movs	r5, #163	@ 0xa3
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	e793      	b.n	800a480 <__gethex+0xf8>
 800a558:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a55c:	2a2e      	cmp	r2, #46	@ 0x2e
 800a55e:	d012      	beq.n	800a586 <__gethex+0x1fe>
 800a560:	2b20      	cmp	r3, #32
 800a562:	d104      	bne.n	800a56e <__gethex+0x1e6>
 800a564:	f845 bb04 	str.w	fp, [r5], #4
 800a568:	f04f 0b00 	mov.w	fp, #0
 800a56c:	465b      	mov	r3, fp
 800a56e:	7830      	ldrb	r0, [r6, #0]
 800a570:	9303      	str	r3, [sp, #12]
 800a572:	f7ff fef4 	bl	800a35e <__hexdig_fun>
 800a576:	9b03      	ldr	r3, [sp, #12]
 800a578:	f000 000f 	and.w	r0, r0, #15
 800a57c:	4098      	lsls	r0, r3
 800a57e:	ea4b 0b00 	orr.w	fp, fp, r0
 800a582:	3304      	adds	r3, #4
 800a584:	e7ae      	b.n	800a4e4 <__gethex+0x15c>
 800a586:	45b1      	cmp	r9, r6
 800a588:	d8ea      	bhi.n	800a560 <__gethex+0x1d8>
 800a58a:	2201      	movs	r2, #1
 800a58c:	4630      	mov	r0, r6
 800a58e:	492a      	ldr	r1, [pc, #168]	@ (800a638 <__gethex+0x2b0>)
 800a590:	9303      	str	r3, [sp, #12]
 800a592:	f7fe ff2b 	bl	80093ec <strncmp>
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	2800      	cmp	r0, #0
 800a59a:	d1e1      	bne.n	800a560 <__gethex+0x1d8>
 800a59c:	e7a2      	b.n	800a4e4 <__gethex+0x15c>
 800a59e:	4620      	mov	r0, r4
 800a5a0:	1ea9      	subs	r1, r5, #2
 800a5a2:	f000 ff0a 	bl	800b3ba <__any_on>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d0c2      	beq.n	800a530 <__gethex+0x1a8>
 800a5aa:	f04f 0903 	mov.w	r9, #3
 800a5ae:	e7c1      	b.n	800a534 <__gethex+0x1ac>
 800a5b0:	da09      	bge.n	800a5c6 <__gethex+0x23e>
 800a5b2:	1b75      	subs	r5, r6, r5
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	9801      	ldr	r0, [sp, #4]
 800a5ba:	f000 fccf 	bl	800af5c <__lshift>
 800a5be:	4604      	mov	r4, r0
 800a5c0:	1b7f      	subs	r7, r7, r5
 800a5c2:	f100 0a14 	add.w	sl, r0, #20
 800a5c6:	f04f 0900 	mov.w	r9, #0
 800a5ca:	e7b8      	b.n	800a53e <__gethex+0x1b6>
 800a5cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5d0:	42bd      	cmp	r5, r7
 800a5d2:	dd6f      	ble.n	800a6b4 <__gethex+0x32c>
 800a5d4:	1bed      	subs	r5, r5, r7
 800a5d6:	42ae      	cmp	r6, r5
 800a5d8:	dc34      	bgt.n	800a644 <__gethex+0x2bc>
 800a5da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d022      	beq.n	800a628 <__gethex+0x2a0>
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	d024      	beq.n	800a630 <__gethex+0x2a8>
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d115      	bne.n	800a616 <__gethex+0x28e>
 800a5ea:	42ae      	cmp	r6, r5
 800a5ec:	d113      	bne.n	800a616 <__gethex+0x28e>
 800a5ee:	2e01      	cmp	r6, #1
 800a5f0:	d10b      	bne.n	800a60a <__gethex+0x282>
 800a5f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5f6:	9a02      	ldr	r2, [sp, #8]
 800a5f8:	2562      	movs	r5, #98	@ 0x62
 800a5fa:	6013      	str	r3, [r2, #0]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	6123      	str	r3, [r4, #16]
 800a600:	f8ca 3000 	str.w	r3, [sl]
 800a604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a606:	601c      	str	r4, [r3, #0]
 800a608:	e73a      	b.n	800a480 <__gethex+0xf8>
 800a60a:	4620      	mov	r0, r4
 800a60c:	1e71      	subs	r1, r6, #1
 800a60e:	f000 fed4 	bl	800b3ba <__any_on>
 800a612:	2800      	cmp	r0, #0
 800a614:	d1ed      	bne.n	800a5f2 <__gethex+0x26a>
 800a616:	4621      	mov	r1, r4
 800a618:	9801      	ldr	r0, [sp, #4]
 800a61a:	f000 fa8f 	bl	800ab3c <_Bfree>
 800a61e:	2300      	movs	r3, #0
 800a620:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a622:	2550      	movs	r5, #80	@ 0x50
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	e72b      	b.n	800a480 <__gethex+0xf8>
 800a628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1f3      	bne.n	800a616 <__gethex+0x28e>
 800a62e:	e7e0      	b.n	800a5f2 <__gethex+0x26a>
 800a630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1dd      	bne.n	800a5f2 <__gethex+0x26a>
 800a636:	e7ee      	b.n	800a616 <__gethex+0x28e>
 800a638:	0800c0d6 	.word	0x0800c0d6
 800a63c:	0800c190 	.word	0x0800c190
 800a640:	0800c1a1 	.word	0x0800c1a1
 800a644:	1e6f      	subs	r7, r5, #1
 800a646:	f1b9 0f00 	cmp.w	r9, #0
 800a64a:	d130      	bne.n	800a6ae <__gethex+0x326>
 800a64c:	b127      	cbz	r7, 800a658 <__gethex+0x2d0>
 800a64e:	4639      	mov	r1, r7
 800a650:	4620      	mov	r0, r4
 800a652:	f000 feb2 	bl	800b3ba <__any_on>
 800a656:	4681      	mov	r9, r0
 800a658:	2301      	movs	r3, #1
 800a65a:	4629      	mov	r1, r5
 800a65c:	1b76      	subs	r6, r6, r5
 800a65e:	2502      	movs	r5, #2
 800a660:	117a      	asrs	r2, r7, #5
 800a662:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a666:	f007 071f 	and.w	r7, r7, #31
 800a66a:	40bb      	lsls	r3, r7
 800a66c:	4213      	tst	r3, r2
 800a66e:	4620      	mov	r0, r4
 800a670:	bf18      	it	ne
 800a672:	f049 0902 	orrne.w	r9, r9, #2
 800a676:	f7ff fe1f 	bl	800a2b8 <rshift>
 800a67a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a67e:	f1b9 0f00 	cmp.w	r9, #0
 800a682:	d047      	beq.n	800a714 <__gethex+0x38c>
 800a684:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d015      	beq.n	800a6b8 <__gethex+0x330>
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d017      	beq.n	800a6c0 <__gethex+0x338>
 800a690:	2b01      	cmp	r3, #1
 800a692:	d109      	bne.n	800a6a8 <__gethex+0x320>
 800a694:	f019 0f02 	tst.w	r9, #2
 800a698:	d006      	beq.n	800a6a8 <__gethex+0x320>
 800a69a:	f8da 3000 	ldr.w	r3, [sl]
 800a69e:	ea49 0903 	orr.w	r9, r9, r3
 800a6a2:	f019 0f01 	tst.w	r9, #1
 800a6a6:	d10e      	bne.n	800a6c6 <__gethex+0x33e>
 800a6a8:	f045 0510 	orr.w	r5, r5, #16
 800a6ac:	e032      	b.n	800a714 <__gethex+0x38c>
 800a6ae:	f04f 0901 	mov.w	r9, #1
 800a6b2:	e7d1      	b.n	800a658 <__gethex+0x2d0>
 800a6b4:	2501      	movs	r5, #1
 800a6b6:	e7e2      	b.n	800a67e <__gethex+0x2f6>
 800a6b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6ba:	f1c3 0301 	rsb	r3, r3, #1
 800a6be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0f0      	beq.n	800a6a8 <__gethex+0x320>
 800a6c6:	f04f 0c00 	mov.w	ip, #0
 800a6ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6ce:	f104 0314 	add.w	r3, r4, #20
 800a6d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a6e4:	d01b      	beq.n	800a71e <__gethex+0x396>
 800a6e6:	3201      	adds	r2, #1
 800a6e8:	6002      	str	r2, [r0, #0]
 800a6ea:	2d02      	cmp	r5, #2
 800a6ec:	f104 0314 	add.w	r3, r4, #20
 800a6f0:	d13c      	bne.n	800a76c <__gethex+0x3e4>
 800a6f2:	f8d8 2000 	ldr.w	r2, [r8]
 800a6f6:	3a01      	subs	r2, #1
 800a6f8:	42b2      	cmp	r2, r6
 800a6fa:	d109      	bne.n	800a710 <__gethex+0x388>
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	1171      	asrs	r1, r6, #5
 800a700:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a704:	f006 061f 	and.w	r6, r6, #31
 800a708:	fa02 f606 	lsl.w	r6, r2, r6
 800a70c:	421e      	tst	r6, r3
 800a70e:	d13a      	bne.n	800a786 <__gethex+0x3fe>
 800a710:	f045 0520 	orr.w	r5, r5, #32
 800a714:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a716:	601c      	str	r4, [r3, #0]
 800a718:	9b02      	ldr	r3, [sp, #8]
 800a71a:	601f      	str	r7, [r3, #0]
 800a71c:	e6b0      	b.n	800a480 <__gethex+0xf8>
 800a71e:	4299      	cmp	r1, r3
 800a720:	f843 cc04 	str.w	ip, [r3, #-4]
 800a724:	d8d9      	bhi.n	800a6da <__gethex+0x352>
 800a726:	68a3      	ldr	r3, [r4, #8]
 800a728:	459b      	cmp	fp, r3
 800a72a:	db17      	blt.n	800a75c <__gethex+0x3d4>
 800a72c:	6861      	ldr	r1, [r4, #4]
 800a72e:	9801      	ldr	r0, [sp, #4]
 800a730:	3101      	adds	r1, #1
 800a732:	f000 f9c3 	bl	800aabc <_Balloc>
 800a736:	4681      	mov	r9, r0
 800a738:	b918      	cbnz	r0, 800a742 <__gethex+0x3ba>
 800a73a:	4602      	mov	r2, r0
 800a73c:	2184      	movs	r1, #132	@ 0x84
 800a73e:	4b19      	ldr	r3, [pc, #100]	@ (800a7a4 <__gethex+0x41c>)
 800a740:	e6c5      	b.n	800a4ce <__gethex+0x146>
 800a742:	6922      	ldr	r2, [r4, #16]
 800a744:	f104 010c 	add.w	r1, r4, #12
 800a748:	3202      	adds	r2, #2
 800a74a:	0092      	lsls	r2, r2, #2
 800a74c:	300c      	adds	r0, #12
 800a74e:	f7fe fefa 	bl	8009546 <memcpy>
 800a752:	4621      	mov	r1, r4
 800a754:	9801      	ldr	r0, [sp, #4]
 800a756:	f000 f9f1 	bl	800ab3c <_Bfree>
 800a75a:	464c      	mov	r4, r9
 800a75c:	6923      	ldr	r3, [r4, #16]
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	6122      	str	r2, [r4, #16]
 800a762:	2201      	movs	r2, #1
 800a764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a768:	615a      	str	r2, [r3, #20]
 800a76a:	e7be      	b.n	800a6ea <__gethex+0x362>
 800a76c:	6922      	ldr	r2, [r4, #16]
 800a76e:	455a      	cmp	r2, fp
 800a770:	dd0b      	ble.n	800a78a <__gethex+0x402>
 800a772:	2101      	movs	r1, #1
 800a774:	4620      	mov	r0, r4
 800a776:	f7ff fd9f 	bl	800a2b8 <rshift>
 800a77a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a77e:	3701      	adds	r7, #1
 800a780:	42bb      	cmp	r3, r7
 800a782:	f6ff aee0 	blt.w	800a546 <__gethex+0x1be>
 800a786:	2501      	movs	r5, #1
 800a788:	e7c2      	b.n	800a710 <__gethex+0x388>
 800a78a:	f016 061f 	ands.w	r6, r6, #31
 800a78e:	d0fa      	beq.n	800a786 <__gethex+0x3fe>
 800a790:	4453      	add	r3, sl
 800a792:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a796:	f000 fa83 	bl	800aca0 <__hi0bits>
 800a79a:	f1c6 0620 	rsb	r6, r6, #32
 800a79e:	42b0      	cmp	r0, r6
 800a7a0:	dbe7      	blt.n	800a772 <__gethex+0x3ea>
 800a7a2:	e7f0      	b.n	800a786 <__gethex+0x3fe>
 800a7a4:	0800c190 	.word	0x0800c190

0800a7a8 <L_shift>:
 800a7a8:	f1c2 0208 	rsb	r2, r2, #8
 800a7ac:	0092      	lsls	r2, r2, #2
 800a7ae:	b570      	push	{r4, r5, r6, lr}
 800a7b0:	f1c2 0620 	rsb	r6, r2, #32
 800a7b4:	6843      	ldr	r3, [r0, #4]
 800a7b6:	6804      	ldr	r4, [r0, #0]
 800a7b8:	fa03 f506 	lsl.w	r5, r3, r6
 800a7bc:	432c      	orrs	r4, r5
 800a7be:	40d3      	lsrs	r3, r2
 800a7c0:	6004      	str	r4, [r0, #0]
 800a7c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7c6:	4288      	cmp	r0, r1
 800a7c8:	d3f4      	bcc.n	800a7b4 <L_shift+0xc>
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}

0800a7cc <__match>:
 800a7cc:	b530      	push	{r4, r5, lr}
 800a7ce:	6803      	ldr	r3, [r0, #0]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7d6:	b914      	cbnz	r4, 800a7de <__match+0x12>
 800a7d8:	6003      	str	r3, [r0, #0]
 800a7da:	2001      	movs	r0, #1
 800a7dc:	bd30      	pop	{r4, r5, pc}
 800a7de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a7e6:	2d19      	cmp	r5, #25
 800a7e8:	bf98      	it	ls
 800a7ea:	3220      	addls	r2, #32
 800a7ec:	42a2      	cmp	r2, r4
 800a7ee:	d0f0      	beq.n	800a7d2 <__match+0x6>
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	e7f3      	b.n	800a7dc <__match+0x10>

0800a7f4 <__hexnan>:
 800a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f8:	2500      	movs	r5, #0
 800a7fa:	680b      	ldr	r3, [r1, #0]
 800a7fc:	4682      	mov	sl, r0
 800a7fe:	115e      	asrs	r6, r3, #5
 800a800:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a804:	f013 031f 	ands.w	r3, r3, #31
 800a808:	bf18      	it	ne
 800a80a:	3604      	addne	r6, #4
 800a80c:	1f37      	subs	r7, r6, #4
 800a80e:	4690      	mov	r8, r2
 800a810:	46b9      	mov	r9, r7
 800a812:	463c      	mov	r4, r7
 800a814:	46ab      	mov	fp, r5
 800a816:	b087      	sub	sp, #28
 800a818:	6801      	ldr	r1, [r0, #0]
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	f846 5c04 	str.w	r5, [r6, #-4]
 800a820:	9502      	str	r5, [sp, #8]
 800a822:	784a      	ldrb	r2, [r1, #1]
 800a824:	1c4b      	adds	r3, r1, #1
 800a826:	9303      	str	r3, [sp, #12]
 800a828:	b342      	cbz	r2, 800a87c <__hexnan+0x88>
 800a82a:	4610      	mov	r0, r2
 800a82c:	9105      	str	r1, [sp, #20]
 800a82e:	9204      	str	r2, [sp, #16]
 800a830:	f7ff fd95 	bl	800a35e <__hexdig_fun>
 800a834:	2800      	cmp	r0, #0
 800a836:	d151      	bne.n	800a8dc <__hexnan+0xe8>
 800a838:	9a04      	ldr	r2, [sp, #16]
 800a83a:	9905      	ldr	r1, [sp, #20]
 800a83c:	2a20      	cmp	r2, #32
 800a83e:	d818      	bhi.n	800a872 <__hexnan+0x7e>
 800a840:	9b02      	ldr	r3, [sp, #8]
 800a842:	459b      	cmp	fp, r3
 800a844:	dd13      	ble.n	800a86e <__hexnan+0x7a>
 800a846:	454c      	cmp	r4, r9
 800a848:	d206      	bcs.n	800a858 <__hexnan+0x64>
 800a84a:	2d07      	cmp	r5, #7
 800a84c:	dc04      	bgt.n	800a858 <__hexnan+0x64>
 800a84e:	462a      	mov	r2, r5
 800a850:	4649      	mov	r1, r9
 800a852:	4620      	mov	r0, r4
 800a854:	f7ff ffa8 	bl	800a7a8 <L_shift>
 800a858:	4544      	cmp	r4, r8
 800a85a:	d952      	bls.n	800a902 <__hexnan+0x10e>
 800a85c:	2300      	movs	r3, #0
 800a85e:	f1a4 0904 	sub.w	r9, r4, #4
 800a862:	f844 3c04 	str.w	r3, [r4, #-4]
 800a866:	461d      	mov	r5, r3
 800a868:	464c      	mov	r4, r9
 800a86a:	f8cd b008 	str.w	fp, [sp, #8]
 800a86e:	9903      	ldr	r1, [sp, #12]
 800a870:	e7d7      	b.n	800a822 <__hexnan+0x2e>
 800a872:	2a29      	cmp	r2, #41	@ 0x29
 800a874:	d157      	bne.n	800a926 <__hexnan+0x132>
 800a876:	3102      	adds	r1, #2
 800a878:	f8ca 1000 	str.w	r1, [sl]
 800a87c:	f1bb 0f00 	cmp.w	fp, #0
 800a880:	d051      	beq.n	800a926 <__hexnan+0x132>
 800a882:	454c      	cmp	r4, r9
 800a884:	d206      	bcs.n	800a894 <__hexnan+0xa0>
 800a886:	2d07      	cmp	r5, #7
 800a888:	dc04      	bgt.n	800a894 <__hexnan+0xa0>
 800a88a:	462a      	mov	r2, r5
 800a88c:	4649      	mov	r1, r9
 800a88e:	4620      	mov	r0, r4
 800a890:	f7ff ff8a 	bl	800a7a8 <L_shift>
 800a894:	4544      	cmp	r4, r8
 800a896:	d936      	bls.n	800a906 <__hexnan+0x112>
 800a898:	4623      	mov	r3, r4
 800a89a:	f1a8 0204 	sub.w	r2, r8, #4
 800a89e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8a2:	429f      	cmp	r7, r3
 800a8a4:	f842 1f04 	str.w	r1, [r2, #4]!
 800a8a8:	d2f9      	bcs.n	800a89e <__hexnan+0xaa>
 800a8aa:	1b3b      	subs	r3, r7, r4
 800a8ac:	f023 0303 	bic.w	r3, r3, #3
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	3401      	adds	r4, #1
 800a8b4:	3e03      	subs	r6, #3
 800a8b6:	42b4      	cmp	r4, r6
 800a8b8:	bf88      	it	hi
 800a8ba:	2304      	movhi	r3, #4
 800a8bc:	2200      	movs	r2, #0
 800a8be:	4443      	add	r3, r8
 800a8c0:	f843 2b04 	str.w	r2, [r3], #4
 800a8c4:	429f      	cmp	r7, r3
 800a8c6:	d2fb      	bcs.n	800a8c0 <__hexnan+0xcc>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	b91b      	cbnz	r3, 800a8d4 <__hexnan+0xe0>
 800a8cc:	4547      	cmp	r7, r8
 800a8ce:	d128      	bne.n	800a922 <__hexnan+0x12e>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	603b      	str	r3, [r7, #0]
 800a8d4:	2005      	movs	r0, #5
 800a8d6:	b007      	add	sp, #28
 800a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8dc:	3501      	adds	r5, #1
 800a8de:	2d08      	cmp	r5, #8
 800a8e0:	f10b 0b01 	add.w	fp, fp, #1
 800a8e4:	dd06      	ble.n	800a8f4 <__hexnan+0x100>
 800a8e6:	4544      	cmp	r4, r8
 800a8e8:	d9c1      	bls.n	800a86e <__hexnan+0x7a>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	2501      	movs	r5, #1
 800a8ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8f2:	3c04      	subs	r4, #4
 800a8f4:	6822      	ldr	r2, [r4, #0]
 800a8f6:	f000 000f 	and.w	r0, r0, #15
 800a8fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a8fe:	6020      	str	r0, [r4, #0]
 800a900:	e7b5      	b.n	800a86e <__hexnan+0x7a>
 800a902:	2508      	movs	r5, #8
 800a904:	e7b3      	b.n	800a86e <__hexnan+0x7a>
 800a906:	9b01      	ldr	r3, [sp, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d0dd      	beq.n	800a8c8 <__hexnan+0xd4>
 800a90c:	f04f 32ff 	mov.w	r2, #4294967295
 800a910:	f1c3 0320 	rsb	r3, r3, #32
 800a914:	40da      	lsrs	r2, r3
 800a916:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a91a:	4013      	ands	r3, r2
 800a91c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a920:	e7d2      	b.n	800a8c8 <__hexnan+0xd4>
 800a922:	3f04      	subs	r7, #4
 800a924:	e7d0      	b.n	800a8c8 <__hexnan+0xd4>
 800a926:	2004      	movs	r0, #4
 800a928:	e7d5      	b.n	800a8d6 <__hexnan+0xe2>
	...

0800a92c <malloc>:
 800a92c:	4b02      	ldr	r3, [pc, #8]	@ (800a938 <malloc+0xc>)
 800a92e:	4601      	mov	r1, r0
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	f000 b825 	b.w	800a980 <_malloc_r>
 800a936:	bf00      	nop
 800a938:	20000188 	.word	0x20000188

0800a93c <sbrk_aligned>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	4e0f      	ldr	r6, [pc, #60]	@ (800a97c <sbrk_aligned+0x40>)
 800a940:	460c      	mov	r4, r1
 800a942:	6831      	ldr	r1, [r6, #0]
 800a944:	4605      	mov	r5, r0
 800a946:	b911      	cbnz	r1, 800a94e <sbrk_aligned+0x12>
 800a948:	f000 ff7e 	bl	800b848 <_sbrk_r>
 800a94c:	6030      	str	r0, [r6, #0]
 800a94e:	4621      	mov	r1, r4
 800a950:	4628      	mov	r0, r5
 800a952:	f000 ff79 	bl	800b848 <_sbrk_r>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	d103      	bne.n	800a962 <sbrk_aligned+0x26>
 800a95a:	f04f 34ff 	mov.w	r4, #4294967295
 800a95e:	4620      	mov	r0, r4
 800a960:	bd70      	pop	{r4, r5, r6, pc}
 800a962:	1cc4      	adds	r4, r0, #3
 800a964:	f024 0403 	bic.w	r4, r4, #3
 800a968:	42a0      	cmp	r0, r4
 800a96a:	d0f8      	beq.n	800a95e <sbrk_aligned+0x22>
 800a96c:	1a21      	subs	r1, r4, r0
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 ff6a 	bl	800b848 <_sbrk_r>
 800a974:	3001      	adds	r0, #1
 800a976:	d1f2      	bne.n	800a95e <sbrk_aligned+0x22>
 800a978:	e7ef      	b.n	800a95a <sbrk_aligned+0x1e>
 800a97a:	bf00      	nop
 800a97c:	20001498 	.word	0x20001498

0800a980 <_malloc_r>:
 800a980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a984:	1ccd      	adds	r5, r1, #3
 800a986:	f025 0503 	bic.w	r5, r5, #3
 800a98a:	3508      	adds	r5, #8
 800a98c:	2d0c      	cmp	r5, #12
 800a98e:	bf38      	it	cc
 800a990:	250c      	movcc	r5, #12
 800a992:	2d00      	cmp	r5, #0
 800a994:	4606      	mov	r6, r0
 800a996:	db01      	blt.n	800a99c <_malloc_r+0x1c>
 800a998:	42a9      	cmp	r1, r5
 800a99a:	d904      	bls.n	800a9a6 <_malloc_r+0x26>
 800a99c:	230c      	movs	r3, #12
 800a99e:	6033      	str	r3, [r6, #0]
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa7c <_malloc_r+0xfc>
 800a9aa:	f000 f87b 	bl	800aaa4 <__malloc_lock>
 800a9ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a9b2:	461c      	mov	r4, r3
 800a9b4:	bb44      	cbnz	r4, 800aa08 <_malloc_r+0x88>
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f7ff ffbf 	bl	800a93c <sbrk_aligned>
 800a9be:	1c43      	adds	r3, r0, #1
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	d158      	bne.n	800aa76 <_malloc_r+0xf6>
 800a9c4:	f8d8 4000 	ldr.w	r4, [r8]
 800a9c8:	4627      	mov	r7, r4
 800a9ca:	2f00      	cmp	r7, #0
 800a9cc:	d143      	bne.n	800aa56 <_malloc_r+0xd6>
 800a9ce:	2c00      	cmp	r4, #0
 800a9d0:	d04b      	beq.n	800aa6a <_malloc_r+0xea>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	eb04 0903 	add.w	r9, r4, r3
 800a9dc:	f000 ff34 	bl	800b848 <_sbrk_r>
 800a9e0:	4581      	cmp	r9, r0
 800a9e2:	d142      	bne.n	800aa6a <_malloc_r+0xea>
 800a9e4:	6821      	ldr	r1, [r4, #0]
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	1a6d      	subs	r5, r5, r1
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	f7ff ffa6 	bl	800a93c <sbrk_aligned>
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d03a      	beq.n	800aa6a <_malloc_r+0xea>
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	442b      	add	r3, r5
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	bb62      	cbnz	r2, 800aa5c <_malloc_r+0xdc>
 800aa02:	f8c8 7000 	str.w	r7, [r8]
 800aa06:	e00f      	b.n	800aa28 <_malloc_r+0xa8>
 800aa08:	6822      	ldr	r2, [r4, #0]
 800aa0a:	1b52      	subs	r2, r2, r5
 800aa0c:	d420      	bmi.n	800aa50 <_malloc_r+0xd0>
 800aa0e:	2a0b      	cmp	r2, #11
 800aa10:	d917      	bls.n	800aa42 <_malloc_r+0xc2>
 800aa12:	1961      	adds	r1, r4, r5
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	6025      	str	r5, [r4, #0]
 800aa18:	bf18      	it	ne
 800aa1a:	6059      	strne	r1, [r3, #4]
 800aa1c:	6863      	ldr	r3, [r4, #4]
 800aa1e:	bf08      	it	eq
 800aa20:	f8c8 1000 	streq.w	r1, [r8]
 800aa24:	5162      	str	r2, [r4, r5]
 800aa26:	604b      	str	r3, [r1, #4]
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f000 f841 	bl	800aab0 <__malloc_unlock>
 800aa2e:	f104 000b 	add.w	r0, r4, #11
 800aa32:	1d23      	adds	r3, r4, #4
 800aa34:	f020 0007 	bic.w	r0, r0, #7
 800aa38:	1ac2      	subs	r2, r0, r3
 800aa3a:	bf1c      	itt	ne
 800aa3c:	1a1b      	subne	r3, r3, r0
 800aa3e:	50a3      	strne	r3, [r4, r2]
 800aa40:	e7af      	b.n	800a9a2 <_malloc_r+0x22>
 800aa42:	6862      	ldr	r2, [r4, #4]
 800aa44:	42a3      	cmp	r3, r4
 800aa46:	bf0c      	ite	eq
 800aa48:	f8c8 2000 	streq.w	r2, [r8]
 800aa4c:	605a      	strne	r2, [r3, #4]
 800aa4e:	e7eb      	b.n	800aa28 <_malloc_r+0xa8>
 800aa50:	4623      	mov	r3, r4
 800aa52:	6864      	ldr	r4, [r4, #4]
 800aa54:	e7ae      	b.n	800a9b4 <_malloc_r+0x34>
 800aa56:	463c      	mov	r4, r7
 800aa58:	687f      	ldr	r7, [r7, #4]
 800aa5a:	e7b6      	b.n	800a9ca <_malloc_r+0x4a>
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	d1fb      	bne.n	800aa5c <_malloc_r+0xdc>
 800aa64:	2300      	movs	r3, #0
 800aa66:	6053      	str	r3, [r2, #4]
 800aa68:	e7de      	b.n	800aa28 <_malloc_r+0xa8>
 800aa6a:	230c      	movs	r3, #12
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	6033      	str	r3, [r6, #0]
 800aa70:	f000 f81e 	bl	800aab0 <__malloc_unlock>
 800aa74:	e794      	b.n	800a9a0 <_malloc_r+0x20>
 800aa76:	6005      	str	r5, [r0, #0]
 800aa78:	e7d6      	b.n	800aa28 <_malloc_r+0xa8>
 800aa7a:	bf00      	nop
 800aa7c:	2000149c 	.word	0x2000149c

0800aa80 <__ascii_mbtowc>:
 800aa80:	b082      	sub	sp, #8
 800aa82:	b901      	cbnz	r1, 800aa86 <__ascii_mbtowc+0x6>
 800aa84:	a901      	add	r1, sp, #4
 800aa86:	b142      	cbz	r2, 800aa9a <__ascii_mbtowc+0x1a>
 800aa88:	b14b      	cbz	r3, 800aa9e <__ascii_mbtowc+0x1e>
 800aa8a:	7813      	ldrb	r3, [r2, #0]
 800aa8c:	600b      	str	r3, [r1, #0]
 800aa8e:	7812      	ldrb	r2, [r2, #0]
 800aa90:	1e10      	subs	r0, r2, #0
 800aa92:	bf18      	it	ne
 800aa94:	2001      	movne	r0, #1
 800aa96:	b002      	add	sp, #8
 800aa98:	4770      	bx	lr
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	e7fb      	b.n	800aa96 <__ascii_mbtowc+0x16>
 800aa9e:	f06f 0001 	mvn.w	r0, #1
 800aaa2:	e7f8      	b.n	800aa96 <__ascii_mbtowc+0x16>

0800aaa4 <__malloc_lock>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	@ (800aaac <__malloc_lock+0x8>)
 800aaa6:	f7fe bd3e 	b.w	8009526 <__retarget_lock_acquire_recursive>
 800aaaa:	bf00      	nop
 800aaac:	20001494 	.word	0x20001494

0800aab0 <__malloc_unlock>:
 800aab0:	4801      	ldr	r0, [pc, #4]	@ (800aab8 <__malloc_unlock+0x8>)
 800aab2:	f7fe bd39 	b.w	8009528 <__retarget_lock_release_recursive>
 800aab6:	bf00      	nop
 800aab8:	20001494 	.word	0x20001494

0800aabc <_Balloc>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	69c6      	ldr	r6, [r0, #28]
 800aac0:	4604      	mov	r4, r0
 800aac2:	460d      	mov	r5, r1
 800aac4:	b976      	cbnz	r6, 800aae4 <_Balloc+0x28>
 800aac6:	2010      	movs	r0, #16
 800aac8:	f7ff ff30 	bl	800a92c <malloc>
 800aacc:	4602      	mov	r2, r0
 800aace:	61e0      	str	r0, [r4, #28]
 800aad0:	b920      	cbnz	r0, 800aadc <_Balloc+0x20>
 800aad2:	216b      	movs	r1, #107	@ 0x6b
 800aad4:	4b17      	ldr	r3, [pc, #92]	@ (800ab34 <_Balloc+0x78>)
 800aad6:	4818      	ldr	r0, [pc, #96]	@ (800ab38 <_Balloc+0x7c>)
 800aad8:	f000 fec6 	bl	800b868 <__assert_func>
 800aadc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aae0:	6006      	str	r6, [r0, #0]
 800aae2:	60c6      	str	r6, [r0, #12]
 800aae4:	69e6      	ldr	r6, [r4, #28]
 800aae6:	68f3      	ldr	r3, [r6, #12]
 800aae8:	b183      	cbz	r3, 800ab0c <_Balloc+0x50>
 800aaea:	69e3      	ldr	r3, [r4, #28]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aaf2:	b9b8      	cbnz	r0, 800ab24 <_Balloc+0x68>
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	fa01 f605 	lsl.w	r6, r1, r5
 800aafa:	1d72      	adds	r2, r6, #5
 800aafc:	4620      	mov	r0, r4
 800aafe:	0092      	lsls	r2, r2, #2
 800ab00:	f000 fed0 	bl	800b8a4 <_calloc_r>
 800ab04:	b160      	cbz	r0, 800ab20 <_Balloc+0x64>
 800ab06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab0a:	e00e      	b.n	800ab2a <_Balloc+0x6e>
 800ab0c:	2221      	movs	r2, #33	@ 0x21
 800ab0e:	2104      	movs	r1, #4
 800ab10:	4620      	mov	r0, r4
 800ab12:	f000 fec7 	bl	800b8a4 <_calloc_r>
 800ab16:	69e3      	ldr	r3, [r4, #28]
 800ab18:	60f0      	str	r0, [r6, #12]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e4      	bne.n	800aaea <_Balloc+0x2e>
 800ab20:	2000      	movs	r0, #0
 800ab22:	bd70      	pop	{r4, r5, r6, pc}
 800ab24:	6802      	ldr	r2, [r0, #0]
 800ab26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab30:	e7f7      	b.n	800ab22 <_Balloc+0x66>
 800ab32:	bf00      	nop
 800ab34:	0800c121 	.word	0x0800c121
 800ab38:	0800c201 	.word	0x0800c201

0800ab3c <_Bfree>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	69c6      	ldr	r6, [r0, #28]
 800ab40:	4605      	mov	r5, r0
 800ab42:	460c      	mov	r4, r1
 800ab44:	b976      	cbnz	r6, 800ab64 <_Bfree+0x28>
 800ab46:	2010      	movs	r0, #16
 800ab48:	f7ff fef0 	bl	800a92c <malloc>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	61e8      	str	r0, [r5, #28]
 800ab50:	b920      	cbnz	r0, 800ab5c <_Bfree+0x20>
 800ab52:	218f      	movs	r1, #143	@ 0x8f
 800ab54:	4b08      	ldr	r3, [pc, #32]	@ (800ab78 <_Bfree+0x3c>)
 800ab56:	4809      	ldr	r0, [pc, #36]	@ (800ab7c <_Bfree+0x40>)
 800ab58:	f000 fe86 	bl	800b868 <__assert_func>
 800ab5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab60:	6006      	str	r6, [r0, #0]
 800ab62:	60c6      	str	r6, [r0, #12]
 800ab64:	b13c      	cbz	r4, 800ab76 <_Bfree+0x3a>
 800ab66:	69eb      	ldr	r3, [r5, #28]
 800ab68:	6862      	ldr	r2, [r4, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab70:	6021      	str	r1, [r4, #0]
 800ab72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	0800c121 	.word	0x0800c121
 800ab7c:	0800c201 	.word	0x0800c201

0800ab80 <__multadd>:
 800ab80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab84:	4607      	mov	r7, r0
 800ab86:	460c      	mov	r4, r1
 800ab88:	461e      	mov	r6, r3
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	690d      	ldr	r5, [r1, #16]
 800ab8e:	f101 0c14 	add.w	ip, r1, #20
 800ab92:	f8dc 3000 	ldr.w	r3, [ip]
 800ab96:	3001      	adds	r0, #1
 800ab98:	b299      	uxth	r1, r3
 800ab9a:	fb02 6101 	mla	r1, r2, r1, r6
 800ab9e:	0c1e      	lsrs	r6, r3, #16
 800aba0:	0c0b      	lsrs	r3, r1, #16
 800aba2:	fb02 3306 	mla	r3, r2, r6, r3
 800aba6:	b289      	uxth	r1, r1
 800aba8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abac:	4285      	cmp	r5, r0
 800abae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abb2:	f84c 1b04 	str.w	r1, [ip], #4
 800abb6:	dcec      	bgt.n	800ab92 <__multadd+0x12>
 800abb8:	b30e      	cbz	r6, 800abfe <__multadd+0x7e>
 800abba:	68a3      	ldr	r3, [r4, #8]
 800abbc:	42ab      	cmp	r3, r5
 800abbe:	dc19      	bgt.n	800abf4 <__multadd+0x74>
 800abc0:	6861      	ldr	r1, [r4, #4]
 800abc2:	4638      	mov	r0, r7
 800abc4:	3101      	adds	r1, #1
 800abc6:	f7ff ff79 	bl	800aabc <_Balloc>
 800abca:	4680      	mov	r8, r0
 800abcc:	b928      	cbnz	r0, 800abda <__multadd+0x5a>
 800abce:	4602      	mov	r2, r0
 800abd0:	21ba      	movs	r1, #186	@ 0xba
 800abd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ac04 <__multadd+0x84>)
 800abd4:	480c      	ldr	r0, [pc, #48]	@ (800ac08 <__multadd+0x88>)
 800abd6:	f000 fe47 	bl	800b868 <__assert_func>
 800abda:	6922      	ldr	r2, [r4, #16]
 800abdc:	f104 010c 	add.w	r1, r4, #12
 800abe0:	3202      	adds	r2, #2
 800abe2:	0092      	lsls	r2, r2, #2
 800abe4:	300c      	adds	r0, #12
 800abe6:	f7fe fcae 	bl	8009546 <memcpy>
 800abea:	4621      	mov	r1, r4
 800abec:	4638      	mov	r0, r7
 800abee:	f7ff ffa5 	bl	800ab3c <_Bfree>
 800abf2:	4644      	mov	r4, r8
 800abf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abf8:	3501      	adds	r5, #1
 800abfa:	615e      	str	r6, [r3, #20]
 800abfc:	6125      	str	r5, [r4, #16]
 800abfe:	4620      	mov	r0, r4
 800ac00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac04:	0800c190 	.word	0x0800c190
 800ac08:	0800c201 	.word	0x0800c201

0800ac0c <__s2b>:
 800ac0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac10:	4615      	mov	r5, r2
 800ac12:	2209      	movs	r2, #9
 800ac14:	461f      	mov	r7, r3
 800ac16:	3308      	adds	r3, #8
 800ac18:	460c      	mov	r4, r1
 800ac1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac1e:	4606      	mov	r6, r0
 800ac20:	2201      	movs	r2, #1
 800ac22:	2100      	movs	r1, #0
 800ac24:	429a      	cmp	r2, r3
 800ac26:	db09      	blt.n	800ac3c <__s2b+0x30>
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f7ff ff47 	bl	800aabc <_Balloc>
 800ac2e:	b940      	cbnz	r0, 800ac42 <__s2b+0x36>
 800ac30:	4602      	mov	r2, r0
 800ac32:	21d3      	movs	r1, #211	@ 0xd3
 800ac34:	4b18      	ldr	r3, [pc, #96]	@ (800ac98 <__s2b+0x8c>)
 800ac36:	4819      	ldr	r0, [pc, #100]	@ (800ac9c <__s2b+0x90>)
 800ac38:	f000 fe16 	bl	800b868 <__assert_func>
 800ac3c:	0052      	lsls	r2, r2, #1
 800ac3e:	3101      	adds	r1, #1
 800ac40:	e7f0      	b.n	800ac24 <__s2b+0x18>
 800ac42:	9b08      	ldr	r3, [sp, #32]
 800ac44:	2d09      	cmp	r5, #9
 800ac46:	6143      	str	r3, [r0, #20]
 800ac48:	f04f 0301 	mov.w	r3, #1
 800ac4c:	6103      	str	r3, [r0, #16]
 800ac4e:	dd16      	ble.n	800ac7e <__s2b+0x72>
 800ac50:	f104 0909 	add.w	r9, r4, #9
 800ac54:	46c8      	mov	r8, r9
 800ac56:	442c      	add	r4, r5
 800ac58:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac5c:	4601      	mov	r1, r0
 800ac5e:	220a      	movs	r2, #10
 800ac60:	4630      	mov	r0, r6
 800ac62:	3b30      	subs	r3, #48	@ 0x30
 800ac64:	f7ff ff8c 	bl	800ab80 <__multadd>
 800ac68:	45a0      	cmp	r8, r4
 800ac6a:	d1f5      	bne.n	800ac58 <__s2b+0x4c>
 800ac6c:	f1a5 0408 	sub.w	r4, r5, #8
 800ac70:	444c      	add	r4, r9
 800ac72:	1b2d      	subs	r5, r5, r4
 800ac74:	1963      	adds	r3, r4, r5
 800ac76:	42bb      	cmp	r3, r7
 800ac78:	db04      	blt.n	800ac84 <__s2b+0x78>
 800ac7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac7e:	2509      	movs	r5, #9
 800ac80:	340a      	adds	r4, #10
 800ac82:	e7f6      	b.n	800ac72 <__s2b+0x66>
 800ac84:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac88:	4601      	mov	r1, r0
 800ac8a:	220a      	movs	r2, #10
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	3b30      	subs	r3, #48	@ 0x30
 800ac90:	f7ff ff76 	bl	800ab80 <__multadd>
 800ac94:	e7ee      	b.n	800ac74 <__s2b+0x68>
 800ac96:	bf00      	nop
 800ac98:	0800c190 	.word	0x0800c190
 800ac9c:	0800c201 	.word	0x0800c201

0800aca0 <__hi0bits>:
 800aca0:	4603      	mov	r3, r0
 800aca2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aca6:	bf3a      	itte	cc
 800aca8:	0403      	lslcc	r3, r0, #16
 800acaa:	2010      	movcc	r0, #16
 800acac:	2000      	movcs	r0, #0
 800acae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800acb2:	bf3c      	itt	cc
 800acb4:	021b      	lslcc	r3, r3, #8
 800acb6:	3008      	addcc	r0, #8
 800acb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acbc:	bf3c      	itt	cc
 800acbe:	011b      	lslcc	r3, r3, #4
 800acc0:	3004      	addcc	r0, #4
 800acc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acc6:	bf3c      	itt	cc
 800acc8:	009b      	lslcc	r3, r3, #2
 800acca:	3002      	addcc	r0, #2
 800accc:	2b00      	cmp	r3, #0
 800acce:	db05      	blt.n	800acdc <__hi0bits+0x3c>
 800acd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800acd4:	f100 0001 	add.w	r0, r0, #1
 800acd8:	bf08      	it	eq
 800acda:	2020      	moveq	r0, #32
 800acdc:	4770      	bx	lr

0800acde <__lo0bits>:
 800acde:	6803      	ldr	r3, [r0, #0]
 800ace0:	4602      	mov	r2, r0
 800ace2:	f013 0007 	ands.w	r0, r3, #7
 800ace6:	d00b      	beq.n	800ad00 <__lo0bits+0x22>
 800ace8:	07d9      	lsls	r1, r3, #31
 800acea:	d421      	bmi.n	800ad30 <__lo0bits+0x52>
 800acec:	0798      	lsls	r0, r3, #30
 800acee:	bf49      	itett	mi
 800acf0:	085b      	lsrmi	r3, r3, #1
 800acf2:	089b      	lsrpl	r3, r3, #2
 800acf4:	2001      	movmi	r0, #1
 800acf6:	6013      	strmi	r3, [r2, #0]
 800acf8:	bf5c      	itt	pl
 800acfa:	2002      	movpl	r0, #2
 800acfc:	6013      	strpl	r3, [r2, #0]
 800acfe:	4770      	bx	lr
 800ad00:	b299      	uxth	r1, r3
 800ad02:	b909      	cbnz	r1, 800ad08 <__lo0bits+0x2a>
 800ad04:	2010      	movs	r0, #16
 800ad06:	0c1b      	lsrs	r3, r3, #16
 800ad08:	b2d9      	uxtb	r1, r3
 800ad0a:	b909      	cbnz	r1, 800ad10 <__lo0bits+0x32>
 800ad0c:	3008      	adds	r0, #8
 800ad0e:	0a1b      	lsrs	r3, r3, #8
 800ad10:	0719      	lsls	r1, r3, #28
 800ad12:	bf04      	itt	eq
 800ad14:	091b      	lsreq	r3, r3, #4
 800ad16:	3004      	addeq	r0, #4
 800ad18:	0799      	lsls	r1, r3, #30
 800ad1a:	bf04      	itt	eq
 800ad1c:	089b      	lsreq	r3, r3, #2
 800ad1e:	3002      	addeq	r0, #2
 800ad20:	07d9      	lsls	r1, r3, #31
 800ad22:	d403      	bmi.n	800ad2c <__lo0bits+0x4e>
 800ad24:	085b      	lsrs	r3, r3, #1
 800ad26:	f100 0001 	add.w	r0, r0, #1
 800ad2a:	d003      	beq.n	800ad34 <__lo0bits+0x56>
 800ad2c:	6013      	str	r3, [r2, #0]
 800ad2e:	4770      	bx	lr
 800ad30:	2000      	movs	r0, #0
 800ad32:	4770      	bx	lr
 800ad34:	2020      	movs	r0, #32
 800ad36:	4770      	bx	lr

0800ad38 <__i2b>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	f7ff febd 	bl	800aabc <_Balloc>
 800ad42:	4602      	mov	r2, r0
 800ad44:	b928      	cbnz	r0, 800ad52 <__i2b+0x1a>
 800ad46:	f240 1145 	movw	r1, #325	@ 0x145
 800ad4a:	4b04      	ldr	r3, [pc, #16]	@ (800ad5c <__i2b+0x24>)
 800ad4c:	4804      	ldr	r0, [pc, #16]	@ (800ad60 <__i2b+0x28>)
 800ad4e:	f000 fd8b 	bl	800b868 <__assert_func>
 800ad52:	2301      	movs	r3, #1
 800ad54:	6144      	str	r4, [r0, #20]
 800ad56:	6103      	str	r3, [r0, #16]
 800ad58:	bd10      	pop	{r4, pc}
 800ad5a:	bf00      	nop
 800ad5c:	0800c190 	.word	0x0800c190
 800ad60:	0800c201 	.word	0x0800c201

0800ad64 <__multiply>:
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	4617      	mov	r7, r2
 800ad6a:	690a      	ldr	r2, [r1, #16]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	4689      	mov	r9, r1
 800ad70:	429a      	cmp	r2, r3
 800ad72:	bfa2      	ittt	ge
 800ad74:	463b      	movge	r3, r7
 800ad76:	460f      	movge	r7, r1
 800ad78:	4699      	movge	r9, r3
 800ad7a:	693d      	ldr	r5, [r7, #16]
 800ad7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	eb05 060a 	add.w	r6, r5, sl
 800ad88:	42b3      	cmp	r3, r6
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	bfb8      	it	lt
 800ad8e:	3101      	addlt	r1, #1
 800ad90:	f7ff fe94 	bl	800aabc <_Balloc>
 800ad94:	b930      	cbnz	r0, 800ada4 <__multiply+0x40>
 800ad96:	4602      	mov	r2, r0
 800ad98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad9c:	4b40      	ldr	r3, [pc, #256]	@ (800aea0 <__multiply+0x13c>)
 800ad9e:	4841      	ldr	r0, [pc, #260]	@ (800aea4 <__multiply+0x140>)
 800ada0:	f000 fd62 	bl	800b868 <__assert_func>
 800ada4:	f100 0414 	add.w	r4, r0, #20
 800ada8:	4623      	mov	r3, r4
 800adaa:	2200      	movs	r2, #0
 800adac:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800adb0:	4573      	cmp	r3, lr
 800adb2:	d320      	bcc.n	800adf6 <__multiply+0x92>
 800adb4:	f107 0814 	add.w	r8, r7, #20
 800adb8:	f109 0114 	add.w	r1, r9, #20
 800adbc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800adc0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800adc4:	9302      	str	r3, [sp, #8]
 800adc6:	1beb      	subs	r3, r5, r7
 800adc8:	3b15      	subs	r3, #21
 800adca:	f023 0303 	bic.w	r3, r3, #3
 800adce:	3304      	adds	r3, #4
 800add0:	3715      	adds	r7, #21
 800add2:	42bd      	cmp	r5, r7
 800add4:	bf38      	it	cc
 800add6:	2304      	movcc	r3, #4
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	9b02      	ldr	r3, [sp, #8]
 800addc:	9103      	str	r1, [sp, #12]
 800adde:	428b      	cmp	r3, r1
 800ade0:	d80c      	bhi.n	800adfc <__multiply+0x98>
 800ade2:	2e00      	cmp	r6, #0
 800ade4:	dd03      	ble.n	800adee <__multiply+0x8a>
 800ade6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800adea:	2b00      	cmp	r3, #0
 800adec:	d055      	beq.n	800ae9a <__multiply+0x136>
 800adee:	6106      	str	r6, [r0, #16]
 800adf0:	b005      	add	sp, #20
 800adf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf6:	f843 2b04 	str.w	r2, [r3], #4
 800adfa:	e7d9      	b.n	800adb0 <__multiply+0x4c>
 800adfc:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae00:	f1ba 0f00 	cmp.w	sl, #0
 800ae04:	d01f      	beq.n	800ae46 <__multiply+0xe2>
 800ae06:	46c4      	mov	ip, r8
 800ae08:	46a1      	mov	r9, r4
 800ae0a:	2700      	movs	r7, #0
 800ae0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae10:	f8d9 3000 	ldr.w	r3, [r9]
 800ae14:	fa1f fb82 	uxth.w	fp, r2
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae1e:	443b      	add	r3, r7
 800ae20:	f8d9 7000 	ldr.w	r7, [r9]
 800ae24:	0c12      	lsrs	r2, r2, #16
 800ae26:	0c3f      	lsrs	r7, r7, #16
 800ae28:	fb0a 7202 	mla	r2, sl, r2, r7
 800ae2c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae36:	4565      	cmp	r5, ip
 800ae38:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ae3c:	f849 3b04 	str.w	r3, [r9], #4
 800ae40:	d8e4      	bhi.n	800ae0c <__multiply+0xa8>
 800ae42:	9b01      	ldr	r3, [sp, #4]
 800ae44:	50e7      	str	r7, [r4, r3]
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	3104      	adds	r1, #4
 800ae4a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae4e:	f1b9 0f00 	cmp.w	r9, #0
 800ae52:	d020      	beq.n	800ae96 <__multiply+0x132>
 800ae54:	4647      	mov	r7, r8
 800ae56:	46a4      	mov	ip, r4
 800ae58:	f04f 0a00 	mov.w	sl, #0
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	f8b7 b000 	ldrh.w	fp, [r7]
 800ae62:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	fb09 220b 	mla	r2, r9, fp, r2
 800ae6c:	4452      	add	r2, sl
 800ae6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae72:	f84c 3b04 	str.w	r3, [ip], #4
 800ae76:	f857 3b04 	ldr.w	r3, [r7], #4
 800ae7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae7e:	f8bc 3000 	ldrh.w	r3, [ip]
 800ae82:	42bd      	cmp	r5, r7
 800ae84:	fb09 330a 	mla	r3, r9, sl, r3
 800ae88:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ae8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae90:	d8e5      	bhi.n	800ae5e <__multiply+0xfa>
 800ae92:	9a01      	ldr	r2, [sp, #4]
 800ae94:	50a3      	str	r3, [r4, r2]
 800ae96:	3404      	adds	r4, #4
 800ae98:	e79f      	b.n	800adda <__multiply+0x76>
 800ae9a:	3e01      	subs	r6, #1
 800ae9c:	e7a1      	b.n	800ade2 <__multiply+0x7e>
 800ae9e:	bf00      	nop
 800aea0:	0800c190 	.word	0x0800c190
 800aea4:	0800c201 	.word	0x0800c201

0800aea8 <__pow5mult>:
 800aea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeac:	4615      	mov	r5, r2
 800aeae:	f012 0203 	ands.w	r2, r2, #3
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	460e      	mov	r6, r1
 800aeb6:	d007      	beq.n	800aec8 <__pow5mult+0x20>
 800aeb8:	4c25      	ldr	r4, [pc, #148]	@ (800af50 <__pow5mult+0xa8>)
 800aeba:	3a01      	subs	r2, #1
 800aebc:	2300      	movs	r3, #0
 800aebe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aec2:	f7ff fe5d 	bl	800ab80 <__multadd>
 800aec6:	4606      	mov	r6, r0
 800aec8:	10ad      	asrs	r5, r5, #2
 800aeca:	d03d      	beq.n	800af48 <__pow5mult+0xa0>
 800aecc:	69fc      	ldr	r4, [r7, #28]
 800aece:	b97c      	cbnz	r4, 800aef0 <__pow5mult+0x48>
 800aed0:	2010      	movs	r0, #16
 800aed2:	f7ff fd2b 	bl	800a92c <malloc>
 800aed6:	4602      	mov	r2, r0
 800aed8:	61f8      	str	r0, [r7, #28]
 800aeda:	b928      	cbnz	r0, 800aee8 <__pow5mult+0x40>
 800aedc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aee0:	4b1c      	ldr	r3, [pc, #112]	@ (800af54 <__pow5mult+0xac>)
 800aee2:	481d      	ldr	r0, [pc, #116]	@ (800af58 <__pow5mult+0xb0>)
 800aee4:	f000 fcc0 	bl	800b868 <__assert_func>
 800aee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aeec:	6004      	str	r4, [r0, #0]
 800aeee:	60c4      	str	r4, [r0, #12]
 800aef0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aef4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aef8:	b94c      	cbnz	r4, 800af0e <__pow5mult+0x66>
 800aefa:	f240 2171 	movw	r1, #625	@ 0x271
 800aefe:	4638      	mov	r0, r7
 800af00:	f7ff ff1a 	bl	800ad38 <__i2b>
 800af04:	2300      	movs	r3, #0
 800af06:	4604      	mov	r4, r0
 800af08:	f8c8 0008 	str.w	r0, [r8, #8]
 800af0c:	6003      	str	r3, [r0, #0]
 800af0e:	f04f 0900 	mov.w	r9, #0
 800af12:	07eb      	lsls	r3, r5, #31
 800af14:	d50a      	bpl.n	800af2c <__pow5mult+0x84>
 800af16:	4631      	mov	r1, r6
 800af18:	4622      	mov	r2, r4
 800af1a:	4638      	mov	r0, r7
 800af1c:	f7ff ff22 	bl	800ad64 <__multiply>
 800af20:	4680      	mov	r8, r0
 800af22:	4631      	mov	r1, r6
 800af24:	4638      	mov	r0, r7
 800af26:	f7ff fe09 	bl	800ab3c <_Bfree>
 800af2a:	4646      	mov	r6, r8
 800af2c:	106d      	asrs	r5, r5, #1
 800af2e:	d00b      	beq.n	800af48 <__pow5mult+0xa0>
 800af30:	6820      	ldr	r0, [r4, #0]
 800af32:	b938      	cbnz	r0, 800af44 <__pow5mult+0x9c>
 800af34:	4622      	mov	r2, r4
 800af36:	4621      	mov	r1, r4
 800af38:	4638      	mov	r0, r7
 800af3a:	f7ff ff13 	bl	800ad64 <__multiply>
 800af3e:	6020      	str	r0, [r4, #0]
 800af40:	f8c0 9000 	str.w	r9, [r0]
 800af44:	4604      	mov	r4, r0
 800af46:	e7e4      	b.n	800af12 <__pow5mult+0x6a>
 800af48:	4630      	mov	r0, r6
 800af4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af4e:	bf00      	nop
 800af50:	0800c3fc 	.word	0x0800c3fc
 800af54:	0800c121 	.word	0x0800c121
 800af58:	0800c201 	.word	0x0800c201

0800af5c <__lshift>:
 800af5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af60:	460c      	mov	r4, r1
 800af62:	4607      	mov	r7, r0
 800af64:	4691      	mov	r9, r2
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	6849      	ldr	r1, [r1, #4]
 800af6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af6e:	68a3      	ldr	r3, [r4, #8]
 800af70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af74:	f108 0601 	add.w	r6, r8, #1
 800af78:	42b3      	cmp	r3, r6
 800af7a:	db0b      	blt.n	800af94 <__lshift+0x38>
 800af7c:	4638      	mov	r0, r7
 800af7e:	f7ff fd9d 	bl	800aabc <_Balloc>
 800af82:	4605      	mov	r5, r0
 800af84:	b948      	cbnz	r0, 800af9a <__lshift+0x3e>
 800af86:	4602      	mov	r2, r0
 800af88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af8c:	4b27      	ldr	r3, [pc, #156]	@ (800b02c <__lshift+0xd0>)
 800af8e:	4828      	ldr	r0, [pc, #160]	@ (800b030 <__lshift+0xd4>)
 800af90:	f000 fc6a 	bl	800b868 <__assert_func>
 800af94:	3101      	adds	r1, #1
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	e7ee      	b.n	800af78 <__lshift+0x1c>
 800af9a:	2300      	movs	r3, #0
 800af9c:	f100 0114 	add.w	r1, r0, #20
 800afa0:	f100 0210 	add.w	r2, r0, #16
 800afa4:	4618      	mov	r0, r3
 800afa6:	4553      	cmp	r3, sl
 800afa8:	db33      	blt.n	800b012 <__lshift+0xb6>
 800afaa:	6920      	ldr	r0, [r4, #16]
 800afac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afb0:	f104 0314 	add.w	r3, r4, #20
 800afb4:	f019 091f 	ands.w	r9, r9, #31
 800afb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afc0:	d02b      	beq.n	800b01a <__lshift+0xbe>
 800afc2:	468a      	mov	sl, r1
 800afc4:	2200      	movs	r2, #0
 800afc6:	f1c9 0e20 	rsb	lr, r9, #32
 800afca:	6818      	ldr	r0, [r3, #0]
 800afcc:	fa00 f009 	lsl.w	r0, r0, r9
 800afd0:	4310      	orrs	r0, r2
 800afd2:	f84a 0b04 	str.w	r0, [sl], #4
 800afd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afda:	459c      	cmp	ip, r3
 800afdc:	fa22 f20e 	lsr.w	r2, r2, lr
 800afe0:	d8f3      	bhi.n	800afca <__lshift+0x6e>
 800afe2:	ebac 0304 	sub.w	r3, ip, r4
 800afe6:	3b15      	subs	r3, #21
 800afe8:	f023 0303 	bic.w	r3, r3, #3
 800afec:	3304      	adds	r3, #4
 800afee:	f104 0015 	add.w	r0, r4, #21
 800aff2:	4560      	cmp	r0, ip
 800aff4:	bf88      	it	hi
 800aff6:	2304      	movhi	r3, #4
 800aff8:	50ca      	str	r2, [r1, r3]
 800affa:	b10a      	cbz	r2, 800b000 <__lshift+0xa4>
 800affc:	f108 0602 	add.w	r6, r8, #2
 800b000:	3e01      	subs	r6, #1
 800b002:	4638      	mov	r0, r7
 800b004:	4621      	mov	r1, r4
 800b006:	612e      	str	r6, [r5, #16]
 800b008:	f7ff fd98 	bl	800ab3c <_Bfree>
 800b00c:	4628      	mov	r0, r5
 800b00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b012:	f842 0f04 	str.w	r0, [r2, #4]!
 800b016:	3301      	adds	r3, #1
 800b018:	e7c5      	b.n	800afa6 <__lshift+0x4a>
 800b01a:	3904      	subs	r1, #4
 800b01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b020:	459c      	cmp	ip, r3
 800b022:	f841 2f04 	str.w	r2, [r1, #4]!
 800b026:	d8f9      	bhi.n	800b01c <__lshift+0xc0>
 800b028:	e7ea      	b.n	800b000 <__lshift+0xa4>
 800b02a:	bf00      	nop
 800b02c:	0800c190 	.word	0x0800c190
 800b030:	0800c201 	.word	0x0800c201

0800b034 <__mcmp>:
 800b034:	4603      	mov	r3, r0
 800b036:	690a      	ldr	r2, [r1, #16]
 800b038:	6900      	ldr	r0, [r0, #16]
 800b03a:	b530      	push	{r4, r5, lr}
 800b03c:	1a80      	subs	r0, r0, r2
 800b03e:	d10e      	bne.n	800b05e <__mcmp+0x2a>
 800b040:	3314      	adds	r3, #20
 800b042:	3114      	adds	r1, #20
 800b044:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b048:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b04c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b050:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b054:	4295      	cmp	r5, r2
 800b056:	d003      	beq.n	800b060 <__mcmp+0x2c>
 800b058:	d205      	bcs.n	800b066 <__mcmp+0x32>
 800b05a:	f04f 30ff 	mov.w	r0, #4294967295
 800b05e:	bd30      	pop	{r4, r5, pc}
 800b060:	42a3      	cmp	r3, r4
 800b062:	d3f3      	bcc.n	800b04c <__mcmp+0x18>
 800b064:	e7fb      	b.n	800b05e <__mcmp+0x2a>
 800b066:	2001      	movs	r0, #1
 800b068:	e7f9      	b.n	800b05e <__mcmp+0x2a>
	...

0800b06c <__mdiff>:
 800b06c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b070:	4689      	mov	r9, r1
 800b072:	4606      	mov	r6, r0
 800b074:	4611      	mov	r1, r2
 800b076:	4648      	mov	r0, r9
 800b078:	4614      	mov	r4, r2
 800b07a:	f7ff ffdb 	bl	800b034 <__mcmp>
 800b07e:	1e05      	subs	r5, r0, #0
 800b080:	d112      	bne.n	800b0a8 <__mdiff+0x3c>
 800b082:	4629      	mov	r1, r5
 800b084:	4630      	mov	r0, r6
 800b086:	f7ff fd19 	bl	800aabc <_Balloc>
 800b08a:	4602      	mov	r2, r0
 800b08c:	b928      	cbnz	r0, 800b09a <__mdiff+0x2e>
 800b08e:	f240 2137 	movw	r1, #567	@ 0x237
 800b092:	4b3e      	ldr	r3, [pc, #248]	@ (800b18c <__mdiff+0x120>)
 800b094:	483e      	ldr	r0, [pc, #248]	@ (800b190 <__mdiff+0x124>)
 800b096:	f000 fbe7 	bl	800b868 <__assert_func>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	b003      	add	sp, #12
 800b0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a8:	bfbc      	itt	lt
 800b0aa:	464b      	movlt	r3, r9
 800b0ac:	46a1      	movlt	r9, r4
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0b4:	bfba      	itte	lt
 800b0b6:	461c      	movlt	r4, r3
 800b0b8:	2501      	movlt	r5, #1
 800b0ba:	2500      	movge	r5, #0
 800b0bc:	f7ff fcfe 	bl	800aabc <_Balloc>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	b918      	cbnz	r0, 800b0cc <__mdiff+0x60>
 800b0c4:	f240 2145 	movw	r1, #581	@ 0x245
 800b0c8:	4b30      	ldr	r3, [pc, #192]	@ (800b18c <__mdiff+0x120>)
 800b0ca:	e7e3      	b.n	800b094 <__mdiff+0x28>
 800b0cc:	f100 0b14 	add.w	fp, r0, #20
 800b0d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b0d4:	f109 0310 	add.w	r3, r9, #16
 800b0d8:	60c5      	str	r5, [r0, #12]
 800b0da:	f04f 0c00 	mov.w	ip, #0
 800b0de:	f109 0514 	add.w	r5, r9, #20
 800b0e2:	46d9      	mov	r9, fp
 800b0e4:	6926      	ldr	r6, [r4, #16]
 800b0e6:	f104 0e14 	add.w	lr, r4, #20
 800b0ea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b0ee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b0fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b0fe:	b281      	uxth	r1, r0
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	fa1f f38a 	uxth.w	r3, sl
 800b106:	1a5b      	subs	r3, r3, r1
 800b108:	0c00      	lsrs	r0, r0, #16
 800b10a:	4463      	add	r3, ip
 800b10c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b110:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b114:	b29b      	uxth	r3, r3
 800b116:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b11a:	4576      	cmp	r6, lr
 800b11c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b120:	f849 3b04 	str.w	r3, [r9], #4
 800b124:	d8e6      	bhi.n	800b0f4 <__mdiff+0x88>
 800b126:	1b33      	subs	r3, r6, r4
 800b128:	3b15      	subs	r3, #21
 800b12a:	f023 0303 	bic.w	r3, r3, #3
 800b12e:	3415      	adds	r4, #21
 800b130:	3304      	adds	r3, #4
 800b132:	42a6      	cmp	r6, r4
 800b134:	bf38      	it	cc
 800b136:	2304      	movcc	r3, #4
 800b138:	441d      	add	r5, r3
 800b13a:	445b      	add	r3, fp
 800b13c:	461e      	mov	r6, r3
 800b13e:	462c      	mov	r4, r5
 800b140:	4544      	cmp	r4, r8
 800b142:	d30e      	bcc.n	800b162 <__mdiff+0xf6>
 800b144:	f108 0103 	add.w	r1, r8, #3
 800b148:	1b49      	subs	r1, r1, r5
 800b14a:	f021 0103 	bic.w	r1, r1, #3
 800b14e:	3d03      	subs	r5, #3
 800b150:	45a8      	cmp	r8, r5
 800b152:	bf38      	it	cc
 800b154:	2100      	movcc	r1, #0
 800b156:	440b      	add	r3, r1
 800b158:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b15c:	b199      	cbz	r1, 800b186 <__mdiff+0x11a>
 800b15e:	6117      	str	r7, [r2, #16]
 800b160:	e79e      	b.n	800b0a0 <__mdiff+0x34>
 800b162:	46e6      	mov	lr, ip
 800b164:	f854 1b04 	ldr.w	r1, [r4], #4
 800b168:	fa1f fc81 	uxth.w	ip, r1
 800b16c:	44f4      	add	ip, lr
 800b16e:	0c08      	lsrs	r0, r1, #16
 800b170:	4471      	add	r1, lr
 800b172:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b176:	b289      	uxth	r1, r1
 800b178:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b17c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b180:	f846 1b04 	str.w	r1, [r6], #4
 800b184:	e7dc      	b.n	800b140 <__mdiff+0xd4>
 800b186:	3f01      	subs	r7, #1
 800b188:	e7e6      	b.n	800b158 <__mdiff+0xec>
 800b18a:	bf00      	nop
 800b18c:	0800c190 	.word	0x0800c190
 800b190:	0800c201 	.word	0x0800c201

0800b194 <__ulp>:
 800b194:	4b0e      	ldr	r3, [pc, #56]	@ (800b1d0 <__ulp+0x3c>)
 800b196:	400b      	ands	r3, r1
 800b198:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	dc08      	bgt.n	800b1b2 <__ulp+0x1e>
 800b1a0:	425b      	negs	r3, r3
 800b1a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b1a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b1aa:	da04      	bge.n	800b1b6 <__ulp+0x22>
 800b1ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b1b0:	4113      	asrs	r3, r2
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	e008      	b.n	800b1c8 <__ulp+0x34>
 800b1b6:	f1a2 0314 	sub.w	r3, r2, #20
 800b1ba:	2b1e      	cmp	r3, #30
 800b1bc:	bfd6      	itet	le
 800b1be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b1c2:	2201      	movgt	r2, #1
 800b1c4:	40da      	lsrle	r2, r3
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	7ff00000 	.word	0x7ff00000

0800b1d4 <__b2d>:
 800b1d4:	6902      	ldr	r2, [r0, #16]
 800b1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d8:	f100 0614 	add.w	r6, r0, #20
 800b1dc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b1e0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b1e4:	4f1e      	ldr	r7, [pc, #120]	@ (800b260 <__b2d+0x8c>)
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f7ff fd5a 	bl	800aca0 <__hi0bits>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f1c0 0020 	rsb	r0, r0, #32
 800b1f2:	2b0a      	cmp	r3, #10
 800b1f4:	f1a2 0504 	sub.w	r5, r2, #4
 800b1f8:	6008      	str	r0, [r1, #0]
 800b1fa:	dc12      	bgt.n	800b222 <__b2d+0x4e>
 800b1fc:	42ae      	cmp	r6, r5
 800b1fe:	bf2c      	ite	cs
 800b200:	2200      	movcs	r2, #0
 800b202:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b206:	f1c3 0c0b 	rsb	ip, r3, #11
 800b20a:	3315      	adds	r3, #21
 800b20c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b210:	fa04 f303 	lsl.w	r3, r4, r3
 800b214:	fa22 f20c 	lsr.w	r2, r2, ip
 800b218:	ea4e 0107 	orr.w	r1, lr, r7
 800b21c:	431a      	orrs	r2, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b222:	42ae      	cmp	r6, r5
 800b224:	bf36      	itet	cc
 800b226:	f1a2 0508 	subcc.w	r5, r2, #8
 800b22a:	2200      	movcs	r2, #0
 800b22c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b230:	3b0b      	subs	r3, #11
 800b232:	d012      	beq.n	800b25a <__b2d+0x86>
 800b234:	f1c3 0720 	rsb	r7, r3, #32
 800b238:	fa22 f107 	lsr.w	r1, r2, r7
 800b23c:	409c      	lsls	r4, r3
 800b23e:	430c      	orrs	r4, r1
 800b240:	42b5      	cmp	r5, r6
 800b242:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b246:	bf94      	ite	ls
 800b248:	2400      	movls	r4, #0
 800b24a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b24e:	409a      	lsls	r2, r3
 800b250:	40fc      	lsrs	r4, r7
 800b252:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b256:	4322      	orrs	r2, r4
 800b258:	e7e1      	b.n	800b21e <__b2d+0x4a>
 800b25a:	ea44 0107 	orr.w	r1, r4, r7
 800b25e:	e7de      	b.n	800b21e <__b2d+0x4a>
 800b260:	3ff00000 	.word	0x3ff00000

0800b264 <__d2b>:
 800b264:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b268:	2101      	movs	r1, #1
 800b26a:	4690      	mov	r8, r2
 800b26c:	4699      	mov	r9, r3
 800b26e:	9e08      	ldr	r6, [sp, #32]
 800b270:	f7ff fc24 	bl	800aabc <_Balloc>
 800b274:	4604      	mov	r4, r0
 800b276:	b930      	cbnz	r0, 800b286 <__d2b+0x22>
 800b278:	4602      	mov	r2, r0
 800b27a:	f240 310f 	movw	r1, #783	@ 0x30f
 800b27e:	4b23      	ldr	r3, [pc, #140]	@ (800b30c <__d2b+0xa8>)
 800b280:	4823      	ldr	r0, [pc, #140]	@ (800b310 <__d2b+0xac>)
 800b282:	f000 faf1 	bl	800b868 <__assert_func>
 800b286:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b28a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b28e:	b10d      	cbz	r5, 800b294 <__d2b+0x30>
 800b290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b294:	9301      	str	r3, [sp, #4]
 800b296:	f1b8 0300 	subs.w	r3, r8, #0
 800b29a:	d024      	beq.n	800b2e6 <__d2b+0x82>
 800b29c:	4668      	mov	r0, sp
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	f7ff fd1d 	bl	800acde <__lo0bits>
 800b2a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2a8:	b1d8      	cbz	r0, 800b2e2 <__d2b+0x7e>
 800b2aa:	f1c0 0320 	rsb	r3, r0, #32
 800b2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b2:	430b      	orrs	r3, r1
 800b2b4:	40c2      	lsrs	r2, r0
 800b2b6:	6163      	str	r3, [r4, #20]
 800b2b8:	9201      	str	r2, [sp, #4]
 800b2ba:	9b01      	ldr	r3, [sp, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bf0c      	ite	eq
 800b2c0:	2201      	moveq	r2, #1
 800b2c2:	2202      	movne	r2, #2
 800b2c4:	61a3      	str	r3, [r4, #24]
 800b2c6:	6122      	str	r2, [r4, #16]
 800b2c8:	b1ad      	cbz	r5, 800b2f6 <__d2b+0x92>
 800b2ca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2ce:	4405      	add	r5, r0
 800b2d0:	6035      	str	r5, [r6, #0]
 800b2d2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2d8:	6018      	str	r0, [r3, #0]
 800b2da:	4620      	mov	r0, r4
 800b2dc:	b002      	add	sp, #8
 800b2de:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b2e2:	6161      	str	r1, [r4, #20]
 800b2e4:	e7e9      	b.n	800b2ba <__d2b+0x56>
 800b2e6:	a801      	add	r0, sp, #4
 800b2e8:	f7ff fcf9 	bl	800acde <__lo0bits>
 800b2ec:	9b01      	ldr	r3, [sp, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	6163      	str	r3, [r4, #20]
 800b2f2:	3020      	adds	r0, #32
 800b2f4:	e7e7      	b.n	800b2c6 <__d2b+0x62>
 800b2f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b2fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2fe:	6030      	str	r0, [r6, #0]
 800b300:	6918      	ldr	r0, [r3, #16]
 800b302:	f7ff fccd 	bl	800aca0 <__hi0bits>
 800b306:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b30a:	e7e4      	b.n	800b2d6 <__d2b+0x72>
 800b30c:	0800c190 	.word	0x0800c190
 800b310:	0800c201 	.word	0x0800c201

0800b314 <__ratio>:
 800b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b318:	b085      	sub	sp, #20
 800b31a:	e9cd 1000 	strd	r1, r0, [sp]
 800b31e:	a902      	add	r1, sp, #8
 800b320:	f7ff ff58 	bl	800b1d4 <__b2d>
 800b324:	468b      	mov	fp, r1
 800b326:	4606      	mov	r6, r0
 800b328:	460f      	mov	r7, r1
 800b32a:	9800      	ldr	r0, [sp, #0]
 800b32c:	a903      	add	r1, sp, #12
 800b32e:	f7ff ff51 	bl	800b1d4 <__b2d>
 800b332:	460d      	mov	r5, r1
 800b334:	9b01      	ldr	r3, [sp, #4]
 800b336:	4689      	mov	r9, r1
 800b338:	6919      	ldr	r1, [r3, #16]
 800b33a:	9b00      	ldr	r3, [sp, #0]
 800b33c:	4604      	mov	r4, r0
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	4630      	mov	r0, r6
 800b342:	1ac9      	subs	r1, r1, r3
 800b344:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b348:	1a9b      	subs	r3, r3, r2
 800b34a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b34e:	2b00      	cmp	r3, #0
 800b350:	bfcd      	iteet	gt
 800b352:	463a      	movgt	r2, r7
 800b354:	462a      	movle	r2, r5
 800b356:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b35a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b35e:	bfd8      	it	le
 800b360:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b364:	464b      	mov	r3, r9
 800b366:	4622      	mov	r2, r4
 800b368:	4659      	mov	r1, fp
 800b36a:	f7f5 f9df 	bl	800072c <__aeabi_ddiv>
 800b36e:	b005      	add	sp, #20
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b374 <__copybits>:
 800b374:	3901      	subs	r1, #1
 800b376:	b570      	push	{r4, r5, r6, lr}
 800b378:	1149      	asrs	r1, r1, #5
 800b37a:	6914      	ldr	r4, [r2, #16]
 800b37c:	3101      	adds	r1, #1
 800b37e:	f102 0314 	add.w	r3, r2, #20
 800b382:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b386:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b38a:	1f05      	subs	r5, r0, #4
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	d30c      	bcc.n	800b3aa <__copybits+0x36>
 800b390:	1aa3      	subs	r3, r4, r2
 800b392:	3b11      	subs	r3, #17
 800b394:	f023 0303 	bic.w	r3, r3, #3
 800b398:	3211      	adds	r2, #17
 800b39a:	42a2      	cmp	r2, r4
 800b39c:	bf88      	it	hi
 800b39e:	2300      	movhi	r3, #0
 800b3a0:	4418      	add	r0, r3
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	4288      	cmp	r0, r1
 800b3a6:	d305      	bcc.n	800b3b4 <__copybits+0x40>
 800b3a8:	bd70      	pop	{r4, r5, r6, pc}
 800b3aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3b2:	e7eb      	b.n	800b38c <__copybits+0x18>
 800b3b4:	f840 3b04 	str.w	r3, [r0], #4
 800b3b8:	e7f4      	b.n	800b3a4 <__copybits+0x30>

0800b3ba <__any_on>:
 800b3ba:	f100 0214 	add.w	r2, r0, #20
 800b3be:	6900      	ldr	r0, [r0, #16]
 800b3c0:	114b      	asrs	r3, r1, #5
 800b3c2:	4298      	cmp	r0, r3
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	db11      	blt.n	800b3ec <__any_on+0x32>
 800b3c8:	dd0a      	ble.n	800b3e0 <__any_on+0x26>
 800b3ca:	f011 011f 	ands.w	r1, r1, #31
 800b3ce:	d007      	beq.n	800b3e0 <__any_on+0x26>
 800b3d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3d4:	fa24 f001 	lsr.w	r0, r4, r1
 800b3d8:	fa00 f101 	lsl.w	r1, r0, r1
 800b3dc:	428c      	cmp	r4, r1
 800b3de:	d10b      	bne.n	800b3f8 <__any_on+0x3e>
 800b3e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d803      	bhi.n	800b3f0 <__any_on+0x36>
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	bd10      	pop	{r4, pc}
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	e7f7      	b.n	800b3e0 <__any_on+0x26>
 800b3f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3f4:	2900      	cmp	r1, #0
 800b3f6:	d0f5      	beq.n	800b3e4 <__any_on+0x2a>
 800b3f8:	2001      	movs	r0, #1
 800b3fa:	e7f6      	b.n	800b3ea <__any_on+0x30>

0800b3fc <__ascii_wctomb>:
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	4608      	mov	r0, r1
 800b400:	b141      	cbz	r1, 800b414 <__ascii_wctomb+0x18>
 800b402:	2aff      	cmp	r2, #255	@ 0xff
 800b404:	d904      	bls.n	800b410 <__ascii_wctomb+0x14>
 800b406:	228a      	movs	r2, #138	@ 0x8a
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	4770      	bx	lr
 800b410:	2001      	movs	r0, #1
 800b412:	700a      	strb	r2, [r1, #0]
 800b414:	4770      	bx	lr

0800b416 <__ssputs_r>:
 800b416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b41a:	461f      	mov	r7, r3
 800b41c:	688e      	ldr	r6, [r1, #8]
 800b41e:	4682      	mov	sl, r0
 800b420:	42be      	cmp	r6, r7
 800b422:	460c      	mov	r4, r1
 800b424:	4690      	mov	r8, r2
 800b426:	680b      	ldr	r3, [r1, #0]
 800b428:	d82d      	bhi.n	800b486 <__ssputs_r+0x70>
 800b42a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b42e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b432:	d026      	beq.n	800b482 <__ssputs_r+0x6c>
 800b434:	6965      	ldr	r5, [r4, #20]
 800b436:	6909      	ldr	r1, [r1, #16]
 800b438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b43c:	eba3 0901 	sub.w	r9, r3, r1
 800b440:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b444:	1c7b      	adds	r3, r7, #1
 800b446:	444b      	add	r3, r9
 800b448:	106d      	asrs	r5, r5, #1
 800b44a:	429d      	cmp	r5, r3
 800b44c:	bf38      	it	cc
 800b44e:	461d      	movcc	r5, r3
 800b450:	0553      	lsls	r3, r2, #21
 800b452:	d527      	bpl.n	800b4a4 <__ssputs_r+0x8e>
 800b454:	4629      	mov	r1, r5
 800b456:	f7ff fa93 	bl	800a980 <_malloc_r>
 800b45a:	4606      	mov	r6, r0
 800b45c:	b360      	cbz	r0, 800b4b8 <__ssputs_r+0xa2>
 800b45e:	464a      	mov	r2, r9
 800b460:	6921      	ldr	r1, [r4, #16]
 800b462:	f7fe f870 	bl	8009546 <memcpy>
 800b466:	89a3      	ldrh	r3, [r4, #12]
 800b468:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b46c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b470:	81a3      	strh	r3, [r4, #12]
 800b472:	6126      	str	r6, [r4, #16]
 800b474:	444e      	add	r6, r9
 800b476:	6026      	str	r6, [r4, #0]
 800b478:	463e      	mov	r6, r7
 800b47a:	6165      	str	r5, [r4, #20]
 800b47c:	eba5 0509 	sub.w	r5, r5, r9
 800b480:	60a5      	str	r5, [r4, #8]
 800b482:	42be      	cmp	r6, r7
 800b484:	d900      	bls.n	800b488 <__ssputs_r+0x72>
 800b486:	463e      	mov	r6, r7
 800b488:	4632      	mov	r2, r6
 800b48a:	4641      	mov	r1, r8
 800b48c:	6820      	ldr	r0, [r4, #0]
 800b48e:	f000 f9c1 	bl	800b814 <memmove>
 800b492:	2000      	movs	r0, #0
 800b494:	68a3      	ldr	r3, [r4, #8]
 800b496:	1b9b      	subs	r3, r3, r6
 800b498:	60a3      	str	r3, [r4, #8]
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	4433      	add	r3, r6
 800b49e:	6023      	str	r3, [r4, #0]
 800b4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a4:	462a      	mov	r2, r5
 800b4a6:	f000 fa11 	bl	800b8cc <_realloc_r>
 800b4aa:	4606      	mov	r6, r0
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d1e0      	bne.n	800b472 <__ssputs_r+0x5c>
 800b4b0:	4650      	mov	r0, sl
 800b4b2:	6921      	ldr	r1, [r4, #16]
 800b4b4:	f7fe feb8 	bl	800a228 <_free_r>
 800b4b8:	230c      	movs	r3, #12
 800b4ba:	f8ca 3000 	str.w	r3, [sl]
 800b4be:	89a3      	ldrh	r3, [r4, #12]
 800b4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4c8:	81a3      	strh	r3, [r4, #12]
 800b4ca:	e7e9      	b.n	800b4a0 <__ssputs_r+0x8a>

0800b4cc <_svfiprintf_r>:
 800b4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d0:	4698      	mov	r8, r3
 800b4d2:	898b      	ldrh	r3, [r1, #12]
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	061b      	lsls	r3, r3, #24
 800b4d8:	460d      	mov	r5, r1
 800b4da:	4614      	mov	r4, r2
 800b4dc:	b09d      	sub	sp, #116	@ 0x74
 800b4de:	d510      	bpl.n	800b502 <_svfiprintf_r+0x36>
 800b4e0:	690b      	ldr	r3, [r1, #16]
 800b4e2:	b973      	cbnz	r3, 800b502 <_svfiprintf_r+0x36>
 800b4e4:	2140      	movs	r1, #64	@ 0x40
 800b4e6:	f7ff fa4b 	bl	800a980 <_malloc_r>
 800b4ea:	6028      	str	r0, [r5, #0]
 800b4ec:	6128      	str	r0, [r5, #16]
 800b4ee:	b930      	cbnz	r0, 800b4fe <_svfiprintf_r+0x32>
 800b4f0:	230c      	movs	r3, #12
 800b4f2:	603b      	str	r3, [r7, #0]
 800b4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f8:	b01d      	add	sp, #116	@ 0x74
 800b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fe:	2340      	movs	r3, #64	@ 0x40
 800b500:	616b      	str	r3, [r5, #20]
 800b502:	2300      	movs	r3, #0
 800b504:	9309      	str	r3, [sp, #36]	@ 0x24
 800b506:	2320      	movs	r3, #32
 800b508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b50c:	2330      	movs	r3, #48	@ 0x30
 800b50e:	f04f 0901 	mov.w	r9, #1
 800b512:	f8cd 800c 	str.w	r8, [sp, #12]
 800b516:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b6b0 <_svfiprintf_r+0x1e4>
 800b51a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b51e:	4623      	mov	r3, r4
 800b520:	469a      	mov	sl, r3
 800b522:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b526:	b10a      	cbz	r2, 800b52c <_svfiprintf_r+0x60>
 800b528:	2a25      	cmp	r2, #37	@ 0x25
 800b52a:	d1f9      	bne.n	800b520 <_svfiprintf_r+0x54>
 800b52c:	ebba 0b04 	subs.w	fp, sl, r4
 800b530:	d00b      	beq.n	800b54a <_svfiprintf_r+0x7e>
 800b532:	465b      	mov	r3, fp
 800b534:	4622      	mov	r2, r4
 800b536:	4629      	mov	r1, r5
 800b538:	4638      	mov	r0, r7
 800b53a:	f7ff ff6c 	bl	800b416 <__ssputs_r>
 800b53e:	3001      	adds	r0, #1
 800b540:	f000 80a7 	beq.w	800b692 <_svfiprintf_r+0x1c6>
 800b544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b546:	445a      	add	r2, fp
 800b548:	9209      	str	r2, [sp, #36]	@ 0x24
 800b54a:	f89a 3000 	ldrb.w	r3, [sl]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f000 809f 	beq.w	800b692 <_svfiprintf_r+0x1c6>
 800b554:	2300      	movs	r3, #0
 800b556:	f04f 32ff 	mov.w	r2, #4294967295
 800b55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b55e:	f10a 0a01 	add.w	sl, sl, #1
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	9307      	str	r3, [sp, #28]
 800b566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b56a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b56c:	4654      	mov	r4, sl
 800b56e:	2205      	movs	r2, #5
 800b570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b574:	484e      	ldr	r0, [pc, #312]	@ (800b6b0 <_svfiprintf_r+0x1e4>)
 800b576:	f7fd ffd8 	bl	800952a <memchr>
 800b57a:	9a04      	ldr	r2, [sp, #16]
 800b57c:	b9d8      	cbnz	r0, 800b5b6 <_svfiprintf_r+0xea>
 800b57e:	06d0      	lsls	r0, r2, #27
 800b580:	bf44      	itt	mi
 800b582:	2320      	movmi	r3, #32
 800b584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b588:	0711      	lsls	r1, r2, #28
 800b58a:	bf44      	itt	mi
 800b58c:	232b      	movmi	r3, #43	@ 0x2b
 800b58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b592:	f89a 3000 	ldrb.w	r3, [sl]
 800b596:	2b2a      	cmp	r3, #42	@ 0x2a
 800b598:	d015      	beq.n	800b5c6 <_svfiprintf_r+0xfa>
 800b59a:	4654      	mov	r4, sl
 800b59c:	2000      	movs	r0, #0
 800b59e:	f04f 0c0a 	mov.w	ip, #10
 800b5a2:	9a07      	ldr	r2, [sp, #28]
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5aa:	3b30      	subs	r3, #48	@ 0x30
 800b5ac:	2b09      	cmp	r3, #9
 800b5ae:	d94b      	bls.n	800b648 <_svfiprintf_r+0x17c>
 800b5b0:	b1b0      	cbz	r0, 800b5e0 <_svfiprintf_r+0x114>
 800b5b2:	9207      	str	r2, [sp, #28]
 800b5b4:	e014      	b.n	800b5e0 <_svfiprintf_r+0x114>
 800b5b6:	eba0 0308 	sub.w	r3, r0, r8
 800b5ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	46a2      	mov	sl, r4
 800b5c2:	9304      	str	r3, [sp, #16]
 800b5c4:	e7d2      	b.n	800b56c <_svfiprintf_r+0xa0>
 800b5c6:	9b03      	ldr	r3, [sp, #12]
 800b5c8:	1d19      	adds	r1, r3, #4
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	9103      	str	r1, [sp, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	bfbb      	ittet	lt
 800b5d2:	425b      	neglt	r3, r3
 800b5d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b5d8:	9307      	strge	r3, [sp, #28]
 800b5da:	9307      	strlt	r3, [sp, #28]
 800b5dc:	bfb8      	it	lt
 800b5de:	9204      	strlt	r2, [sp, #16]
 800b5e0:	7823      	ldrb	r3, [r4, #0]
 800b5e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5e4:	d10a      	bne.n	800b5fc <_svfiprintf_r+0x130>
 800b5e6:	7863      	ldrb	r3, [r4, #1]
 800b5e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5ea:	d132      	bne.n	800b652 <_svfiprintf_r+0x186>
 800b5ec:	9b03      	ldr	r3, [sp, #12]
 800b5ee:	3402      	adds	r4, #2
 800b5f0:	1d1a      	adds	r2, r3, #4
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	9203      	str	r2, [sp, #12]
 800b5f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5fa:	9305      	str	r3, [sp, #20]
 800b5fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b6b4 <_svfiprintf_r+0x1e8>
 800b600:	2203      	movs	r2, #3
 800b602:	4650      	mov	r0, sl
 800b604:	7821      	ldrb	r1, [r4, #0]
 800b606:	f7fd ff90 	bl	800952a <memchr>
 800b60a:	b138      	cbz	r0, 800b61c <_svfiprintf_r+0x150>
 800b60c:	2240      	movs	r2, #64	@ 0x40
 800b60e:	9b04      	ldr	r3, [sp, #16]
 800b610:	eba0 000a 	sub.w	r0, r0, sl
 800b614:	4082      	lsls	r2, r0
 800b616:	4313      	orrs	r3, r2
 800b618:	3401      	adds	r4, #1
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b620:	2206      	movs	r2, #6
 800b622:	4825      	ldr	r0, [pc, #148]	@ (800b6b8 <_svfiprintf_r+0x1ec>)
 800b624:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b628:	f7fd ff7f 	bl	800952a <memchr>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d036      	beq.n	800b69e <_svfiprintf_r+0x1d2>
 800b630:	4b22      	ldr	r3, [pc, #136]	@ (800b6bc <_svfiprintf_r+0x1f0>)
 800b632:	bb1b      	cbnz	r3, 800b67c <_svfiprintf_r+0x1b0>
 800b634:	9b03      	ldr	r3, [sp, #12]
 800b636:	3307      	adds	r3, #7
 800b638:	f023 0307 	bic.w	r3, r3, #7
 800b63c:	3308      	adds	r3, #8
 800b63e:	9303      	str	r3, [sp, #12]
 800b640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b642:	4433      	add	r3, r6
 800b644:	9309      	str	r3, [sp, #36]	@ 0x24
 800b646:	e76a      	b.n	800b51e <_svfiprintf_r+0x52>
 800b648:	460c      	mov	r4, r1
 800b64a:	2001      	movs	r0, #1
 800b64c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b650:	e7a8      	b.n	800b5a4 <_svfiprintf_r+0xd8>
 800b652:	2300      	movs	r3, #0
 800b654:	f04f 0c0a 	mov.w	ip, #10
 800b658:	4619      	mov	r1, r3
 800b65a:	3401      	adds	r4, #1
 800b65c:	9305      	str	r3, [sp, #20]
 800b65e:	4620      	mov	r0, r4
 800b660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b664:	3a30      	subs	r2, #48	@ 0x30
 800b666:	2a09      	cmp	r2, #9
 800b668:	d903      	bls.n	800b672 <_svfiprintf_r+0x1a6>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0c6      	beq.n	800b5fc <_svfiprintf_r+0x130>
 800b66e:	9105      	str	r1, [sp, #20]
 800b670:	e7c4      	b.n	800b5fc <_svfiprintf_r+0x130>
 800b672:	4604      	mov	r4, r0
 800b674:	2301      	movs	r3, #1
 800b676:	fb0c 2101 	mla	r1, ip, r1, r2
 800b67a:	e7f0      	b.n	800b65e <_svfiprintf_r+0x192>
 800b67c:	ab03      	add	r3, sp, #12
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	462a      	mov	r2, r5
 800b682:	4638      	mov	r0, r7
 800b684:	4b0e      	ldr	r3, [pc, #56]	@ (800b6c0 <_svfiprintf_r+0x1f4>)
 800b686:	a904      	add	r1, sp, #16
 800b688:	f7fd f9a4 	bl	80089d4 <_printf_float>
 800b68c:	1c42      	adds	r2, r0, #1
 800b68e:	4606      	mov	r6, r0
 800b690:	d1d6      	bne.n	800b640 <_svfiprintf_r+0x174>
 800b692:	89ab      	ldrh	r3, [r5, #12]
 800b694:	065b      	lsls	r3, r3, #25
 800b696:	f53f af2d 	bmi.w	800b4f4 <_svfiprintf_r+0x28>
 800b69a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b69c:	e72c      	b.n	800b4f8 <_svfiprintf_r+0x2c>
 800b69e:	ab03      	add	r3, sp, #12
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	462a      	mov	r2, r5
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	4b06      	ldr	r3, [pc, #24]	@ (800b6c0 <_svfiprintf_r+0x1f4>)
 800b6a8:	a904      	add	r1, sp, #16
 800b6aa:	f7fd fc31 	bl	8008f10 <_printf_i>
 800b6ae:	e7ed      	b.n	800b68c <_svfiprintf_r+0x1c0>
 800b6b0:	0800c25a 	.word	0x0800c25a
 800b6b4:	0800c260 	.word	0x0800c260
 800b6b8:	0800c264 	.word	0x0800c264
 800b6bc:	080089d5 	.word	0x080089d5
 800b6c0:	0800b417 	.word	0x0800b417

0800b6c4 <__sflush_r>:
 800b6c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ca:	0716      	lsls	r6, r2, #28
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	d454      	bmi.n	800b77c <__sflush_r+0xb8>
 800b6d2:	684b      	ldr	r3, [r1, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dc02      	bgt.n	800b6de <__sflush_r+0x1a>
 800b6d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	dd48      	ble.n	800b770 <__sflush_r+0xac>
 800b6de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6e0:	2e00      	cmp	r6, #0
 800b6e2:	d045      	beq.n	800b770 <__sflush_r+0xac>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b6ea:	682f      	ldr	r7, [r5, #0]
 800b6ec:	6a21      	ldr	r1, [r4, #32]
 800b6ee:	602b      	str	r3, [r5, #0]
 800b6f0:	d030      	beq.n	800b754 <__sflush_r+0x90>
 800b6f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b6f4:	89a3      	ldrh	r3, [r4, #12]
 800b6f6:	0759      	lsls	r1, r3, #29
 800b6f8:	d505      	bpl.n	800b706 <__sflush_r+0x42>
 800b6fa:	6863      	ldr	r3, [r4, #4]
 800b6fc:	1ad2      	subs	r2, r2, r3
 800b6fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b700:	b10b      	cbz	r3, 800b706 <__sflush_r+0x42>
 800b702:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b704:	1ad2      	subs	r2, r2, r3
 800b706:	2300      	movs	r3, #0
 800b708:	4628      	mov	r0, r5
 800b70a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b70c:	6a21      	ldr	r1, [r4, #32]
 800b70e:	47b0      	blx	r6
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	d106      	bne.n	800b724 <__sflush_r+0x60>
 800b716:	6829      	ldr	r1, [r5, #0]
 800b718:	291d      	cmp	r1, #29
 800b71a:	d82b      	bhi.n	800b774 <__sflush_r+0xb0>
 800b71c:	4a28      	ldr	r2, [pc, #160]	@ (800b7c0 <__sflush_r+0xfc>)
 800b71e:	40ca      	lsrs	r2, r1
 800b720:	07d6      	lsls	r6, r2, #31
 800b722:	d527      	bpl.n	800b774 <__sflush_r+0xb0>
 800b724:	2200      	movs	r2, #0
 800b726:	6062      	str	r2, [r4, #4]
 800b728:	6922      	ldr	r2, [r4, #16]
 800b72a:	04d9      	lsls	r1, r3, #19
 800b72c:	6022      	str	r2, [r4, #0]
 800b72e:	d504      	bpl.n	800b73a <__sflush_r+0x76>
 800b730:	1c42      	adds	r2, r0, #1
 800b732:	d101      	bne.n	800b738 <__sflush_r+0x74>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b903      	cbnz	r3, 800b73a <__sflush_r+0x76>
 800b738:	6560      	str	r0, [r4, #84]	@ 0x54
 800b73a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b73c:	602f      	str	r7, [r5, #0]
 800b73e:	b1b9      	cbz	r1, 800b770 <__sflush_r+0xac>
 800b740:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b744:	4299      	cmp	r1, r3
 800b746:	d002      	beq.n	800b74e <__sflush_r+0x8a>
 800b748:	4628      	mov	r0, r5
 800b74a:	f7fe fd6d 	bl	800a228 <_free_r>
 800b74e:	2300      	movs	r3, #0
 800b750:	6363      	str	r3, [r4, #52]	@ 0x34
 800b752:	e00d      	b.n	800b770 <__sflush_r+0xac>
 800b754:	2301      	movs	r3, #1
 800b756:	4628      	mov	r0, r5
 800b758:	47b0      	blx	r6
 800b75a:	4602      	mov	r2, r0
 800b75c:	1c50      	adds	r0, r2, #1
 800b75e:	d1c9      	bne.n	800b6f4 <__sflush_r+0x30>
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d0c6      	beq.n	800b6f4 <__sflush_r+0x30>
 800b766:	2b1d      	cmp	r3, #29
 800b768:	d001      	beq.n	800b76e <__sflush_r+0xaa>
 800b76a:	2b16      	cmp	r3, #22
 800b76c:	d11d      	bne.n	800b7aa <__sflush_r+0xe6>
 800b76e:	602f      	str	r7, [r5, #0]
 800b770:	2000      	movs	r0, #0
 800b772:	e021      	b.n	800b7b8 <__sflush_r+0xf4>
 800b774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b778:	b21b      	sxth	r3, r3
 800b77a:	e01a      	b.n	800b7b2 <__sflush_r+0xee>
 800b77c:	690f      	ldr	r7, [r1, #16]
 800b77e:	2f00      	cmp	r7, #0
 800b780:	d0f6      	beq.n	800b770 <__sflush_r+0xac>
 800b782:	0793      	lsls	r3, r2, #30
 800b784:	bf18      	it	ne
 800b786:	2300      	movne	r3, #0
 800b788:	680e      	ldr	r6, [r1, #0]
 800b78a:	bf08      	it	eq
 800b78c:	694b      	ldreq	r3, [r1, #20]
 800b78e:	1bf6      	subs	r6, r6, r7
 800b790:	600f      	str	r7, [r1, #0]
 800b792:	608b      	str	r3, [r1, #8]
 800b794:	2e00      	cmp	r6, #0
 800b796:	ddeb      	ble.n	800b770 <__sflush_r+0xac>
 800b798:	4633      	mov	r3, r6
 800b79a:	463a      	mov	r2, r7
 800b79c:	4628      	mov	r0, r5
 800b79e:	6a21      	ldr	r1, [r4, #32]
 800b7a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b7a4:	47e0      	blx	ip
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	dc07      	bgt.n	800b7ba <__sflush_r+0xf6>
 800b7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b6:	81a3      	strh	r3, [r4, #12]
 800b7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ba:	4407      	add	r7, r0
 800b7bc:	1a36      	subs	r6, r6, r0
 800b7be:	e7e9      	b.n	800b794 <__sflush_r+0xd0>
 800b7c0:	20400001 	.word	0x20400001

0800b7c4 <_fflush_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	690b      	ldr	r3, [r1, #16]
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	b913      	cbnz	r3, 800b7d4 <_fflush_r+0x10>
 800b7ce:	2500      	movs	r5, #0
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	b118      	cbz	r0, 800b7de <_fflush_r+0x1a>
 800b7d6:	6a03      	ldr	r3, [r0, #32]
 800b7d8:	b90b      	cbnz	r3, 800b7de <_fflush_r+0x1a>
 800b7da:	f7fd fd43 	bl	8009264 <__sinit>
 800b7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d0f3      	beq.n	800b7ce <_fflush_r+0xa>
 800b7e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b7e8:	07d0      	lsls	r0, r2, #31
 800b7ea:	d404      	bmi.n	800b7f6 <_fflush_r+0x32>
 800b7ec:	0599      	lsls	r1, r3, #22
 800b7ee:	d402      	bmi.n	800b7f6 <_fflush_r+0x32>
 800b7f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7f2:	f7fd fe98 	bl	8009526 <__retarget_lock_acquire_recursive>
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	f7ff ff63 	bl	800b6c4 <__sflush_r>
 800b7fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b800:	4605      	mov	r5, r0
 800b802:	07da      	lsls	r2, r3, #31
 800b804:	d4e4      	bmi.n	800b7d0 <_fflush_r+0xc>
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	059b      	lsls	r3, r3, #22
 800b80a:	d4e1      	bmi.n	800b7d0 <_fflush_r+0xc>
 800b80c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b80e:	f7fd fe8b 	bl	8009528 <__retarget_lock_release_recursive>
 800b812:	e7dd      	b.n	800b7d0 <_fflush_r+0xc>

0800b814 <memmove>:
 800b814:	4288      	cmp	r0, r1
 800b816:	b510      	push	{r4, lr}
 800b818:	eb01 0402 	add.w	r4, r1, r2
 800b81c:	d902      	bls.n	800b824 <memmove+0x10>
 800b81e:	4284      	cmp	r4, r0
 800b820:	4623      	mov	r3, r4
 800b822:	d807      	bhi.n	800b834 <memmove+0x20>
 800b824:	1e43      	subs	r3, r0, #1
 800b826:	42a1      	cmp	r1, r4
 800b828:	d008      	beq.n	800b83c <memmove+0x28>
 800b82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b82e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b832:	e7f8      	b.n	800b826 <memmove+0x12>
 800b834:	4601      	mov	r1, r0
 800b836:	4402      	add	r2, r0
 800b838:	428a      	cmp	r2, r1
 800b83a:	d100      	bne.n	800b83e <memmove+0x2a>
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b846:	e7f7      	b.n	800b838 <memmove+0x24>

0800b848 <_sbrk_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	2300      	movs	r3, #0
 800b84c:	4d05      	ldr	r5, [pc, #20]	@ (800b864 <_sbrk_r+0x1c>)
 800b84e:	4604      	mov	r4, r0
 800b850:	4608      	mov	r0, r1
 800b852:	602b      	str	r3, [r5, #0]
 800b854:	f7f6 fc64 	bl	8002120 <_sbrk>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d102      	bne.n	800b862 <_sbrk_r+0x1a>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	b103      	cbz	r3, 800b862 <_sbrk_r+0x1a>
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	20001490 	.word	0x20001490

0800b868 <__assert_func>:
 800b868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b86a:	4614      	mov	r4, r2
 800b86c:	461a      	mov	r2, r3
 800b86e:	4b09      	ldr	r3, [pc, #36]	@ (800b894 <__assert_func+0x2c>)
 800b870:	4605      	mov	r5, r0
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68d8      	ldr	r0, [r3, #12]
 800b876:	b14c      	cbz	r4, 800b88c <__assert_func+0x24>
 800b878:	4b07      	ldr	r3, [pc, #28]	@ (800b898 <__assert_func+0x30>)
 800b87a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b87e:	9100      	str	r1, [sp, #0]
 800b880:	462b      	mov	r3, r5
 800b882:	4906      	ldr	r1, [pc, #24]	@ (800b89c <__assert_func+0x34>)
 800b884:	f000 f850 	bl	800b928 <fiprintf>
 800b888:	f000 f860 	bl	800b94c <abort>
 800b88c:	4b04      	ldr	r3, [pc, #16]	@ (800b8a0 <__assert_func+0x38>)
 800b88e:	461c      	mov	r4, r3
 800b890:	e7f3      	b.n	800b87a <__assert_func+0x12>
 800b892:	bf00      	nop
 800b894:	20000188 	.word	0x20000188
 800b898:	0800c26b 	.word	0x0800c26b
 800b89c:	0800c278 	.word	0x0800c278
 800b8a0:	0800c2a6 	.word	0x0800c2a6

0800b8a4 <_calloc_r>:
 800b8a4:	b570      	push	{r4, r5, r6, lr}
 800b8a6:	fba1 5402 	umull	r5, r4, r1, r2
 800b8aa:	b934      	cbnz	r4, 800b8ba <_calloc_r+0x16>
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	f7ff f867 	bl	800a980 <_malloc_r>
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	b928      	cbnz	r0, 800b8c2 <_calloc_r+0x1e>
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ba:	220c      	movs	r2, #12
 800b8bc:	2600      	movs	r6, #0
 800b8be:	6002      	str	r2, [r0, #0]
 800b8c0:	e7f9      	b.n	800b8b6 <_calloc_r+0x12>
 800b8c2:	462a      	mov	r2, r5
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	f7fd fd7c 	bl	80093c2 <memset>
 800b8ca:	e7f4      	b.n	800b8b6 <_calloc_r+0x12>

0800b8cc <_realloc_r>:
 800b8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d0:	4607      	mov	r7, r0
 800b8d2:	4614      	mov	r4, r2
 800b8d4:	460d      	mov	r5, r1
 800b8d6:	b921      	cbnz	r1, 800b8e2 <_realloc_r+0x16>
 800b8d8:	4611      	mov	r1, r2
 800b8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8de:	f7ff b84f 	b.w	800a980 <_malloc_r>
 800b8e2:	b92a      	cbnz	r2, 800b8f0 <_realloc_r+0x24>
 800b8e4:	f7fe fca0 	bl	800a228 <_free_r>
 800b8e8:	4625      	mov	r5, r4
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f0:	f000 f833 	bl	800b95a <_malloc_usable_size_r>
 800b8f4:	4284      	cmp	r4, r0
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	d802      	bhi.n	800b900 <_realloc_r+0x34>
 800b8fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8fe:	d8f4      	bhi.n	800b8ea <_realloc_r+0x1e>
 800b900:	4621      	mov	r1, r4
 800b902:	4638      	mov	r0, r7
 800b904:	f7ff f83c 	bl	800a980 <_malloc_r>
 800b908:	4680      	mov	r8, r0
 800b90a:	b908      	cbnz	r0, 800b910 <_realloc_r+0x44>
 800b90c:	4645      	mov	r5, r8
 800b90e:	e7ec      	b.n	800b8ea <_realloc_r+0x1e>
 800b910:	42b4      	cmp	r4, r6
 800b912:	4622      	mov	r2, r4
 800b914:	4629      	mov	r1, r5
 800b916:	bf28      	it	cs
 800b918:	4632      	movcs	r2, r6
 800b91a:	f7fd fe14 	bl	8009546 <memcpy>
 800b91e:	4629      	mov	r1, r5
 800b920:	4638      	mov	r0, r7
 800b922:	f7fe fc81 	bl	800a228 <_free_r>
 800b926:	e7f1      	b.n	800b90c <_realloc_r+0x40>

0800b928 <fiprintf>:
 800b928:	b40e      	push	{r1, r2, r3}
 800b92a:	b503      	push	{r0, r1, lr}
 800b92c:	4601      	mov	r1, r0
 800b92e:	ab03      	add	r3, sp, #12
 800b930:	4805      	ldr	r0, [pc, #20]	@ (800b948 <fiprintf+0x20>)
 800b932:	f853 2b04 	ldr.w	r2, [r3], #4
 800b936:	6800      	ldr	r0, [r0, #0]
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	f000 f83d 	bl	800b9b8 <_vfiprintf_r>
 800b93e:	b002      	add	sp, #8
 800b940:	f85d eb04 	ldr.w	lr, [sp], #4
 800b944:	b003      	add	sp, #12
 800b946:	4770      	bx	lr
 800b948:	20000188 	.word	0x20000188

0800b94c <abort>:
 800b94c:	2006      	movs	r0, #6
 800b94e:	b508      	push	{r3, lr}
 800b950:	f000 fa06 	bl	800bd60 <raise>
 800b954:	2001      	movs	r0, #1
 800b956:	f7f6 fb6e 	bl	8002036 <_exit>

0800b95a <_malloc_usable_size_r>:
 800b95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b95e:	1f18      	subs	r0, r3, #4
 800b960:	2b00      	cmp	r3, #0
 800b962:	bfbc      	itt	lt
 800b964:	580b      	ldrlt	r3, [r1, r0]
 800b966:	18c0      	addlt	r0, r0, r3
 800b968:	4770      	bx	lr

0800b96a <__sfputc_r>:
 800b96a:	6893      	ldr	r3, [r2, #8]
 800b96c:	b410      	push	{r4}
 800b96e:	3b01      	subs	r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	6093      	str	r3, [r2, #8]
 800b974:	da07      	bge.n	800b986 <__sfputc_r+0x1c>
 800b976:	6994      	ldr	r4, [r2, #24]
 800b978:	42a3      	cmp	r3, r4
 800b97a:	db01      	blt.n	800b980 <__sfputc_r+0x16>
 800b97c:	290a      	cmp	r1, #10
 800b97e:	d102      	bne.n	800b986 <__sfputc_r+0x1c>
 800b980:	bc10      	pop	{r4}
 800b982:	f000 b931 	b.w	800bbe8 <__swbuf_r>
 800b986:	6813      	ldr	r3, [r2, #0]
 800b988:	1c58      	adds	r0, r3, #1
 800b98a:	6010      	str	r0, [r2, #0]
 800b98c:	7019      	strb	r1, [r3, #0]
 800b98e:	4608      	mov	r0, r1
 800b990:	bc10      	pop	{r4}
 800b992:	4770      	bx	lr

0800b994 <__sfputs_r>:
 800b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b996:	4606      	mov	r6, r0
 800b998:	460f      	mov	r7, r1
 800b99a:	4614      	mov	r4, r2
 800b99c:	18d5      	adds	r5, r2, r3
 800b99e:	42ac      	cmp	r4, r5
 800b9a0:	d101      	bne.n	800b9a6 <__sfputs_r+0x12>
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	e007      	b.n	800b9b6 <__sfputs_r+0x22>
 800b9a6:	463a      	mov	r2, r7
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ae:	f7ff ffdc 	bl	800b96a <__sfputc_r>
 800b9b2:	1c43      	adds	r3, r0, #1
 800b9b4:	d1f3      	bne.n	800b99e <__sfputs_r+0xa>
 800b9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b9b8 <_vfiprintf_r>:
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	460d      	mov	r5, r1
 800b9be:	4614      	mov	r4, r2
 800b9c0:	4698      	mov	r8, r3
 800b9c2:	4606      	mov	r6, r0
 800b9c4:	b09d      	sub	sp, #116	@ 0x74
 800b9c6:	b118      	cbz	r0, 800b9d0 <_vfiprintf_r+0x18>
 800b9c8:	6a03      	ldr	r3, [r0, #32]
 800b9ca:	b90b      	cbnz	r3, 800b9d0 <_vfiprintf_r+0x18>
 800b9cc:	f7fd fc4a 	bl	8009264 <__sinit>
 800b9d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9d2:	07d9      	lsls	r1, r3, #31
 800b9d4:	d405      	bmi.n	800b9e2 <_vfiprintf_r+0x2a>
 800b9d6:	89ab      	ldrh	r3, [r5, #12]
 800b9d8:	059a      	lsls	r2, r3, #22
 800b9da:	d402      	bmi.n	800b9e2 <_vfiprintf_r+0x2a>
 800b9dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9de:	f7fd fda2 	bl	8009526 <__retarget_lock_acquire_recursive>
 800b9e2:	89ab      	ldrh	r3, [r5, #12]
 800b9e4:	071b      	lsls	r3, r3, #28
 800b9e6:	d501      	bpl.n	800b9ec <_vfiprintf_r+0x34>
 800b9e8:	692b      	ldr	r3, [r5, #16]
 800b9ea:	b99b      	cbnz	r3, 800ba14 <_vfiprintf_r+0x5c>
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f000 f938 	bl	800bc64 <__swsetup_r>
 800b9f4:	b170      	cbz	r0, 800ba14 <_vfiprintf_r+0x5c>
 800b9f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9f8:	07dc      	lsls	r4, r3, #31
 800b9fa:	d504      	bpl.n	800ba06 <_vfiprintf_r+0x4e>
 800b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ba00:	b01d      	add	sp, #116	@ 0x74
 800ba02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba06:	89ab      	ldrh	r3, [r5, #12]
 800ba08:	0598      	lsls	r0, r3, #22
 800ba0a:	d4f7      	bmi.n	800b9fc <_vfiprintf_r+0x44>
 800ba0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba0e:	f7fd fd8b 	bl	8009528 <__retarget_lock_release_recursive>
 800ba12:	e7f3      	b.n	800b9fc <_vfiprintf_r+0x44>
 800ba14:	2300      	movs	r3, #0
 800ba16:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba18:	2320      	movs	r3, #32
 800ba1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba1e:	2330      	movs	r3, #48	@ 0x30
 800ba20:	f04f 0901 	mov.w	r9, #1
 800ba24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba28:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bbd4 <_vfiprintf_r+0x21c>
 800ba2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba30:	4623      	mov	r3, r4
 800ba32:	469a      	mov	sl, r3
 800ba34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba38:	b10a      	cbz	r2, 800ba3e <_vfiprintf_r+0x86>
 800ba3a:	2a25      	cmp	r2, #37	@ 0x25
 800ba3c:	d1f9      	bne.n	800ba32 <_vfiprintf_r+0x7a>
 800ba3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba42:	d00b      	beq.n	800ba5c <_vfiprintf_r+0xa4>
 800ba44:	465b      	mov	r3, fp
 800ba46:	4622      	mov	r2, r4
 800ba48:	4629      	mov	r1, r5
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff ffa2 	bl	800b994 <__sfputs_r>
 800ba50:	3001      	adds	r0, #1
 800ba52:	f000 80a7 	beq.w	800bba4 <_vfiprintf_r+0x1ec>
 800ba56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba58:	445a      	add	r2, fp
 800ba5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 809f 	beq.w	800bba4 <_vfiprintf_r+0x1ec>
 800ba66:	2300      	movs	r3, #0
 800ba68:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba70:	f10a 0a01 	add.w	sl, sl, #1
 800ba74:	9304      	str	r3, [sp, #16]
 800ba76:	9307      	str	r3, [sp, #28]
 800ba78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba7e:	4654      	mov	r4, sl
 800ba80:	2205      	movs	r2, #5
 800ba82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba86:	4853      	ldr	r0, [pc, #332]	@ (800bbd4 <_vfiprintf_r+0x21c>)
 800ba88:	f7fd fd4f 	bl	800952a <memchr>
 800ba8c:	9a04      	ldr	r2, [sp, #16]
 800ba8e:	b9d8      	cbnz	r0, 800bac8 <_vfiprintf_r+0x110>
 800ba90:	06d1      	lsls	r1, r2, #27
 800ba92:	bf44      	itt	mi
 800ba94:	2320      	movmi	r3, #32
 800ba96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba9a:	0713      	lsls	r3, r2, #28
 800ba9c:	bf44      	itt	mi
 800ba9e:	232b      	movmi	r3, #43	@ 0x2b
 800baa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baa4:	f89a 3000 	ldrb.w	r3, [sl]
 800baa8:	2b2a      	cmp	r3, #42	@ 0x2a
 800baaa:	d015      	beq.n	800bad8 <_vfiprintf_r+0x120>
 800baac:	4654      	mov	r4, sl
 800baae:	2000      	movs	r0, #0
 800bab0:	f04f 0c0a 	mov.w	ip, #10
 800bab4:	9a07      	ldr	r2, [sp, #28]
 800bab6:	4621      	mov	r1, r4
 800bab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800babc:	3b30      	subs	r3, #48	@ 0x30
 800babe:	2b09      	cmp	r3, #9
 800bac0:	d94b      	bls.n	800bb5a <_vfiprintf_r+0x1a2>
 800bac2:	b1b0      	cbz	r0, 800baf2 <_vfiprintf_r+0x13a>
 800bac4:	9207      	str	r2, [sp, #28]
 800bac6:	e014      	b.n	800baf2 <_vfiprintf_r+0x13a>
 800bac8:	eba0 0308 	sub.w	r3, r0, r8
 800bacc:	fa09 f303 	lsl.w	r3, r9, r3
 800bad0:	4313      	orrs	r3, r2
 800bad2:	46a2      	mov	sl, r4
 800bad4:	9304      	str	r3, [sp, #16]
 800bad6:	e7d2      	b.n	800ba7e <_vfiprintf_r+0xc6>
 800bad8:	9b03      	ldr	r3, [sp, #12]
 800bada:	1d19      	adds	r1, r3, #4
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	9103      	str	r1, [sp, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	bfbb      	ittet	lt
 800bae4:	425b      	neglt	r3, r3
 800bae6:	f042 0202 	orrlt.w	r2, r2, #2
 800baea:	9307      	strge	r3, [sp, #28]
 800baec:	9307      	strlt	r3, [sp, #28]
 800baee:	bfb8      	it	lt
 800baf0:	9204      	strlt	r2, [sp, #16]
 800baf2:	7823      	ldrb	r3, [r4, #0]
 800baf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800baf6:	d10a      	bne.n	800bb0e <_vfiprintf_r+0x156>
 800baf8:	7863      	ldrb	r3, [r4, #1]
 800bafa:	2b2a      	cmp	r3, #42	@ 0x2a
 800bafc:	d132      	bne.n	800bb64 <_vfiprintf_r+0x1ac>
 800bafe:	9b03      	ldr	r3, [sp, #12]
 800bb00:	3402      	adds	r4, #2
 800bb02:	1d1a      	adds	r2, r3, #4
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	9203      	str	r2, [sp, #12]
 800bb08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb0c:	9305      	str	r3, [sp, #20]
 800bb0e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bbd8 <_vfiprintf_r+0x220>
 800bb12:	2203      	movs	r2, #3
 800bb14:	4650      	mov	r0, sl
 800bb16:	7821      	ldrb	r1, [r4, #0]
 800bb18:	f7fd fd07 	bl	800952a <memchr>
 800bb1c:	b138      	cbz	r0, 800bb2e <_vfiprintf_r+0x176>
 800bb1e:	2240      	movs	r2, #64	@ 0x40
 800bb20:	9b04      	ldr	r3, [sp, #16]
 800bb22:	eba0 000a 	sub.w	r0, r0, sl
 800bb26:	4082      	lsls	r2, r0
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	3401      	adds	r4, #1
 800bb2c:	9304      	str	r3, [sp, #16]
 800bb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb32:	2206      	movs	r2, #6
 800bb34:	4829      	ldr	r0, [pc, #164]	@ (800bbdc <_vfiprintf_r+0x224>)
 800bb36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb3a:	f7fd fcf6 	bl	800952a <memchr>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d03f      	beq.n	800bbc2 <_vfiprintf_r+0x20a>
 800bb42:	4b27      	ldr	r3, [pc, #156]	@ (800bbe0 <_vfiprintf_r+0x228>)
 800bb44:	bb1b      	cbnz	r3, 800bb8e <_vfiprintf_r+0x1d6>
 800bb46:	9b03      	ldr	r3, [sp, #12]
 800bb48:	3307      	adds	r3, #7
 800bb4a:	f023 0307 	bic.w	r3, r3, #7
 800bb4e:	3308      	adds	r3, #8
 800bb50:	9303      	str	r3, [sp, #12]
 800bb52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb54:	443b      	add	r3, r7
 800bb56:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb58:	e76a      	b.n	800ba30 <_vfiprintf_r+0x78>
 800bb5a:	460c      	mov	r4, r1
 800bb5c:	2001      	movs	r0, #1
 800bb5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb62:	e7a8      	b.n	800bab6 <_vfiprintf_r+0xfe>
 800bb64:	2300      	movs	r3, #0
 800bb66:	f04f 0c0a 	mov.w	ip, #10
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	3401      	adds	r4, #1
 800bb6e:	9305      	str	r3, [sp, #20]
 800bb70:	4620      	mov	r0, r4
 800bb72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb76:	3a30      	subs	r2, #48	@ 0x30
 800bb78:	2a09      	cmp	r2, #9
 800bb7a:	d903      	bls.n	800bb84 <_vfiprintf_r+0x1cc>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0c6      	beq.n	800bb0e <_vfiprintf_r+0x156>
 800bb80:	9105      	str	r1, [sp, #20]
 800bb82:	e7c4      	b.n	800bb0e <_vfiprintf_r+0x156>
 800bb84:	4604      	mov	r4, r0
 800bb86:	2301      	movs	r3, #1
 800bb88:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb8c:	e7f0      	b.n	800bb70 <_vfiprintf_r+0x1b8>
 800bb8e:	ab03      	add	r3, sp, #12
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	462a      	mov	r2, r5
 800bb94:	4630      	mov	r0, r6
 800bb96:	4b13      	ldr	r3, [pc, #76]	@ (800bbe4 <_vfiprintf_r+0x22c>)
 800bb98:	a904      	add	r1, sp, #16
 800bb9a:	f7fc ff1b 	bl	80089d4 <_printf_float>
 800bb9e:	4607      	mov	r7, r0
 800bba0:	1c78      	adds	r0, r7, #1
 800bba2:	d1d6      	bne.n	800bb52 <_vfiprintf_r+0x19a>
 800bba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bba6:	07d9      	lsls	r1, r3, #31
 800bba8:	d405      	bmi.n	800bbb6 <_vfiprintf_r+0x1fe>
 800bbaa:	89ab      	ldrh	r3, [r5, #12]
 800bbac:	059a      	lsls	r2, r3, #22
 800bbae:	d402      	bmi.n	800bbb6 <_vfiprintf_r+0x1fe>
 800bbb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbb2:	f7fd fcb9 	bl	8009528 <__retarget_lock_release_recursive>
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	065b      	lsls	r3, r3, #25
 800bbba:	f53f af1f 	bmi.w	800b9fc <_vfiprintf_r+0x44>
 800bbbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbc0:	e71e      	b.n	800ba00 <_vfiprintf_r+0x48>
 800bbc2:	ab03      	add	r3, sp, #12
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	462a      	mov	r2, r5
 800bbc8:	4630      	mov	r0, r6
 800bbca:	4b06      	ldr	r3, [pc, #24]	@ (800bbe4 <_vfiprintf_r+0x22c>)
 800bbcc:	a904      	add	r1, sp, #16
 800bbce:	f7fd f99f 	bl	8008f10 <_printf_i>
 800bbd2:	e7e4      	b.n	800bb9e <_vfiprintf_r+0x1e6>
 800bbd4:	0800c25a 	.word	0x0800c25a
 800bbd8:	0800c260 	.word	0x0800c260
 800bbdc:	0800c264 	.word	0x0800c264
 800bbe0:	080089d5 	.word	0x080089d5
 800bbe4:	0800b995 	.word	0x0800b995

0800bbe8 <__swbuf_r>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	460e      	mov	r6, r1
 800bbec:	4614      	mov	r4, r2
 800bbee:	4605      	mov	r5, r0
 800bbf0:	b118      	cbz	r0, 800bbfa <__swbuf_r+0x12>
 800bbf2:	6a03      	ldr	r3, [r0, #32]
 800bbf4:	b90b      	cbnz	r3, 800bbfa <__swbuf_r+0x12>
 800bbf6:	f7fd fb35 	bl	8009264 <__sinit>
 800bbfa:	69a3      	ldr	r3, [r4, #24]
 800bbfc:	60a3      	str	r3, [r4, #8]
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	071a      	lsls	r2, r3, #28
 800bc02:	d501      	bpl.n	800bc08 <__swbuf_r+0x20>
 800bc04:	6923      	ldr	r3, [r4, #16]
 800bc06:	b943      	cbnz	r3, 800bc1a <__swbuf_r+0x32>
 800bc08:	4621      	mov	r1, r4
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f000 f82a 	bl	800bc64 <__swsetup_r>
 800bc10:	b118      	cbz	r0, 800bc1a <__swbuf_r+0x32>
 800bc12:	f04f 37ff 	mov.w	r7, #4294967295
 800bc16:	4638      	mov	r0, r7
 800bc18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	6922      	ldr	r2, [r4, #16]
 800bc1e:	b2f6      	uxtb	r6, r6
 800bc20:	1a98      	subs	r0, r3, r2
 800bc22:	6963      	ldr	r3, [r4, #20]
 800bc24:	4637      	mov	r7, r6
 800bc26:	4283      	cmp	r3, r0
 800bc28:	dc05      	bgt.n	800bc36 <__swbuf_r+0x4e>
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	f7ff fdc9 	bl	800b7c4 <_fflush_r>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d1ed      	bne.n	800bc12 <__swbuf_r+0x2a>
 800bc36:	68a3      	ldr	r3, [r4, #8]
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	60a3      	str	r3, [r4, #8]
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	6022      	str	r2, [r4, #0]
 800bc42:	701e      	strb	r6, [r3, #0]
 800bc44:	6962      	ldr	r2, [r4, #20]
 800bc46:	1c43      	adds	r3, r0, #1
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d004      	beq.n	800bc56 <__swbuf_r+0x6e>
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	07db      	lsls	r3, r3, #31
 800bc50:	d5e1      	bpl.n	800bc16 <__swbuf_r+0x2e>
 800bc52:	2e0a      	cmp	r6, #10
 800bc54:	d1df      	bne.n	800bc16 <__swbuf_r+0x2e>
 800bc56:	4621      	mov	r1, r4
 800bc58:	4628      	mov	r0, r5
 800bc5a:	f7ff fdb3 	bl	800b7c4 <_fflush_r>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d0d9      	beq.n	800bc16 <__swbuf_r+0x2e>
 800bc62:	e7d6      	b.n	800bc12 <__swbuf_r+0x2a>

0800bc64 <__swsetup_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4b29      	ldr	r3, [pc, #164]	@ (800bd0c <__swsetup_r+0xa8>)
 800bc68:	4605      	mov	r5, r0
 800bc6a:	6818      	ldr	r0, [r3, #0]
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	b118      	cbz	r0, 800bc78 <__swsetup_r+0x14>
 800bc70:	6a03      	ldr	r3, [r0, #32]
 800bc72:	b90b      	cbnz	r3, 800bc78 <__swsetup_r+0x14>
 800bc74:	f7fd faf6 	bl	8009264 <__sinit>
 800bc78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7c:	0719      	lsls	r1, r3, #28
 800bc7e:	d422      	bmi.n	800bcc6 <__swsetup_r+0x62>
 800bc80:	06da      	lsls	r2, r3, #27
 800bc82:	d407      	bmi.n	800bc94 <__swsetup_r+0x30>
 800bc84:	2209      	movs	r2, #9
 800bc86:	602a      	str	r2, [r5, #0]
 800bc88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc90:	81a3      	strh	r3, [r4, #12]
 800bc92:	e033      	b.n	800bcfc <__swsetup_r+0x98>
 800bc94:	0758      	lsls	r0, r3, #29
 800bc96:	d512      	bpl.n	800bcbe <__swsetup_r+0x5a>
 800bc98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc9a:	b141      	cbz	r1, 800bcae <__swsetup_r+0x4a>
 800bc9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bca0:	4299      	cmp	r1, r3
 800bca2:	d002      	beq.n	800bcaa <__swsetup_r+0x46>
 800bca4:	4628      	mov	r0, r5
 800bca6:	f7fe fabf 	bl	800a228 <_free_r>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcae:	89a3      	ldrh	r3, [r4, #12]
 800bcb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	6063      	str	r3, [r4, #4]
 800bcba:	6923      	ldr	r3, [r4, #16]
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	f043 0308 	orr.w	r3, r3, #8
 800bcc4:	81a3      	strh	r3, [r4, #12]
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	b94b      	cbnz	r3, 800bcde <__swsetup_r+0x7a>
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bcd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcd4:	d003      	beq.n	800bcde <__swsetup_r+0x7a>
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	4628      	mov	r0, r5
 800bcda:	f000 f882 	bl	800bde2 <__smakebuf_r>
 800bcde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bce2:	f013 0201 	ands.w	r2, r3, #1
 800bce6:	d00a      	beq.n	800bcfe <__swsetup_r+0x9a>
 800bce8:	2200      	movs	r2, #0
 800bcea:	60a2      	str	r2, [r4, #8]
 800bcec:	6962      	ldr	r2, [r4, #20]
 800bcee:	4252      	negs	r2, r2
 800bcf0:	61a2      	str	r2, [r4, #24]
 800bcf2:	6922      	ldr	r2, [r4, #16]
 800bcf4:	b942      	cbnz	r2, 800bd08 <__swsetup_r+0xa4>
 800bcf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bcfa:	d1c5      	bne.n	800bc88 <__swsetup_r+0x24>
 800bcfc:	bd38      	pop	{r3, r4, r5, pc}
 800bcfe:	0799      	lsls	r1, r3, #30
 800bd00:	bf58      	it	pl
 800bd02:	6962      	ldrpl	r2, [r4, #20]
 800bd04:	60a2      	str	r2, [r4, #8]
 800bd06:	e7f4      	b.n	800bcf2 <__swsetup_r+0x8e>
 800bd08:	2000      	movs	r0, #0
 800bd0a:	e7f7      	b.n	800bcfc <__swsetup_r+0x98>
 800bd0c:	20000188 	.word	0x20000188

0800bd10 <_raise_r>:
 800bd10:	291f      	cmp	r1, #31
 800bd12:	b538      	push	{r3, r4, r5, lr}
 800bd14:	4605      	mov	r5, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	d904      	bls.n	800bd24 <_raise_r+0x14>
 800bd1a:	2316      	movs	r3, #22
 800bd1c:	6003      	str	r3, [r0, #0]
 800bd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bd26:	b112      	cbz	r2, 800bd2e <_raise_r+0x1e>
 800bd28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd2c:	b94b      	cbnz	r3, 800bd42 <_raise_r+0x32>
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f000 f830 	bl	800bd94 <_getpid_r>
 800bd34:	4622      	mov	r2, r4
 800bd36:	4601      	mov	r1, r0
 800bd38:	4628      	mov	r0, r5
 800bd3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd3e:	f000 b817 	b.w	800bd70 <_kill_r>
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d00a      	beq.n	800bd5c <_raise_r+0x4c>
 800bd46:	1c59      	adds	r1, r3, #1
 800bd48:	d103      	bne.n	800bd52 <_raise_r+0x42>
 800bd4a:	2316      	movs	r3, #22
 800bd4c:	6003      	str	r3, [r0, #0]
 800bd4e:	2001      	movs	r0, #1
 800bd50:	e7e7      	b.n	800bd22 <_raise_r+0x12>
 800bd52:	2100      	movs	r1, #0
 800bd54:	4620      	mov	r0, r4
 800bd56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd5a:	4798      	blx	r3
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e7e0      	b.n	800bd22 <_raise_r+0x12>

0800bd60 <raise>:
 800bd60:	4b02      	ldr	r3, [pc, #8]	@ (800bd6c <raise+0xc>)
 800bd62:	4601      	mov	r1, r0
 800bd64:	6818      	ldr	r0, [r3, #0]
 800bd66:	f7ff bfd3 	b.w	800bd10 <_raise_r>
 800bd6a:	bf00      	nop
 800bd6c:	20000188 	.word	0x20000188

0800bd70 <_kill_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	2300      	movs	r3, #0
 800bd74:	4d06      	ldr	r5, [pc, #24]	@ (800bd90 <_kill_r+0x20>)
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	f7f6 f94a 	bl	8002016 <_kill>
 800bd82:	1c43      	adds	r3, r0, #1
 800bd84:	d102      	bne.n	800bd8c <_kill_r+0x1c>
 800bd86:	682b      	ldr	r3, [r5, #0]
 800bd88:	b103      	cbz	r3, 800bd8c <_kill_r+0x1c>
 800bd8a:	6023      	str	r3, [r4, #0]
 800bd8c:	bd38      	pop	{r3, r4, r5, pc}
 800bd8e:	bf00      	nop
 800bd90:	20001490 	.word	0x20001490

0800bd94 <_getpid_r>:
 800bd94:	f7f6 b938 	b.w	8002008 <_getpid>

0800bd98 <__swhatbuf_r>:
 800bd98:	b570      	push	{r4, r5, r6, lr}
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bda0:	4615      	mov	r5, r2
 800bda2:	2900      	cmp	r1, #0
 800bda4:	461e      	mov	r6, r3
 800bda6:	b096      	sub	sp, #88	@ 0x58
 800bda8:	da0c      	bge.n	800bdc4 <__swhatbuf_r+0x2c>
 800bdaa:	89a3      	ldrh	r3, [r4, #12]
 800bdac:	2100      	movs	r1, #0
 800bdae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdb2:	bf14      	ite	ne
 800bdb4:	2340      	movne	r3, #64	@ 0x40
 800bdb6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdba:	2000      	movs	r0, #0
 800bdbc:	6031      	str	r1, [r6, #0]
 800bdbe:	602b      	str	r3, [r5, #0]
 800bdc0:	b016      	add	sp, #88	@ 0x58
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	466a      	mov	r2, sp
 800bdc6:	f000 f849 	bl	800be5c <_fstat_r>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	dbed      	blt.n	800bdaa <__swhatbuf_r+0x12>
 800bdce:	9901      	ldr	r1, [sp, #4]
 800bdd0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdd4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdd8:	4259      	negs	r1, r3
 800bdda:	4159      	adcs	r1, r3
 800bddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bde0:	e7eb      	b.n	800bdba <__swhatbuf_r+0x22>

0800bde2 <__smakebuf_r>:
 800bde2:	898b      	ldrh	r3, [r1, #12]
 800bde4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bde6:	079d      	lsls	r5, r3, #30
 800bde8:	4606      	mov	r6, r0
 800bdea:	460c      	mov	r4, r1
 800bdec:	d507      	bpl.n	800bdfe <__smakebuf_r+0x1c>
 800bdee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bdf2:	6023      	str	r3, [r4, #0]
 800bdf4:	6123      	str	r3, [r4, #16]
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	6163      	str	r3, [r4, #20]
 800bdfa:	b003      	add	sp, #12
 800bdfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdfe:	466a      	mov	r2, sp
 800be00:	ab01      	add	r3, sp, #4
 800be02:	f7ff ffc9 	bl	800bd98 <__swhatbuf_r>
 800be06:	9f00      	ldr	r7, [sp, #0]
 800be08:	4605      	mov	r5, r0
 800be0a:	4639      	mov	r1, r7
 800be0c:	4630      	mov	r0, r6
 800be0e:	f7fe fdb7 	bl	800a980 <_malloc_r>
 800be12:	b948      	cbnz	r0, 800be28 <__smakebuf_r+0x46>
 800be14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be18:	059a      	lsls	r2, r3, #22
 800be1a:	d4ee      	bmi.n	800bdfa <__smakebuf_r+0x18>
 800be1c:	f023 0303 	bic.w	r3, r3, #3
 800be20:	f043 0302 	orr.w	r3, r3, #2
 800be24:	81a3      	strh	r3, [r4, #12]
 800be26:	e7e2      	b.n	800bdee <__smakebuf_r+0xc>
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	9b01      	ldr	r3, [sp, #4]
 800be36:	6020      	str	r0, [r4, #0]
 800be38:	b15b      	cbz	r3, 800be52 <__smakebuf_r+0x70>
 800be3a:	4630      	mov	r0, r6
 800be3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be40:	f000 f81e 	bl	800be80 <_isatty_r>
 800be44:	b128      	cbz	r0, 800be52 <__smakebuf_r+0x70>
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	f023 0303 	bic.w	r3, r3, #3
 800be4c:	f043 0301 	orr.w	r3, r3, #1
 800be50:	81a3      	strh	r3, [r4, #12]
 800be52:	89a3      	ldrh	r3, [r4, #12]
 800be54:	431d      	orrs	r5, r3
 800be56:	81a5      	strh	r5, [r4, #12]
 800be58:	e7cf      	b.n	800bdfa <__smakebuf_r+0x18>
	...

0800be5c <_fstat_r>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	2300      	movs	r3, #0
 800be60:	4d06      	ldr	r5, [pc, #24]	@ (800be7c <_fstat_r+0x20>)
 800be62:	4604      	mov	r4, r0
 800be64:	4608      	mov	r0, r1
 800be66:	4611      	mov	r1, r2
 800be68:	602b      	str	r3, [r5, #0]
 800be6a:	f7f6 f933 	bl	80020d4 <_fstat>
 800be6e:	1c43      	adds	r3, r0, #1
 800be70:	d102      	bne.n	800be78 <_fstat_r+0x1c>
 800be72:	682b      	ldr	r3, [r5, #0]
 800be74:	b103      	cbz	r3, 800be78 <_fstat_r+0x1c>
 800be76:	6023      	str	r3, [r4, #0]
 800be78:	bd38      	pop	{r3, r4, r5, pc}
 800be7a:	bf00      	nop
 800be7c:	20001490 	.word	0x20001490

0800be80 <_isatty_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	2300      	movs	r3, #0
 800be84:	4d05      	ldr	r5, [pc, #20]	@ (800be9c <_isatty_r+0x1c>)
 800be86:	4604      	mov	r4, r0
 800be88:	4608      	mov	r0, r1
 800be8a:	602b      	str	r3, [r5, #0]
 800be8c:	f7f6 f931 	bl	80020f2 <_isatty>
 800be90:	1c43      	adds	r3, r0, #1
 800be92:	d102      	bne.n	800be9a <_isatty_r+0x1a>
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	b103      	cbz	r3, 800be9a <_isatty_r+0x1a>
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	bd38      	pop	{r3, r4, r5, pc}
 800be9c:	20001490 	.word	0x20001490

0800bea0 <sqrtf>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	4605      	mov	r5, r0
 800bea4:	f000 f816 	bl	800bed4 <__ieee754_sqrtf>
 800bea8:	4629      	mov	r1, r5
 800beaa:	4604      	mov	r4, r0
 800beac:	4628      	mov	r0, r5
 800beae:	f7f5 f8df 	bl	8001070 <__aeabi_fcmpun>
 800beb2:	b968      	cbnz	r0, 800bed0 <sqrtf+0x30>
 800beb4:	2100      	movs	r1, #0
 800beb6:	4628      	mov	r0, r5
 800beb8:	f7f5 f8b2 	bl	8001020 <__aeabi_fcmplt>
 800bebc:	b140      	cbz	r0, 800bed0 <sqrtf+0x30>
 800bebe:	f7fd fb07 	bl	80094d0 <__errno>
 800bec2:	2321      	movs	r3, #33	@ 0x21
 800bec4:	2100      	movs	r1, #0
 800bec6:	6003      	str	r3, [r0, #0]
 800bec8:	4608      	mov	r0, r1
 800beca:	f7f4 ffbf 	bl	8000e4c <__aeabi_fdiv>
 800bece:	4604      	mov	r4, r0
 800bed0:	4620      	mov	r0, r4
 800bed2:	bd38      	pop	{r3, r4, r5, pc}

0800bed4 <__ieee754_sqrtf>:
 800bed4:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800bed8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee0:	4603      	mov	r3, r0
 800bee2:	4604      	mov	r4, r0
 800bee4:	d30a      	bcc.n	800befc <__ieee754_sqrtf+0x28>
 800bee6:	4601      	mov	r1, r0
 800bee8:	f7f4 fefc 	bl	8000ce4 <__aeabi_fmul>
 800beec:	4601      	mov	r1, r0
 800beee:	4620      	mov	r0, r4
 800bef0:	f7f4 fdf0 	bl	8000ad4 <__addsf3>
 800bef4:	4604      	mov	r4, r0
 800bef6:	4620      	mov	r0, r4
 800bef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800befc:	2a00      	cmp	r2, #0
 800befe:	d0fa      	beq.n	800bef6 <__ieee754_sqrtf+0x22>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	da06      	bge.n	800bf12 <__ieee754_sqrtf+0x3e>
 800bf04:	4601      	mov	r1, r0
 800bf06:	f7f4 fde3 	bl	8000ad0 <__aeabi_fsub>
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	f7f4 ff9e 	bl	8000e4c <__aeabi_fdiv>
 800bf10:	e7f0      	b.n	800bef4 <__ieee754_sqrtf+0x20>
 800bf12:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800bf16:	d03c      	beq.n	800bf92 <__ieee754_sqrtf+0xbe>
 800bf18:	15c2      	asrs	r2, r0, #23
 800bf1a:	2400      	movs	r4, #0
 800bf1c:	2019      	movs	r0, #25
 800bf1e:	4626      	mov	r6, r4
 800bf20:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800bf24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bf28:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800bf2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bf30:	07d2      	lsls	r2, r2, #31
 800bf32:	bf58      	it	pl
 800bf34:	005b      	lslpl	r3, r3, #1
 800bf36:	106d      	asrs	r5, r5, #1
 800bf38:	005b      	lsls	r3, r3, #1
 800bf3a:	1872      	adds	r2, r6, r1
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	bfcf      	iteee	gt
 800bf40:	461a      	movgt	r2, r3
 800bf42:	1856      	addle	r6, r2, r1
 800bf44:	1864      	addle	r4, r4, r1
 800bf46:	1a9a      	suble	r2, r3, r2
 800bf48:	3801      	subs	r0, #1
 800bf4a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800bf4e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bf52:	d1f2      	bne.n	800bf3a <__ieee754_sqrtf+0x66>
 800bf54:	b1ba      	cbz	r2, 800bf86 <__ieee754_sqrtf+0xb2>
 800bf56:	4e15      	ldr	r6, [pc, #84]	@ (800bfac <__ieee754_sqrtf+0xd8>)
 800bf58:	4f15      	ldr	r7, [pc, #84]	@ (800bfb0 <__ieee754_sqrtf+0xdc>)
 800bf5a:	6830      	ldr	r0, [r6, #0]
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	f7f4 fdb7 	bl	8000ad0 <__aeabi_fsub>
 800bf62:	f8d6 8000 	ldr.w	r8, [r6]
 800bf66:	4601      	mov	r1, r0
 800bf68:	4640      	mov	r0, r8
 800bf6a:	f7f5 f863 	bl	8001034 <__aeabi_fcmple>
 800bf6e:	b150      	cbz	r0, 800bf86 <__ieee754_sqrtf+0xb2>
 800bf70:	6830      	ldr	r0, [r6, #0]
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	f7f4 fdae 	bl	8000ad4 <__addsf3>
 800bf78:	6836      	ldr	r6, [r6, #0]
 800bf7a:	4601      	mov	r1, r0
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f7f5 f84f 	bl	8001020 <__aeabi_fcmplt>
 800bf82:	b170      	cbz	r0, 800bfa2 <__ieee754_sqrtf+0xce>
 800bf84:	3402      	adds	r4, #2
 800bf86:	1064      	asrs	r4, r4, #1
 800bf88:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800bf8c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800bf90:	e7b1      	b.n	800bef6 <__ieee754_sqrtf+0x22>
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	0218      	lsls	r0, r3, #8
 800bf96:	460a      	mov	r2, r1
 800bf98:	f101 0101 	add.w	r1, r1, #1
 800bf9c:	d5f9      	bpl.n	800bf92 <__ieee754_sqrtf+0xbe>
 800bf9e:	4252      	negs	r2, r2
 800bfa0:	e7bb      	b.n	800bf1a <__ieee754_sqrtf+0x46>
 800bfa2:	3401      	adds	r4, #1
 800bfa4:	f024 0401 	bic.w	r4, r4, #1
 800bfa8:	e7ed      	b.n	800bf86 <__ieee754_sqrtf+0xb2>
 800bfaa:	bf00      	nop
 800bfac:	0800c4fc 	.word	0x0800c4fc
 800bfb0:	0800c4f8 	.word	0x0800c4f8

0800bfb4 <_init>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	bf00      	nop
 800bfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfba:	bc08      	pop	{r3}
 800bfbc:	469e      	mov	lr, r3
 800bfbe:	4770      	bx	lr

0800bfc0 <_fini>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr
