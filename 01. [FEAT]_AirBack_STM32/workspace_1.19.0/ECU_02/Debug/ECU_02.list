
ECU_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0ac  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800c1c0  0800c1c0  0000d1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6f0  0800c6f0  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c6f0  0800c6f0  0000d6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6f8  0800c6f8  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6f8  0800c6f8  0000d6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c6fc  0800c6fc  0000d6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c700  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001320  200001d8  0800c8d8  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200014f8  0800c8d8  0000e4f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001318d  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003266  00000000  00000000  0002138e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  000245f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1e  00000000  00000000  00025830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5be  00000000  00000000  0002664e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dd1  00000000  00000000  00040c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a2c  00000000  00000000  000569dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b4  00000000  00000000  000e844c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ee600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c1a4 	.word	0x0800c1a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800c1a4 	.word	0x0800c1a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <__aeabi_d2lz>:
 800109c:	b538      	push	{r3, r4, r5, lr}
 800109e:	2200      	movs	r2, #0
 80010a0:	2300      	movs	r3, #0
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	f7ff fc89 	bl	80009bc <__aeabi_dcmplt>
 80010aa:	b928      	cbnz	r0, 80010b8 <__aeabi_d2lz+0x1c>
 80010ac:	4620      	mov	r0, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010b4:	f000 b80a 	b.w	80010cc <__aeabi_d2ulz>
 80010b8:	4620      	mov	r0, r4
 80010ba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80010be:	f000 f805 	bl	80010cc <__aeabi_d2ulz>
 80010c2:	4240      	negs	r0, r0
 80010c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010c8:	bd38      	pop	{r3, r4, r5, pc}
 80010ca:	bf00      	nop

080010cc <__aeabi_d2ulz>:
 80010cc:	b5d0      	push	{r4, r6, r7, lr}
 80010ce:	2200      	movs	r2, #0
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <__aeabi_d2ulz+0x34>)
 80010d2:	4606      	mov	r6, r0
 80010d4:	460f      	mov	r7, r1
 80010d6:	f7ff f9ff 	bl	80004d8 <__aeabi_dmul>
 80010da:	f7ff fcd5 	bl	8000a88 <__aeabi_d2uiz>
 80010de:	4604      	mov	r4, r0
 80010e0:	f7ff f980 	bl	80003e4 <__aeabi_ui2d>
 80010e4:	2200      	movs	r2, #0
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <__aeabi_d2ulz+0x38>)
 80010e8:	f7ff f9f6 	bl	80004d8 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4630      	mov	r0, r6
 80010f2:	4639      	mov	r1, r7
 80010f4:	f7ff f838 	bl	8000168 <__aeabi_dsub>
 80010f8:	f7ff fcc6 	bl	8000a88 <__aeabi_d2uiz>
 80010fc:	4621      	mov	r1, r4
 80010fe:	bdd0      	pop	{r4, r6, r7, pc}
 8001100:	3df00000 	.word	0x3df00000
 8001104:	41f00000 	.word	0x41f00000

08001108 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <vApplicationGetIdleTaskMemory+0x28>)
 8001118:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <vApplicationGetIdleTaskMemory+0x2c>)
 800111e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	200001f4 	.word	0x200001f4
 8001134:	20000248 	.word	0x20000248

08001138 <nmea_checksum_ok>:
static char line_buf[LINE_MAX];
static volatile uint16_t line_len;
static GPSFix latest;
static volatile bool has_new_valid;

static int nmea_checksum_ok(const char *s) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    // s는 '$' 다음부터 '*' 전까지
    uint8_t csum = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
    while (*s && *s != '*') { csum ^= (uint8_t)(*s++); }
 8001144:	e006      	b.n	8001154 <nmea_checksum_ok+0x1c>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	781a      	ldrb	r2, [r3, #0]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	4053      	eors	r3, r2
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <nmea_checksum_ok+0x2c>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b2a      	cmp	r3, #42	@ 0x2a
 8001162:	d1f0      	bne.n	8001146 <nmea_checksum_ok+0xe>
    if (*s != '*') return 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b2a      	cmp	r3, #42	@ 0x2a
 800116a:	d001      	beq.n	8001170 <nmea_checksum_ok+0x38>
 800116c:	2300      	movs	r3, #0
 800116e:	e01d      	b.n	80011ac <nmea_checksum_ok+0x74>
    char h1 = *(s+1), h2 = *(s+2);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	73bb      	strb	r3, [r7, #14]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3302      	adds	r3, #2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	737b      	strb	r3, [r7, #13]
    uint8_t val = (uint8_t)strtoul((char[]){h1,h2,0}, NULL, 16);
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	723b      	strb	r3, [r7, #8]
 8001184:	7b7b      	ldrb	r3, [r7, #13]
 8001186:	727b      	strb	r3, [r7, #9]
 8001188:	2300      	movs	r3, #0
 800118a:	72bb      	strb	r3, [r7, #10]
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	2210      	movs	r2, #16
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f007 fc6d 	bl	8008a74 <strtoul>
 800119a:	4603      	mov	r3, r0
 800119c:	733b      	strb	r3, [r7, #12]
    return csum == val;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <dm_to_deg>:

// ddmm.mmmm -> degrees(double)
static double dm_to_deg(const char *dm) {
 80011b4:	b5b0      	push	{r4, r5, r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    if (!dm || !*dm) return 0.0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <dm_to_deg+0x16>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d104      	bne.n	80011d4 <dm_to_deg+0x20>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e039      	b.n	8001248 <dm_to_deg+0x94>
    double v = atof(dm);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f006 fdd7 	bl	8007d88 <atof>
 80011da:	e9c7 0106 	strd	r0, r1, [r7, #24]
    int deg = (int)(v / 100.0);
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <dm_to_deg+0xa0>)
 80011e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011e8:	f7ff faa0 	bl	800072c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fc20 	bl	8000a38 <__aeabi_d2iz>
 80011f8:	4603      	mov	r3, r0
 80011fa:	617b      	str	r3, [r7, #20]
    double min = v - (deg * 100.0);
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff f901 	bl	8000404 <__aeabi_i2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <dm_to_deg+0xa0>)
 8001208:	f7ff f966 	bl	80004d8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001214:	f7fe ffa8 	bl	8000168 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (double)deg + min/60.0;
 8001220:	6978      	ldr	r0, [r7, #20]
 8001222:	f7ff f8ef 	bl	8000404 <__aeabi_i2d>
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <dm_to_deg+0xa4>)
 8001230:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001234:	f7ff fa7a 	bl	800072c <__aeabi_ddiv>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	f7fe ff94 	bl	800016c <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
}
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bdb0      	pop	{r4, r5, r7, pc}
 8001252:	bf00      	nop
 8001254:	40590000 	.word	0x40590000
 8001258:	404e0000 	.word	0x404e0000

0800125c <parse_gprmc>:

static void parse_gprmc(char *s) {
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b0a2      	sub	sp, #136	@ 0x88
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
    // s: "GPRMC,hhmmss.sss,A,llll.ll,a,yyyyy.yy,a,..."
    // 토큰 분해
    // 인덱스: 0=GPRMC 1=UTC 2=valid 3=lat 4=N/S 5=lon 6=E/W
    char *field[16] = {0};
 8001264:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001268:	2240      	movs	r2, #64	@ 0x40
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f008 f9a0 	bl	80095b2 <memset>
    int idx = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    for (char *p = s; *p && idx < 16; ++idx) {
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800127e:	e03b      	b.n	80012f8 <parse_gprmc+0x9c>
        field[idx] = p;
 8001280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	3380      	adds	r3, #128	@ 0x80
 8001288:	f107 0208 	add.w	r2, r7, #8
 800128c:	4413      	add	r3, r2
 800128e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001292:	f843 2c58 	str.w	r2, [r3, #-88]
        while (*p && *p != ',' && *p != '*') p++;
 8001296:	e004      	b.n	80012a2 <parse_gprmc+0x46>
 8001298:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800129c:	3301      	adds	r3, #1
 800129e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80012a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d009      	beq.n	80012c0 <parse_gprmc+0x64>
 80012ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80012b4:	d004      	beq.n	80012c0 <parse_gprmc+0x64>
 80012b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80012be:	d1eb      	bne.n	8001298 <parse_gprmc+0x3c>
        if (*p == ',' ) { *p++ = '\0'; }
 80012c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b2c      	cmp	r3, #44	@ 0x2c
 80012c8:	d107      	bne.n	80012da <parse_gprmc+0x7e>
 80012ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e009      	b.n	80012ee <parse_gprmc+0x92>
        else if (*p == '*') { *p = '\0'; break; }
 80012da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80012e2:	d104      	bne.n	80012ee <parse_gprmc+0x92>
 80012e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e00d      	b.n	800130a <parse_gprmc+0xae>
    for (char *p = s; *p && idx < 16; ++idx) {
 80012ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012f2:	3301      	adds	r3, #1
 80012f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80012f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <parse_gprmc+0xae>
 8001302:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001306:	2b0f      	cmp	r3, #15
 8001308:	ddba      	ble.n	8001280 <parse_gprmc+0x24>
    }
    if (idx < 7) return;
 800130a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800130e:	2b06      	cmp	r3, #6
 8001310:	f340 809a 	ble.w	8001448 <parse_gprmc+0x1ec>

    GPSFix fix = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2220      	movs	r2, #32
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f008 f948 	bl	80095b2 <memset>
    // 유효성
    fix.valid = (field[2] && field[2][0] == 'A');
 8001322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <parse_gprmc+0xd8>
 8001328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b41      	cmp	r3, #65	@ 0x41
 800132e:	d101      	bne.n	8001334 <parse_gprmc+0xd8>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <parse_gprmc+0xda>
 8001334:	2300      	movs	r3, #0
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	743b      	strb	r3, [r7, #16]

    // 시간 hhmmss
    if (field[1] && strlen(field[1]) >= 6) {
 800133e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001340:	2b00      	cmp	r3, #0
 8001342:	d03e      	beq.n	80013c2 <parse_gprmc+0x166>
 8001344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ff02 	bl	8000150 <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	2b05      	cmp	r3, #5
 8001350:	d937      	bls.n	80013c2 <parse_gprmc+0x166>
        fix.hh = (field[1][0]-'0')*10 + (field[1][1]-'0');
 8001352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	3b30      	subs	r3, #48	@ 0x30
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	b2da      	uxtb	r2, r3
 8001364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001366:	3301      	adds	r3, #1
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3b30      	subs	r3, #48	@ 0x30
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        fix.mm = (field[1][2]-'0')*10 + (field[1][3]-'0');
 8001376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001378:	3302      	adds	r3, #2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3b30      	subs	r3, #48	@ 0x30
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138c:	3303      	adds	r3, #3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4413      	add	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	3b30      	subs	r3, #48	@ 0x30
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        fix.ss = (field[1][4]-'0')*10 + (field[1][5]-'0');
 800139c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800139e:	3304      	adds	r3, #4
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	3b30      	subs	r3, #48	@ 0x30
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013b2:	3305      	adds	r3, #5
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	3b30      	subs	r3, #48	@ 0x30
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }

    // 위도/경도
    double lat = dm_to_deg(field[3]);
 80013c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fef5 	bl	80011b4 <dm_to_deg>
 80013ca:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
    double lon = dm_to_deg(field[5]);
 80013ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff feef 	bl	80011b4 <dm_to_deg>
 80013d6:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
    if (field[4] && field[4][0] == 'S') lat = -lat;
 80013da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <parse_gprmc+0x1a0>
 80013e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b53      	cmp	r3, #83	@ 0x53
 80013e6:	d109      	bne.n	80013fc <parse_gprmc+0x1a0>
 80013e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013ee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013f8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    if (field[6] && field[6][0] == 'W') lon = -lon;
 80013fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <parse_gprmc+0x1ba>
 8001402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b57      	cmp	r3, #87	@ 0x57
 8001408:	d105      	bne.n	8001416 <parse_gprmc+0x1ba>
 800140a:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 800140c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800140e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001412:	e9c7 451c 	strd	r4, r5, [r7, #112]	@ 0x70

    fix.latitude  = lat;
 8001416:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800141a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    fix.longitude = lon;
 800141e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001422:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (fix.valid) {
 8001426:	7c3b      	ldrb	r3, [r7, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00e      	beq.n	800144a <parse_gprmc+0x1ee>
        latest = fix;
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <parse_gprmc+0x1f4>)
 800142e:	461d      	mov	r5, r3
 8001430:	f107 0410 	add.w	r4, r7, #16
 8001434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001438:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800143c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        has_new_valid = true;
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <parse_gprmc+0x1f8>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	e000      	b.n	800144a <parse_gprmc+0x1ee>
    if (idx < 7) return;
 8001448:	bf00      	nop
    }
}
 800144a:	3788      	adds	r7, #136	@ 0x88
 800144c:	46bd      	mov	sp, r7
 800144e:	bdb0      	pop	{r4, r5, r7, pc}
 8001450:	200004d0 	.word	0x200004d0
 8001454:	200004f0 	.word	0x200004f0

08001458 <GPS_Init>:

void GPS_Init(void) {
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
    line_len = 0;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <GPS_Init+0x20>)
 800145e:	2200      	movs	r2, #0
 8001460:	801a      	strh	r2, [r3, #0]
    latest.valid = false;
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <GPS_Init+0x24>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
    has_new_valid = false;
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <GPS_Init+0x28>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	200004c8 	.word	0x200004c8
 800147c:	200004d0 	.word	0x200004d0
 8001480:	200004f0 	.word	0x200004f0

08001484 <GPS_OnByte>:

void GPS_OnByte(uint8_t b) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
    if (b == '\r') return; // 무시
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b0d      	cmp	r3, #13
 8001492:	d04e      	beq.n	8001532 <GPS_OnByte+0xae>
    if (b == '\n') {
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b0a      	cmp	r3, #10
 8001498:	d12f      	bne.n	80014fa <GPS_OnByte+0x76>
        // 한 줄 완성
        if (line_len >= 6 && line_buf[0] == '$') {
 800149a:	4b28      	ldr	r3, [pc, #160]	@ (800153c <GPS_OnByte+0xb8>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	d926      	bls.n	80014f2 <GPS_OnByte+0x6e>
 80014a4:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <GPS_OnByte+0xbc>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b24      	cmp	r3, #36	@ 0x24
 80014aa:	d122      	bne.n	80014f2 <GPS_OnByte+0x6e>
            // 체크섬 확인
            char *star = strchr(line_buf, '*');
 80014ac:	212a      	movs	r1, #42	@ 0x2a
 80014ae:	4824      	ldr	r0, [pc, #144]	@ (8001540 <GPS_OnByte+0xbc>)
 80014b0:	f008 f887 	bl	80095c2 <strchr>
 80014b4:	60f8      	str	r0, [r7, #12]
            if (star && nmea_checksum_ok(line_buf + 1)) {
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d01a      	beq.n	80014f2 <GPS_OnByte+0x6e>
 80014bc:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <GPS_OnByte+0xc0>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe3a 	bl	8001138 <nmea_checksum_ok>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d013      	beq.n	80014f2 <GPS_OnByte+0x6e>
                // 문장 타입 확인
                if (strstr(line_buf, "$GPRMC") == line_buf || strstr(line_buf, "$GNRMC") == line_buf) {
 80014ca:	491f      	ldr	r1, [pc, #124]	@ (8001548 <GPS_OnByte+0xc4>)
 80014cc:	481c      	ldr	r0, [pc, #112]	@ (8001540 <GPS_OnByte+0xbc>)
 80014ce:	f008 f897 	bl	8009600 <strstr>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001540 <GPS_OnByte+0xbc>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <GPS_OnByte+0x66>
 80014da:	491c      	ldr	r1, [pc, #112]	@ (800154c <GPS_OnByte+0xc8>)
 80014dc:	4818      	ldr	r0, [pc, #96]	@ (8001540 <GPS_OnByte+0xbc>)
 80014de:	f008 f88f 	bl	8009600 <strstr>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a16      	ldr	r2, [pc, #88]	@ (8001540 <GPS_OnByte+0xbc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d103      	bne.n	80014f2 <GPS_OnByte+0x6e>
                    // '$' 제거하고 타입 이후부터 파싱
                    parse_gprmc(line_buf + 1); // 'GPRMC,...'
 80014ea:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <GPS_OnByte+0xc0>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff feb5 	bl	800125c <parse_gprmc>
                }
            }
        }
        line_len = 0;
 80014f2:	4b12      	ldr	r3, [pc, #72]	@ (800153c <GPS_OnByte+0xb8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	801a      	strh	r2, [r3, #0]
        return;
 80014f8:	e01c      	b.n	8001534 <GPS_OnByte+0xb0>
    }
    if (line_len < LINE_MAX-1) {
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <GPS_OnByte+0xb8>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	2b7e      	cmp	r3, #126	@ 0x7e
 8001502:	d812      	bhi.n	800152a <GPS_OnByte+0xa6>
        line_buf[line_len++] = (char)b;
 8001504:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <GPS_OnByte+0xb8>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	b291      	uxth	r1, r2
 800150e:	4a0b      	ldr	r2, [pc, #44]	@ (800153c <GPS_OnByte+0xb8>)
 8001510:	8011      	strh	r1, [r2, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <GPS_OnByte+0xbc>)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	5453      	strb	r3, [r2, r1]
        line_buf[line_len] = '\0';
 800151a:	4b08      	ldr	r3, [pc, #32]	@ (800153c <GPS_OnByte+0xb8>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <GPS_OnByte+0xbc>)
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]
 8001528:	e004      	b.n	8001534 <GPS_OnByte+0xb0>
    } else {
        line_len = 0; // overflow 시 라인 리셋
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <GPS_OnByte+0xb8>)
 800152c:	2200      	movs	r2, #0
 800152e:	801a      	strh	r2, [r3, #0]
 8001530:	e000      	b.n	8001534 <GPS_OnByte+0xb0>
    if (b == '\r') return; // 무시
 8001532:	bf00      	nop
    }
}
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200004c8 	.word	0x200004c8
 8001540:	20000448 	.word	0x20000448
 8001544:	20000449 	.word	0x20000449
 8001548:	0800c1c0 	.word	0x0800c1c0
 800154c:	0800c1c8 	.word	0x0800c1c8

08001550 <GPS_GetLatestFix>:

bool GPS_GetLatestFix(GPSFix *out) {
 8001550:	b4b0      	push	{r4, r5, r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    if (!out) return false;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <GPS_GetLatestFix+0x12>
 800155e:	2300      	movs	r3, #0
 8001560:	e015      	b.n	800158e <GPS_GetLatestFix+0x3e>
    if (!latest.valid) return false;
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <GPS_GetLatestFix+0x48>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	f083 0301 	eor.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <GPS_GetLatestFix+0x24>
 8001570:	2300      	movs	r3, #0
 8001572:	e00c      	b.n	800158e <GPS_GetLatestFix+0x3e>
    *out = latest;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <GPS_GetLatestFix+0x48>)
 8001578:	461c      	mov	r4, r3
 800157a:	4615      	mov	r5, r2
 800157c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001580:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return has_new_valid; // true면 "새로 업데이트됨"
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <GPS_GetLatestFix+0x4c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bcb0      	pop	{r4, r5, r7}
 8001596:	4770      	bx	lr
 8001598:	200004d0 	.word	0x200004d0
 800159c:	200004f0 	.word	0x200004f0

080015a0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  // GPS는 USART1로 수신
  if (huart->Instance == USART1) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_UART_RxCpltCallback+0x30>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d109      	bne.n	80015c6 <HAL_UART_RxCpltCallback+0x26>
    GPS_OnByte(gps_rx_byte);
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_UART_RxCpltCallback+0x34>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff64 	bl	8001484 <GPS_OnByte>
    HAL_UART_Receive_IT(&huart1, &gps_rx_byte, 1); // 다음 바이트 계속 수신
 80015bc:	2201      	movs	r2, #1
 80015be:	4905      	ldr	r1, [pc, #20]	@ (80015d4 <HAL_UART_RxCpltCallback+0x34>)
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <HAL_UART_RxCpltCallback+0x38>)
 80015c2:	f003 f812 	bl	80045ea <HAL_UART_Receive_IT>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40013800 	.word	0x40013800
 80015d4:	2000064c 	.word	0x2000064c
 80015d8:	200005a0 	.word	0x200005a0

080015dc <main>:
/* USER CODE END 0 */

int main(void)
{
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b098      	sub	sp, #96	@ 0x60
 80015e0:	af00      	add	r7, sp, #0
  HAL_Init();
 80015e2:	f000 fe6f 	bl	80022c4 <HAL_Init>
  SystemClock_Config();
 80015e6:	f000 f87f 	bl	80016e8 <SystemClock_Config>

  MX_GPIO_Init();
 80015ea:	f000 f97b 	bl	80018e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();   // PC 출력(115200)
 80015ee:	f000 f94f 	bl	8001890 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015f2:	f000 f8bf 	bl	8001774 <MX_I2C1_Init>
  MX_SPI2_Init();
 80015f6:	f000 f8eb 	bl	80017d0 <MX_SPI2_Init>
  MX_USART1_UART_Init();   // GPS 입력(9600)
 80015fa:	f000 f91f 	bl	800183c <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  // GPS 수신 시작 (USART1)
  GPS_Init();
 80015fe:	f7ff ff2b 	bl	8001458 <GPS_Init>
  HAL_UART_Receive_IT(&huart1, &gps_rx_byte, 1);
 8001602:	2201      	movs	r2, #1
 8001604:	492e      	ldr	r1, [pc, #184]	@ (80016c0 <main+0xe4>)
 8001606:	482f      	ldr	r0, [pc, #188]	@ (80016c4 <main+0xe8>)
 8001608:	f002 ffef 	bl	80045ea <HAL_UART_Receive_IT>

  // I2C 뮤텍스
  osMutexDef(I2C_MTX);
 800160c:	2300      	movs	r3, #0
 800160e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001610:	2300      	movs	r3, #0
 8001612:	65fb      	str	r3, [r7, #92]	@ 0x5c
  i2cMutexHandle = osMutexCreate(osMutex(I2C_MTX));
 8001614:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fea1 	bl	8005360 <osMutexCreate>
 800161e:	4603      	mov	r3, r0
 8001620:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <main+0xec>)
 8001622:	6013      	str	r3, [r2, #0]

  // MPU6050 초기화 (I2C 보호)
  if (i2cMutexHandle) {
 8001624:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <main+0xec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00d      	beq.n	8001648 <main+0x6c>
    osMutexWait(i2cMutexHandle, 100);
 800162c:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <main+0xec>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2164      	movs	r1, #100	@ 0x64
 8001632:	4618      	mov	r0, r3
 8001634:	f003 feac 	bl	8005390 <osMutexWait>
    MPU6050_Init(&hi2c1);
 8001638:	4824      	ldr	r0, [pc, #144]	@ (80016cc <main+0xf0>)
 800163a:	f000 fb4f 	bl	8001cdc <MPU6050_Init>
    osMutexRelease(i2cMutexHandle);
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <main+0xec>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f003 fef2 	bl	800542c <osMutexRelease>
  }
  /* USER CODE END 2 */

  /* defaultTask (자동 생성) */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001648:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <main+0xf4>)
 800164a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800164e:	461d      	mov	r5, r3
 8001650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800165c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fd8f 	bl	8005186 <osThreadCreate>
 8001668:	4603      	mov	r3, r0
 800166a:	4a1a      	ldr	r2, [pc, #104]	@ (80016d4 <main+0xf8>)
 800166c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(Sensor, SensorTask, osPriorityAboveNormal, 0, 256);
 800166e:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <main+0xfc>)
 8001670:	f107 0420 	add.w	r4, r7, #32
 8001674:	461d      	mov	r5, r3
 8001676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorTaskHandle = osThreadCreate(osThread(Sensor), NULL);
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f003 fd7c 	bl	8005186 <osThreadCreate>
 800168e:	4603      	mov	r3, r0
 8001690:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <main+0x100>)
 8001692:	6013      	str	r3, [r2, #0]

  osThreadDef(Detect, DetectTask, osPriorityNormal, 0, 256);
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <main+0x104>)
 8001696:	1d3c      	adds	r4, r7, #4
 8001698:	461d      	mov	r5, r3
 800169a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  detectTaskHandle = osThreadCreate(osThread(Detect), NULL);
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 fd6b 	bl	8005186 <osThreadCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <main+0x108>)
 80016b4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  osKernelStart();
 80016b6:	f003 fd4f 	bl	8005158 <osKernelStart>

  while (1) { }
 80016ba:	bf00      	nop
 80016bc:	e7fd      	b.n	80016ba <main+0xde>
 80016be:	bf00      	nop
 80016c0:	2000064c 	.word	0x2000064c
 80016c4:	200005a0 	.word	0x200005a0
 80016c8:	2000063c 	.word	0x2000063c
 80016cc:	200004f4 	.word	0x200004f4
 80016d0:	0800c1dc 	.word	0x0800c1dc
 80016d4:	20000630 	.word	0x20000630
 80016d8:	0800c200 	.word	0x0800c200
 80016dc:	20000634 	.word	0x20000634
 80016e0:	0800c224 	.word	0x0800c224
 80016e4:	20000638 	.word	0x20000638

080016e8 <SystemClock_Config>:
}

/* ===================== System / Periph Init ===================== */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b090      	sub	sp, #64	@ 0x40
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0318 	add.w	r3, r7, #24
 80016f2:	2228      	movs	r2, #40	@ 0x28
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 ff5b 	bl	80095b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800170e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;      // F1 계열은 RCC_HSI_ON 매크로 사용
 8001718:	2301      	movs	r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171c:	2302      	movs	r3, #2
 800171e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001720:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001724:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001726:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800172a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	4618      	mov	r0, r3
 8001732:	f002 f9eb 	bl	8003b0c <HAL_RCC_OscConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x58>
 800173c:	f000 fac8 	bl	8001cd0 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001740:	230f      	movs	r3, #15
 8001742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8001744:	2302      	movs	r3, #2
 8001746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800174c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2102      	movs	r1, #2
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fc58 	bl	8004010 <HAL_RCC_ClockConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0x82>
 8001766:	f000 fab3 	bl	8001cd0 <Error_Handler>
}
 800176a:	bf00      	nop
 800176c:	3740      	adds	r7, #64	@ 0x40
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_I2C1_Init+0x50>)
 800177a:	4a13      	ldr	r2, [pc, #76]	@ (80017c8 <MX_I2C1_Init+0x54>)
 800177c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_I2C1_Init+0x50>)
 8001780:	4a12      	ldr	r2, [pc, #72]	@ (80017cc <MX_I2C1_Init+0x58>)
 8001782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001784:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_I2C1_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_I2C1_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_I2C1_Init+0x50>)
 8001792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <MX_I2C1_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_I2C1_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <MX_I2C1_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_I2C1_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) { Error_Handler(); }
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <MX_I2C1_Init+0x50>)
 80017b2:	f001 f945 	bl	8002a40 <HAL_I2C_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_I2C1_Init+0x4c>
 80017bc:	f000 fa88 	bl	8001cd0 <Error_Handler>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200004f4 	.word	0x200004f4
 80017c8:	40005400 	.word	0x40005400
 80017cc:	000186a0 	.word	0x000186a0

080017d0 <MX_SPI2_Init>:

static void MX_SPI2_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  hspi2.Instance = SPI2;
 80017d4:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <MX_SPI2_Init+0x64>)
 80017d6:	4a18      	ldr	r2, [pc, #96]	@ (8001838 <MX_SPI2_Init+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <MX_SPI2_Init+0x64>)
 80017dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017e2:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <MX_SPI2_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <MX_SPI2_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ee:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <MX_SPI2_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <MX_SPI2_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <MX_SPI2_Init+0x64>)
 80017fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001800:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <MX_SPI2_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001808:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <MX_SPI2_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <MX_SPI2_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <MX_SPI2_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <MX_SPI2_Init+0x64>)
 800181c:	220a      	movs	r2, #10
 800181e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK) { Error_Handler(); }
 8001820:	4804      	ldr	r0, [pc, #16]	@ (8001834 <MX_SPI2_Init+0x64>)
 8001822:	f002 fd83 	bl	800432c <HAL_SPI_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_SPI2_Init+0x60>
 800182c:	f000 fa50 	bl	8001cd0 <Error_Handler>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000548 	.word	0x20000548
 8001838:	40003800 	.word	0x40003800

0800183c <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)   // GPS (9600, RX only)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <MX_USART1_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <MX_USART1_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate   = 9600;
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <MX_USART1_UART_Init+0x4c>)
 8001848:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800184c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <MX_USART1_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits   = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <MX_USART1_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity     = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <MX_USART1_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode       = UART_MODE_RX;        // GPS는 RX만
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <MX_USART1_UART_Init+0x4c>)
 8001862:	2204      	movs	r2, #4
 8001864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <MX_USART1_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) { Error_Handler(); }
 8001872:	4805      	ldr	r0, [pc, #20]	@ (8001888 <MX_USART1_UART_Init+0x4c>)
 8001874:	f002 fdde 	bl	8004434 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART1_UART_Init+0x46>
 800187e:	f000 fa27 	bl	8001cd0 <Error_Handler>
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200005a0 	.word	0x200005a0
 800188c:	40013800 	.word	0x40013800

08001890 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)   // PC Putty (115200)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <MX_USART2_UART_Init+0x4c>)
 8001896:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <MX_USART2_UART_Init+0x50>)
 8001898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate   = 115200;
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <MX_USART2_UART_Init+0x4c>)
 800189c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <MX_USART2_UART_Init+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits   = UART_STOPBITS_1;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <MX_USART2_UART_Init+0x4c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity     = UART_PARITY_NONE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <MX_USART2_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode       = UART_MODE_TX_RX;
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <MX_USART2_UART_Init+0x4c>)
 80018b6:	220c      	movs	r2, #12
 80018b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <MX_USART2_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) { Error_Handler(); }
 80018c6:	4805      	ldr	r0, [pc, #20]	@ (80018dc <MX_USART2_UART_Init+0x4c>)
 80018c8:	f002 fdb4 	bl	8004434 <HAL_UART_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USART2_UART_Init+0x46>
 80018d2:	f000 f9fd 	bl	8001cd0 <Error_Handler>
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200005e8 	.word	0x200005e8
 80018e0:	40004400 	.word	0x40004400

080018e4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f8:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a2c      	ldr	r2, [pc, #176]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 8001916:	f043 0320 	orr.w	r3, r3, #32
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b24      	ldr	r3, [pc, #144]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b21      	ldr	r3, [pc, #132]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a20      	ldr	r2, [pc, #128]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a1a      	ldr	r2, [pc, #104]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <MX_GPIO_Init+0xcc>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800195e:	4815      	ldr	r0, [pc, #84]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001960:	f001 f856 	bl	8002a10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	2120      	movs	r1, #32
 8001968:	4813      	ldr	r0, [pc, #76]	@ (80019b8 <MX_GPIO_Init+0xd4>)
 800196a:	f001 f851 	bl	8002a10 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800196e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2302      	movs	r3, #2
 800197e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	480b      	ldr	r0, [pc, #44]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001988:	f000 febe 	bl	8002708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;
 800198c:	2320      	movs	r3, #32
 800198e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2302      	movs	r3, #2
 800199a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	4619      	mov	r1, r3
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_GPIO_Init+0xd4>)
 80019a4:	f000 feb0 	bl	8002708 <HAL_GPIO_Init>
}
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40010800 	.word	0x40010800

080019bc <StartDefaultTask>:

/* Default task (unused) */
void StartDefaultTask(void const * argument)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  for(;;) { osDelay(1000); }
 80019c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019c8:	f003 fc29 	bl	800521e <osDelay>
 80019cc:	e7fa      	b.n	80019c4 <StartDefaultTask+0x8>
	...

080019d0 <SensorTask>:
}

/* ===================== App Tasks ===================== */
static void SensorTask(void const * argument)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  (void)argument;
  int16_t raw[3];
  uint32_t last = osKernelSysTick();
 80019d8:	f003 fbc5 	bl	8005166 <osKernelSysTick>
 80019dc:	61f8      	str	r0, [r7, #28]

  for(;;) {
    uint32_t now = osKernelSysTick();
 80019de:	f003 fbc2 	bl	8005166 <osKernelSysTick>
 80019e2:	61b8      	str	r0, [r7, #24]
    uint32_t elapsed = now - last;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
    if (elapsed < SENSOR_PERIOD_MS) {
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b31      	cmp	r3, #49	@ 0x31
 80019f0:	d805      	bhi.n	80019fe <SensorTask+0x2e>
      osDelay(SENSOR_PERIOD_MS - elapsed);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fc10 	bl	800521e <osDelay>
    }
    last = osKernelSysTick();
 80019fe:	f003 fbb2 	bl	8005166 <osKernelSysTick>
 8001a02:	61f8      	str	r0, [r7, #28]

    if (i2cMutexHandle) osMutexWait(i2cMutexHandle, 20);
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <SensorTask+0xa0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <SensorTask+0x48>
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <SensorTask+0xa0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2114      	movs	r1, #20
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fcbc 	bl	8005390 <osMutexWait>
    MPU6050_Read_Accel(&hi2c1, raw);
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4815      	ldr	r0, [pc, #84]	@ (8001a74 <SensorTask+0xa4>)
 8001a20:	f000 f9a5 	bl	8001d6e <MPU6050_Read_Accel>
    if (i2cMutexHandle) osMutexRelease(i2cMutexHandle);
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <SensorTask+0xa0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <SensorTask+0x66>
 8001a2c:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <SensorTask+0xa0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f003 fcfb 	bl	800542c <osMutexRelease>

    g_sample.ax = raw[0];
 8001a36:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <SensorTask+0xa8>)
 8001a3c:	801a      	strh	r2, [r3, #0]
    g_sample.ay = raw[1];
 8001a3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a42:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <SensorTask+0xa8>)
 8001a44:	805a      	strh	r2, [r3, #2]
    g_sample.az = raw[2];
 8001a46:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <SensorTask+0xa8>)
 8001a4c:	809a      	strh	r2, [r3, #4]
    g_sample.ts_ms = osKernelSysTick();
 8001a4e:	f003 fb8a 	bl	8005166 <osKernelSysTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a08      	ldr	r2, [pc, #32]	@ (8001a78 <SensorTask+0xa8>)
 8001a56:	6093      	str	r3, [r2, #8]

    if (detectTaskHandle) osSignalSet(detectTaskHandle, DETECT_SIGNAL_FLAG);
 8001a58:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <SensorTask+0xac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0be      	beq.n	80019de <SensorTask+0xe>
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <SensorTask+0xac>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fbee 	bl	8005248 <osSignalSet>
  for(;;) {
 8001a6c:	e7b7      	b.n	80019de <SensorTask+0xe>
 8001a6e:	bf00      	nop
 8001a70:	2000063c 	.word	0x2000063c
 8001a74:	200004f4 	.word	0x200004f4
 8001a78:	20000640 	.word	0x20000640
 8001a7c:	20000638 	.word	0x20000638

08001a80 <DetectTask>:
  }
}

static void DetectTask(void const * argument)
{
 8001a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a82:	b0bb      	sub	sp, #236	@ 0xec
 8001a84:	af08      	add	r7, sp, #32
 8001a86:	60f8      	str	r0, [r7, #12]
  (void)argument;
  for(;;) {
    osEvent ev = osSignalWait(DETECT_SIGNAL_FLAG, osWaitForever);
 8001a88:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fc18 	bl	80052c8 <osSignalWait>
    if (ev.status != osEventSignal) continue;
 8001a98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	f040 80fe 	bne.w	8001c9e <DetectTask+0x21e>

    float ax = (float)g_sample.ax;
 8001aa2:	4b83      	ldr	r3, [pc, #524]	@ (8001cb0 <DetectTask+0x230>)
 8001aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f8c7 	bl	8000c3c <__aeabi_i2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    float ay = (float)g_sample.ay;
 8001ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8001cb0 <DetectTask+0x230>)
 8001ab6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f8be 	bl	8000c3c <__aeabi_i2f>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    float az = (float)g_sample.az;
 8001ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb0 <DetectTask+0x230>)
 8001ac8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f8b5 	bl	8000c3c <__aeabi_i2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    float mag = sqrtf(ax*ax + ay*ay + az*az);
 8001ad8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8001adc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001ae0:	f7ff f900 	bl	8000ce4 <__aeabi_fmul>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461c      	mov	r4, r3
 8001ae8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8001aec:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001af0:	f7ff f8f8 	bl	8000ce4 <__aeabi_fmul>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4619      	mov	r1, r3
 8001af8:	4620      	mov	r0, r4
 8001afa:	f7fe ffeb 	bl	8000ad4 <__addsf3>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461c      	mov	r4, r3
 8001b02:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001b06:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001b0a:	f7ff f8eb 	bl	8000ce4 <__aeabi_fmul>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7fe ffde 	bl	8000ad4 <__addsf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00a fab8 	bl	800c090 <sqrtf>
 8001b20:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

    if (mag > COLLISION_THRESHOLD_RAW) {
 8001b24:	4963      	ldr	r1, [pc, #396]	@ (8001cb4 <DetectTask+0x234>)
 8001b26:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001b2a:	f7ff fa97 	bl	800105c <__aeabi_fcmpgt>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80ae 	beq.w	8001c92 <DetectTask+0x212>
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2120      	movs	r1, #32
 8001b3a:	485f      	ldr	r0, [pc, #380]	@ (8001cb8 <DetectTask+0x238>)
 8001b3c:	f000 ff68 	bl	8002a10 <HAL_GPIO_WritePin>

      GPSFix fix;
      if (GPS_GetLatestFix(&fix)) {
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fd03 	bl	8001550 <GPS_GetLatestFix>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8090 	beq.w	8001c72 <DetectTask+0x1f2>
        char out[96];
        // 정수 포맷(printf float 링크 안해도 됨)
        int32_t lat1e6 = (int32_t)(fix.latitude  * 1000000.0);
 8001b52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b56:	a354      	add	r3, pc, #336	@ (adr r3, 8001ca8 <DetectTask+0x228>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fcbc 	bl	80004d8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7fe ff66 	bl	8000a38 <__aeabi_d2iz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        int32_t lon1e6 = (int32_t)(fix.longitude * 1000000.0);
 8001b72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b76:	a34c      	add	r3, pc, #304	@ (adr r3, 8001ca8 <DetectTask+0x228>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fcac 	bl	80004d8 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7fe ff56 	bl	8000a38 <__aeabi_d2iz>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        int32_t lat_abs = (lat1e6 < 0) ? -lat1e6 : lat1e6;
 8001b92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bfb8      	it	lt
 8001b9a:	425b      	neglt	r3, r3
 8001b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        int32_t lon_abs = (lon1e6 < 0) ? -lon1e6 : lon1e6;
 8001ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bfb8      	it	lt
 8001ba8:	425b      	neglt	r3, r3
 8001baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        int n = snprintf(out, sizeof(out),
 8001bae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da02      	bge.n	8001bbc <DetectTask+0x13c>
 8001bb6:	f04f 0c2d 	mov.w	ip, #45	@ 0x2d
 8001bba:	e001      	b.n	8001bc0 <DetectTask+0x140>
 8001bbc:	f04f 0c2b 	mov.w	ip, #43	@ 0x2b
 8001bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bc4:	4a3d      	ldr	r2, [pc, #244]	@ (8001cbc <DetectTask+0x23c>)
 8001bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8001bca:	1492      	asrs	r2, r2, #18
 8001bcc:	17db      	asrs	r3, r3, #31
 8001bce:	1ad0      	subs	r0, r2, r3
 8001bd0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001bd4:	4b39      	ldr	r3, [pc, #228]	@ (8001cbc <DetectTask+0x23c>)
 8001bd6:	fb83 1302 	smull	r1, r3, r3, r2
 8001bda:	1499      	asrs	r1, r3, #18
 8001bdc:	17d3      	asrs	r3, r2, #31
 8001bde:	1acb      	subs	r3, r1, r3
 8001be0:	4937      	ldr	r1, [pc, #220]	@ (8001cc0 <DetectTask+0x240>)
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001bec:	2a00      	cmp	r2, #0
 8001bee:	da01      	bge.n	8001bf4 <DetectTask+0x174>
 8001bf0:	242d      	movs	r4, #45	@ 0x2d
 8001bf2:	e000      	b.n	8001bf6 <DetectTask+0x176>
 8001bf4:	242b      	movs	r4, #43	@ 0x2b
 8001bf6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001bfa:	4930      	ldr	r1, [pc, #192]	@ (8001cbc <DetectTask+0x23c>)
 8001bfc:	fb81 5102 	smull	r5, r1, r1, r2
 8001c00:	1489      	asrs	r1, r1, #18
 8001c02:	17d2      	asrs	r2, r2, #31
 8001c04:	1a8d      	subs	r5, r1, r2
 8001c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cbc <DetectTask+0x23c>)
 8001c0c:	fb82 6201 	smull	r6, r2, r2, r1
 8001c10:	1496      	asrs	r6, r2, #18
 8001c12:	17ca      	asrs	r2, r1, #31
 8001c14:	1ab2      	subs	r2, r6, r2
 8001c16:	4e2a      	ldr	r6, [pc, #168]	@ (8001cc0 <DetectTask+0x240>)
 8001c18:	fb06 f202 	mul.w	r2, r6, r2
 8001c1c:	1a8a      	subs	r2, r1, r2
                         "GPS: lat=%c%ld.%06ld lon=%c%ld.%06ld UTC=%02u:%02u:%02u\r\n",
                         (lat1e6<0)?'-':'+', (long)(lat_abs/1000000), (long)(lat_abs%1000000),
                         (lon1e6<0)?'-':'+', (long)(lon_abs/1000000), (long)(lon_abs%1000000),
                         fix.hh, fix.mm, fix.ss);
 8001c1e:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8001c22:	f897 6029 	ldrb.w	r6, [r7, #41]	@ 0x29
        int n = snprintf(out, sizeof(out),
 8001c26:	60be      	str	r6, [r7, #8]
                         fix.hh, fix.mm, fix.ss);
 8001c28:	f897 602a 	ldrb.w	r6, [r7, #42]	@ 0x2a
        int n = snprintf(out, sizeof(out),
 8001c2c:	607e      	str	r6, [r7, #4]
 8001c2e:	f107 0634 	add.w	r6, r7, #52	@ 0x34
 8001c32:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8001c36:	f8cd e01c 	str.w	lr, [sp, #28]
 8001c3a:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8001c3e:	f8cd e018 	str.w	lr, [sp, #24]
 8001c42:	9105      	str	r1, [sp, #20]
 8001c44:	9204      	str	r2, [sp, #16]
 8001c46:	9503      	str	r5, [sp, #12]
 8001c48:	9402      	str	r4, [sp, #8]
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	9000      	str	r0, [sp, #0]
 8001c4e:	4663      	mov	r3, ip
 8001c50:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc4 <DetectTask+0x244>)
 8001c52:	2160      	movs	r1, #96	@ 0x60
 8001c54:	4630      	mov	r0, r6
 8001c56:	f007 fc33 	bl	80094c0 <sniprintf>
 8001c5a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
        HAL_UART_Transmit(&huart2, (uint8_t*)out, n, 50);  // PC로 출력 (USART2)
 8001c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001c68:	2332      	movs	r3, #50	@ 0x32
 8001c6a:	4817      	ldr	r0, [pc, #92]	@ (8001cc8 <DetectTask+0x248>)
 8001c6c:	f002 fc32 	bl	80044d4 <HAL_UART_Transmit>
 8001c70:	e70a      	b.n	8001a88 <DetectTask+0x8>
      } else {
        const char *no = "GPS: no valid fix yet\r\n";
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <DetectTask+0x24c>)
 8001c74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        HAL_UART_Transmit(&huart2, (uint8_t*)no, strlen(no), 20); // PC로 출력
 8001c78:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001c7c:	f7fe fa68 	bl	8000150 <strlen>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	2314      	movs	r3, #20
 8001c86:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001c8a:	480f      	ldr	r0, [pc, #60]	@ (8001cc8 <DetectTask+0x248>)
 8001c8c:	f002 fc22 	bl	80044d4 <HAL_UART_Transmit>
 8001c90:	e6fa      	b.n	8001a88 <DetectTask+0x8>
      }
    } else {
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2120      	movs	r1, #32
 8001c96:	4808      	ldr	r0, [pc, #32]	@ (8001cb8 <DetectTask+0x238>)
 8001c98:	f000 feba 	bl	8002a10 <HAL_GPIO_WritePin>
 8001c9c:	e6f4      	b.n	8001a88 <DetectTask+0x8>
    if (ev.status != osEventSignal) continue;
 8001c9e:	bf00      	nop
  for(;;) {
 8001ca0:	e6f2      	b.n	8001a88 <DetectTask+0x8>
 8001ca2:	bf00      	nop
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	412e8480 	.word	0x412e8480
 8001cb0:	20000640 	.word	0x20000640
 8001cb4:	46ea6000 	.word	0x46ea6000
 8001cb8:	40010800 	.word	0x40010800
 8001cbc:	431bde83 	.word	0x431bde83
 8001cc0:	000f4240 	.word	0x000f4240
 8001cc4:	0800c240 	.word	0x0800c240
 8001cc8:	200005e8 	.word	0x200005e8
 8001ccc:	0800c27c 	.word	0x0800c27c

08001cd0 <Error_Handler>:
  }
}

/* Error Handler */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  __disable_irq();
  while (1) { }
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <Error_Handler+0x8>

08001cdc <MPU6050_Init>:
#include "mpu6050.h"

// MPU6050 초기화
void MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af04      	add	r7, sp, #16
 8001ce2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t data;

    // WHO_AM_I 레지스터 읽기 (통신 확인)
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001ce4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce8:	9302      	str	r3, [sp, #8]
 8001cea:	2301      	movs	r3, #1
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	f107 030f 	add.w	r3, r7, #15
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	2275      	movs	r2, #117	@ 0x75
 8001cf8:	21d0      	movs	r1, #208	@ 0xd0
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f001 f8de 	bl	8002ebc <HAL_I2C_Mem_Read>

    if (check == 0x68) { // MPU-6050의 WHO_AM_I 값
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	2b68      	cmp	r3, #104	@ 0x68
 8001d04:	d12f      	bne.n	8001d66 <MPU6050_Init+0x8a>
        // 전원 관리 레지스터 설정 (슬립 모드 해제)
        data = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8001d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	2301      	movs	r3, #1
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	f107 030e 	add.w	r3, r7, #14
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	226b      	movs	r2, #107	@ 0x6b
 8001d1e:	21d0      	movs	r1, #208	@ 0xd0
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 ffd1 	bl	8002cc8 <HAL_I2C_Mem_Write>

        // 샘플 레이트 분주기 설정 (1KHz)
        data = 0x07; // 1KHz / (7+1) = 125Hz
 8001d26:	2307      	movs	r3, #7
 8001d28:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2e:	9302      	str	r3, [sp, #8]
 8001d30:	2301      	movs	r3, #1
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	f107 030e 	add.w	r3, r7, #14
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	2219      	movs	r2, #25
 8001d3e:	21d0      	movs	r1, #208	@ 0xd0
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 ffc1 	bl	8002cc8 <HAL_I2C_Mem_Write>

        // 가속도 센서 설정 (+-2g)
        data = 0x00; // FS_SEL_0
 8001d46:	2300      	movs	r3, #0
 8001d48:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8001d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2301      	movs	r3, #1
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	f107 030e 	add.w	r3, r7, #14
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	221c      	movs	r2, #28
 8001d5e:	21d0      	movs	r1, #208	@ 0xd0
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 ffb1 	bl	8002cc8 <HAL_I2C_Mem_Write>
    }
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <MPU6050_Read_Accel>:

// 가속도 데이터 읽기
void MPU6050_Read_Accel(I2C_HandleTypeDef *hi2c, int16_t *accel_data) {
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b088      	sub	sp, #32
 8001d72:	af04      	add	r7, sp, #16
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
    uint8_t Rx_data[6];

    // X, Y, Z 축 가속도 데이터 읽기 (6바이트)
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rx_data, 6, 1000);
 8001d78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7c:	9302      	str	r3, [sp, #8]
 8001d7e:	2306      	movs	r3, #6
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	223b      	movs	r2, #59	@ 0x3b
 8001d8c:	21d0      	movs	r1, #208	@ 0xd0
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f001 f894 	bl	8002ebc <HAL_I2C_Mem_Read>

    // 16비트 값으로 결합
    accel_data[0] = (int16_t)(Rx_data[0] << 8 | Rx_data[1]);
 8001d94:	7a3b      	ldrb	r3, [r7, #8]
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	7a7b      	ldrb	r3, [r7, #9]
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	4313      	orrs	r3, r2
 8001da2:	b21a      	sxth	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	801a      	strh	r2, [r3, #0]
    accel_data[1] = (int16_t)(Rx_data[2] << 8 | Rx_data[3]);
 8001da8:	7abb      	ldrb	r3, [r7, #10]
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b219      	sxth	r1, r3
 8001db0:	7afb      	ldrb	r3, [r7, #11]
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	3302      	adds	r3, #2
 8001db8:	430a      	orrs	r2, r1
 8001dba:	b212      	sxth	r2, r2
 8001dbc:	801a      	strh	r2, [r3, #0]
    accel_data[2] = (int16_t)(Rx_data[4] << 8 | Rx_data[5]);
 8001dbe:	7b3b      	ldrb	r3, [r7, #12]
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	b219      	sxth	r1, r3
 8001dc6:	7b7b      	ldrb	r3, [r7, #13]
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	b212      	sxth	r2, r2
 8001dd2:	801a      	strh	r2, [r3, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_MspInit+0x68>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_MspInit+0x68>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6193      	str	r3, [r2, #24]
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_MspInit+0x68>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <HAL_MspInit+0x68>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a11      	ldr	r2, [pc, #68]	@ (8001e44 <HAL_MspInit+0x68>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <HAL_MspInit+0x68>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	210f      	movs	r1, #15
 8001e16:	f06f 0001 	mvn.w	r0, #1
 8001e1a:	f000 fb8c 	bl	8002536 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_MspInit+0x6c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <HAL_MspInit+0x6c>)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000

08001e4c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1d      	ldr	r2, [pc, #116]	@ (8001edc <HAL_I2C_MspInit+0x90>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d132      	bne.n	8001ed2 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <HAL_I2C_MspInit+0x94>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee0 <HAL_I2C_MspInit+0x94>)
 8001e72:	f043 0308 	orr.w	r3, r3, #8
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <HAL_I2C_MspInit+0x94>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8a:	2312      	movs	r3, #18
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <HAL_I2C_MspInit+0x98>)
 8001e9a:	f000 fc35 	bl	8002708 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_I2C_MspInit+0x9c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee8 <HAL_I2C_MspInit+0x9c>)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_I2C_MspInit+0x94>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <HAL_I2C_MspInit+0x94>)
 8001ec0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ec4:	61d3      	str	r3, [r2, #28]
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_I2C_MspInit+0x94>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	@ 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40005400 	.word	0x40005400
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010c00 	.word	0x40010c00
 8001ee8:	40010000 	.word	0x40010000

08001eec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1c      	ldr	r2, [pc, #112]	@ (8001f78 <HAL_SPI_MspInit+0x8c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d131      	bne.n	8001f70 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <HAL_SPI_MspInit+0x90>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	4a1a      	ldr	r2, [pc, #104]	@ (8001f7c <HAL_SPI_MspInit+0x90>)
 8001f12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f16:	61d3      	str	r3, [r2, #28]
 8001f18:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <HAL_SPI_MspInit+0x90>)
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f24:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_SPI_MspInit+0x90>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <HAL_SPI_MspInit+0x90>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_SPI_MspInit+0x90>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001f3c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001f40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480b      	ldr	r0, [pc, #44]	@ (8001f80 <HAL_SPI_MspInit+0x94>)
 8001f52:	f000 fbd9 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <HAL_SPI_MspInit+0x94>)
 8001f6c:	f000 fbcc 	bl	8002708 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40003800 	.word	0x40003800
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010c00 	.word	0x40010c00

08001f84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	@ 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0318 	add.w	r3, r7, #24
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a35      	ldr	r2, [pc, #212]	@ (8002074 <HAL_UART_MspInit+0xf0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d132      	bne.n	800200a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa4:	4b34      	ldr	r3, [pc, #208]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a33      	ldr	r2, [pc, #204]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 8001faa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b31      	ldr	r3, [pc, #196]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0318 	add.w	r3, r7, #24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4824      	ldr	r0, [pc, #144]	@ (800207c <HAL_UART_MspInit+0xf8>)
 8001fea:	f000 fb8d 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	4619      	mov	r1, r3
 8002002:	481e      	ldr	r0, [pc, #120]	@ (800207c <HAL_UART_MspInit+0xf8>)
 8002004:	f000 fb80 	bl	8002708 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002008:	e030      	b.n	800206c <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <HAL_UART_MspInit+0xfc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d12b      	bne.n	800206c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 800201a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201e:	61d3      	str	r3, [r2, #28]
 8002020:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a11      	ldr	r2, [pc, #68]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <HAL_UART_MspInit+0xf4>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002044:	230c      	movs	r3, #12
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2302      	movs	r3, #2
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 0318 	add.w	r3, r7, #24
 8002054:	4619      	mov	r1, r3
 8002056:	4809      	ldr	r0, [pc, #36]	@ (800207c <HAL_UART_MspInit+0xf8>)
 8002058:	f000 fb56 	bl	8002708 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2105      	movs	r1, #5
 8002060:	2026      	movs	r0, #38	@ 0x26
 8002062:	f000 fa68 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002066:	2026      	movs	r0, #38	@ 0x26
 8002068:	f000 fa81 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	@ 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40013800 	.word	0x40013800
 8002078:	40021000 	.word	0x40021000
 800207c:	40010800 	.word	0x40010800
 8002080:	40004400 	.word	0x40004400

08002084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <NMI_Handler+0x4>

0800208c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <HardFault_Handler+0x4>

08002094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <MemManage_Handler+0x4>

0800209c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <BusFault_Handler+0x4>

080020a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <UsageFault_Handler+0x4>

080020ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020bc:	f000 f948 	bl	8002350 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020c0:	f004 fe6a 	bl	8006d98 <xTaskGetSchedulerState>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d001      	beq.n	80020ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020ca:	f005 fbed 	bl	80078a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <USART2_IRQHandler+0x10>)
 80020da:	f002 faab 	bl	8004634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200005e8 	.word	0x200005e8

080020e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return 1;
 80020ec:	2301      	movs	r3, #1
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <_kill>:

int _kill(int pid, int sig)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002100:	f007 fade 	bl	80096c0 <__errno>
 8002104:	4603      	mov	r3, r0
 8002106:	2216      	movs	r2, #22
 8002108:	601a      	str	r2, [r3, #0]
  return -1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_exit>:

void _exit (int status)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800211e:	f04f 31ff 	mov.w	r1, #4294967295
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffe7 	bl	80020f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <_exit+0x12>

0800212c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e00a      	b.n	8002154 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800213e:	f3af 8000 	nop.w
 8002142:	4601      	mov	r1, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	60ba      	str	r2, [r7, #8]
 800214a:	b2ca      	uxtb	r2, r1
 800214c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf0      	blt.n	800213e <_read+0x12>
  }

  return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e009      	b.n	800218c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60ba      	str	r2, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	dbf1      	blt.n	8002178 <_write+0x12>
  }
  return len;
 8002194:	687b      	ldr	r3, [r7, #4]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_close>:

int _close(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021c4:	605a      	str	r2, [r3, #4]
  return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <_isatty>:

int _isatty(int file)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
	...

08002200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002208:	4a14      	ldr	r2, [pc, #80]	@ (800225c <_sbrk+0x5c>)
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <_sbrk+0x60>)
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002214:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <_sbrk+0x64>)
 800221e:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <_sbrk+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d207      	bcs.n	8002240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002230:	f007 fa46 	bl	80096c0 <__errno>
 8002234:	4603      	mov	r3, r0
 8002236:	220c      	movs	r2, #12
 8002238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	e009      	b.n	8002254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002240:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002246:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <_sbrk+0x64>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <_sbrk+0x64>)
 8002250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20005000 	.word	0x20005000
 8002260:	00000400 	.word	0x00000400
 8002264:	20000650 	.word	0x20000650
 8002268:	200014f8 	.word	0x200014f8

0800226c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002278:	f7ff fff8 	bl	800226c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800227c:	480b      	ldr	r0, [pc, #44]	@ (80022ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800227e:	490c      	ldr	r1, [pc, #48]	@ (80022b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002280:	4a0c      	ldr	r2, [pc, #48]	@ (80022b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002294:	4c09      	ldr	r4, [pc, #36]	@ (80022bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a2:	f007 fa13 	bl	80096cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022a6:	f7ff f999 	bl	80015dc <main>
  bx lr
 80022aa:	4770      	bx	lr
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80022b4:	0800c700 	.word	0x0800c700
  ldr r2, =_sbss
 80022b8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022bc:	200014f8 	.word	0x200014f8

080022c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC1_2_IRQHandler>
	...

080022c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c8:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <HAL_Init+0x28>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a07      	ldr	r2, [pc, #28]	@ (80022ec <HAL_Init+0x28>)
 80022ce:	f043 0310 	orr.w	r3, r3, #16
 80022d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d4:	2003      	movs	r0, #3
 80022d6:	f000 f923 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022da:	200f      	movs	r0, #15
 80022dc:	f000 f808 	bl	80022f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e0:	f7ff fd7c 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40022000 	.word	0x40022000

080022f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f8:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <HAL_InitTick+0x54>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_InitTick+0x58>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002306:	fbb3 f3f1 	udiv	r3, r3, r1
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f93b 	bl	800258a <HAL_SYSTICK_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e00e      	b.n	800233c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b0f      	cmp	r3, #15
 8002322:	d80a      	bhi.n	800233a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002324:	2200      	movs	r2, #0
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f000 f903 	bl	8002536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002330:	4a06      	ldr	r2, [pc, #24]	@ (800234c <HAL_InitTick+0x5c>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000000 	.word	0x20000000
 8002348:	20000008 	.word	0x20000008
 800234c:	20000004 	.word	0x20000004

08002350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <HAL_IncTick+0x1c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_IncTick+0x20>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a03      	ldr	r2, [pc, #12]	@ (8002370 <HAL_IncTick+0x20>)
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	20000008 	.word	0x20000008
 8002370:	20000654 	.word	0x20000654

08002374 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return uwTick;
 8002378:	4b02      	ldr	r3, [pc, #8]	@ (8002384 <HAL_GetTick+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000654 	.word	0x20000654

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4906      	ldr	r1, [pc, #24]	@ (8002420 <__NVIC_EnableIRQ+0x34>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	@ (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	@ 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f7ff ff90 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	@ (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff2d 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff42 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff90 	bl	8002478 <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5f 	bl	8002424 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff35 	bl	80023ec <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffa2 	bl	80024dc <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d008      	beq.n	80025cc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2204      	movs	r2, #4
 80025be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e020      	b.n	800260e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 020e 	bic.w	r2, r2, #14
 80025da:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d005      	beq.n	800263c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2204      	movs	r2, #4
 8002634:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e051      	b.n	80026e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 020e 	bic.w	r2, r2, #14
 800264a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a22      	ldr	r2, [pc, #136]	@ (80026ec <HAL_DMA_Abort_IT+0xd4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d029      	beq.n	80026ba <HAL_DMA_Abort_IT+0xa2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a21      	ldr	r2, [pc, #132]	@ (80026f0 <HAL_DMA_Abort_IT+0xd8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d022      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x9e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1f      	ldr	r2, [pc, #124]	@ (80026f4 <HAL_DMA_Abort_IT+0xdc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01a      	beq.n	80026b0 <HAL_DMA_Abort_IT+0x98>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1e      	ldr	r2, [pc, #120]	@ (80026f8 <HAL_DMA_Abort_IT+0xe0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d012      	beq.n	80026aa <HAL_DMA_Abort_IT+0x92>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1c      	ldr	r2, [pc, #112]	@ (80026fc <HAL_DMA_Abort_IT+0xe4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00a      	beq.n	80026a4 <HAL_DMA_Abort_IT+0x8c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1b      	ldr	r2, [pc, #108]	@ (8002700 <HAL_DMA_Abort_IT+0xe8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d102      	bne.n	800269e <HAL_DMA_Abort_IT+0x86>
 8002698:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800269c:	e00e      	b.n	80026bc <HAL_DMA_Abort_IT+0xa4>
 800269e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026a2:	e00b      	b.n	80026bc <HAL_DMA_Abort_IT+0xa4>
 80026a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026a8:	e008      	b.n	80026bc <HAL_DMA_Abort_IT+0xa4>
 80026aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ae:	e005      	b.n	80026bc <HAL_DMA_Abort_IT+0xa4>
 80026b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026b4:	e002      	b.n	80026bc <HAL_DMA_Abort_IT+0xa4>
 80026b6:	2310      	movs	r3, #16
 80026b8:	e000      	b.n	80026bc <HAL_DMA_Abort_IT+0xa4>
 80026ba:	2301      	movs	r3, #1
 80026bc:	4a11      	ldr	r2, [pc, #68]	@ (8002704 <HAL_DMA_Abort_IT+0xec>)
 80026be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
    } 
  }
  return status;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40020008 	.word	0x40020008
 80026f0:	4002001c 	.word	0x4002001c
 80026f4:	40020030 	.word	0x40020030
 80026f8:	40020044 	.word	0x40020044
 80026fc:	40020058 	.word	0x40020058
 8002700:	4002006c 	.word	0x4002006c
 8002704:	40020000 	.word	0x40020000

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b08b      	sub	sp, #44	@ 0x2c
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271a:	e169      	b.n	80029f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800271c:	2201      	movs	r2, #1
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	429a      	cmp	r2, r3
 8002736:	f040 8158 	bne.w	80029ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a9a      	ldr	r2, [pc, #616]	@ (80029a8 <HAL_GPIO_Init+0x2a0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d05e      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
 8002744:	4a98      	ldr	r2, [pc, #608]	@ (80029a8 <HAL_GPIO_Init+0x2a0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d875      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 800274a:	4a98      	ldr	r2, [pc, #608]	@ (80029ac <HAL_GPIO_Init+0x2a4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d058      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
 8002750:	4a96      	ldr	r2, [pc, #600]	@ (80029ac <HAL_GPIO_Init+0x2a4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d86f      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 8002756:	4a96      	ldr	r2, [pc, #600]	@ (80029b0 <HAL_GPIO_Init+0x2a8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d052      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
 800275c:	4a94      	ldr	r2, [pc, #592]	@ (80029b0 <HAL_GPIO_Init+0x2a8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d869      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 8002762:	4a94      	ldr	r2, [pc, #592]	@ (80029b4 <HAL_GPIO_Init+0x2ac>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d04c      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
 8002768:	4a92      	ldr	r2, [pc, #584]	@ (80029b4 <HAL_GPIO_Init+0x2ac>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d863      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 800276e:	4a92      	ldr	r2, [pc, #584]	@ (80029b8 <HAL_GPIO_Init+0x2b0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d046      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
 8002774:	4a90      	ldr	r2, [pc, #576]	@ (80029b8 <HAL_GPIO_Init+0x2b0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d85d      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 800277a:	2b12      	cmp	r3, #18
 800277c:	d82a      	bhi.n	80027d4 <HAL_GPIO_Init+0xcc>
 800277e:	2b12      	cmp	r3, #18
 8002780:	d859      	bhi.n	8002836 <HAL_GPIO_Init+0x12e>
 8002782:	a201      	add	r2, pc, #4	@ (adr r2, 8002788 <HAL_GPIO_Init+0x80>)
 8002784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002788:	08002803 	.word	0x08002803
 800278c:	080027dd 	.word	0x080027dd
 8002790:	080027ef 	.word	0x080027ef
 8002794:	08002831 	.word	0x08002831
 8002798:	08002837 	.word	0x08002837
 800279c:	08002837 	.word	0x08002837
 80027a0:	08002837 	.word	0x08002837
 80027a4:	08002837 	.word	0x08002837
 80027a8:	08002837 	.word	0x08002837
 80027ac:	08002837 	.word	0x08002837
 80027b0:	08002837 	.word	0x08002837
 80027b4:	08002837 	.word	0x08002837
 80027b8:	08002837 	.word	0x08002837
 80027bc:	08002837 	.word	0x08002837
 80027c0:	08002837 	.word	0x08002837
 80027c4:	08002837 	.word	0x08002837
 80027c8:	08002837 	.word	0x08002837
 80027cc:	080027e5 	.word	0x080027e5
 80027d0:	080027f9 	.word	0x080027f9
 80027d4:	4a79      	ldr	r2, [pc, #484]	@ (80029bc <HAL_GPIO_Init+0x2b4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027da:	e02c      	b.n	8002836 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	623b      	str	r3, [r7, #32]
          break;
 80027e2:	e029      	b.n	8002838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	3304      	adds	r3, #4
 80027ea:	623b      	str	r3, [r7, #32]
          break;
 80027ec:	e024      	b.n	8002838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	3308      	adds	r3, #8
 80027f4:	623b      	str	r3, [r7, #32]
          break;
 80027f6:	e01f      	b.n	8002838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	330c      	adds	r3, #12
 80027fe:	623b      	str	r3, [r7, #32]
          break;
 8002800:	e01a      	b.n	8002838 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800280a:	2304      	movs	r3, #4
 800280c:	623b      	str	r3, [r7, #32]
          break;
 800280e:	e013      	b.n	8002838 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d105      	bne.n	8002824 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002818:	2308      	movs	r3, #8
 800281a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	611a      	str	r2, [r3, #16]
          break;
 8002822:	e009      	b.n	8002838 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002824:	2308      	movs	r3, #8
 8002826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	615a      	str	r2, [r3, #20]
          break;
 800282e:	e003      	b.n	8002838 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
          break;
 8002834:	e000      	b.n	8002838 <HAL_GPIO_Init+0x130>
          break;
 8002836:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2bff      	cmp	r3, #255	@ 0xff
 800283c:	d801      	bhi.n	8002842 <HAL_GPIO_Init+0x13a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	e001      	b.n	8002846 <HAL_GPIO_Init+0x13e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2bff      	cmp	r3, #255	@ 0xff
 800284c:	d802      	bhi.n	8002854 <HAL_GPIO_Init+0x14c>
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	e002      	b.n	800285a <HAL_GPIO_Init+0x152>
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	3b08      	subs	r3, #8
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	210f      	movs	r1, #15
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	401a      	ands	r2, r3
 800286c:	6a39      	ldr	r1, [r7, #32]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	431a      	orrs	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80b1 	beq.w	80029ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002888:	4b4d      	ldr	r3, [pc, #308]	@ (80029c0 <HAL_GPIO_Init+0x2b8>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	4a4c      	ldr	r2, [pc, #304]	@ (80029c0 <HAL_GPIO_Init+0x2b8>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6193      	str	r3, [r2, #24]
 8002894:	4b4a      	ldr	r3, [pc, #296]	@ (80029c0 <HAL_GPIO_Init+0x2b8>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028a0:	4a48      	ldr	r2, [pc, #288]	@ (80029c4 <HAL_GPIO_Init+0x2bc>)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a40      	ldr	r2, [pc, #256]	@ (80029c8 <HAL_GPIO_Init+0x2c0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d013      	beq.n	80028f4 <HAL_GPIO_Init+0x1ec>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3f      	ldr	r2, [pc, #252]	@ (80029cc <HAL_GPIO_Init+0x2c4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00d      	beq.n	80028f0 <HAL_GPIO_Init+0x1e8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3e      	ldr	r2, [pc, #248]	@ (80029d0 <HAL_GPIO_Init+0x2c8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <HAL_GPIO_Init+0x1e4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3d      	ldr	r2, [pc, #244]	@ (80029d4 <HAL_GPIO_Init+0x2cc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_GPIO_Init+0x1e0>
 80028e4:	2303      	movs	r3, #3
 80028e6:	e006      	b.n	80028f6 <HAL_GPIO_Init+0x1ee>
 80028e8:	2304      	movs	r3, #4
 80028ea:	e004      	b.n	80028f6 <HAL_GPIO_Init+0x1ee>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e002      	b.n	80028f6 <HAL_GPIO_Init+0x1ee>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_GPIO_Init+0x1ee>
 80028f4:	2300      	movs	r3, #0
 80028f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f8:	f002 0203 	and.w	r2, r2, #3
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	4093      	lsls	r3, r2
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002906:	492f      	ldr	r1, [pc, #188]	@ (80029c4 <HAL_GPIO_Init+0x2bc>)
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002920:	4b2d      	ldr	r3, [pc, #180]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	492c      	ldr	r1, [pc, #176]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800292e:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	43db      	mvns	r3, r3
 8002936:	4928      	ldr	r1, [pc, #160]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002938:	4013      	ands	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002948:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	4922      	ldr	r1, [pc, #136]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	60cb      	str	r3, [r1, #12]
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	43db      	mvns	r3, r3
 800295e:	491e      	ldr	r1, [pc, #120]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002960:	4013      	ands	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d006      	beq.n	800297e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002970:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	4918      	ldr	r1, [pc, #96]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
 800297c:	e006      	b.n	800298c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800297e:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	43db      	mvns	r3, r3
 8002986:	4914      	ldr	r1, [pc, #80]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 8002988:	4013      	ands	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d021      	beq.n	80029dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002998:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	490e      	ldr	r1, [pc, #56]	@ (80029d8 <HAL_GPIO_Init+0x2d0>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
 80029a4:	e021      	b.n	80029ea <HAL_GPIO_Init+0x2e2>
 80029a6:	bf00      	nop
 80029a8:	10320000 	.word	0x10320000
 80029ac:	10310000 	.word	0x10310000
 80029b0:	10220000 	.word	0x10220000
 80029b4:	10210000 	.word	0x10210000
 80029b8:	10120000 	.word	0x10120000
 80029bc:	10110000 	.word	0x10110000
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40010800 	.word	0x40010800
 80029cc:	40010c00 	.word	0x40010c00
 80029d0:	40011000 	.word	0x40011000
 80029d4:	40011400 	.word	0x40011400
 80029d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <HAL_GPIO_Init+0x304>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	4909      	ldr	r1, [pc, #36]	@ (8002a0c <HAL_GPIO_Init+0x304>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	3301      	adds	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	fa22 f303 	lsr.w	r3, r2, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f47f ae8e 	bne.w	800271c <HAL_GPIO_Init+0x14>
  }
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	372c      	adds	r7, #44	@ 0x2c
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40010400 	.word	0x40010400

08002a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a20:	787b      	ldrb	r3, [r7, #1]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a2c:	e003      	b.n	8002a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a2e:	887b      	ldrh	r3, [r7, #2]
 8002a30:	041a      	lsls	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	611a      	str	r2, [r3, #16]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e12b      	b.n	8002caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff f9f0 	bl	8001e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2224      	movs	r2, #36	@ 0x24
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002aa4:	f001 fbfc 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 8002aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4a81      	ldr	r2, [pc, #516]	@ (8002cb4 <HAL_I2C_Init+0x274>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d807      	bhi.n	8002ac4 <HAL_I2C_Init+0x84>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a80      	ldr	r2, [pc, #512]	@ (8002cb8 <HAL_I2C_Init+0x278>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	bf94      	ite	ls
 8002abc:	2301      	movls	r3, #1
 8002abe:	2300      	movhi	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e006      	b.n	8002ad2 <HAL_I2C_Init+0x92>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a7d      	ldr	r2, [pc, #500]	@ (8002cbc <HAL_I2C_Init+0x27c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	bf94      	ite	ls
 8002acc:	2301      	movls	r3, #1
 8002ace:	2300      	movhi	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0e7      	b.n	8002caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a78      	ldr	r2, [pc, #480]	@ (8002cc0 <HAL_I2C_Init+0x280>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0c9b      	lsrs	r3, r3, #18
 8002ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a6a      	ldr	r2, [pc, #424]	@ (8002cb4 <HAL_I2C_Init+0x274>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d802      	bhi.n	8002b14 <HAL_I2C_Init+0xd4>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	3301      	adds	r3, #1
 8002b12:	e009      	b.n	8002b28 <HAL_I2C_Init+0xe8>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	4a69      	ldr	r2, [pc, #420]	@ (8002cc4 <HAL_I2C_Init+0x284>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	3301      	adds	r3, #1
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	495c      	ldr	r1, [pc, #368]	@ (8002cb4 <HAL_I2C_Init+0x274>)
 8002b44:	428b      	cmp	r3, r1
 8002b46:	d819      	bhi.n	8002b7c <HAL_I2C_Init+0x13c>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e59      	subs	r1, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_I2C_Init+0x138>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1e59      	subs	r1, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b70:	3301      	adds	r3, #1
 8002b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b76:	e051      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	e04f      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d111      	bne.n	8002ba8 <HAL_I2C_Init+0x168>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1e58      	subs	r0, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e012      	b.n	8002bce <HAL_I2C_Init+0x18e>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1e58      	subs	r0, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	0099      	lsls	r1, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Init+0x196>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e022      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10e      	bne.n	8002bfc <HAL_I2C_Init+0x1bc>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e58      	subs	r0, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	440b      	add	r3, r1
 8002bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bfa:	e00f      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1e58      	subs	r0, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	0099      	lsls	r1, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	6809      	ldr	r1, [r1, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6911      	ldr	r1, [r2, #16]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	000186a0 	.word	0x000186a0
 8002cb8:	001e847f 	.word	0x001e847f
 8002cbc:	003d08ff 	.word	0x003d08ff
 8002cc0:	431bde83 	.word	0x431bde83
 8002cc4:	10624dd3 	.word	0x10624dd3

08002cc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	817b      	strh	r3, [r7, #10]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	813b      	strh	r3, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ce2:	f7ff fb47 	bl	8002374 <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	f040 80d9 	bne.w	8002ea8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2319      	movs	r3, #25
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	496d      	ldr	r1, [pc, #436]	@ (8002eb4 <HAL_I2C_Mem_Write+0x1ec>)
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fccd 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e0cc      	b.n	8002eaa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_I2C_Mem_Write+0x56>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e0c5      	b.n	8002eaa <HAL_I2C_Mem_Write+0x1e2>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d007      	beq.n	8002d44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2221      	movs	r2, #33	@ 0x21
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2240      	movs	r2, #64	@ 0x40
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a3a      	ldr	r2, [r7, #32]
 8002d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb8 <HAL_I2C_Mem_Write+0x1f0>)
 8002d84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d86:	88f8      	ldrh	r0, [r7, #6]
 8002d88:	893a      	ldrh	r2, [r7, #8]
 8002d8a:	8979      	ldrh	r1, [r7, #10]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	4603      	mov	r3, r0
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fb04 	bl	80033a4 <I2C_RequestMemoryWrite>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d052      	beq.n	8002e48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e081      	b.n	8002eaa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fd92 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d107      	bne.n	8002dce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06b      	b.n	8002eaa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	781a      	ldrb	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d11b      	bne.n	8002e48 <HAL_I2C_Mem_Write+0x180>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d017      	beq.n	8002e48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1aa      	bne.n	8002da6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fd85 	bl	8003964 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d107      	bne.n	8002e78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e016      	b.n	8002eaa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e000      	b.n	8002eaa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
  }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	00100002 	.word	0x00100002
 8002eb8:	ffff0000 	.word	0xffff0000

08002ebc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08c      	sub	sp, #48	@ 0x30
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	817b      	strh	r3, [r7, #10]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	813b      	strh	r3, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eda:	f7ff fa4b 	bl	8002374 <HAL_GetTick>
 8002ede:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	f040 8250 	bne.w	800338e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	2319      	movs	r3, #25
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4982      	ldr	r1, [pc, #520]	@ (8003100 <HAL_I2C_Mem_Read+0x244>)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fbd1 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	e243      	b.n	8003390 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x5a>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e23c      	b.n	8003390 <HAL_I2C_Mem_Read+0x4d4>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d007      	beq.n	8002f3c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2222      	movs	r2, #34	@ 0x22
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2240      	movs	r2, #64	@ 0x40
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a62      	ldr	r2, [pc, #392]	@ (8003104 <HAL_I2C_Mem_Read+0x248>)
 8002f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f7e:	88f8      	ldrh	r0, [r7, #6]
 8002f80:	893a      	ldrh	r2, [r7, #8]
 8002f82:	8979      	ldrh	r1, [r7, #10]
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa9e 	bl	80034d0 <I2C_RequestMemoryRead>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1f8      	b.n	8003390 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d113      	bne.n	8002fce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e1cc      	b.n	8003368 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d11e      	bne.n	8003014 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe6:	b672      	cpsid	i
}
 8002fe8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003010:	b662      	cpsie	i
}
 8003012:	e035      	b.n	8003080 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003018:	2b02      	cmp	r3, #2
 800301a:	d11e      	bne.n	800305a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800302a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800302c:	b672      	cpsid	i
}
 800302e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003054:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003056:	b662      	cpsie	i
}
 8003058:	e012      	b.n	8003080 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003068:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003080:	e172      	b.n	8003368 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003086:	2b03      	cmp	r3, #3
 8003088:	f200 811f 	bhi.w	80032ca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003090:	2b01      	cmp	r3, #1
 8003092:	d123      	bne.n	80030dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003096:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fcab 	bl	80039f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e173      	b.n	8003390 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030da:	e145      	b.n	8003368 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d152      	bne.n	800318a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ea:	2200      	movs	r2, #0
 80030ec:	4906      	ldr	r1, [pc, #24]	@ (8003108 <HAL_I2C_Mem_Read+0x24c>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fad6 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e148      	b.n	8003390 <HAL_I2C_Mem_Read+0x4d4>
 80030fe:	bf00      	nop
 8003100:	00100002 	.word	0x00100002
 8003104:	ffff0000 	.word	0xffff0000
 8003108:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800310c:	b672      	cpsid	i
}
 800310e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800311e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003152:	b662      	cpsie	i
}
 8003154:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003188:	e0ee      	b.n	8003368 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003190:	2200      	movs	r2, #0
 8003192:	4981      	ldr	r1, [pc, #516]	@ (8003398 <HAL_I2C_Mem_Read+0x4dc>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fa83 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0f5      	b.n	8003390 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031b4:	b672      	cpsid	i
}
 80031b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031ea:	4b6c      	ldr	r3, [pc, #432]	@ (800339c <HAL_I2C_Mem_Read+0x4e0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	08db      	lsrs	r3, r3, #3
 80031f0:	4a6b      	ldr	r2, [pc, #428]	@ (80033a0 <HAL_I2C_Mem_Read+0x4e4>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0a1a      	lsrs	r2, r3, #8
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	00da      	lsls	r2, r3, #3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	3b01      	subs	r3, #1
 8003208:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d118      	bne.n	8003242 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	f043 0220 	orr.w	r2, r3, #32
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003232:	b662      	cpsie	i
}
 8003234:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0a6      	b.n	8003390 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b04      	cmp	r3, #4
 800324e:	d1d9      	bne.n	8003204 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003292:	b662      	cpsie	i
}
 8003294:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032c8:	e04e      	b.n	8003368 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fb90 	bl	80039f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e058      	b.n	8003390 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b04      	cmp	r3, #4
 800331c:	d124      	bne.n	8003368 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003322:	2b03      	cmp	r3, #3
 8003324:	d107      	bne.n	8003336 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003334:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	f47f ae88 	bne.w	8003082 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3728      	adds	r7, #40	@ 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	00010004 	.word	0x00010004
 800339c:	20000000 	.word	0x20000000
 80033a0:	14f8b589 	.word	0x14f8b589

080033a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	4608      	mov	r0, r1
 80033ae:	4611      	mov	r1, r2
 80033b0:	461a      	mov	r2, r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	817b      	strh	r3, [r7, #10]
 80033b6:	460b      	mov	r3, r1
 80033b8:	813b      	strh	r3, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f960 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033f4:	d103      	bne.n	80033fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e05f      	b.n	80034c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003402:	897b      	ldrh	r3, [r7, #10]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003410:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	492d      	ldr	r1, [pc, #180]	@ (80034cc <I2C_RequestMemoryWrite+0x128>)
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f9bb 	bl	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e04c      	b.n	80034c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003440:	6a39      	ldr	r1, [r7, #32]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fa46 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	2b04      	cmp	r3, #4
 8003454:	d107      	bne.n	8003466 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003464:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e02b      	b.n	80034c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d105      	bne.n	800347c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003470:	893b      	ldrh	r3, [r7, #8]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	611a      	str	r2, [r3, #16]
 800347a:	e021      	b.n	80034c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800347c:	893b      	ldrh	r3, [r7, #8]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	b29b      	uxth	r3, r3
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800348a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348c:	6a39      	ldr	r1, [r7, #32]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fa20 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d107      	bne.n	80034b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e005      	b.n	80034c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b6:	893b      	ldrh	r3, [r7, #8]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	00010002 	.word	0x00010002

080034d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	4608      	mov	r0, r1
 80034da:	4611      	mov	r1, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	4603      	mov	r3, r0
 80034e0:	817b      	strh	r3, [r7, #10]
 80034e2:	460b      	mov	r3, r1
 80034e4:	813b      	strh	r3, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003508:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	2200      	movs	r2, #0
 8003512:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f8c2 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003530:	d103      	bne.n	800353a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003538:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0aa      	b.n	8003694 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800353e:	897b      	ldrh	r3, [r7, #10]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800354c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	4952      	ldr	r1, [pc, #328]	@ (800369c <I2C_RequestMemoryRead+0x1cc>)
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f91d 	bl	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e097      	b.n	8003694 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357c:	6a39      	ldr	r1, [r7, #32]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f9a8 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	2b04      	cmp	r3, #4
 8003590:	d107      	bne.n	80035a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e076      	b.n	8003694 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d105      	bne.n	80035b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ac:	893b      	ldrh	r3, [r7, #8]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	611a      	str	r2, [r3, #16]
 80035b6:	e021      	b.n	80035fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035b8:	893b      	ldrh	r3, [r7, #8]
 80035ba:	0a1b      	lsrs	r3, r3, #8
 80035bc:	b29b      	uxth	r3, r3
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c8:	6a39      	ldr	r1, [r7, #32]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f982 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d107      	bne.n	80035ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e050      	b.n	8003694 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035f2:	893b      	ldrh	r3, [r7, #8]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035fe:	6a39      	ldr	r1, [r7, #32]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f967 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00d      	beq.n	8003628 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	2b04      	cmp	r3, #4
 8003612:	d107      	bne.n	8003624 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003622:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e035      	b.n	8003694 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003636:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	2200      	movs	r2, #0
 8003640:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f82b 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800365e:	d103      	bne.n	8003668 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003666:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e013      	b.n	8003694 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800366c:	897b      	ldrh	r3, [r7, #10]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	4906      	ldr	r1, [pc, #24]	@ (800369c <I2C_RequestMemoryRead+0x1cc>)
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f886 	bl	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	00010002 	.word	0x00010002

080036a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b0:	e048      	b.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d044      	beq.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fe fe5b 	bl	8002374 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d139      	bne.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	0c1b      	lsrs	r3, r3, #16
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10d      	bne.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	e00c      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	43da      	mvns	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	429a      	cmp	r2, r3
 8003714:	d116      	bne.n	8003744 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e023      	b.n	800378c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d10d      	bne.n	800376a <I2C_WaitOnFlagUntilTimeout+0xca>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	43da      	mvns	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	e00c      	b.n	8003784 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	429a      	cmp	r2, r3
 8003788:	d093      	beq.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a2:	e071      	b.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b2:	d123      	bne.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e067      	b.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d041      	beq.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003804:	f7fe fdb6 	bl	8002374 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d136      	bne.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10c      	bne.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4013      	ands	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e00b      	b.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	43da      	mvns	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4013      	ands	r3, r2
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e021      	b.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	0c1b      	lsrs	r3, r3, #16
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d10c      	bne.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	43da      	mvns	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e00b      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4013      	ands	r3, r2
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bf14      	ite	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	2300      	moveq	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f af6d 	bne.w	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e0:	e034      	b.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f8e3 	bl	8003aae <I2C_IsAcknowledgeFailed>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e034      	b.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d028      	beq.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fd3b 	bl	8002374 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11d      	bne.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391a:	2b80      	cmp	r3, #128	@ 0x80
 800391c:	d016      	beq.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e007      	b.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b80      	cmp	r3, #128	@ 0x80
 8003958:	d1c3      	bne.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003970:	e034      	b.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f89b 	bl	8003aae <I2C_IsAcknowledgeFailed>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e034      	b.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d028      	beq.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7fe fcf3 	bl	8002374 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d11d      	bne.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d016      	beq.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e007      	b.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d1c3      	bne.n	8003972 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a00:	e049      	b.n	8003a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d119      	bne.n	8003a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0210 	mvn.w	r2, #16
 8003a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e030      	b.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7fe fc96 	bl	8002374 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d11d      	bne.n	8003a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a64:	2b40      	cmp	r3, #64	@ 0x40
 8003a66:	d016      	beq.n	8003a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e007      	b.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa0:	2b40      	cmp	r3, #64	@ 0x40
 8003aa2:	d1ae      	bne.n	8003a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac4:	d11b      	bne.n	8003afe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ace:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	f043 0204 	orr.w	r2, r3, #4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e272      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8087 	beq.w	8003c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b2c:	4b92      	ldr	r3, [pc, #584]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d00c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b38:	4b8f      	ldr	r3, [pc, #572]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d112      	bne.n	8003b6a <HAL_RCC_OscConfig+0x5e>
 8003b44:	4b8c      	ldr	r3, [pc, #560]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b50:	d10b      	bne.n	8003b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b52:	4b89      	ldr	r3, [pc, #548]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d06c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x12c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d168      	bne.n	8003c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e24c      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x76>
 8003b74:	4b80      	ldr	r3, [pc, #512]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a7f      	ldr	r2, [pc, #508]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e02e      	b.n	8003be0 <HAL_RCC_OscConfig+0xd4>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x98>
 8003b8a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7a      	ldr	r2, [pc, #488]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b78      	ldr	r3, [pc, #480]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a77      	ldr	r2, [pc, #476]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0xd4>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xbc>
 8003bae:	4b72      	ldr	r3, [pc, #456]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a71      	ldr	r2, [pc, #452]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b6f      	ldr	r3, [pc, #444]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6e      	ldr	r2, [pc, #440]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xd4>
 8003bc8:	4b6b      	ldr	r3, [pc, #428]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b68      	ldr	r3, [pc, #416]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a67      	ldr	r2, [pc, #412]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe fbc4 	bl	8002374 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fe fbc0 	bl	8002374 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	@ 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e200      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b5d      	ldr	r3, [pc, #372]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xe4>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fe fbb0 	bl	8002374 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe fbac 	bl	8002374 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	@ 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e1ec      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	4b53      	ldr	r3, [pc, #332]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x10c>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d063      	beq.n	8003d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c46:	4b4c      	ldr	r3, [pc, #304]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c52:	4b49      	ldr	r3, [pc, #292]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d11c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x18c>
 8003c5e:	4b46      	ldr	r3, [pc, #280]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	4b43      	ldr	r3, [pc, #268]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_RCC_OscConfig+0x176>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e1c0      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b3d      	ldr	r3, [pc, #244]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4939      	ldr	r1, [pc, #228]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	e03a      	b.n	8003d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca0:	4b36      	ldr	r3, [pc, #216]	@ (8003d7c <HAL_RCC_OscConfig+0x270>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca6:	f7fe fb65 	bl	8002374 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cae:	f7fe fb61 	bl	8002374 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e1a1      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4927      	ldr	r1, [pc, #156]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]
 8003ce0:	e015      	b.n	8003d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce2:	4b26      	ldr	r3, [pc, #152]	@ (8003d7c <HAL_RCC_OscConfig+0x270>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fb44 	bl	8002374 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7fe fb40 	bl	8002374 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e180      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d02:	4b1d      	ldr	r3, [pc, #116]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d03a      	beq.n	8003d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d019      	beq.n	8003d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d22:	4b17      	ldr	r3, [pc, #92]	@ (8003d80 <HAL_RCC_OscConfig+0x274>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d28:	f7fe fb24 	bl	8002374 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fe fb20 	bl	8002374 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e160      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d42:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f000 face 	bl	80042f0 <RCC_Delay>
 8003d54:	e01c      	b.n	8003d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d56:	4b0a      	ldr	r3, [pc, #40]	@ (8003d80 <HAL_RCC_OscConfig+0x274>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5c:	f7fe fb0a 	bl	8002374 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d62:	e00f      	b.n	8003d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fe fb06 	bl	8002374 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d908      	bls.n	8003d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e146      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	42420000 	.word	0x42420000
 8003d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	4b92      	ldr	r3, [pc, #584]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e9      	bne.n	8003d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80a6 	beq.w	8003eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da2:	4b8b      	ldr	r3, [pc, #556]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10d      	bne.n	8003dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	4b88      	ldr	r3, [pc, #544]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4a87      	ldr	r2, [pc, #540]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db8:	61d3      	str	r3, [r2, #28]
 8003dba:	4b85      	ldr	r3, [pc, #532]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	4b82      	ldr	r3, [pc, #520]	@ (8003fd4 <HAL_RCC_OscConfig+0x4c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d118      	bne.n	8003e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8003fd4 <HAL_RCC_OscConfig+0x4c8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7e      	ldr	r2, [pc, #504]	@ (8003fd4 <HAL_RCC_OscConfig+0x4c8>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de2:	f7fe fac7 	bl	8002374 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dea:	f7fe fac3 	bl	8002374 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b64      	cmp	r3, #100	@ 0x64
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e103      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfc:	4b75      	ldr	r3, [pc, #468]	@ (8003fd4 <HAL_RCC_OscConfig+0x4c8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCC_OscConfig+0x312>
 8003e10:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6213      	str	r3, [r2, #32]
 8003e1c:	e02d      	b.n	8003e7a <HAL_RCC_OscConfig+0x36e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x334>
 8003e26:	4b6a      	ldr	r3, [pc, #424]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4a69      	ldr	r2, [pc, #420]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6213      	str	r3, [r2, #32]
 8003e32:	4b67      	ldr	r3, [pc, #412]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4a66      	ldr	r2, [pc, #408]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	6213      	str	r3, [r2, #32]
 8003e3e:	e01c      	b.n	8003e7a <HAL_RCC_OscConfig+0x36e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d10c      	bne.n	8003e62 <HAL_RCC_OscConfig+0x356>
 8003e48:	4b61      	ldr	r3, [pc, #388]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	4a60      	ldr	r2, [pc, #384]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	f043 0304 	orr.w	r3, r3, #4
 8003e52:	6213      	str	r3, [r2, #32]
 8003e54:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4a5d      	ldr	r2, [pc, #372]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6213      	str	r3, [r2, #32]
 8003e60:	e00b      	b.n	8003e7a <HAL_RCC_OscConfig+0x36e>
 8003e62:	4b5b      	ldr	r3, [pc, #364]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4a5a      	ldr	r2, [pc, #360]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6213      	str	r3, [r2, #32]
 8003e6e:	4b58      	ldr	r3, [pc, #352]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4a57      	ldr	r2, [pc, #348]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	f023 0304 	bic.w	r3, r3, #4
 8003e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d015      	beq.n	8003eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e82:	f7fe fa77 	bl	8002374 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fe fa73 	bl	8002374 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e0b1      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0ee      	beq.n	8003e8a <HAL_RCC_OscConfig+0x37e>
 8003eac:	e014      	b.n	8003ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eae:	f7fe fa61 	bl	8002374 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb6:	f7fe fa5d 	bl	8002374 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e09b      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ecc:	4b40      	ldr	r3, [pc, #256]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ee      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d105      	bne.n	8003eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ede:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8087 	beq.w	8004002 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef4:	4b36      	ldr	r3, [pc, #216]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d061      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d146      	bne.n	8003f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f08:	4b33      	ldr	r3, [pc, #204]	@ (8003fd8 <HAL_RCC_OscConfig+0x4cc>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fe fa31 	bl	8002374 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f16:	f7fe fa2d 	bl	8002374 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e06d      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f28:	4b29      	ldr	r3, [pc, #164]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3c:	d108      	bne.n	8003f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f3e:	4b24      	ldr	r3, [pc, #144]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	4921      	ldr	r1, [pc, #132]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f50:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a19      	ldr	r1, [r3, #32]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	430b      	orrs	r3, r1
 8003f62:	491b      	ldr	r1, [pc, #108]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f68:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd8 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fe fa01 	bl	8002374 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fe f9fd 	bl	8002374 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e03d      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f88:	4b11      	ldr	r3, [pc, #68]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x46a>
 8003f94:	e035      	b.n	8004002 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <HAL_RCC_OscConfig+0x4cc>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fe f9ea 	bl	8002374 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fe f9e6 	bl	8002374 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e026      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb6:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x498>
 8003fc2:	e01e      	b.n	8004002 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e019      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40007000 	.word	0x40007000
 8003fd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_RCC_OscConfig+0x500>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d106      	bne.n	8003ffe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40021000 	.word	0x40021000

08004010 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0d0      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004024:	4b6a      	ldr	r3, [pc, #424]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d910      	bls.n	8004054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b67      	ldr	r3, [pc, #412]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 0207 	bic.w	r2, r3, #7
 800403a:	4965      	ldr	r1, [pc, #404]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004042:	4b63      	ldr	r3, [pc, #396]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0b8      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800406c:	4b59      	ldr	r3, [pc, #356]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a58      	ldr	r2, [pc, #352]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004076:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004084:	4b53      	ldr	r3, [pc, #332]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a52      	ldr	r2, [pc, #328]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800408e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004090:	4b50      	ldr	r3, [pc, #320]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	494d      	ldr	r1, [pc, #308]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d040      	beq.n	8004130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	4b47      	ldr	r3, [pc, #284]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d115      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e07f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ce:	4b41      	ldr	r3, [pc, #260]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e073      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040de:	4b3d      	ldr	r3, [pc, #244]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e06b      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ee:	4b39      	ldr	r3, [pc, #228]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f023 0203 	bic.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4936      	ldr	r1, [pc, #216]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004100:	f7fe f938 	bl	8002374 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	e00a      	b.n	800411e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004108:	f7fe f934 	bl	8002374 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e053      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	4b2d      	ldr	r3, [pc, #180]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 020c 	and.w	r2, r3, #12
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	429a      	cmp	r2, r3
 800412e:	d1eb      	bne.n	8004108 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004130:	4b27      	ldr	r3, [pc, #156]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d210      	bcs.n	8004160 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 0207 	bic.w	r2, r3, #7
 8004146:	4922      	ldr	r1, [pc, #136]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e032      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4916      	ldr	r1, [pc, #88]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800418a:	4b12      	ldr	r3, [pc, #72]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	490e      	ldr	r1, [pc, #56]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800419e:	f000 f821 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 80041a2:	4602      	mov	r2, r0
 80041a4:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	490a      	ldr	r1, [pc, #40]	@ (80041d8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	5ccb      	ldrb	r3, [r1, r3]
 80041b2:	fa22 f303 	lsr.w	r3, r2, r3
 80041b6:	4a09      	ldr	r2, [pc, #36]	@ (80041dc <HAL_RCC_ClockConfig+0x1cc>)
 80041b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041ba:	4b09      	ldr	r3, [pc, #36]	@ (80041e0 <HAL_RCC_ClockConfig+0x1d0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe f896 	bl	80022f0 <HAL_InitTick>

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40022000 	.word	0x40022000
 80041d4:	40021000 	.word	0x40021000
 80041d8:	0800c29c 	.word	0x0800c29c
 80041dc:	20000000 	.word	0x20000000
 80041e0:	20000004 	.word	0x20000004

080041e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x94>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b04      	cmp	r3, #4
 800420c:	d002      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x30>
 800420e:	2b08      	cmp	r3, #8
 8004210:	d003      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x36>
 8004212:	e027      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004214:	4b19      	ldr	r3, [pc, #100]	@ (800427c <HAL_RCC_GetSysClockFreq+0x98>)
 8004216:	613b      	str	r3, [r7, #16]
      break;
 8004218:	e027      	b.n	800426a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	0c9b      	lsrs	r3, r3, #18
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	4a17      	ldr	r2, [pc, #92]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004224:	5cd3      	ldrb	r3, [r2, r3]
 8004226:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d010      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004232:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x94>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	0c5b      	lsrs	r3, r3, #17
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <HAL_RCC_GetSysClockFreq+0xa0>)
 800423e:	5cd3      	ldrb	r3, [r2, r3]
 8004240:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a0d      	ldr	r2, [pc, #52]	@ (800427c <HAL_RCC_GetSysClockFreq+0x98>)
 8004246:	fb03 f202 	mul.w	r2, r3, r2
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e004      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a0c      	ldr	r2, [pc, #48]	@ (8004288 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	613b      	str	r3, [r7, #16]
      break;
 8004262:	e002      	b.n	800426a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b05      	ldr	r3, [pc, #20]	@ (800427c <HAL_RCC_GetSysClockFreq+0x98>)
 8004266:	613b      	str	r3, [r7, #16]
      break;
 8004268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800426a:	693b      	ldr	r3, [r7, #16]
}
 800426c:	4618      	mov	r0, r3
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000
 800427c:	007a1200 	.word	0x007a1200
 8004280:	0800c2b4 	.word	0x0800c2b4
 8004284:	0800c2c4 	.word	0x0800c2c4
 8004288:	003d0900 	.word	0x003d0900

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b02      	ldr	r3, [pc, #8]	@ (800429c <HAL_RCC_GetHCLKFreq+0x10>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	20000000 	.word	0x20000000

080042a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042a4:	f7ff fff2 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4903      	ldr	r1, [pc, #12]	@ (80042c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b6:	5ccb      	ldrb	r3, [r1, r3]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021000 	.word	0x40021000
 80042c4:	0800c2ac 	.word	0x0800c2ac

080042c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042cc:	f7ff ffde 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	0adb      	lsrs	r3, r3, #11
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4903      	ldr	r1, [pc, #12]	@ (80042ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000
 80042ec:	0800c2ac 	.word	0x0800c2ac

080042f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <RCC_Delay+0x34>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <RCC_Delay+0x38>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	0a5b      	lsrs	r3, r3, #9
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800430c:	bf00      	nop
  }
  while (Delay --);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1e5a      	subs	r2, r3, #1
 8004312:	60fa      	str	r2, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f9      	bne.n	800430c <RCC_Delay+0x1c>
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	20000000 	.word	0x20000000
 8004328:	10624dd3 	.word	0x10624dd3

0800432c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e076      	b.n	800442c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d108      	bne.n	8004358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800434e:	d009      	beq.n	8004364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	61da      	str	r2, [r3, #28]
 8004356:	e005      	b.n	8004364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fd fdb4 	bl	8001eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800439a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e8:	ea42 0103 	orr.w	r1, r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	0c1a      	lsrs	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f002 0204 	and.w	r2, r2, #4
 800440a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800441a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e042      	b.n	80044cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd fd92 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	@ 0x24
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fdb7 	bl	8004fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800448c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800449c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08a      	sub	sp, #40	@ 0x28
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d175      	bne.n	80045e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_UART_Transmit+0x2c>
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e06e      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2221      	movs	r2, #33	@ 0x21
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004512:	f7fd ff2f 	bl	8002374 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452c:	d108      	bne.n	8004540 <HAL_UART_Transmit+0x6c>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	e003      	b.n	8004548 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004548:	e02e      	b.n	80045a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	2180      	movs	r1, #128	@ 0x80
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fb1c 	bl	8004b92 <UART_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e03a      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004580:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	3302      	adds	r3, #2
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	e007      	b.n	800459a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1cb      	bne.n	800454a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2140      	movs	r1, #64	@ 0x40
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fae8 	bl	8004b92 <UART_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e006      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b20      	cmp	r3, #32
 8004602:	d112      	bne.n	800462a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_UART_Receive_IT+0x26>
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e00b      	b.n	800462c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	461a      	mov	r2, r3
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fb0f 	bl	8004c44 <UART_Start_Receive_IT>
 8004626:	4603      	mov	r3, r0
 8004628:	e000      	b.n	800462c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b0ba      	sub	sp, #232	@ 0xe8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004660:	2300      	movs	r3, #0
 8004662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800467a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_UART_IRQHandler+0x66>
 8004686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fbec 	bl	8004e70 <UART_Receive_IT>
      return;
 8004698:	e25b      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800469a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80de 	beq.w	8004860 <HAL_UART_IRQHandler+0x22c>
 80046a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80d1 	beq.w	8004860 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <HAL_UART_IRQHandler+0xae>
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_UART_IRQHandler+0xd2>
 80046ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_UART_IRQHandler+0xf6>
 8004712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004722:	f043 0204 	orr.w	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d011      	beq.n	800475a <HAL_UART_IRQHandler+0x126>
 8004736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	f043 0208 	orr.w	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 81f2 	beq.w	8004b48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_UART_IRQHandler+0x14e>
 8004770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb77 	bl	8004e70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <HAL_UART_IRQHandler+0x17a>
 80047a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d04f      	beq.n	800484e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa81 	bl	8004cb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d041      	beq.n	8004846 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1d9      	bne.n	80047c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d013      	beq.n	800483e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a14 <HAL_UART_IRQHandler+0x3e0>)
 800481c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004822:	4618      	mov	r0, r3
 8004824:	f7fd fef8 	bl	8002618 <HAL_DMA_Abort_IT>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d016      	beq.n	800485c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004838:	4610      	mov	r0, r2
 800483a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	e00e      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f993 	bl	8004b6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	e00a      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f98f 	bl	8004b6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	e006      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f98b 	bl	8004b6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800485a:	e175      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	bf00      	nop
    return;
 800485e:	e173      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	2b01      	cmp	r3, #1
 8004866:	f040 814f 	bne.w	8004b08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8148 	beq.w	8004b08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8141 	beq.w	8004b08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80b6 	beq.w	8004a18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8145 	beq.w	8004b4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048ca:	429a      	cmp	r2, r3
 80048cc:	f080 813e 	bcs.w	8004b4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b20      	cmp	r3, #32
 80048e0:	f000 8088 	beq.w	80049f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004902:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004910:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004914:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800491c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1d9      	bne.n	80048e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3314      	adds	r3, #20
 8004936:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004940:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004954:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004958:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800495c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e1      	bne.n	8004930 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800497c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800497e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3314      	adds	r3, #20
 800498c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004990:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004992:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004996:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800499e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e3      	bne.n	800496c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c4:	f023 0310 	bic.w	r3, r3, #16
 80049c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049d8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e3      	bne.n	80049b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fd fdd7 	bl	80025a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8b6 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a10:	e09c      	b.n	8004b4c <HAL_UART_IRQHandler+0x518>
 8004a12:	bf00      	nop
 8004a14:	08004d7b 	.word	0x08004d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 808e 	beq.w	8004b50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8089 	beq.w	8004b50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	330c      	adds	r3, #12
 8004a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a62:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e3      	bne.n	8004a3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3314      	adds	r3, #20
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	623b      	str	r3, [r7, #32]
   return(result);
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e3      	bne.n	8004a76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0310 	bic.w	r3, r3, #16
 8004ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ae0:	61fa      	str	r2, [r7, #28]
 8004ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	617b      	str	r3, [r7, #20]
   return(result);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e3      	bne.n	8004abc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004afa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f83b 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b06:	e023      	b.n	8004b50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d009      	beq.n	8004b28 <HAL_UART_IRQHandler+0x4f4>
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f93e 	bl	8004da2 <UART_Transmit_IT>
    return;
 8004b26:	e014      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00e      	beq.n	8004b52 <HAL_UART_IRQHandler+0x51e>
 8004b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f97d 	bl	8004e40 <UART_EndTransmit_IT>
    return;
 8004b46:	e004      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b48:	bf00      	nop
 8004b4a:	e002      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b4c:	bf00      	nop
 8004b4e:	e000      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b50:	bf00      	nop
  }
}
 8004b52:	37e8      	adds	r7, #232	@ 0xe8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba2:	e03b      	b.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d037      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7fd fbe2 	bl	8002374 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	6a3a      	ldr	r2, [r7, #32]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e03a      	b.n	8004c3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d023      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b80      	cmp	r3, #128	@ 0x80
 8004bd8:	d020      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d01d      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d116      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f856 	bl	8004cb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e00f      	b.n	8004c3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d0b4      	beq.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	88fa      	ldrh	r2, [r7, #6]
 8004c5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2222      	movs	r2, #34	@ 0x22
 8004c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0201 	orr.w	r2, r2, #1
 8004c98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0220 	orr.w	r2, r2, #32
 8004ca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b095      	sub	sp, #84	@ 0x54
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cde:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ce4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1e5      	bne.n	8004cbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e5      	bne.n	8004cf2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d119      	bne.n	8004d62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0310 	bic.w	r3, r3, #16
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d4e:	61ba      	str	r2, [r7, #24]
 8004d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e5      	bne.n	8004d2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d70:	bf00      	nop
 8004d72:	3754      	adds	r7, #84	@ 0x54
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr

08004d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff fee8 	bl	8004b6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b21      	cmp	r3, #33	@ 0x21
 8004db4:	d13e      	bne.n	8004e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dbe:	d114      	bne.n	8004dea <UART_Transmit_IT+0x48>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d110      	bne.n	8004dea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	1c9a      	adds	r2, r3, #2
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	621a      	str	r2, [r3, #32]
 8004de8:	e008      	b.n	8004dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	1c59      	adds	r1, r3, #1
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6211      	str	r1, [r2, #32]
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10f      	bne.n	8004e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fe79 	bl	8004b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08c      	sub	sp, #48	@ 0x30
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b22      	cmp	r3, #34	@ 0x22
 8004e82:	f040 80ae 	bne.w	8004fe2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e8e:	d117      	bne.n	8004ec0 <UART_Receive_IT+0x50>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d113      	bne.n	8004ec0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ebe:	e026      	b.n	8004f0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed2:	d007      	beq.n	8004ee4 <UART_Receive_IT+0x74>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <UART_Receive_IT+0x82>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e008      	b.n	8004f04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d15d      	bne.n	8004fde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0220 	bic.w	r2, r2, #32
 8004f30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d135      	bne.n	8004fd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f023 0310 	bic.w	r3, r3, #16
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8e:	623a      	str	r2, [r7, #32]
 8004f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	69f9      	ldr	r1, [r7, #28]
 8004f94:	6a3a      	ldr	r2, [r7, #32]
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e5      	bne.n	8004f6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d10a      	bne.n	8004fc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fdd5 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
 8004fd2:	e002      	b.n	8004fda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fc fae3 	bl	80015a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e002      	b.n	8004fe4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3730      	adds	r7, #48	@ 0x30
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005026:	f023 030c 	bic.w	r3, r3, #12
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	430b      	orrs	r3, r1
 8005032:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2c      	ldr	r2, [pc, #176]	@ (8005100 <UART_SetConfig+0x114>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d103      	bne.n	800505c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005054:	f7ff f938 	bl	80042c8 <HAL_RCC_GetPCLK2Freq>
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	e002      	b.n	8005062 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800505c:	f7ff f920 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 8005060:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009a      	lsls	r2, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	4a22      	ldr	r2, [pc, #136]	@ (8005104 <UART_SetConfig+0x118>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	0119      	lsls	r1, r3, #4
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009a      	lsls	r2, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	fbb2 f2f3 	udiv	r2, r2, r3
 8005098:	4b1a      	ldr	r3, [pc, #104]	@ (8005104 <UART_SetConfig+0x118>)
 800509a:	fba3 0302 	umull	r0, r3, r3, r2
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	2064      	movs	r0, #100	@ 0x64
 80050a2:	fb00 f303 	mul.w	r3, r0, r3
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	3332      	adds	r3, #50	@ 0x32
 80050ac:	4a15      	ldr	r2, [pc, #84]	@ (8005104 <UART_SetConfig+0x118>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050b8:	4419      	add	r1, r3
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009a      	lsls	r2, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <UART_SetConfig+0x118>)
 80050d2:	fba3 0302 	umull	r0, r3, r3, r2
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	2064      	movs	r0, #100	@ 0x64
 80050da:	fb00 f303 	mul.w	r3, r0, r3
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	3332      	adds	r3, #50	@ 0x32
 80050e4:	4a07      	ldr	r2, [pc, #28]	@ (8005104 <UART_SetConfig+0x118>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	f003 020f 	and.w	r2, r3, #15
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	440a      	add	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40013800 	.word	0x40013800
 8005104:	51eb851f 	.word	0x51eb851f

08005108 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800511a:	2b84      	cmp	r3, #132	@ 0x84
 800511c:	d005      	beq.n	800512a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800511e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	3303      	adds	r3, #3
 8005128:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800512a:	68fb      	ldr	r3, [r7, #12]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800513c:	f3ef 8305 	mrs	r3, IPSR
 8005140:	607b      	str	r3, [r7, #4]
  return(result);
 8005142:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800515c:	f001 f9f2 	bl	8006544 <vTaskStartScheduler>
  
  return osOK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	bd80      	pop	{r7, pc}

08005166 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800516a:	f7ff ffe4 	bl	8005136 <inHandlerMode>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005174:	f001 fb02 	bl	800677c <xTaskGetTickCountFromISR>
 8005178:	4603      	mov	r3, r0
 800517a:	e002      	b.n	8005182 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800517c:	f001 faf0 	bl	8006760 <xTaskGetTickCount>
 8005180:	4603      	mov	r3, r0
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	bd80      	pop	{r7, pc}

08005186 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005186:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005188:	b089      	sub	sp, #36	@ 0x24
 800518a:	af04      	add	r7, sp, #16
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d020      	beq.n	80051da <osThreadCreate+0x54>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01c      	beq.n	80051da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685c      	ldr	r4, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691e      	ldr	r6, [r3, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ffa8 	bl	8005108 <makeFreeRtosPriority>
 80051b8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051c2:	9202      	str	r2, [sp, #8]
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	9100      	str	r1, [sp, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4632      	mov	r2, r6
 80051cc:	4629      	mov	r1, r5
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 ffeb 	bl	80061aa <xTaskCreateStatic>
 80051d4:	4603      	mov	r3, r0
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	e01c      	b.n	8005214 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685c      	ldr	r4, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051e6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff ff8a 	bl	8005108 <makeFreeRtosPriority>
 80051f4:	4602      	mov	r2, r0
 80051f6:	f107 030c 	add.w	r3, r7, #12
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	9200      	str	r2, [sp, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	4632      	mov	r2, r6
 8005202:	4629      	mov	r1, r5
 8005204:	4620      	mov	r0, r4
 8005206:	f001 f830 	bl	800626a <xTaskCreate>
 800520a:	4603      	mov	r3, r0
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	e000      	b.n	8005216 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005214:	68fb      	ldr	r3, [r7, #12]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800521e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <osDelay+0x16>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	e000      	b.n	8005236 <osDelay+0x18>
 8005234:	2301      	movs	r3, #1
 8005236:	4618      	mov	r0, r3
 8005238:	f001 f94e 	bl	80064d8 <vTaskDelay>
  
  return osOK;
 800523c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af02      	add	r7, sp, #8
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800525a:	f7ff ff6c 	bl	8005136 <inHandlerMode>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01c      	beq.n	800529e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	f107 0208 	add.w	r2, r7, #8
 800526a:	f107 030c 	add.w	r3, r7, #12
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	2201      	movs	r2, #1
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f002 f861 	bl	800733c <xTaskGenericNotifyFromISR>
 800527a:	4603      	mov	r3, r0
 800527c:	2b01      	cmp	r3, #1
 800527e:	d002      	beq.n	8005286 <osSignalSet+0x3e>
      return 0x80000000;
 8005280:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005284:	e019      	b.n	80052ba <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d015      	beq.n	80052b8 <osSignalSet+0x70>
 800528c:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <osSignalSet+0x7c>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	e00c      	b.n	80052b8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800529e:	6839      	ldr	r1, [r7, #0]
 80052a0:	f107 0308 	add.w	r3, r7, #8
 80052a4:	2201      	movs	r2, #1
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 ff90 	bl	80071cc <xTaskGenericNotify>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d002      	beq.n	80052b8 <osSignalSet+0x70>
    return 0x80000000;
 80052b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80052b6:	e000      	b.n	80052ba <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80052b8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	e000ed04 	.word	0xe000ed04

080052c8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b089      	sub	sp, #36	@ 0x24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d103      	bne.n	80052ec <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80052e4:	f04f 33ff 	mov.w	r3, #4294967295
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e009      	b.n	8005300 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <osSignalWait+0x38>
      ticks = 1;
 80052fc:	2301      	movs	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8005300:	f7ff ff19 	bl	8005136 <inHandlerMode>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800530a:	2382      	movs	r3, #130	@ 0x82
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	e01b      	b.n	8005348 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	f107 0310 	add.w	r3, r7, #16
 8005316:	1d1a      	adds	r2, r3, #4
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	2000      	movs	r0, #0
 800531c:	f001 fefc 	bl	8007118 <xTaskNotifyWait>
 8005320:	4603      	mov	r3, r0
 8005322:	2b01      	cmp	r3, #1
 8005324:	d008      	beq.n	8005338 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d102      	bne.n	8005332 <osSignalWait+0x6a>
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	e00a      	b.n	8005348 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8005332:	2340      	movs	r3, #64	@ 0x40
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	e007      	b.n	8005348 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	da02      	bge.n	8005344 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800533e:	2386      	movs	r3, #134	@ 0x86
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	e001      	b.n	8005348 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8005344:	2308      	movs	r3, #8
 8005346:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	461c      	mov	r4, r3
 800534c:	f107 0310 	add.w	r3, r7, #16
 8005350:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	3724      	adds	r7, #36	@ 0x24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd90      	pop	{r4, r7, pc}

08005360 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4619      	mov	r1, r3
 8005376:	2001      	movs	r0, #1
 8005378:	f000 fab1 	bl	80058de <xQueueCreateMutexStatic>
 800537c:	4603      	mov	r3, r0
 800537e:	e003      	b.n	8005388 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005380:	2001      	movs	r0, #1
 8005382:	f000 fa94 	bl	80058ae <xQueueCreateMutex>
 8005386:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <osMutexWait+0x18>
    return osErrorParameter;
 80053a4:	2380      	movs	r3, #128	@ 0x80
 80053a6:	e03a      	b.n	800541e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d103      	bne.n	80053bc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80053b4:	f04f 33ff 	mov.w	r3, #4294967295
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e009      	b.n	80053d0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <osMutexWait+0x40>
      ticks = 1;
 80053cc:	2301      	movs	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80053d0:	f7ff feb1 	bl	8005136 <inHandlerMode>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d017      	beq.n	800540a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	461a      	mov	r2, r3
 80053e0:	2100      	movs	r1, #0
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fd38 	bl	8005e58 <xQueueReceiveFromISR>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d001      	beq.n	80053f2 <osMutexWait+0x62>
      return osErrorOS;
 80053ee:	23ff      	movs	r3, #255	@ 0xff
 80053f0:	e015      	b.n	800541e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d011      	beq.n	800541c <osMutexWait+0x8c>
 80053f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <osMutexWait+0x98>)
 80053fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	e008      	b.n	800541c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fc13 	bl	8005c38 <xQueueSemaphoreTake>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d001      	beq.n	800541c <osMutexWait+0x8c>
    return osErrorOS;
 8005418:	23ff      	movs	r3, #255	@ 0xff
 800541a:	e000      	b.n	800541e <osMutexWait+0x8e>
  }
  
  return osOK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005438:	2300      	movs	r3, #0
 800543a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800543c:	f7ff fe7b 	bl	8005136 <inHandlerMode>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005446:	f107 0308 	add.w	r3, r7, #8
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fb63 	bl	8005b18 <xQueueGiveFromISR>
 8005452:	4603      	mov	r3, r0
 8005454:	2b01      	cmp	r3, #1
 8005456:	d001      	beq.n	800545c <osMutexRelease+0x30>
      return osErrorOS;
 8005458:	23ff      	movs	r3, #255	@ 0xff
 800545a:	e017      	b.n	800548c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d013      	beq.n	800548a <osMutexRelease+0x5e>
 8005462:	4b0c      	ldr	r3, [pc, #48]	@ (8005494 <osMutexRelease+0x68>)
 8005464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	e00a      	b.n	800548a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005474:	2300      	movs	r3, #0
 8005476:	2200      	movs	r2, #0
 8005478:	2100      	movs	r1, #0
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa4a 	bl	8005914 <xQueueGenericSend>
 8005480:	4603      	mov	r3, r0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d001      	beq.n	800548a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005486:	23ff      	movs	r3, #255	@ 0xff
 8005488:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f103 0208 	add.w	r2, r3, #8
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295
 80054b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f103 0208 	add.w	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f103 0208 	add.w	r2, r3, #8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr

080054ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d103      	bne.n	8005554 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e00c      	b.n	800556e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3308      	adds	r3, #8
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	e002      	b.n	8005562 <vListInsert+0x2e>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	429a      	cmp	r2, r3
 800556c:	d2f6      	bcs.n	800555c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	601a      	str	r2, [r3, #0]
}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6892      	ldr	r2, [r2, #8]
 80055ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6852      	ldr	r2, [r2, #4]
 80055c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d103      	bne.n	80055d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	1e5a      	subs	r2, r3, #1
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr
	...

080055f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10b      	bne.n	8005624 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800561e:	bf00      	nop
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005624:	f002 f8c2 	bl	80077ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005630:	68f9      	ldr	r1, [r7, #12]
 8005632:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	441a      	add	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005654:	3b01      	subs	r3, #1
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800565a:	fb01 f303 	mul.w	r3, r1, r3
 800565e:	441a      	add	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	22ff      	movs	r2, #255	@ 0xff
 8005668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	22ff      	movs	r2, #255	@ 0xff
 8005670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d114      	bne.n	80056a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d01a      	beq.n	80056b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3310      	adds	r3, #16
 8005686:	4618      	mov	r0, r3
 8005688:	f001 f9c6 	bl	8006a18 <xTaskRemoveFromEventList>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d012      	beq.n	80056b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005692:	4b0d      	ldr	r3, [pc, #52]	@ (80056c8 <xQueueGenericReset+0xd0>)
 8005694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	e009      	b.n	80056b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3310      	adds	r3, #16
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fef5 	bl	8005498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3324      	adds	r3, #36	@ 0x24
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fef0 	bl	8005498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056b8:	f002 f8a8 	bl	800780c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056bc:	2301      	movs	r3, #1
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08e      	sub	sp, #56	@ 0x38
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	e7fd      	b.n	80056f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10b      	bne.n	8005716 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	e7fd      	b.n	8005712 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <xQueueGenericCreateStatic+0x56>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <xQueueGenericCreateStatic+0x5a>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <xQueueGenericCreateStatic+0x5c>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10b      	bne.n	8005744 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	623b      	str	r3, [r7, #32]
}
 800573e:	bf00      	nop
 8005740:	bf00      	nop
 8005742:	e7fd      	b.n	8005740 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <xQueueGenericCreateStatic+0x84>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <xQueueGenericCreateStatic+0x88>
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <xQueueGenericCreateStatic+0x8a>
 8005754:	2300      	movs	r3, #0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10b      	bne.n	8005772 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	61fb      	str	r3, [r7, #28]
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	e7fd      	b.n	800576e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005772:	2348      	movs	r3, #72	@ 0x48
 8005774:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b48      	cmp	r3, #72	@ 0x48
 800577a:	d00b      	beq.n	8005794 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	61bb      	str	r3, [r7, #24]
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005794:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800579a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80057ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f840 	bl	800583c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80057be:	4618      	mov	r0, r3
 80057c0:	3730      	adds	r7, #48	@ 0x30
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b08a      	sub	sp, #40	@ 0x28
 80057ca:	af02      	add	r7, sp, #8
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	4613      	mov	r3, r2
 80057d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10b      	bne.n	80057f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	613b      	str	r3, [r7, #16]
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	e7fd      	b.n	80057ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3348      	adds	r3, #72	@ 0x48
 8005800:	4618      	mov	r0, r3
 8005802:	f002 f8d5 	bl	80079b0 <pvPortMalloc>
 8005806:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d011      	beq.n	8005832 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	3348      	adds	r3, #72	@ 0x48
 8005816:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005820:	79fa      	ldrb	r2, [r7, #7]
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	4613      	mov	r3, r2
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f805 	bl	800583c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005832:	69bb      	ldr	r3, [r7, #24]
	}
 8005834:	4618      	mov	r0, r3
 8005836:	3720      	adds	r7, #32
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e002      	b.n	800585e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800586a:	2101      	movs	r1, #1
 800586c:	69b8      	ldr	r0, [r7, #24]
 800586e:	f7ff fec3 	bl	80055f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00e      	beq.n	80058a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800589a:	2300      	movs	r3, #0
 800589c:	2200      	movs	r2, #0
 800589e:	2100      	movs	r1, #0
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f837 	bl	8005914 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	4603      	mov	r3, r0
 80058b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80058b8:	2301      	movs	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	461a      	mov	r2, r3
 80058c4:	6939      	ldr	r1, [r7, #16]
 80058c6:	6978      	ldr	r0, [r7, #20]
 80058c8:	f7ff ff7d 	bl	80057c6 <xQueueGenericCreate>
 80058cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff ffd3 	bl	800587a <prvInitialiseMutex>

		return xNewQueue;
 80058d4:	68fb      	ldr	r3, [r7, #12]
	}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b088      	sub	sp, #32
 80058e2:	af02      	add	r7, sp, #8
 80058e4:	4603      	mov	r3, r0
 80058e6:	6039      	str	r1, [r7, #0]
 80058e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80058ea:	2301      	movs	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2200      	movs	r2, #0
 80058fa:	6939      	ldr	r1, [r7, #16]
 80058fc:	6978      	ldr	r0, [r7, #20]
 80058fe:	f7ff fee5 	bl	80056cc <xQueueGenericCreateStatic>
 8005902:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff ffb8 	bl	800587a <prvInitialiseMutex>

		return xNewQueue;
 800590a:	68fb      	ldr	r3, [r7, #12]
	}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08e      	sub	sp, #56	@ 0x38
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10b      	bne.n	8005948 <xQueueGenericSend+0x34>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <xQueueGenericSend+0x42>
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <xQueueGenericSend+0x46>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <xQueueGenericSend+0x48>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10b      	bne.n	8005978 <xQueueGenericSend+0x64>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005972:	bf00      	nop
 8005974:	bf00      	nop
 8005976:	e7fd      	b.n	8005974 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d103      	bne.n	8005986 <xQueueGenericSend+0x72>
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <xQueueGenericSend+0x76>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <xQueueGenericSend+0x78>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10b      	bne.n	80059a8 <xQueueGenericSend+0x94>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	623b      	str	r3, [r7, #32]
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	e7fd      	b.n	80059a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059a8:	f001 f9f6 	bl	8006d98 <xTaskGetSchedulerState>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <xQueueGenericSend+0xa4>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <xQueueGenericSend+0xa8>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <xQueueGenericSend+0xaa>
 80059bc:	2300      	movs	r3, #0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10b      	bne.n	80059da <xQueueGenericSend+0xc6>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	61fb      	str	r3, [r7, #28]
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	e7fd      	b.n	80059d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059da:	f001 fee7 	bl	80077ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d302      	bcc.n	80059f0 <xQueueGenericSend+0xdc>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d129      	bne.n	8005a44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059f6:	f000 fac8 	bl	8005f8a <prvCopyDataToQueue>
 80059fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d010      	beq.n	8005a26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	3324      	adds	r3, #36	@ 0x24
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 f805 	bl	8006a18 <xTaskRemoveFromEventList>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d013      	beq.n	8005a3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a14:	4b3f      	ldr	r3, [pc, #252]	@ (8005b14 <xQueueGenericSend+0x200>)
 8005a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	e00a      	b.n	8005a3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a2c:	4b39      	ldr	r3, [pc, #228]	@ (8005b14 <xQueueGenericSend+0x200>)
 8005a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a3c:	f001 fee6 	bl	800780c <vPortExitCritical>
				return pdPASS;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e063      	b.n	8005b0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d103      	bne.n	8005a52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a4a:	f001 fedf 	bl	800780c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e05c      	b.n	8005b0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a58:	f107 0314 	add.w	r3, r7, #20
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 f83f 	bl	8006ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a62:	2301      	movs	r3, #1
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a66:	f001 fed1 	bl	800780c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a6a:	f000 fdcd 	bl	8006608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a6e:	f001 fe9d 	bl	80077ac <vPortEnterCritical>
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a78:	b25b      	sxtb	r3, r3
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	d103      	bne.n	8005a88 <xQueueGenericSend+0x174>
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a8e:	b25b      	sxtb	r3, r3
 8005a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a94:	d103      	bne.n	8005a9e <xQueueGenericSend+0x18a>
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a9e:	f001 feb5 	bl	800780c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aa2:	1d3a      	adds	r2, r7, #4
 8005aa4:	f107 0314 	add.w	r3, r7, #20
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 f82e 	bl	8006b0c <xTaskCheckForTimeOut>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d124      	bne.n	8005b00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ab6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ab8:	f000 fb5f 	bl	800617a <prvIsQueueFull>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d018      	beq.n	8005af4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac4:	3310      	adds	r3, #16
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 ff7e 	bl	80069cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ad2:	f000 faea 	bl	80060aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ad6:	f000 fda5 	bl	8006624 <xTaskResumeAll>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f47f af7c 	bne.w	80059da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b14 <xQueueGenericSend+0x200>)
 8005ae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	e772      	b.n	80059da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005af6:	f000 fad8 	bl	80060aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005afa:	f000 fd93 	bl	8006624 <xTaskResumeAll>
 8005afe:	e76c      	b.n	80059da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b02:	f000 fad2 	bl	80060aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b06:	f000 fd8d 	bl	8006624 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3738      	adds	r7, #56	@ 0x38
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08e      	sub	sp, #56	@ 0x38
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	623b      	str	r3, [r7, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	bf00      	nop
 8005b42:	e7fd      	b.n	8005b40 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	61fb      	str	r3, [r7, #28]
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d103      	bne.n	8005b74 <xQueueGiveFromISR+0x5c>
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <xQueueGiveFromISR+0x60>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <xQueueGiveFromISR+0x62>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	61bb      	str	r3, [r7, #24]
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	e7fd      	b.n	8005b92 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b96:	f001 fecb 	bl	8007930 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	617a      	str	r2, [r7, #20]
 8005bb0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d22b      	bcs.n	8005c1e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d112      	bne.n	8005c08 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d016      	beq.n	8005c18 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bec:	3324      	adds	r3, #36	@ 0x24
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 ff12 	bl	8006a18 <xTaskRemoveFromEventList>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00e      	beq.n	8005c18 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e007      	b.n	8005c18 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	b25a      	sxtb	r2, r3
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c1c:	e001      	b.n	8005c22 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c24:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3738      	adds	r7, #56	@ 0x38
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08e      	sub	sp, #56	@ 0x38
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10b      	bne.n	8005c6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	623b      	str	r3, [r7, #32]
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	61fb      	str	r3, [r7, #28]
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	e7fd      	b.n	8005c88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c8c:	f001 f884 	bl	8006d98 <xTaskGetSchedulerState>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <xQueueSemaphoreTake+0x64>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <xQueueSemaphoreTake+0x68>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <xQueueSemaphoreTake+0x6a>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10b      	bne.n	8005cbe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	61bb      	str	r3, [r7, #24]
}
 8005cb8:	bf00      	nop
 8005cba:	bf00      	nop
 8005cbc:	e7fd      	b.n	8005cba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cbe:	f001 fd75 	bl	80077ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d024      	beq.n	8005d18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd0:	1e5a      	subs	r2, r3, #1
 8005cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d104      	bne.n	8005ce8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005cde:	f001 fa07 	bl	80070f0 <pvTaskIncrementMutexHeldCount>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00f      	beq.n	8005d10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf2:	3310      	adds	r3, #16
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fe8f 	bl	8006a18 <xTaskRemoveFromEventList>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d007      	beq.n	8005d10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d00:	4b54      	ldr	r3, [pc, #336]	@ (8005e54 <xQueueSemaphoreTake+0x21c>)
 8005d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d10:	f001 fd7c 	bl	800780c <vPortExitCritical>
				return pdPASS;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e098      	b.n	8005e4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d112      	bne.n	8005d44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	617b      	str	r3, [r7, #20]
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	e7fd      	b.n	8005d38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d3c:	f001 fd66 	bl	800780c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e082      	b.n	8005e4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d4a:	f107 030c 	add.w	r3, r7, #12
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fec6 	bl	8006ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d58:	f001 fd58 	bl	800780c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d5c:	f000 fc54 	bl	8006608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d60:	f001 fd24 	bl	80077ac <vPortEnterCritical>
 8005d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d6a:	b25b      	sxtb	r3, r3
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d103      	bne.n	8005d7a <xQueueSemaphoreTake+0x142>
 8005d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d80:	b25b      	sxtb	r3, r3
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d86:	d103      	bne.n	8005d90 <xQueueSemaphoreTake+0x158>
 8005d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d90:	f001 fd3c 	bl	800780c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d94:	463a      	mov	r2, r7
 8005d96:	f107 030c 	add.w	r3, r7, #12
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 feb5 	bl	8006b0c <xTaskCheckForTimeOut>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d132      	bne.n	8005e0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005da8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005daa:	f000 f9d0 	bl	800614e <prvIsQueueEmpty>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d026      	beq.n	8005e02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005dbc:	f001 fcf6 	bl	80077ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f001 f805 	bl	8006dd4 <xTaskPriorityInherit>
 8005dca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005dcc:	f001 fd1e 	bl	800780c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd2:	3324      	adds	r3, #36	@ 0x24
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fdf7 	bl	80069cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005de0:	f000 f963 	bl	80060aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005de4:	f000 fc1e 	bl	8006624 <xTaskResumeAll>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f47f af67 	bne.w	8005cbe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005df0:	4b18      	ldr	r3, [pc, #96]	@ (8005e54 <xQueueSemaphoreTake+0x21c>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	e75d      	b.n	8005cbe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e04:	f000 f951 	bl	80060aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e08:	f000 fc0c 	bl	8006624 <xTaskResumeAll>
 8005e0c:	e757      	b.n	8005cbe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e10:	f000 f94b 	bl	80060aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e14:	f000 fc06 	bl	8006624 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e1a:	f000 f998 	bl	800614e <prvIsQueueEmpty>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f43f af4c 	beq.w	8005cbe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00d      	beq.n	8005e48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005e2c:	f001 fcbe 	bl	80077ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e32:	f000 f893 	bl	8005f5c <prvGetDisinheritPriorityAfterTimeout>
 8005e36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 f8c6 	bl	8006fd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e44:	f001 fce2 	bl	800780c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3738      	adds	r7, #56	@ 0x38
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08e      	sub	sp, #56	@ 0x38
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10b      	bne.n	8005e86 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	623b      	str	r3, [r7, #32]
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	e7fd      	b.n	8005e82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d103      	bne.n	8005e94 <xQueueReceiveFromISR+0x3c>
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <xQueueReceiveFromISR+0x40>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <xQueueReceiveFromISR+0x42>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10b      	bne.n	8005eb6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	61fb      	str	r3, [r7, #28]
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	e7fd      	b.n	8005eb2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eb6:	f001 fd3b 	bl	8007930 <vPortValidateInterruptPriority>
	__asm volatile
 8005eba:	f3ef 8211 	mrs	r2, BASEPRI
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	61ba      	str	r2, [r7, #24]
 8005ed0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ed2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02f      	beq.n	8005f42 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ef0:	f000 f8b5 	bl	800605e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	1e5a      	subs	r2, r3, #1
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005efc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d112      	bne.n	8005f2c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d016      	beq.n	8005f3c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	3310      	adds	r3, #16
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fd80 	bl	8006a18 <xTaskRemoveFromEventList>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00e      	beq.n	8005f3c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e007      	b.n	8005f3c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f30:	3301      	adds	r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	b25a      	sxtb	r2, r3
 8005f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f40:	e001      	b.n	8005f46 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f383 8811 	msr	BASEPRI, r3
}
 8005f50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3738      	adds	r7, #56	@ 0x38
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d006      	beq.n	8005f7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f1c3 0307 	rsb	r3, r3, #7
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	e001      	b.n	8005f7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
	}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr

08005f8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b086      	sub	sp, #24
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10d      	bne.n	8005fc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d14d      	bne.n	800604c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 ff83 	bl	8006ec0 <xTaskPriorityDisinherit>
 8005fba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	609a      	str	r2, [r3, #8]
 8005fc2:	e043      	b.n	800604c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d119      	bne.n	8005ffe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6858      	ldr	r0, [r3, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	f003 fbae 	bl	8009736 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	441a      	add	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d32b      	bcc.n	800604c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	605a      	str	r2, [r3, #4]
 8005ffc:	e026      	b.n	800604c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	68d8      	ldr	r0, [r3, #12]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	461a      	mov	r2, r3
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	f003 fb94 	bl	8009736 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	425b      	negs	r3, r3
 8006018:	441a      	add	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d207      	bcs.n	800603a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006032:	425b      	negs	r3, r3
 8006034:	441a      	add	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b02      	cmp	r3, #2
 800603e:	d105      	bne.n	800604c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	3b01      	subs	r3, #1
 800604a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006054:	697b      	ldr	r3, [r7, #20]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d018      	beq.n	80060a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006078:	441a      	add	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	429a      	cmp	r2, r3
 8006088:	d303      	bcc.n	8006092 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68d9      	ldr	r1, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	461a      	mov	r2, r3
 800609c:	6838      	ldr	r0, [r7, #0]
 800609e:	f003 fb4a 	bl	8009736 <memcpy>
	}
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060b2:	f001 fb7b 	bl	80077ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060be:	e011      	b.n	80060e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d012      	beq.n	80060ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3324      	adds	r3, #36	@ 0x24
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fca3 	bl	8006a18 <xTaskRemoveFromEventList>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060d8:	f000 fd7c 	bl	8006bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	3b01      	subs	r3, #1
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	dce9      	bgt.n	80060c0 <prvUnlockQueue+0x16>
 80060ec:	e000      	b.n	80060f0 <prvUnlockQueue+0x46>
					break;
 80060ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	22ff      	movs	r2, #255	@ 0xff
 80060f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80060f8:	f001 fb88 	bl	800780c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060fc:	f001 fb56 	bl	80077ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006106:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006108:	e011      	b.n	800612e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d012      	beq.n	8006138 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3310      	adds	r3, #16
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fc7e 	bl	8006a18 <xTaskRemoveFromEventList>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006122:	f000 fd57 	bl	8006bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006126:	7bbb      	ldrb	r3, [r7, #14]
 8006128:	3b01      	subs	r3, #1
 800612a:	b2db      	uxtb	r3, r3
 800612c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800612e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006132:	2b00      	cmp	r3, #0
 8006134:	dce9      	bgt.n	800610a <prvUnlockQueue+0x60>
 8006136:	e000      	b.n	800613a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006138:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	22ff      	movs	r2, #255	@ 0xff
 800613e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006142:	f001 fb63 	bl	800780c <vPortExitCritical>
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006156:	f001 fb29 	bl	80077ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006162:	2301      	movs	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e001      	b.n	800616c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800616c:	f001 fb4e 	bl	800780c <vPortExitCritical>

	return xReturn;
 8006170:	68fb      	ldr	r3, [r7, #12]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006182:	f001 fb13 	bl	80077ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618e:	429a      	cmp	r2, r3
 8006190:	d102      	bne.n	8006198 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006192:	2301      	movs	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	e001      	b.n	800619c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800619c:	f001 fb36 	bl	800780c <vPortExitCritical>

	return xReturn;
 80061a0:	68fb      	ldr	r3, [r7, #12]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b08e      	sub	sp, #56	@ 0x38
 80061ae:	af04      	add	r7, sp, #16
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <xTaskCreateStatic+0x2c>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	623b      	str	r3, [r7, #32]
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	e7fd      	b.n	80061d2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	61fb      	str	r3, [r7, #28]
}
 80061ee:	bf00      	nop
 80061f0:	bf00      	nop
 80061f2:	e7fd      	b.n	80061f0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061f4:	2354      	movs	r3, #84	@ 0x54
 80061f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b54      	cmp	r3, #84	@ 0x54
 80061fc:	d00b      	beq.n	8006216 <xTaskCreateStatic+0x6c>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	61bb      	str	r3, [r7, #24]
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	e7fd      	b.n	8006212 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006216:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01e      	beq.n	800625c <xTaskCreateStatic+0xb2>
 800621e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01b      	beq.n	800625c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800622c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	2202      	movs	r2, #2
 8006232:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006236:	2300      	movs	r3, #0
 8006238:	9303      	str	r3, [sp, #12]
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	9302      	str	r3, [sp, #8]
 800623e:	f107 0314 	add.w	r3, r7, #20
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f850 	bl	80062f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006254:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006256:	f000 f8d5 	bl	8006404 <prvAddNewTaskToReadyList>
 800625a:	e001      	b.n	8006260 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006260:	697b      	ldr	r3, [r7, #20]
	}
 8006262:	4618      	mov	r0, r3
 8006264:	3728      	adds	r7, #40	@ 0x28
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800626a:	b580      	push	{r7, lr}
 800626c:	b08c      	sub	sp, #48	@ 0x30
 800626e:	af04      	add	r7, sp, #16
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4618      	mov	r0, r3
 8006280:	f001 fb96 	bl	80079b0 <pvPortMalloc>
 8006284:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00e      	beq.n	80062aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800628c:	2054      	movs	r0, #84	@ 0x54
 800628e:	f001 fb8f 	bl	80079b0 <pvPortMalloc>
 8006292:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	631a      	str	r2, [r3, #48]	@ 0x30
 80062a0:	e005      	b.n	80062ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062a2:	6978      	ldr	r0, [r7, #20]
 80062a4:	f001 fc52 	bl	8007b4c <vPortFree>
 80062a8:	e001      	b.n	80062ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d017      	beq.n	80062e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062bc:	88fa      	ldrh	r2, [r7, #6]
 80062be:	2300      	movs	r3, #0
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	9302      	str	r3, [sp, #8]
 80062c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f80e 	bl	80062f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062d8:	69f8      	ldr	r0, [r7, #28]
 80062da:	f000 f893 	bl	8006404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062de:	2301      	movs	r3, #1
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	e002      	b.n	80062ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062e4:	f04f 33ff 	mov.w	r3, #4294967295
 80062e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062ea:	69bb      	ldr	r3, [r7, #24]
	}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800630c:	3b01      	subs	r3, #1
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f023 0307 	bic.w	r3, r3, #7
 800631a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00b      	beq.n	800633e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	617b      	str	r3, [r7, #20]
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	e7fd      	b.n	800633a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01f      	beq.n	8006384 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006344:	2300      	movs	r3, #0
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	e012      	b.n	8006370 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	7819      	ldrb	r1, [r3, #0]
 8006352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	3334      	adds	r3, #52	@ 0x34
 800635a:	460a      	mov	r2, r1
 800635c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d006      	beq.n	8006378 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3301      	adds	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	2b0f      	cmp	r3, #15
 8006374:	d9e9      	bls.n	800634a <prvInitialiseNewTask+0x56>
 8006376:	e000      	b.n	800637a <prvInitialiseNewTask+0x86>
			{
				break;
 8006378:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006382:	e003      	b.n	800638c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800638c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638e:	2b06      	cmp	r3, #6
 8006390:	d901      	bls.n	8006396 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006392:	2306      	movs	r3, #6
 8006394:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800639a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063a0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	2200      	movs	r2, #0
 80063a6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	3304      	adds	r3, #4
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff f892 	bl	80054d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	3318      	adds	r3, #24
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff f88d 	bl	80054d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c4:	f1c3 0207 	rsb	r2, r3, #7
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	2200      	movs	r2, #0
 80063d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	68f9      	ldr	r1, [r7, #12]
 80063e4:	69b8      	ldr	r0, [r7, #24]
 80063e6:	f001 f8ed 	bl	80075c4 <pxPortInitialiseStack>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063fc:	bf00      	nop
 80063fe:	3720      	adds	r7, #32
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800640c:	f001 f9ce 	bl	80077ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006410:	4b2a      	ldr	r3, [pc, #168]	@ (80064bc <prvAddNewTaskToReadyList+0xb8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	4a29      	ldr	r2, [pc, #164]	@ (80064bc <prvAddNewTaskToReadyList+0xb8>)
 8006418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800641a:	4b29      	ldr	r3, [pc, #164]	@ (80064c0 <prvAddNewTaskToReadyList+0xbc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006422:	4a27      	ldr	r2, [pc, #156]	@ (80064c0 <prvAddNewTaskToReadyList+0xbc>)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006428:	4b24      	ldr	r3, [pc, #144]	@ (80064bc <prvAddNewTaskToReadyList+0xb8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d110      	bne.n	8006452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006430:	f000 fbf4 	bl	8006c1c <prvInitialiseTaskLists>
 8006434:	e00d      	b.n	8006452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006436:	4b23      	ldr	r3, [pc, #140]	@ (80064c4 <prvAddNewTaskToReadyList+0xc0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800643e:	4b20      	ldr	r3, [pc, #128]	@ (80064c0 <prvAddNewTaskToReadyList+0xbc>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	429a      	cmp	r2, r3
 800644a:	d802      	bhi.n	8006452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800644c:	4a1c      	ldr	r2, [pc, #112]	@ (80064c0 <prvAddNewTaskToReadyList+0xbc>)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006452:	4b1d      	ldr	r3, [pc, #116]	@ (80064c8 <prvAddNewTaskToReadyList+0xc4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3301      	adds	r3, #1
 8006458:	4a1b      	ldr	r2, [pc, #108]	@ (80064c8 <prvAddNewTaskToReadyList+0xc4>)
 800645a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	2201      	movs	r2, #1
 8006462:	409a      	lsls	r2, r3
 8006464:	4b19      	ldr	r3, [pc, #100]	@ (80064cc <prvAddNewTaskToReadyList+0xc8>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4313      	orrs	r3, r2
 800646a:	4a18      	ldr	r2, [pc, #96]	@ (80064cc <prvAddNewTaskToReadyList+0xc8>)
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4a15      	ldr	r2, [pc, #84]	@ (80064d0 <prvAddNewTaskToReadyList+0xcc>)
 800647c:	441a      	add	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3304      	adds	r3, #4
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f7ff f832 	bl	80054ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800648a:	f001 f9bf 	bl	800780c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800648e:	4b0d      	ldr	r3, [pc, #52]	@ (80064c4 <prvAddNewTaskToReadyList+0xc0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00e      	beq.n	80064b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006496:	4b0a      	ldr	r3, [pc, #40]	@ (80064c0 <prvAddNewTaskToReadyList+0xbc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d207      	bcs.n	80064b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064a4:	4b0b      	ldr	r3, [pc, #44]	@ (80064d4 <prvAddNewTaskToReadyList+0xd0>)
 80064a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	20000758 	.word	0x20000758
 80064c0:	20000658 	.word	0x20000658
 80064c4:	20000764 	.word	0x20000764
 80064c8:	20000774 	.word	0x20000774
 80064cc:	20000760 	.word	0x20000760
 80064d0:	2000065c 	.word	0x2000065c
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ea:	4b14      	ldr	r3, [pc, #80]	@ (800653c <vTaskDelay+0x64>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <vTaskDelay+0x32>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	60bb      	str	r3, [r7, #8]
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop
 8006508:	e7fd      	b.n	8006506 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800650a:	f000 f87d 	bl	8006608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800650e:	2100      	movs	r1, #0
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fff1 	bl	80074f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006516:	f000 f885 	bl	8006624 <xTaskResumeAll>
 800651a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d107      	bne.n	8006532 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006522:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <vTaskDelay+0x68>)
 8006524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000780 	.word	0x20000780
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	@ 0x28
 8006548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006552:	463a      	mov	r2, r7
 8006554:	1d39      	adds	r1, r7, #4
 8006556:	f107 0308 	add.w	r3, r7, #8
 800655a:	4618      	mov	r0, r3
 800655c:	f7fa fdd4 	bl	8001108 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	9202      	str	r2, [sp, #8]
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	2300      	movs	r3, #0
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2300      	movs	r3, #0
 8006570:	460a      	mov	r2, r1
 8006572:	491f      	ldr	r1, [pc, #124]	@ (80065f0 <vTaskStartScheduler+0xac>)
 8006574:	481f      	ldr	r0, [pc, #124]	@ (80065f4 <vTaskStartScheduler+0xb0>)
 8006576:	f7ff fe18 	bl	80061aa <xTaskCreateStatic>
 800657a:	4603      	mov	r3, r0
 800657c:	4a1e      	ldr	r2, [pc, #120]	@ (80065f8 <vTaskStartScheduler+0xb4>)
 800657e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006580:	4b1d      	ldr	r3, [pc, #116]	@ (80065f8 <vTaskStartScheduler+0xb4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e001      	b.n	8006592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d116      	bne.n	80065c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	613b      	str	r3, [r7, #16]
}
 80065aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065ac:	4b13      	ldr	r3, [pc, #76]	@ (80065fc <vTaskStartScheduler+0xb8>)
 80065ae:	f04f 32ff 	mov.w	r2, #4294967295
 80065b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065b4:	4b12      	ldr	r3, [pc, #72]	@ (8006600 <vTaskStartScheduler+0xbc>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065ba:	4b12      	ldr	r3, [pc, #72]	@ (8006604 <vTaskStartScheduler+0xc0>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065c0:	f001 f882 	bl	80076c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065c4:	e00f      	b.n	80065e6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065cc:	d10b      	bne.n	80065e6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	60fb      	str	r3, [r7, #12]
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	e7fd      	b.n	80065e2 <vTaskStartScheduler+0x9e>
}
 80065e6:	bf00      	nop
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	0800c294 	.word	0x0800c294
 80065f4:	08006bed 	.word	0x08006bed
 80065f8:	2000077c 	.word	0x2000077c
 80065fc:	20000778 	.word	0x20000778
 8006600:	20000764 	.word	0x20000764
 8006604:	2000075c 	.word	0x2000075c

08006608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800660c:	4b04      	ldr	r3, [pc, #16]	@ (8006620 <vTaskSuspendAll+0x18>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3301      	adds	r3, #1
 8006612:	4a03      	ldr	r2, [pc, #12]	@ (8006620 <vTaskSuspendAll+0x18>)
 8006614:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006616:	bf00      	nop
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000780 	.word	0x20000780

08006624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006632:	4b42      	ldr	r3, [pc, #264]	@ (800673c <xTaskResumeAll+0x118>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <xTaskResumeAll+0x2e>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	603b      	str	r3, [r7, #0]
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	e7fd      	b.n	800664e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006652:	f001 f8ab 	bl	80077ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006656:	4b39      	ldr	r3, [pc, #228]	@ (800673c <xTaskResumeAll+0x118>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3b01      	subs	r3, #1
 800665c:	4a37      	ldr	r2, [pc, #220]	@ (800673c <xTaskResumeAll+0x118>)
 800665e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006660:	4b36      	ldr	r3, [pc, #216]	@ (800673c <xTaskResumeAll+0x118>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d161      	bne.n	800672c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006668:	4b35      	ldr	r3, [pc, #212]	@ (8006740 <xTaskResumeAll+0x11c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d05d      	beq.n	800672c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006670:	e02e      	b.n	80066d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006672:	4b34      	ldr	r3, [pc, #208]	@ (8006744 <xTaskResumeAll+0x120>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3318      	adds	r3, #24
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe ff90 	bl	80055a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3304      	adds	r3, #4
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe ff8b 	bl	80055a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	2201      	movs	r2, #1
 8006694:	409a      	lsls	r2, r3
 8006696:	4b2c      	ldr	r3, [pc, #176]	@ (8006748 <xTaskResumeAll+0x124>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4313      	orrs	r3, r2
 800669c:	4a2a      	ldr	r2, [pc, #168]	@ (8006748 <xTaskResumeAll+0x124>)
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4a27      	ldr	r2, [pc, #156]	@ (800674c <xTaskResumeAll+0x128>)
 80066ae:	441a      	add	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f7fe ff19 	bl	80054ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c0:	4b23      	ldr	r3, [pc, #140]	@ (8006750 <xTaskResumeAll+0x12c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066ca:	4b22      	ldr	r3, [pc, #136]	@ (8006754 <xTaskResumeAll+0x130>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006744 <xTaskResumeAll+0x120>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1cc      	bne.n	8006672 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066de:	f000 fb3b 	bl	8006d58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006758 <xTaskResumeAll+0x134>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d010      	beq.n	8006710 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066ee:	f000 f857 	bl	80067a0 <xTaskIncrementTick>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066f8:	4b16      	ldr	r3, [pc, #88]	@ (8006754 <xTaskResumeAll+0x130>)
 80066fa:	2201      	movs	r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3b01      	subs	r3, #1
 8006702:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f1      	bne.n	80066ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800670a:	4b13      	ldr	r3, [pc, #76]	@ (8006758 <xTaskResumeAll+0x134>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006710:	4b10      	ldr	r3, [pc, #64]	@ (8006754 <xTaskResumeAll+0x130>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d009      	beq.n	800672c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006718:	2301      	movs	r3, #1
 800671a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800671c:	4b0f      	ldr	r3, [pc, #60]	@ (800675c <xTaskResumeAll+0x138>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800672c:	f001 f86e 	bl	800780c <vPortExitCritical>

	return xAlreadyYielded;
 8006730:	68bb      	ldr	r3, [r7, #8]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000780 	.word	0x20000780
 8006740:	20000758 	.word	0x20000758
 8006744:	20000718 	.word	0x20000718
 8006748:	20000760 	.word	0x20000760
 800674c:	2000065c 	.word	0x2000065c
 8006750:	20000658 	.word	0x20000658
 8006754:	2000076c 	.word	0x2000076c
 8006758:	20000768 	.word	0x20000768
 800675c:	e000ed04 	.word	0xe000ed04

08006760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006766:	4b04      	ldr	r3, [pc, #16]	@ (8006778 <xTaskGetTickCount+0x18>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800676c:	687b      	ldr	r3, [r7, #4]
}
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	2000075c 	.word	0x2000075c

0800677c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006782:	f001 f8d5 	bl	8007930 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006786:	2300      	movs	r3, #0
 8006788:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800678a:	4b04      	ldr	r3, [pc, #16]	@ (800679c <xTaskGetTickCountFromISR+0x20>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006790:	683b      	ldr	r3, [r7, #0]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	2000075c 	.word	0x2000075c

080067a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067aa:	4b4f      	ldr	r3, [pc, #316]	@ (80068e8 <xTaskIncrementTick+0x148>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f040 808f 	bne.w	80068d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067b4:	4b4d      	ldr	r3, [pc, #308]	@ (80068ec <xTaskIncrementTick+0x14c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067bc:	4a4b      	ldr	r2, [pc, #300]	@ (80068ec <xTaskIncrementTick+0x14c>)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d121      	bne.n	800680c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80067c8:	4b49      	ldr	r3, [pc, #292]	@ (80068f0 <xTaskIncrementTick+0x150>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	603b      	str	r3, [r7, #0]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <xTaskIncrementTick+0x46>
 80067ea:	4b41      	ldr	r3, [pc, #260]	@ (80068f0 <xTaskIncrementTick+0x150>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	4b40      	ldr	r3, [pc, #256]	@ (80068f4 <xTaskIncrementTick+0x154>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a3e      	ldr	r2, [pc, #248]	@ (80068f0 <xTaskIncrementTick+0x150>)
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	4a3e      	ldr	r2, [pc, #248]	@ (80068f4 <xTaskIncrementTick+0x154>)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	4b3e      	ldr	r3, [pc, #248]	@ (80068f8 <xTaskIncrementTick+0x158>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	4a3c      	ldr	r2, [pc, #240]	@ (80068f8 <xTaskIncrementTick+0x158>)
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	f000 faa6 	bl	8006d58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800680c:	4b3b      	ldr	r3, [pc, #236]	@ (80068fc <xTaskIncrementTick+0x15c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	429a      	cmp	r2, r3
 8006814:	d348      	bcc.n	80068a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006816:	4b36      	ldr	r3, [pc, #216]	@ (80068f0 <xTaskIncrementTick+0x150>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006820:	4b36      	ldr	r3, [pc, #216]	@ (80068fc <xTaskIncrementTick+0x15c>)
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	601a      	str	r2, [r3, #0]
					break;
 8006828:	e03e      	b.n	80068a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800682a:	4b31      	ldr	r3, [pc, #196]	@ (80068f0 <xTaskIncrementTick+0x150>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	429a      	cmp	r2, r3
 8006840:	d203      	bcs.n	800684a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006842:	4a2e      	ldr	r2, [pc, #184]	@ (80068fc <xTaskIncrementTick+0x15c>)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006848:	e02e      	b.n	80068a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	3304      	adds	r3, #4
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe fea8 	bl	80055a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	3318      	adds	r3, #24
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe fe9f 	bl	80055a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686a:	2201      	movs	r2, #1
 800686c:	409a      	lsls	r2, r3
 800686e:	4b24      	ldr	r3, [pc, #144]	@ (8006900 <xTaskIncrementTick+0x160>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4313      	orrs	r3, r2
 8006874:	4a22      	ldr	r2, [pc, #136]	@ (8006900 <xTaskIncrementTick+0x160>)
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4a1f      	ldr	r2, [pc, #124]	@ (8006904 <xTaskIncrementTick+0x164>)
 8006886:	441a      	add	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	3304      	adds	r3, #4
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f7fe fe2d 	bl	80054ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006898:	4b1b      	ldr	r3, [pc, #108]	@ (8006908 <xTaskIncrementTick+0x168>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689e:	429a      	cmp	r2, r3
 80068a0:	d3b9      	bcc.n	8006816 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80068a2:	2301      	movs	r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068a6:	e7b6      	b.n	8006816 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068a8:	4b17      	ldr	r3, [pc, #92]	@ (8006908 <xTaskIncrementTick+0x168>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ae:	4915      	ldr	r1, [pc, #84]	@ (8006904 <xTaskIncrementTick+0x164>)
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d901      	bls.n	80068c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80068c0:	2301      	movs	r3, #1
 80068c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068c4:	4b11      	ldr	r3, [pc, #68]	@ (800690c <xTaskIncrementTick+0x16c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e004      	b.n	80068dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006910 <xTaskIncrementTick+0x170>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3301      	adds	r3, #1
 80068d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006910 <xTaskIncrementTick+0x170>)
 80068da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068dc:	697b      	ldr	r3, [r7, #20]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000780 	.word	0x20000780
 80068ec:	2000075c 	.word	0x2000075c
 80068f0:	20000710 	.word	0x20000710
 80068f4:	20000714 	.word	0x20000714
 80068f8:	20000770 	.word	0x20000770
 80068fc:	20000778 	.word	0x20000778
 8006900:	20000760 	.word	0x20000760
 8006904:	2000065c 	.word	0x2000065c
 8006908:	20000658 	.word	0x20000658
 800690c:	2000076c 	.word	0x2000076c
 8006910:	20000768 	.word	0x20000768

08006914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800691a:	4b27      	ldr	r3, [pc, #156]	@ (80069b8 <vTaskSwitchContext+0xa4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006922:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <vTaskSwitchContext+0xa8>)
 8006924:	2201      	movs	r2, #1
 8006926:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006928:	e040      	b.n	80069ac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800692a:	4b24      	ldr	r3, [pc, #144]	@ (80069bc <vTaskSwitchContext+0xa8>)
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006930:	4b23      	ldr	r3, [pc, #140]	@ (80069c0 <vTaskSwitchContext+0xac>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	fab3 f383 	clz	r3, r3
 800693c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800693e:	7afb      	ldrb	r3, [r7, #11]
 8006940:	f1c3 031f 	rsb	r3, r3, #31
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	491f      	ldr	r1, [pc, #124]	@ (80069c4 <vTaskSwitchContext+0xb0>)
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4613      	mov	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10b      	bne.n	8006972 <vTaskSwitchContext+0x5e>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	607b      	str	r3, [r7, #4]
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	e7fd      	b.n	800696e <vTaskSwitchContext+0x5a>
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	4613      	mov	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4a11      	ldr	r2, [pc, #68]	@ (80069c4 <vTaskSwitchContext+0xb0>)
 800697e:	4413      	add	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	605a      	str	r2, [r3, #4]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	3308      	adds	r3, #8
 8006994:	429a      	cmp	r2, r3
 8006996:	d104      	bne.n	80069a2 <vTaskSwitchContext+0x8e>
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	4a07      	ldr	r2, [pc, #28]	@ (80069c8 <vTaskSwitchContext+0xb4>)
 80069aa:	6013      	str	r3, [r2, #0]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20000780 	.word	0x20000780
 80069bc:	2000076c 	.word	0x2000076c
 80069c0:	20000760 	.word	0x20000760
 80069c4:	2000065c 	.word	0x2000065c
 80069c8:	20000658 	.word	0x20000658

080069cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10b      	bne.n	80069f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	60fb      	str	r3, [r7, #12]
}
 80069ee:	bf00      	nop
 80069f0:	bf00      	nop
 80069f2:	e7fd      	b.n	80069f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069f4:	4b07      	ldr	r3, [pc, #28]	@ (8006a14 <vTaskPlaceOnEventList+0x48>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3318      	adds	r3, #24
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fe fd99 	bl	8005534 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a02:	2101      	movs	r1, #1
 8006a04:	6838      	ldr	r0, [r7, #0]
 8006a06:	f000 fd77 	bl	80074f8 <prvAddCurrentTaskToDelayedList>
}
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000658 	.word	0x20000658

08006a18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10b      	bne.n	8006a46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	60fb      	str	r3, [r7, #12]
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	e7fd      	b.n	8006a42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	3318      	adds	r3, #24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe fdaa 	bl	80055a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac8 <xTaskRemoveFromEventList+0xb0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11c      	bne.n	8006a92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe fda1 	bl	80055a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a66:	2201      	movs	r2, #1
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	4b18      	ldr	r3, [pc, #96]	@ (8006acc <xTaskRemoveFromEventList+0xb4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	4a16      	ldr	r2, [pc, #88]	@ (8006acc <xTaskRemoveFromEventList+0xb4>)
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4a13      	ldr	r2, [pc, #76]	@ (8006ad0 <xTaskRemoveFromEventList+0xb8>)
 8006a82:	441a      	add	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	3304      	adds	r3, #4
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	f7fe fd2f 	bl	80054ee <vListInsertEnd>
 8006a90:	e005      	b.n	8006a9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	3318      	adds	r3, #24
 8006a96:	4619      	mov	r1, r3
 8006a98:	480e      	ldr	r0, [pc, #56]	@ (8006ad4 <xTaskRemoveFromEventList+0xbc>)
 8006a9a:	f7fe fd28 	bl	80054ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <xTaskRemoveFromEventList+0xc0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d905      	bls.n	8006ab8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8006adc <xTaskRemoveFromEventList+0xc4>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	e001      	b.n	8006abc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006abc:	697b      	ldr	r3, [r7, #20]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000780 	.word	0x20000780
 8006acc:	20000760 	.word	0x20000760
 8006ad0:	2000065c 	.word	0x2000065c
 8006ad4:	20000718 	.word	0x20000718
 8006ad8:	20000658 	.word	0x20000658
 8006adc:	2000076c 	.word	0x2000076c

08006ae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ae8:	4b06      	ldr	r3, [pc, #24]	@ (8006b04 <vTaskInternalSetTimeOutState+0x24>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006af0:	4b05      	ldr	r3, [pc, #20]	@ (8006b08 <vTaskInternalSetTimeOutState+0x28>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	605a      	str	r2, [r3, #4]
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000770 	.word	0x20000770
 8006b08:	2000075c 	.word	0x2000075c

08006b0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	613b      	str	r3, [r7, #16]
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	60fb      	str	r3, [r7, #12]
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b52:	f000 fe2b 	bl	80077ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b56:	4b1d      	ldr	r3, [pc, #116]	@ (8006bcc <xTaskCheckForTimeOut+0xc0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6e:	d102      	bne.n	8006b76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	e023      	b.n	8006bbe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b15      	ldr	r3, [pc, #84]	@ (8006bd0 <xTaskCheckForTimeOut+0xc4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d007      	beq.n	8006b92 <xTaskCheckForTimeOut+0x86>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d302      	bcc.n	8006b92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	e015      	b.n	8006bbe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d20b      	bcs.n	8006bb4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff ff99 	bl	8006ae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	e004      	b.n	8006bbe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bbe:	f000 fe25 	bl	800780c <vPortExitCritical>

	return xReturn;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	2000075c 	.word	0x2000075c
 8006bd0:	20000770 	.word	0x20000770

08006bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bd8:	4b03      	ldr	r3, [pc, #12]	@ (8006be8 <vTaskMissedYield+0x14>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
}
 8006bde:	bf00      	nop
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	2000076c 	.word	0x2000076c

08006bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bf4:	f000 f852 	bl	8006c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bf8:	4b06      	ldr	r3, [pc, #24]	@ (8006c14 <prvIdleTask+0x28>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d9f9      	bls.n	8006bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c00:	4b05      	ldr	r3, [pc, #20]	@ (8006c18 <prvIdleTask+0x2c>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c10:	e7f0      	b.n	8006bf4 <prvIdleTask+0x8>
 8006c12:	bf00      	nop
 8006c14:	2000065c 	.word	0x2000065c
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c22:	2300      	movs	r3, #0
 8006c24:	607b      	str	r3, [r7, #4]
 8006c26:	e00c      	b.n	8006c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4a12      	ldr	r2, [pc, #72]	@ (8006c7c <prvInitialiseTaskLists+0x60>)
 8006c34:	4413      	add	r3, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fc2e 	bl	8005498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	607b      	str	r3, [r7, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b06      	cmp	r3, #6
 8006c46:	d9ef      	bls.n	8006c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c48:	480d      	ldr	r0, [pc, #52]	@ (8006c80 <prvInitialiseTaskLists+0x64>)
 8006c4a:	f7fe fc25 	bl	8005498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c4e:	480d      	ldr	r0, [pc, #52]	@ (8006c84 <prvInitialiseTaskLists+0x68>)
 8006c50:	f7fe fc22 	bl	8005498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c54:	480c      	ldr	r0, [pc, #48]	@ (8006c88 <prvInitialiseTaskLists+0x6c>)
 8006c56:	f7fe fc1f 	bl	8005498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c5a:	480c      	ldr	r0, [pc, #48]	@ (8006c8c <prvInitialiseTaskLists+0x70>)
 8006c5c:	f7fe fc1c 	bl	8005498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c60:	480b      	ldr	r0, [pc, #44]	@ (8006c90 <prvInitialiseTaskLists+0x74>)
 8006c62:	f7fe fc19 	bl	8005498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c66:	4b0b      	ldr	r3, [pc, #44]	@ (8006c94 <prvInitialiseTaskLists+0x78>)
 8006c68:	4a05      	ldr	r2, [pc, #20]	@ (8006c80 <prvInitialiseTaskLists+0x64>)
 8006c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <prvInitialiseTaskLists+0x7c>)
 8006c6e:	4a05      	ldr	r2, [pc, #20]	@ (8006c84 <prvInitialiseTaskLists+0x68>)
 8006c70:	601a      	str	r2, [r3, #0]
}
 8006c72:	bf00      	nop
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	2000065c 	.word	0x2000065c
 8006c80:	200006e8 	.word	0x200006e8
 8006c84:	200006fc 	.word	0x200006fc
 8006c88:	20000718 	.word	0x20000718
 8006c8c:	2000072c 	.word	0x2000072c
 8006c90:	20000744 	.word	0x20000744
 8006c94:	20000710 	.word	0x20000710
 8006c98:	20000714 	.word	0x20000714

08006c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ca2:	e019      	b.n	8006cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ca4:	f000 fd82 	bl	80077ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca8:	4b10      	ldr	r3, [pc, #64]	@ (8006cec <prvCheckTasksWaitingTermination+0x50>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe fc75 	bl	80055a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cba:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf0 <prvCheckTasksWaitingTermination+0x54>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8006cf0 <prvCheckTasksWaitingTermination+0x54>)
 8006cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf4 <prvCheckTasksWaitingTermination+0x58>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	4a0a      	ldr	r2, [pc, #40]	@ (8006cf4 <prvCheckTasksWaitingTermination+0x58>)
 8006ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cce:	f000 fd9d 	bl	800780c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f810 	bl	8006cf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cd8:	4b06      	ldr	r3, [pc, #24]	@ (8006cf4 <prvCheckTasksWaitingTermination+0x58>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e1      	bne.n	8006ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	2000072c 	.word	0x2000072c
 8006cf0:	20000758 	.word	0x20000758
 8006cf4:	20000740 	.word	0x20000740

08006cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 ff1c 	bl	8007b4c <vPortFree>
				vPortFree( pxTCB );
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 ff19 	bl	8007b4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d1a:	e019      	b.n	8006d50 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d103      	bne.n	8006d2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 ff10 	bl	8007b4c <vPortFree>
	}
 8006d2c:	e010      	b.n	8006d50 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d00b      	beq.n	8006d50 <prvDeleteTCB+0x58>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	60fb      	str	r3, [r7, #12]
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	e7fd      	b.n	8006d4c <prvDeleteTCB+0x54>
	}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d90 <prvResetNextTaskUnblockTime+0x38>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d68:	4b0a      	ldr	r3, [pc, #40]	@ (8006d94 <prvResetNextTaskUnblockTime+0x3c>)
 8006d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d70:	e008      	b.n	8006d84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d72:	4b07      	ldr	r3, [pc, #28]	@ (8006d90 <prvResetNextTaskUnblockTime+0x38>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4a04      	ldr	r2, [pc, #16]	@ (8006d94 <prvResetNextTaskUnblockTime+0x3c>)
 8006d82:	6013      	str	r3, [r2, #0]
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20000710 	.word	0x20000710
 8006d94:	20000778 	.word	0x20000778

08006d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dcc <xTaskGetSchedulerState+0x34>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006da6:	2301      	movs	r3, #1
 8006da8:	607b      	str	r3, [r7, #4]
 8006daa:	e008      	b.n	8006dbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dac:	4b08      	ldr	r3, [pc, #32]	@ (8006dd0 <xTaskGetSchedulerState+0x38>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006db4:	2302      	movs	r3, #2
 8006db6:	607b      	str	r3, [r7, #4]
 8006db8:	e001      	b.n	8006dbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dbe:	687b      	ldr	r3, [r7, #4]
	}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20000764 	.word	0x20000764
 8006dd0:	20000780 	.word	0x20000780

08006dd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d05e      	beq.n	8006ea8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dee:	4b31      	ldr	r3, [pc, #196]	@ (8006eb4 <xTaskPriorityInherit+0xe0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d24e      	bcs.n	8006e96 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	db06      	blt.n	8006e0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e00:	4b2c      	ldr	r3, [pc, #176]	@ (8006eb4 <xTaskPriorityInherit+0xe0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e06:	f1c3 0207 	rsb	r2, r3, #7
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6959      	ldr	r1, [r3, #20]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4a26      	ldr	r2, [pc, #152]	@ (8006eb8 <xTaskPriorityInherit+0xe4>)
 8006e20:	4413      	add	r3, r2
 8006e22:	4299      	cmp	r1, r3
 8006e24:	d12f      	bne.n	8006e86 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fe fbba 	bl	80055a4 <uxListRemove>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e40:	43da      	mvns	r2, r3
 8006e42:	4b1e      	ldr	r3, [pc, #120]	@ (8006ebc <xTaskPriorityInherit+0xe8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4013      	ands	r3, r2
 8006e48:	4a1c      	ldr	r2, [pc, #112]	@ (8006ebc <xTaskPriorityInherit+0xe8>)
 8006e4a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e4c:	4b19      	ldr	r3, [pc, #100]	@ (8006eb4 <xTaskPriorityInherit+0xe0>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	409a      	lsls	r2, r3
 8006e5e:	4b17      	ldr	r3, [pc, #92]	@ (8006ebc <xTaskPriorityInherit+0xe8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	4a15      	ldr	r2, [pc, #84]	@ (8006ebc <xTaskPriorityInherit+0xe8>)
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4a10      	ldr	r2, [pc, #64]	@ (8006eb8 <xTaskPriorityInherit+0xe4>)
 8006e76:	441a      	add	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	f7fe fb35 	bl	80054ee <vListInsertEnd>
 8006e84:	e004      	b.n	8006e90 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e86:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb4 <xTaskPriorityInherit+0xe0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e90:	2301      	movs	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	e008      	b.n	8006ea8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e9a:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <xTaskPriorityInherit+0xe0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d201      	bcs.n	8006ea8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
	}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000658 	.word	0x20000658
 8006eb8:	2000065c 	.word	0x2000065c
 8006ebc:	20000760 	.word	0x20000760

08006ec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d070      	beq.n	8006fb8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8006fc4 <xTaskPriorityDisinherit+0x104>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d00b      	beq.n	8006ef8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	60fb      	str	r3, [r7, #12]
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	e7fd      	b.n	8006ef4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60bb      	str	r3, [r7, #8]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f1c:	1e5a      	subs	r2, r3, #1
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d044      	beq.n	8006fb8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d140      	bne.n	8006fb8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fb32 	bl	80055a4 <uxListRemove>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d115      	bne.n	8006f72 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4a:	491f      	ldr	r1, [pc, #124]	@ (8006fc8 <xTaskPriorityDisinherit+0x108>)
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <xTaskPriorityDisinherit+0xb2>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f60:	2201      	movs	r2, #1
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	43da      	mvns	r2, r3
 8006f68:	4b18      	ldr	r3, [pc, #96]	@ (8006fcc <xTaskPriorityDisinherit+0x10c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	4a17      	ldr	r2, [pc, #92]	@ (8006fcc <xTaskPriorityDisinherit+0x10c>)
 8006f70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	f1c3 0207 	rsb	r2, r3, #7
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	409a      	lsls	r2, r3
 8006f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006fcc <xTaskPriorityDisinherit+0x10c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	4a0d      	ldr	r2, [pc, #52]	@ (8006fcc <xTaskPriorityDisinherit+0x10c>)
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4a08      	ldr	r2, [pc, #32]	@ (8006fc8 <xTaskPriorityDisinherit+0x108>)
 8006fa6:	441a      	add	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f7fe fa9d 	bl	80054ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fb8:	697b      	ldr	r3, [r7, #20]
	}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000658 	.word	0x20000658
 8006fc8:	2000065c 	.word	0x2000065c
 8006fcc:	20000760 	.word	0x20000760

08006fd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d079      	beq.n	80070dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10b      	bne.n	8007008 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d902      	bls.n	8007018 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	e002      	b.n	800701e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	429a      	cmp	r2, r3
 8007026:	d059      	beq.n	80070dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	429a      	cmp	r2, r3
 8007030:	d154      	bne.n	80070dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007032:	4b2c      	ldr	r3, [pc, #176]	@ (80070e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	429a      	cmp	r2, r3
 800703a:	d10b      	bne.n	8007054 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	60bb      	str	r3, [r7, #8]
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	e7fd      	b.n	8007050 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	2b00      	cmp	r3, #0
 8007066:	db04      	blt.n	8007072 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f1c3 0207 	rsb	r2, r3, #7
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	6959      	ldr	r1, [r3, #20]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4a19      	ldr	r2, [pc, #100]	@ (80070e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007082:	4413      	add	r3, r2
 8007084:	4299      	cmp	r1, r3
 8007086:	d129      	bne.n	80070dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fa89 	bl	80055a4 <uxListRemove>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	2201      	movs	r2, #1
 800709e:	fa02 f303 	lsl.w	r3, r2, r3
 80070a2:	43da      	mvns	r2, r3
 80070a4:	4b11      	ldr	r3, [pc, #68]	@ (80070ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4013      	ands	r3, r2
 80070aa:	4a10      	ldr	r2, [pc, #64]	@ (80070ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80070ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	2201      	movs	r2, #1
 80070b4:	409a      	lsls	r2, r3
 80070b6:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	4a0b      	ldr	r2, [pc, #44]	@ (80070ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4a06      	ldr	r2, [pc, #24]	@ (80070e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80070ce:	441a      	add	r2, r3
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f7fe fa09 	bl	80054ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070dc:	bf00      	nop
 80070de:	3720      	adds	r7, #32
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20000658 	.word	0x20000658
 80070e8:	2000065c 	.word	0x2000065c
 80070ec:	20000760 	.word	0x20000760

080070f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80070f4:	4b07      	ldr	r3, [pc, #28]	@ (8007114 <pvTaskIncrementMutexHeldCount+0x24>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80070fc:	4b05      	ldr	r3, [pc, #20]	@ (8007114 <pvTaskIncrementMutexHeldCount+0x24>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007102:	3201      	adds	r2, #1
 8007104:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007106:	4b03      	ldr	r3, [pc, #12]	@ (8007114 <pvTaskIncrementMutexHeldCount+0x24>)
 8007108:	681b      	ldr	r3, [r3, #0]
	}
 800710a:	4618      	mov	r0, r3
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	20000658 	.word	0x20000658

08007118 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007126:	f000 fb41 	bl	80077ac <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800712a:	4b26      	ldr	r3, [pc, #152]	@ (80071c4 <xTaskNotifyWait+0xac>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d01a      	beq.n	800716e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007138:	4b22      	ldr	r3, [pc, #136]	@ (80071c4 <xTaskNotifyWait+0xac>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	43d2      	mvns	r2, r2
 8007142:	400a      	ands	r2, r1
 8007144:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007146:	4b1f      	ldr	r3, [pc, #124]	@ (80071c4 <xTaskNotifyWait+0xac>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00b      	beq.n	800716e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007156:	2101      	movs	r1, #1
 8007158:	6838      	ldr	r0, [r7, #0]
 800715a:	f000 f9cd 	bl	80074f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800715e:	4b1a      	ldr	r3, [pc, #104]	@ (80071c8 <xTaskNotifyWait+0xb0>)
 8007160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800716e:	f000 fb4d 	bl	800780c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007172:	f000 fb1b 	bl	80077ac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d004      	beq.n	8007186 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800717c:	4b11      	ldr	r3, [pc, #68]	@ (80071c4 <xTaskNotifyWait+0xac>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007186:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <xTaskNotifyWait+0xac>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d002      	beq.n	800719a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e008      	b.n	80071ac <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800719a:	4b0a      	ldr	r3, [pc, #40]	@ (80071c4 <xTaskNotifyWait+0xac>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	43d2      	mvns	r2, r2
 80071a4:	400a      	ands	r2, r1
 80071a6:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 80071a8:	2301      	movs	r3, #1
 80071aa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071ac:	4b05      	ldr	r3, [pc, #20]	@ (80071c4 <xTaskNotifyWait+0xac>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 80071b6:	f000 fb29 	bl	800780c <vPortExitCritical>

		return xReturn;
 80071ba:	697b      	ldr	r3, [r7, #20]
	}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20000658 	.word	0x20000658
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	@ 0x28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	4613      	mov	r3, r2
 80071da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80071dc:	2301      	movs	r3, #1
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <xTaskGenericNotify+0x32>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	61bb      	str	r3, [r7, #24]
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	e7fd      	b.n	80071fa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007202:	f000 fad3 	bl	80077ac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800721a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	2b04      	cmp	r3, #4
 8007228:	d827      	bhi.n	800727a <xTaskGenericNotify+0xae>
 800722a:	a201      	add	r2, pc, #4	@ (adr r2, 8007230 <xTaskGenericNotify+0x64>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	0800729d 	.word	0x0800729d
 8007234:	08007245 	.word	0x08007245
 8007238:	08007253 	.word	0x08007253
 800723c:	0800725f 	.word	0x0800725f
 8007240:	08007267 	.word	0x08007267
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	431a      	orrs	r2, r3
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007250:	e027      	b.n	80072a2 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800725c:	e021      	b.n	80072a2 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007264:	e01d      	b.n	80072a2 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007266:	7ffb      	ldrb	r3, [r7, #31]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d003      	beq.n	8007274 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007272:	e016      	b.n	80072a2 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8007274:	2300      	movs	r3, #0
 8007276:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007278:	e013      	b.n	80072a2 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007282:	d00d      	beq.n	80072a0 <xTaskGenericNotify+0xd4>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	617b      	str	r3, [r7, #20]
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	e7fd      	b.n	8007298 <xTaskGenericNotify+0xcc>
					break;
 800729c:	bf00      	nop
 800729e:	e000      	b.n	80072a2 <xTaskGenericNotify+0xd6>

					break;
 80072a0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80072a2:	7ffb      	ldrb	r3, [r7, #31]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d13a      	bne.n	800731e <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	3304      	adds	r3, #4
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe f979 	bl	80055a4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b6:	2201      	movs	r2, #1
 80072b8:	409a      	lsls	r2, r3
 80072ba:	4b1c      	ldr	r3, [pc, #112]	@ (800732c <xTaskGenericNotify+0x160>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4313      	orrs	r3, r2
 80072c0:	4a1a      	ldr	r2, [pc, #104]	@ (800732c <xTaskGenericNotify+0x160>)
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4a17      	ldr	r2, [pc, #92]	@ (8007330 <xTaskGenericNotify+0x164>)
 80072d2:	441a      	add	r2, r3
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fe f907 	bl	80054ee <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00b      	beq.n	8007300 <xTaskGenericNotify+0x134>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	613b      	str	r3, [r7, #16]
}
 80072fa:	bf00      	nop
 80072fc:	bf00      	nop
 80072fe:	e7fd      	b.n	80072fc <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007304:	4b0b      	ldr	r3, [pc, #44]	@ (8007334 <xTaskGenericNotify+0x168>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	429a      	cmp	r2, r3
 800730c:	d907      	bls.n	800731e <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800730e:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <xTaskGenericNotify+0x16c>)
 8007310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800731e:	f000 fa75 	bl	800780c <vPortExitCritical>

		return xReturn;
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007324:	4618      	mov	r0, r3
 8007326:	3728      	adds	r7, #40	@ 0x28
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20000760 	.word	0x20000760
 8007330:	2000065c 	.word	0x2000065c
 8007334:	20000658 	.word	0x20000658
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08e      	sub	sp, #56	@ 0x38
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	4613      	mov	r3, r2
 800734a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800734c:	2301      	movs	r3, #1
 800734e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10b      	bne.n	800736e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	e7fd      	b.n	800736a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800736e:	f000 fadf 	bl	8007930 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007376:	f3ef 8211 	mrs	r2, BASEPRI
 800737a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	623a      	str	r2, [r7, #32]
 800738c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800738e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007390:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80073a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	2202      	movs	r2, #2
 80073ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d829      	bhi.n	800740c <xTaskGenericNotifyFromISR+0xd0>
 80073b8:	a201      	add	r2, pc, #4	@ (adr r2, 80073c0 <xTaskGenericNotifyFromISR+0x84>)
 80073ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073be:	bf00      	nop
 80073c0:	0800742f 	.word	0x0800742f
 80073c4:	080073d5 	.word	0x080073d5
 80073c8:	080073e3 	.word	0x080073e3
 80073cc:	080073ef 	.word	0x080073ef
 80073d0:	080073f7 	.word	0x080073f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	431a      	orrs	r2, r3
 80073dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073de:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80073e0:	e028      	b.n	8007434 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80073e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ea:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80073ec:	e022      	b.n	8007434 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80073ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80073f4:	e01e      	b.n	8007434 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80073f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d003      	beq.n	8007406 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007404:	e016      	b.n	8007434 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8007406:	2300      	movs	r3, #0
 8007408:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800740a:	e013      	b.n	8007434 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800740c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007414:	d00d      	beq.n	8007432 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	61bb      	str	r3, [r7, #24]
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	e7fd      	b.n	800742a <xTaskGenericNotifyFromISR+0xee>
					break;
 800742e:	bf00      	nop
 8007430:	e000      	b.n	8007434 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8007432:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007434:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007438:	2b01      	cmp	r3, #1
 800743a:	d146      	bne.n	80074ca <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	617b      	str	r3, [r7, #20]
}
 8007456:	bf00      	nop
 8007458:	bf00      	nop
 800745a:	e7fd      	b.n	8007458 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800745c:	4b20      	ldr	r3, [pc, #128]	@ (80074e0 <xTaskGenericNotifyFromISR+0x1a4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d11c      	bne.n	800749e <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	3304      	adds	r3, #4
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe f89b 	bl	80055a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	2201      	movs	r2, #1
 8007474:	409a      	lsls	r2, r3
 8007476:	4b1b      	ldr	r3, [pc, #108]	@ (80074e4 <xTaskGenericNotifyFromISR+0x1a8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4313      	orrs	r3, r2
 800747c:	4a19      	ldr	r2, [pc, #100]	@ (80074e4 <xTaskGenericNotifyFromISR+0x1a8>)
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4a16      	ldr	r2, [pc, #88]	@ (80074e8 <xTaskGenericNotifyFromISR+0x1ac>)
 800748e:	441a      	add	r2, r3
 8007490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007492:	3304      	adds	r3, #4
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f7fe f829 	bl	80054ee <vListInsertEnd>
 800749c:	e005      	b.n	80074aa <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	3318      	adds	r3, #24
 80074a2:	4619      	mov	r1, r3
 80074a4:	4811      	ldr	r0, [pc, #68]	@ (80074ec <xTaskGenericNotifyFromISR+0x1b0>)
 80074a6:	f7fe f822 	bl	80054ee <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ae:	4b10      	ldr	r3, [pc, #64]	@ (80074f0 <xTaskGenericNotifyFromISR+0x1b4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d908      	bls.n	80074ca <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80074b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80074be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c0:	2201      	movs	r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80074c4:	4b0b      	ldr	r3, [pc, #44]	@ (80074f4 <xTaskGenericNotifyFromISR+0x1b8>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f383 8811 	msr	BASEPRI, r3
}
 80074d4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80074d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80074d8:	4618      	mov	r0, r3
 80074da:	3738      	adds	r7, #56	@ 0x38
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000780 	.word	0x20000780
 80074e4:	20000760 	.word	0x20000760
 80074e8:	2000065c 	.word	0x2000065c
 80074ec:	20000718 	.word	0x20000718
 80074f0:	20000658 	.word	0x20000658
 80074f4:	2000076c 	.word	0x2000076c

080074f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007502:	4b29      	ldr	r3, [pc, #164]	@ (80075a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007508:	4b28      	ldr	r3, [pc, #160]	@ (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3304      	adds	r3, #4
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe f848 	bl	80055a4 <uxListRemove>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800751a:	4b24      	ldr	r3, [pc, #144]	@ (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	2201      	movs	r2, #1
 8007522:	fa02 f303 	lsl.w	r3, r2, r3
 8007526:	43da      	mvns	r2, r3
 8007528:	4b21      	ldr	r3, [pc, #132]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4013      	ands	r3, r2
 800752e:	4a20      	ldr	r2, [pc, #128]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007530:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d10a      	bne.n	8007550 <prvAddCurrentTaskToDelayedList+0x58>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007540:	4b1a      	ldr	r3, [pc, #104]	@ (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3304      	adds	r3, #4
 8007546:	4619      	mov	r1, r3
 8007548:	481a      	ldr	r0, [pc, #104]	@ (80075b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800754a:	f7fd ffd0 	bl	80054ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800754e:	e026      	b.n	800759e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4413      	add	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007558:	4b14      	ldr	r3, [pc, #80]	@ (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	429a      	cmp	r2, r3
 8007566:	d209      	bcs.n	800757c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007568:	4b13      	ldr	r3, [pc, #76]	@ (80075b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	4b0f      	ldr	r3, [pc, #60]	@ (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3304      	adds	r3, #4
 8007572:	4619      	mov	r1, r3
 8007574:	4610      	mov	r0, r2
 8007576:	f7fd ffdd 	bl	8005534 <vListInsert>
}
 800757a:	e010      	b.n	800759e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800757c:	4b0f      	ldr	r3, [pc, #60]	@ (80075bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	4b0a      	ldr	r3, [pc, #40]	@ (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3304      	adds	r3, #4
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f7fd ffd3 	bl	8005534 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800758e:	4b0c      	ldr	r3, [pc, #48]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	429a      	cmp	r2, r3
 8007596:	d202      	bcs.n	800759e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007598:	4a09      	ldr	r2, [pc, #36]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6013      	str	r3, [r2, #0]
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	2000075c 	.word	0x2000075c
 80075ac:	20000658 	.word	0x20000658
 80075b0:	20000760 	.word	0x20000760
 80075b4:	20000744 	.word	0x20000744
 80075b8:	20000714 	.word	0x20000714
 80075bc:	20000710 	.word	0x20000710
 80075c0:	20000778 	.word	0x20000778

080075c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3b04      	subs	r3, #4
 80075d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80075dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f023 0201 	bic.w	r2, r3, #1
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3b04      	subs	r3, #4
 80075f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075f4:	4a08      	ldr	r2, [pc, #32]	@ (8007618 <pxPortInitialiseStack+0x54>)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3b14      	subs	r3, #20
 80075fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3b20      	subs	r3, #32
 800760a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800760c:	68fb      	ldr	r3, [r7, #12]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr
 8007618:	0800761d 	.word	0x0800761d

0800761c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007622:	2300      	movs	r3, #0
 8007624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007626:	4b12      	ldr	r3, [pc, #72]	@ (8007670 <prvTaskExitError+0x54>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d00b      	beq.n	8007648 <prvTaskExitError+0x2c>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <prvTaskExitError+0x28>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	60bb      	str	r3, [r7, #8]
}
 800765a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800765c:	bf00      	nop
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0fc      	beq.n	800765e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr
 8007670:	2000000c 	.word	0x2000000c
	...

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007680:	4b07      	ldr	r3, [pc, #28]	@ (80076a0 <pxCurrentTCBConst2>)
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800768a:	f380 8809 	msr	PSP, r0
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	f04e 0e0d 	orr.w	lr, lr, #13
 800769e:	4770      	bx	lr

080076a0 <pxCurrentTCBConst2>:
 80076a0:	20000658 	.word	0x20000658
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80076a8:	4806      	ldr	r0, [pc, #24]	@ (80076c4 <prvPortStartFirstTask+0x1c>)
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f380 8808 	msr	MSP, r0
 80076b2:	b662      	cpsie	i
 80076b4:	b661      	cpsie	f
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	df00      	svc	0
 80076c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076c2:	bf00      	nop
 80076c4:	e000ed08 	.word	0xe000ed08

080076c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076ce:	4b32      	ldr	r3, [pc, #200]	@ (8007798 <xPortStartScheduler+0xd0>)
 80076d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	22ff      	movs	r2, #255	@ 0xff
 80076de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	4b2a      	ldr	r3, [pc, #168]	@ (800779c <xPortStartScheduler+0xd4>)
 80076f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076f6:	4b2a      	ldr	r3, [pc, #168]	@ (80077a0 <xPortStartScheduler+0xd8>)
 80076f8:	2207      	movs	r2, #7
 80076fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076fc:	e009      	b.n	8007712 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80076fe:	4b28      	ldr	r3, [pc, #160]	@ (80077a0 <xPortStartScheduler+0xd8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3b01      	subs	r3, #1
 8007704:	4a26      	ldr	r2, [pc, #152]	@ (80077a0 <xPortStartScheduler+0xd8>)
 8007706:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	b2db      	uxtb	r3, r3
 8007710:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800771a:	2b80      	cmp	r3, #128	@ 0x80
 800771c:	d0ef      	beq.n	80076fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800771e:	4b20      	ldr	r3, [pc, #128]	@ (80077a0 <xPortStartScheduler+0xd8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f1c3 0307 	rsb	r3, r3, #7
 8007726:	2b04      	cmp	r3, #4
 8007728:	d00b      	beq.n	8007742 <xPortStartScheduler+0x7a>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	60bb      	str	r3, [r7, #8]
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	e7fd      	b.n	800773e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007742:	4b17      	ldr	r3, [pc, #92]	@ (80077a0 <xPortStartScheduler+0xd8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	4a15      	ldr	r2, [pc, #84]	@ (80077a0 <xPortStartScheduler+0xd8>)
 800774a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800774c:	4b14      	ldr	r3, [pc, #80]	@ (80077a0 <xPortStartScheduler+0xd8>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007754:	4a12      	ldr	r2, [pc, #72]	@ (80077a0 <xPortStartScheduler+0xd8>)
 8007756:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	b2da      	uxtb	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007760:	4b10      	ldr	r3, [pc, #64]	@ (80077a4 <xPortStartScheduler+0xdc>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a0f      	ldr	r2, [pc, #60]	@ (80077a4 <xPortStartScheduler+0xdc>)
 8007766:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800776a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800776c:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <xPortStartScheduler+0xdc>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a0c      	ldr	r2, [pc, #48]	@ (80077a4 <xPortStartScheduler+0xdc>)
 8007772:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007776:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007778:	f000 f8b8 	bl	80078ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800777c:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <xPortStartScheduler+0xe0>)
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007782:	f7ff ff91 	bl	80076a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007786:	f7ff f8c5 	bl	8006914 <vTaskSwitchContext>
	prvTaskExitError();
 800778a:	f7ff ff47 	bl	800761c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	e000e400 	.word	0xe000e400
 800779c:	20000784 	.word	0x20000784
 80077a0:	20000788 	.word	0x20000788
 80077a4:	e000ed20 	.word	0xe000ed20
 80077a8:	2000000c 	.word	0x2000000c

080077ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	607b      	str	r3, [r7, #4]
}
 80077c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007804 <vPortEnterCritical+0x58>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007804 <vPortEnterCritical+0x58>)
 80077ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <vPortEnterCritical+0x58>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d110      	bne.n	80077fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007808 <vPortEnterCritical+0x5c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <vPortEnterCritical+0x4e>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	603b      	str	r3, [r7, #0]
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <vPortEnterCritical+0x4a>
	}
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr
 8007804:	2000000c 	.word	0x2000000c
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007812:	4b12      	ldr	r3, [pc, #72]	@ (800785c <vPortExitCritical+0x50>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <vPortExitCritical+0x26>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	607b      	str	r3, [r7, #4]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007832:	4b0a      	ldr	r3, [pc, #40]	@ (800785c <vPortExitCritical+0x50>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3b01      	subs	r3, #1
 8007838:	4a08      	ldr	r2, [pc, #32]	@ (800785c <vPortExitCritical+0x50>)
 800783a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800783c:	4b07      	ldr	r3, [pc, #28]	@ (800785c <vPortExitCritical+0x50>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d105      	bne.n	8007850 <vPortExitCritical+0x44>
 8007844:	2300      	movs	r3, #0
 8007846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f383 8811 	msr	BASEPRI, r3
}
 800784e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	2000000c 	.word	0x2000000c

08007860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007860:	f3ef 8009 	mrs	r0, PSP
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	4b0d      	ldr	r3, [pc, #52]	@ (80078a0 <pxCurrentTCBConst>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007870:	6010      	str	r0, [r2, #0]
 8007872:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007876:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800787a:	f380 8811 	msr	BASEPRI, r0
 800787e:	f7ff f849 	bl	8006914 <vTaskSwitchContext>
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8811 	msr	BASEPRI, r0
 800788a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800788e:	6819      	ldr	r1, [r3, #0]
 8007890:	6808      	ldr	r0, [r1, #0]
 8007892:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007896:	f380 8809 	msr	PSP, r0
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	4770      	bx	lr

080078a0 <pxCurrentTCBConst>:
 80078a0:	20000658 	.word	0x20000658
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	607b      	str	r3, [r7, #4]
}
 80078c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078c2:	f7fe ff6d 	bl	80067a0 <xTaskIncrementTick>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078cc:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <xPortSysTickHandler+0x40>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	f383 8811 	msr	BASEPRI, r3
}
 80078de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078f0:	4b0a      	ldr	r3, [pc, #40]	@ (800791c <vPortSetupTimerInterrupt+0x30>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007920 <vPortSetupTimerInterrupt+0x34>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078fc:	4b09      	ldr	r3, [pc, #36]	@ (8007924 <vPortSetupTimerInterrupt+0x38>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a09      	ldr	r2, [pc, #36]	@ (8007928 <vPortSetupTimerInterrupt+0x3c>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	4a08      	ldr	r2, [pc, #32]	@ (800792c <vPortSetupTimerInterrupt+0x40>)
 800790a:	3b01      	subs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800790e:	4b03      	ldr	r3, [pc, #12]	@ (800791c <vPortSetupTimerInterrupt+0x30>)
 8007910:	2207      	movs	r2, #7
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr
 800791c:	e000e010 	.word	0xe000e010
 8007920:	e000e018 	.word	0xe000e018
 8007924:	20000000 	.word	0x20000000
 8007928:	10624dd3 	.word	0x10624dd3
 800792c:	e000e014 	.word	0xe000e014

08007930 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007936:	f3ef 8305 	mrs	r3, IPSR
 800793a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b0f      	cmp	r3, #15
 8007940:	d915      	bls.n	800796e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007942:	4a17      	ldr	r2, [pc, #92]	@ (80079a0 <vPortValidateInterruptPriority+0x70>)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800794c:	4b15      	ldr	r3, [pc, #84]	@ (80079a4 <vPortValidateInterruptPriority+0x74>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	7afa      	ldrb	r2, [r7, #11]
 8007952:	429a      	cmp	r2, r3
 8007954:	d20b      	bcs.n	800796e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	607b      	str	r3, [r7, #4]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800796e:	4b0e      	ldr	r3, [pc, #56]	@ (80079a8 <vPortValidateInterruptPriority+0x78>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007976:	4b0d      	ldr	r3, [pc, #52]	@ (80079ac <vPortValidateInterruptPriority+0x7c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d90b      	bls.n	8007996 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	603b      	str	r3, [r7, #0]
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	e7fd      	b.n	8007992 <vPortValidateInterruptPriority+0x62>
	}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr
 80079a0:	e000e3f0 	.word	0xe000e3f0
 80079a4:	20000784 	.word	0x20000784
 80079a8:	e000ed0c 	.word	0xe000ed0c
 80079ac:	20000788 	.word	0x20000788

080079b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	@ 0x28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079bc:	f7fe fe24 	bl	8006608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079c0:	4b5c      	ldr	r3, [pc, #368]	@ (8007b34 <pvPortMalloc+0x184>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079c8:	f000 f924 	bl	8007c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079cc:	4b5a      	ldr	r3, [pc, #360]	@ (8007b38 <pvPortMalloc+0x188>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f040 8095 	bne.w	8007b04 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01e      	beq.n	8007a1e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80079e0:	2208      	movs	r2, #8
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4413      	add	r3, r2
 80079e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d015      	beq.n	8007a1e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f023 0307 	bic.w	r3, r3, #7
 80079f8:	3308      	adds	r3, #8
 80079fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00b      	beq.n	8007a1e <pvPortMalloc+0x6e>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	617b      	str	r3, [r7, #20]
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	e7fd      	b.n	8007a1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d06f      	beq.n	8007b04 <pvPortMalloc+0x154>
 8007a24:	4b45      	ldr	r3, [pc, #276]	@ (8007b3c <pvPortMalloc+0x18c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d86a      	bhi.n	8007b04 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a2e:	4b44      	ldr	r3, [pc, #272]	@ (8007b40 <pvPortMalloc+0x190>)
 8007a30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a32:	4b43      	ldr	r3, [pc, #268]	@ (8007b40 <pvPortMalloc+0x190>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a38:	e004      	b.n	8007a44 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d903      	bls.n	8007a56 <pvPortMalloc+0xa6>
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1f1      	bne.n	8007a3a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a56:	4b37      	ldr	r3, [pc, #220]	@ (8007b34 <pvPortMalloc+0x184>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d051      	beq.n	8007b04 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2208      	movs	r2, #8
 8007a66:	4413      	add	r3, r2
 8007a68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	1ad2      	subs	r2, r2, r3
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d920      	bls.n	8007ac4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f003 0307 	and.w	r3, r3, #7
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <pvPortMalloc+0xfc>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	613b      	str	r3, [r7, #16]
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007abe:	69b8      	ldr	r0, [r7, #24]
 8007ac0:	f000 f90a 	bl	8007cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b3c <pvPortMalloc+0x18c>)
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	4a1b      	ldr	r2, [pc, #108]	@ (8007b3c <pvPortMalloc+0x18c>)
 8007ad0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8007b3c <pvPortMalloc+0x18c>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8007b44 <pvPortMalloc+0x194>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d203      	bcs.n	8007ae6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ade:	4b17      	ldr	r3, [pc, #92]	@ (8007b3c <pvPortMalloc+0x18c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a18      	ldr	r2, [pc, #96]	@ (8007b44 <pvPortMalloc+0x194>)
 8007ae4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	4b13      	ldr	r3, [pc, #76]	@ (8007b38 <pvPortMalloc+0x188>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	431a      	orrs	r2, r3
 8007af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af6:	2200      	movs	r2, #0
 8007af8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007afa:	4b13      	ldr	r3, [pc, #76]	@ (8007b48 <pvPortMalloc+0x198>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3301      	adds	r3, #1
 8007b00:	4a11      	ldr	r2, [pc, #68]	@ (8007b48 <pvPortMalloc+0x198>)
 8007b02:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b04:	f7fe fd8e 	bl	8006624 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <pvPortMalloc+0x17a>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60fb      	str	r3, [r7, #12]
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	e7fd      	b.n	8007b26 <pvPortMalloc+0x176>
	return pvReturn;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3728      	adds	r7, #40	@ 0x28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20001394 	.word	0x20001394
 8007b38:	200013a8 	.word	0x200013a8
 8007b3c:	20001398 	.word	0x20001398
 8007b40:	2000138c 	.word	0x2000138c
 8007b44:	2000139c 	.word	0x2000139c
 8007b48:	200013a0 	.word	0x200013a0

08007b4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d04f      	beq.n	8007bfe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b5e:	2308      	movs	r3, #8
 8007b60:	425b      	negs	r3, r3
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4413      	add	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	4b25      	ldr	r3, [pc, #148]	@ (8007c08 <vPortFree+0xbc>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4013      	ands	r3, r2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10b      	bne.n	8007b92 <vPortFree+0x46>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	60fb      	str	r3, [r7, #12]
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	e7fd      	b.n	8007b8e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00b      	beq.n	8007bb2 <vPortFree+0x66>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	60bb      	str	r3, [r7, #8]
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	e7fd      	b.n	8007bae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	4b14      	ldr	r3, [pc, #80]	@ (8007c08 <vPortFree+0xbc>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01e      	beq.n	8007bfe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d11a      	bne.n	8007bfe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8007c08 <vPortFree+0xbc>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bd8:	f7fe fd16 	bl	8006608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	4b0a      	ldr	r3, [pc, #40]	@ (8007c0c <vPortFree+0xc0>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4413      	add	r3, r2
 8007be6:	4a09      	ldr	r2, [pc, #36]	@ (8007c0c <vPortFree+0xc0>)
 8007be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bea:	6938      	ldr	r0, [r7, #16]
 8007bec:	f000 f874 	bl	8007cd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007bf0:	4b07      	ldr	r3, [pc, #28]	@ (8007c10 <vPortFree+0xc4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	4a06      	ldr	r2, [pc, #24]	@ (8007c10 <vPortFree+0xc4>)
 8007bf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007bfa:	f7fe fd13 	bl	8006624 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bfe:	bf00      	nop
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	200013a8 	.word	0x200013a8
 8007c0c:	20001398 	.word	0x20001398
 8007c10:	200013a4 	.word	0x200013a4

08007c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c20:	4b27      	ldr	r3, [pc, #156]	@ (8007cc0 <prvHeapInit+0xac>)
 8007c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00c      	beq.n	8007c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3307      	adds	r3, #7
 8007c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0307 	bic.w	r3, r3, #7
 8007c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc0 <prvHeapInit+0xac>)
 8007c44:	4413      	add	r3, r2
 8007c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc4 <prvHeapInit+0xb0>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c52:	4b1c      	ldr	r3, [pc, #112]	@ (8007cc4 <prvHeapInit+0xb0>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c60:	2208      	movs	r2, #8
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0307 	bic.w	r3, r3, #7
 8007c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a15      	ldr	r2, [pc, #84]	@ (8007cc8 <prvHeapInit+0xb4>)
 8007c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c76:	4b14      	ldr	r3, [pc, #80]	@ (8007cc8 <prvHeapInit+0xb4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c7e:	4b12      	ldr	r3, [pc, #72]	@ (8007cc8 <prvHeapInit+0xb4>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c94:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc8 <prvHeapInit+0xb4>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ccc <prvHeapInit+0xb8>)
 8007ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	4a09      	ldr	r2, [pc, #36]	@ (8007cd0 <prvHeapInit+0xbc>)
 8007caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cac:	4b09      	ldr	r3, [pc, #36]	@ (8007cd4 <prvHeapInit+0xc0>)
 8007cae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007cb2:	601a      	str	r2, [r3, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bc80      	pop	{r7}
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	2000078c 	.word	0x2000078c
 8007cc4:	2000138c 	.word	0x2000138c
 8007cc8:	20001394 	.word	0x20001394
 8007ccc:	2000139c 	.word	0x2000139c
 8007cd0:	20001398 	.word	0x20001398
 8007cd4:	200013a8 	.word	0x200013a8

08007cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ce0:	4b27      	ldr	r3, [pc, #156]	@ (8007d80 <prvInsertBlockIntoFreeList+0xa8>)
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	e002      	b.n	8007cec <prvInsertBlockIntoFreeList+0x14>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d8f7      	bhi.n	8007ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	4413      	add	r3, r2
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d108      	bne.n	8007d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	441a      	add	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	441a      	add	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d118      	bne.n	8007d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b14      	ldr	r3, [pc, #80]	@ (8007d84 <prvInsertBlockIntoFreeList+0xac>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d00d      	beq.n	8007d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	441a      	add	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	e008      	b.n	8007d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d56:	4b0b      	ldr	r3, [pc, #44]	@ (8007d84 <prvInsertBlockIntoFreeList+0xac>)
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e003      	b.n	8007d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d002      	beq.n	8007d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d76:	bf00      	nop
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr
 8007d80:	2000138c 	.word	0x2000138c
 8007d84:	20001394 	.word	0x20001394

08007d88 <atof>:
 8007d88:	2100      	movs	r1, #0
 8007d8a:	f000 bdf9 	b.w	8008980 <strtod>

08007d8e <sulp>:
 8007d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d92:	460f      	mov	r7, r1
 8007d94:	4690      	mov	r8, r2
 8007d96:	f003 faf5 	bl	800b384 <__ulp>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	460d      	mov	r5, r1
 8007d9e:	f1b8 0f00 	cmp.w	r8, #0
 8007da2:	d011      	beq.n	8007dc8 <sulp+0x3a>
 8007da4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007da8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dd0b      	ble.n	8007dc8 <sulp+0x3a>
 8007db0:	2400      	movs	r4, #0
 8007db2:	051b      	lsls	r3, r3, #20
 8007db4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007db8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	462b      	mov	r3, r5
 8007dc0:	f7f8 fb8a 	bl	80004d8 <__aeabi_dmul>
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	460d      	mov	r5, r1
 8007dc8:	4620      	mov	r0, r4
 8007dca:	4629      	mov	r1, r5
 8007dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007dd0 <_strtod_l>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	b09f      	sub	sp, #124	@ 0x7c
 8007dd6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007dd8:	2200      	movs	r2, #0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	921a      	str	r2, [sp, #104]	@ 0x68
 8007dde:	f04f 0a00 	mov.w	sl, #0
 8007de2:	f04f 0b00 	mov.w	fp, #0
 8007de6:	460a      	mov	r2, r1
 8007de8:	9005      	str	r0, [sp, #20]
 8007dea:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dec:	7811      	ldrb	r1, [r2, #0]
 8007dee:	292b      	cmp	r1, #43	@ 0x2b
 8007df0:	d048      	beq.n	8007e84 <_strtod_l+0xb4>
 8007df2:	d836      	bhi.n	8007e62 <_strtod_l+0x92>
 8007df4:	290d      	cmp	r1, #13
 8007df6:	d830      	bhi.n	8007e5a <_strtod_l+0x8a>
 8007df8:	2908      	cmp	r1, #8
 8007dfa:	d830      	bhi.n	8007e5e <_strtod_l+0x8e>
 8007dfc:	2900      	cmp	r1, #0
 8007dfe:	d039      	beq.n	8007e74 <_strtod_l+0xa4>
 8007e00:	2200      	movs	r2, #0
 8007e02:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007e06:	782a      	ldrb	r2, [r5, #0]
 8007e08:	2a30      	cmp	r2, #48	@ 0x30
 8007e0a:	f040 80b0 	bne.w	8007f6e <_strtod_l+0x19e>
 8007e0e:	786a      	ldrb	r2, [r5, #1]
 8007e10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e14:	2a58      	cmp	r2, #88	@ 0x58
 8007e16:	d16c      	bne.n	8007ef2 <_strtod_l+0x122>
 8007e18:	9302      	str	r3, [sp, #8]
 8007e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e1c:	4a8f      	ldr	r2, [pc, #572]	@ (800805c <_strtod_l+0x28c>)
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	ab1a      	add	r3, sp, #104	@ 0x68
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	9805      	ldr	r0, [sp, #20]
 8007e26:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007e28:	a919      	add	r1, sp, #100	@ 0x64
 8007e2a:	f002 fba5 	bl	800a578 <__gethex>
 8007e2e:	f010 060f 	ands.w	r6, r0, #15
 8007e32:	4604      	mov	r4, r0
 8007e34:	d005      	beq.n	8007e42 <_strtod_l+0x72>
 8007e36:	2e06      	cmp	r6, #6
 8007e38:	d126      	bne.n	8007e88 <_strtod_l+0xb8>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	3501      	adds	r5, #1
 8007e3e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007e40:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f040 8582 	bne.w	800894e <_strtod_l+0xb7e>
 8007e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e4c:	b1bb      	cbz	r3, 8007e7e <_strtod_l+0xae>
 8007e4e:	4650      	mov	r0, sl
 8007e50:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007e54:	b01f      	add	sp, #124	@ 0x7c
 8007e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5a:	2920      	cmp	r1, #32
 8007e5c:	d1d0      	bne.n	8007e00 <_strtod_l+0x30>
 8007e5e:	3201      	adds	r2, #1
 8007e60:	e7c3      	b.n	8007dea <_strtod_l+0x1a>
 8007e62:	292d      	cmp	r1, #45	@ 0x2d
 8007e64:	d1cc      	bne.n	8007e00 <_strtod_l+0x30>
 8007e66:	2101      	movs	r1, #1
 8007e68:	910e      	str	r1, [sp, #56]	@ 0x38
 8007e6a:	1c51      	adds	r1, r2, #1
 8007e6c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e6e:	7852      	ldrb	r2, [r2, #1]
 8007e70:	2a00      	cmp	r2, #0
 8007e72:	d1c7      	bne.n	8007e04 <_strtod_l+0x34>
 8007e74:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007e76:	9419      	str	r4, [sp, #100]	@ 0x64
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f040 8566 	bne.w	800894a <_strtod_l+0xb7a>
 8007e7e:	4650      	mov	r0, sl
 8007e80:	4659      	mov	r1, fp
 8007e82:	e7e7      	b.n	8007e54 <_strtod_l+0x84>
 8007e84:	2100      	movs	r1, #0
 8007e86:	e7ef      	b.n	8007e68 <_strtod_l+0x98>
 8007e88:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007e8a:	b13a      	cbz	r2, 8007e9c <_strtod_l+0xcc>
 8007e8c:	2135      	movs	r1, #53	@ 0x35
 8007e8e:	a81c      	add	r0, sp, #112	@ 0x70
 8007e90:	f003 fb68 	bl	800b564 <__copybits>
 8007e94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e96:	9805      	ldr	r0, [sp, #20]
 8007e98:	f002 ff48 	bl	800ad2c <_Bfree>
 8007e9c:	3e01      	subs	r6, #1
 8007e9e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007ea0:	2e04      	cmp	r6, #4
 8007ea2:	d806      	bhi.n	8007eb2 <_strtod_l+0xe2>
 8007ea4:	e8df f006 	tbb	[pc, r6]
 8007ea8:	201d0314 	.word	0x201d0314
 8007eac:	14          	.byte	0x14
 8007ead:	00          	.byte	0x00
 8007eae:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007eb2:	05e1      	lsls	r1, r4, #23
 8007eb4:	bf48      	it	mi
 8007eb6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007eba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ebe:	0d1b      	lsrs	r3, r3, #20
 8007ec0:	051b      	lsls	r3, r3, #20
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1bd      	bne.n	8007e42 <_strtod_l+0x72>
 8007ec6:	f001 fbfb 	bl	80096c0 <__errno>
 8007eca:	2322      	movs	r3, #34	@ 0x22
 8007ecc:	6003      	str	r3, [r0, #0]
 8007ece:	e7b8      	b.n	8007e42 <_strtod_l+0x72>
 8007ed0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007ed4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007ed8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007edc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ee0:	e7e7      	b.n	8007eb2 <_strtod_l+0xe2>
 8007ee2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008060 <_strtod_l+0x290>
 8007ee6:	e7e4      	b.n	8007eb2 <_strtod_l+0xe2>
 8007ee8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007eec:	f04f 3aff 	mov.w	sl, #4294967295
 8007ef0:	e7df      	b.n	8007eb2 <_strtod_l+0xe2>
 8007ef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b30      	cmp	r3, #48	@ 0x30
 8007efc:	d0f9      	beq.n	8007ef2 <_strtod_l+0x122>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d09f      	beq.n	8007e42 <_strtod_l+0x72>
 8007f02:	2301      	movs	r3, #1
 8007f04:	2700      	movs	r7, #0
 8007f06:	220a      	movs	r2, #10
 8007f08:	46b9      	mov	r9, r7
 8007f0a:	9308      	str	r3, [sp, #32]
 8007f0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f0e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007f10:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f12:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007f14:	7805      	ldrb	r5, [r0, #0]
 8007f16:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007f1a:	b2d9      	uxtb	r1, r3
 8007f1c:	2909      	cmp	r1, #9
 8007f1e:	d928      	bls.n	8007f72 <_strtod_l+0x1a2>
 8007f20:	2201      	movs	r2, #1
 8007f22:	4950      	ldr	r1, [pc, #320]	@ (8008064 <_strtod_l+0x294>)
 8007f24:	f001 fb5a 	bl	80095dc <strncmp>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d032      	beq.n	8007f92 <_strtod_l+0x1c2>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	462a      	mov	r2, r5
 8007f30:	4603      	mov	r3, r0
 8007f32:	464d      	mov	r5, r9
 8007f34:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f36:	2a65      	cmp	r2, #101	@ 0x65
 8007f38:	d001      	beq.n	8007f3e <_strtod_l+0x16e>
 8007f3a:	2a45      	cmp	r2, #69	@ 0x45
 8007f3c:	d114      	bne.n	8007f68 <_strtod_l+0x198>
 8007f3e:	b91d      	cbnz	r5, 8007f48 <_strtod_l+0x178>
 8007f40:	9a08      	ldr	r2, [sp, #32]
 8007f42:	4302      	orrs	r2, r0
 8007f44:	d096      	beq.n	8007e74 <_strtod_l+0xa4>
 8007f46:	2500      	movs	r5, #0
 8007f48:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007f4a:	1c62      	adds	r2, r4, #1
 8007f4c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f4e:	7862      	ldrb	r2, [r4, #1]
 8007f50:	2a2b      	cmp	r2, #43	@ 0x2b
 8007f52:	d07a      	beq.n	800804a <_strtod_l+0x27a>
 8007f54:	2a2d      	cmp	r2, #45	@ 0x2d
 8007f56:	d07e      	beq.n	8008056 <_strtod_l+0x286>
 8007f58:	f04f 0c00 	mov.w	ip, #0
 8007f5c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007f60:	2909      	cmp	r1, #9
 8007f62:	f240 8085 	bls.w	8008070 <_strtod_l+0x2a0>
 8007f66:	9419      	str	r4, [sp, #100]	@ 0x64
 8007f68:	f04f 0800 	mov.w	r8, #0
 8007f6c:	e0a5      	b.n	80080ba <_strtod_l+0x2ea>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e7c8      	b.n	8007f04 <_strtod_l+0x134>
 8007f72:	f1b9 0f08 	cmp.w	r9, #8
 8007f76:	bfd8      	it	le
 8007f78:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007f7a:	f100 0001 	add.w	r0, r0, #1
 8007f7e:	bfd6      	itet	le
 8007f80:	fb02 3301 	mlale	r3, r2, r1, r3
 8007f84:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007f88:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007f8a:	f109 0901 	add.w	r9, r9, #1
 8007f8e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007f90:	e7bf      	b.n	8007f12 <_strtod_l+0x142>
 8007f92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f98:	785a      	ldrb	r2, [r3, #1]
 8007f9a:	f1b9 0f00 	cmp.w	r9, #0
 8007f9e:	d03b      	beq.n	8008018 <_strtod_l+0x248>
 8007fa0:	464d      	mov	r5, r9
 8007fa2:	900a      	str	r0, [sp, #40]	@ 0x28
 8007fa4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007fa8:	2b09      	cmp	r3, #9
 8007faa:	d912      	bls.n	8007fd2 <_strtod_l+0x202>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e7c2      	b.n	8007f36 <_strtod_l+0x166>
 8007fb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fb8:	785a      	ldrb	r2, [r3, #1]
 8007fba:	2a30      	cmp	r2, #48	@ 0x30
 8007fbc:	d0f8      	beq.n	8007fb0 <_strtod_l+0x1e0>
 8007fbe:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007fc2:	2b08      	cmp	r3, #8
 8007fc4:	f200 84c8 	bhi.w	8008958 <_strtod_l+0xb88>
 8007fc8:	900a      	str	r0, [sp, #40]	@ 0x28
 8007fca:	2000      	movs	r0, #0
 8007fcc:	4605      	mov	r5, r0
 8007fce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fd2:	3a30      	subs	r2, #48	@ 0x30
 8007fd4:	f100 0301 	add.w	r3, r0, #1
 8007fd8:	d018      	beq.n	800800c <_strtod_l+0x23c>
 8007fda:	462e      	mov	r6, r5
 8007fdc:	f04f 0e0a 	mov.w	lr, #10
 8007fe0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007fe2:	4419      	add	r1, r3
 8007fe4:	910a      	str	r1, [sp, #40]	@ 0x28
 8007fe6:	1c71      	adds	r1, r6, #1
 8007fe8:	eba1 0c05 	sub.w	ip, r1, r5
 8007fec:	4563      	cmp	r3, ip
 8007fee:	dc15      	bgt.n	800801c <_strtod_l+0x24c>
 8007ff0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007ff4:	182b      	adds	r3, r5, r0
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	f105 0501 	add.w	r5, r5, #1
 8007ffc:	4405      	add	r5, r0
 8007ffe:	dc1a      	bgt.n	8008036 <_strtod_l+0x266>
 8008000:	230a      	movs	r3, #10
 8008002:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008004:	fb03 2301 	mla	r3, r3, r1, r2
 8008008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800800a:	2300      	movs	r3, #0
 800800c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800800e:	4618      	mov	r0, r3
 8008010:	1c51      	adds	r1, r2, #1
 8008012:	9119      	str	r1, [sp, #100]	@ 0x64
 8008014:	7852      	ldrb	r2, [r2, #1]
 8008016:	e7c5      	b.n	8007fa4 <_strtod_l+0x1d4>
 8008018:	4648      	mov	r0, r9
 800801a:	e7ce      	b.n	8007fba <_strtod_l+0x1ea>
 800801c:	2e08      	cmp	r6, #8
 800801e:	dc05      	bgt.n	800802c <_strtod_l+0x25c>
 8008020:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008022:	fb0e f606 	mul.w	r6, lr, r6
 8008026:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008028:	460e      	mov	r6, r1
 800802a:	e7dc      	b.n	8007fe6 <_strtod_l+0x216>
 800802c:	2910      	cmp	r1, #16
 800802e:	bfd8      	it	le
 8008030:	fb0e f707 	mulle.w	r7, lr, r7
 8008034:	e7f8      	b.n	8008028 <_strtod_l+0x258>
 8008036:	2b0f      	cmp	r3, #15
 8008038:	bfdc      	itt	le
 800803a:	230a      	movle	r3, #10
 800803c:	fb03 2707 	mlale	r7, r3, r7, r2
 8008040:	e7e3      	b.n	800800a <_strtod_l+0x23a>
 8008042:	2300      	movs	r3, #0
 8008044:	930a      	str	r3, [sp, #40]	@ 0x28
 8008046:	2301      	movs	r3, #1
 8008048:	e77a      	b.n	8007f40 <_strtod_l+0x170>
 800804a:	f04f 0c00 	mov.w	ip, #0
 800804e:	1ca2      	adds	r2, r4, #2
 8008050:	9219      	str	r2, [sp, #100]	@ 0x64
 8008052:	78a2      	ldrb	r2, [r4, #2]
 8008054:	e782      	b.n	8007f5c <_strtod_l+0x18c>
 8008056:	f04f 0c01 	mov.w	ip, #1
 800805a:	e7f8      	b.n	800804e <_strtod_l+0x27e>
 800805c:	0800c4ac 	.word	0x0800c4ac
 8008060:	7ff00000 	.word	0x7ff00000
 8008064:	0800c2c6 	.word	0x0800c2c6
 8008068:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800806a:	1c51      	adds	r1, r2, #1
 800806c:	9119      	str	r1, [sp, #100]	@ 0x64
 800806e:	7852      	ldrb	r2, [r2, #1]
 8008070:	2a30      	cmp	r2, #48	@ 0x30
 8008072:	d0f9      	beq.n	8008068 <_strtod_l+0x298>
 8008074:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008078:	2908      	cmp	r1, #8
 800807a:	f63f af75 	bhi.w	8007f68 <_strtod_l+0x198>
 800807e:	f04f 080a 	mov.w	r8, #10
 8008082:	3a30      	subs	r2, #48	@ 0x30
 8008084:	9209      	str	r2, [sp, #36]	@ 0x24
 8008086:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008088:	920f      	str	r2, [sp, #60]	@ 0x3c
 800808a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800808c:	1c56      	adds	r6, r2, #1
 800808e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008090:	7852      	ldrb	r2, [r2, #1]
 8008092:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008096:	f1be 0f09 	cmp.w	lr, #9
 800809a:	d939      	bls.n	8008110 <_strtod_l+0x340>
 800809c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800809e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80080a2:	1a76      	subs	r6, r6, r1
 80080a4:	2e08      	cmp	r6, #8
 80080a6:	dc03      	bgt.n	80080b0 <_strtod_l+0x2e0>
 80080a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080aa:	4588      	cmp	r8, r1
 80080ac:	bfa8      	it	ge
 80080ae:	4688      	movge	r8, r1
 80080b0:	f1bc 0f00 	cmp.w	ip, #0
 80080b4:	d001      	beq.n	80080ba <_strtod_l+0x2ea>
 80080b6:	f1c8 0800 	rsb	r8, r8, #0
 80080ba:	2d00      	cmp	r5, #0
 80080bc:	d14e      	bne.n	800815c <_strtod_l+0x38c>
 80080be:	9908      	ldr	r1, [sp, #32]
 80080c0:	4308      	orrs	r0, r1
 80080c2:	f47f aebe 	bne.w	8007e42 <_strtod_l+0x72>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f47f aed4 	bne.w	8007e74 <_strtod_l+0xa4>
 80080cc:	2a69      	cmp	r2, #105	@ 0x69
 80080ce:	d028      	beq.n	8008122 <_strtod_l+0x352>
 80080d0:	dc25      	bgt.n	800811e <_strtod_l+0x34e>
 80080d2:	2a49      	cmp	r2, #73	@ 0x49
 80080d4:	d025      	beq.n	8008122 <_strtod_l+0x352>
 80080d6:	2a4e      	cmp	r2, #78	@ 0x4e
 80080d8:	f47f aecc 	bne.w	8007e74 <_strtod_l+0xa4>
 80080dc:	4999      	ldr	r1, [pc, #612]	@ (8008344 <_strtod_l+0x574>)
 80080de:	a819      	add	r0, sp, #100	@ 0x64
 80080e0:	f002 fc6c 	bl	800a9bc <__match>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	f43f aec5 	beq.w	8007e74 <_strtod_l+0xa4>
 80080ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b28      	cmp	r3, #40	@ 0x28
 80080f0:	d12e      	bne.n	8008150 <_strtod_l+0x380>
 80080f2:	4995      	ldr	r1, [pc, #596]	@ (8008348 <_strtod_l+0x578>)
 80080f4:	aa1c      	add	r2, sp, #112	@ 0x70
 80080f6:	a819      	add	r0, sp, #100	@ 0x64
 80080f8:	f002 fc74 	bl	800a9e4 <__hexnan>
 80080fc:	2805      	cmp	r0, #5
 80080fe:	d127      	bne.n	8008150 <_strtod_l+0x380>
 8008100:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008102:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008106:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800810a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800810e:	e698      	b.n	8007e42 <_strtod_l+0x72>
 8008110:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008112:	fb08 2101 	mla	r1, r8, r1, r2
 8008116:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800811a:	9209      	str	r2, [sp, #36]	@ 0x24
 800811c:	e7b5      	b.n	800808a <_strtod_l+0x2ba>
 800811e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008120:	e7da      	b.n	80080d8 <_strtod_l+0x308>
 8008122:	498a      	ldr	r1, [pc, #552]	@ (800834c <_strtod_l+0x57c>)
 8008124:	a819      	add	r0, sp, #100	@ 0x64
 8008126:	f002 fc49 	bl	800a9bc <__match>
 800812a:	2800      	cmp	r0, #0
 800812c:	f43f aea2 	beq.w	8007e74 <_strtod_l+0xa4>
 8008130:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008132:	4987      	ldr	r1, [pc, #540]	@ (8008350 <_strtod_l+0x580>)
 8008134:	3b01      	subs	r3, #1
 8008136:	a819      	add	r0, sp, #100	@ 0x64
 8008138:	9319      	str	r3, [sp, #100]	@ 0x64
 800813a:	f002 fc3f 	bl	800a9bc <__match>
 800813e:	b910      	cbnz	r0, 8008146 <_strtod_l+0x376>
 8008140:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008142:	3301      	adds	r3, #1
 8008144:	9319      	str	r3, [sp, #100]	@ 0x64
 8008146:	f04f 0a00 	mov.w	sl, #0
 800814a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8008354 <_strtod_l+0x584>
 800814e:	e678      	b.n	8007e42 <_strtod_l+0x72>
 8008150:	4881      	ldr	r0, [pc, #516]	@ (8008358 <_strtod_l+0x588>)
 8008152:	f001 faff 	bl	8009754 <nan>
 8008156:	4682      	mov	sl, r0
 8008158:	468b      	mov	fp, r1
 800815a:	e672      	b.n	8007e42 <_strtod_l+0x72>
 800815c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800815e:	f1b9 0f00 	cmp.w	r9, #0
 8008162:	bf08      	it	eq
 8008164:	46a9      	moveq	r9, r5
 8008166:	eba8 0303 	sub.w	r3, r8, r3
 800816a:	2d10      	cmp	r5, #16
 800816c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800816e:	462c      	mov	r4, r5
 8008170:	9309      	str	r3, [sp, #36]	@ 0x24
 8008172:	bfa8      	it	ge
 8008174:	2410      	movge	r4, #16
 8008176:	f7f8 f935 	bl	80003e4 <__aeabi_ui2d>
 800817a:	2d09      	cmp	r5, #9
 800817c:	4682      	mov	sl, r0
 800817e:	468b      	mov	fp, r1
 8008180:	dc11      	bgt.n	80081a6 <_strtod_l+0x3d6>
 8008182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008184:	2b00      	cmp	r3, #0
 8008186:	f43f ae5c 	beq.w	8007e42 <_strtod_l+0x72>
 800818a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818c:	dd76      	ble.n	800827c <_strtod_l+0x4ac>
 800818e:	2b16      	cmp	r3, #22
 8008190:	dc5d      	bgt.n	800824e <_strtod_l+0x47e>
 8008192:	4972      	ldr	r1, [pc, #456]	@ (800835c <_strtod_l+0x58c>)
 8008194:	4652      	mov	r2, sl
 8008196:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800819a:	465b      	mov	r3, fp
 800819c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081a0:	f7f8 f99a 	bl	80004d8 <__aeabi_dmul>
 80081a4:	e7d7      	b.n	8008156 <_strtod_l+0x386>
 80081a6:	4b6d      	ldr	r3, [pc, #436]	@ (800835c <_strtod_l+0x58c>)
 80081a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80081b0:	f7f8 f992 	bl	80004d8 <__aeabi_dmul>
 80081b4:	4682      	mov	sl, r0
 80081b6:	4638      	mov	r0, r7
 80081b8:	468b      	mov	fp, r1
 80081ba:	f7f8 f913 	bl	80003e4 <__aeabi_ui2d>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4650      	mov	r0, sl
 80081c4:	4659      	mov	r1, fp
 80081c6:	f7f7 ffd1 	bl	800016c <__adddf3>
 80081ca:	2d0f      	cmp	r5, #15
 80081cc:	4682      	mov	sl, r0
 80081ce:	468b      	mov	fp, r1
 80081d0:	ddd7      	ble.n	8008182 <_strtod_l+0x3b2>
 80081d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d4:	1b2c      	subs	r4, r5, r4
 80081d6:	441c      	add	r4, r3
 80081d8:	2c00      	cmp	r4, #0
 80081da:	f340 8093 	ble.w	8008304 <_strtod_l+0x534>
 80081de:	f014 030f 	ands.w	r3, r4, #15
 80081e2:	d00a      	beq.n	80081fa <_strtod_l+0x42a>
 80081e4:	495d      	ldr	r1, [pc, #372]	@ (800835c <_strtod_l+0x58c>)
 80081e6:	4652      	mov	r2, sl
 80081e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80081ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081f0:	465b      	mov	r3, fp
 80081f2:	f7f8 f971 	bl	80004d8 <__aeabi_dmul>
 80081f6:	4682      	mov	sl, r0
 80081f8:	468b      	mov	fp, r1
 80081fa:	f034 040f 	bics.w	r4, r4, #15
 80081fe:	d073      	beq.n	80082e8 <_strtod_l+0x518>
 8008200:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008204:	dd49      	ble.n	800829a <_strtod_l+0x4ca>
 8008206:	2400      	movs	r4, #0
 8008208:	46a0      	mov	r8, r4
 800820a:	46a1      	mov	r9, r4
 800820c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800820e:	2322      	movs	r3, #34	@ 0x22
 8008210:	f04f 0a00 	mov.w	sl, #0
 8008214:	9a05      	ldr	r2, [sp, #20]
 8008216:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8008354 <_strtod_l+0x584>
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800821e:	2b00      	cmp	r3, #0
 8008220:	f43f ae0f 	beq.w	8007e42 <_strtod_l+0x72>
 8008224:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008226:	9805      	ldr	r0, [sp, #20]
 8008228:	f002 fd80 	bl	800ad2c <_Bfree>
 800822c:	4649      	mov	r1, r9
 800822e:	9805      	ldr	r0, [sp, #20]
 8008230:	f002 fd7c 	bl	800ad2c <_Bfree>
 8008234:	4641      	mov	r1, r8
 8008236:	9805      	ldr	r0, [sp, #20]
 8008238:	f002 fd78 	bl	800ad2c <_Bfree>
 800823c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800823e:	9805      	ldr	r0, [sp, #20]
 8008240:	f002 fd74 	bl	800ad2c <_Bfree>
 8008244:	4621      	mov	r1, r4
 8008246:	9805      	ldr	r0, [sp, #20]
 8008248:	f002 fd70 	bl	800ad2c <_Bfree>
 800824c:	e5f9      	b.n	8007e42 <_strtod_l+0x72>
 800824e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008250:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008254:	4293      	cmp	r3, r2
 8008256:	dbbc      	blt.n	80081d2 <_strtod_l+0x402>
 8008258:	4c40      	ldr	r4, [pc, #256]	@ (800835c <_strtod_l+0x58c>)
 800825a:	f1c5 050f 	rsb	r5, r5, #15
 800825e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008262:	4652      	mov	r2, sl
 8008264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008268:	465b      	mov	r3, fp
 800826a:	f7f8 f935 	bl	80004d8 <__aeabi_dmul>
 800826e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008270:	1b5d      	subs	r5, r3, r5
 8008272:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008276:	e9d4 2300 	ldrd	r2, r3, [r4]
 800827a:	e791      	b.n	80081a0 <_strtod_l+0x3d0>
 800827c:	3316      	adds	r3, #22
 800827e:	dba8      	blt.n	80081d2 <_strtod_l+0x402>
 8008280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008282:	4650      	mov	r0, sl
 8008284:	eba3 0808 	sub.w	r8, r3, r8
 8008288:	4b34      	ldr	r3, [pc, #208]	@ (800835c <_strtod_l+0x58c>)
 800828a:	4659      	mov	r1, fp
 800828c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008290:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008294:	f7f8 fa4a 	bl	800072c <__aeabi_ddiv>
 8008298:	e75d      	b.n	8008156 <_strtod_l+0x386>
 800829a:	2300      	movs	r3, #0
 800829c:	4650      	mov	r0, sl
 800829e:	4659      	mov	r1, fp
 80082a0:	461e      	mov	r6, r3
 80082a2:	4f2f      	ldr	r7, [pc, #188]	@ (8008360 <_strtod_l+0x590>)
 80082a4:	1124      	asrs	r4, r4, #4
 80082a6:	2c01      	cmp	r4, #1
 80082a8:	dc21      	bgt.n	80082ee <_strtod_l+0x51e>
 80082aa:	b10b      	cbz	r3, 80082b0 <_strtod_l+0x4e0>
 80082ac:	4682      	mov	sl, r0
 80082ae:	468b      	mov	fp, r1
 80082b0:	492b      	ldr	r1, [pc, #172]	@ (8008360 <_strtod_l+0x590>)
 80082b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80082b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80082ba:	4652      	mov	r2, sl
 80082bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c0:	465b      	mov	r3, fp
 80082c2:	f7f8 f909 	bl	80004d8 <__aeabi_dmul>
 80082c6:	4b23      	ldr	r3, [pc, #140]	@ (8008354 <_strtod_l+0x584>)
 80082c8:	460a      	mov	r2, r1
 80082ca:	400b      	ands	r3, r1
 80082cc:	4925      	ldr	r1, [pc, #148]	@ (8008364 <_strtod_l+0x594>)
 80082ce:	4682      	mov	sl, r0
 80082d0:	428b      	cmp	r3, r1
 80082d2:	d898      	bhi.n	8008206 <_strtod_l+0x436>
 80082d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80082d8:	428b      	cmp	r3, r1
 80082da:	bf86      	itte	hi
 80082dc:	f04f 3aff 	movhi.w	sl, #4294967295
 80082e0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8008368 <_strtod_l+0x598>
 80082e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80082e8:	2300      	movs	r3, #0
 80082ea:	9308      	str	r3, [sp, #32]
 80082ec:	e076      	b.n	80083dc <_strtod_l+0x60c>
 80082ee:	07e2      	lsls	r2, r4, #31
 80082f0:	d504      	bpl.n	80082fc <_strtod_l+0x52c>
 80082f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082f6:	f7f8 f8ef 	bl	80004d8 <__aeabi_dmul>
 80082fa:	2301      	movs	r3, #1
 80082fc:	3601      	adds	r6, #1
 80082fe:	1064      	asrs	r4, r4, #1
 8008300:	3708      	adds	r7, #8
 8008302:	e7d0      	b.n	80082a6 <_strtod_l+0x4d6>
 8008304:	d0f0      	beq.n	80082e8 <_strtod_l+0x518>
 8008306:	4264      	negs	r4, r4
 8008308:	f014 020f 	ands.w	r2, r4, #15
 800830c:	d00a      	beq.n	8008324 <_strtod_l+0x554>
 800830e:	4b13      	ldr	r3, [pc, #76]	@ (800835c <_strtod_l+0x58c>)
 8008310:	4650      	mov	r0, sl
 8008312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008316:	4659      	mov	r1, fp
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f7f8 fa06 	bl	800072c <__aeabi_ddiv>
 8008320:	4682      	mov	sl, r0
 8008322:	468b      	mov	fp, r1
 8008324:	1124      	asrs	r4, r4, #4
 8008326:	d0df      	beq.n	80082e8 <_strtod_l+0x518>
 8008328:	2c1f      	cmp	r4, #31
 800832a:	dd1f      	ble.n	800836c <_strtod_l+0x59c>
 800832c:	2400      	movs	r4, #0
 800832e:	46a0      	mov	r8, r4
 8008330:	46a1      	mov	r9, r4
 8008332:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008334:	2322      	movs	r3, #34	@ 0x22
 8008336:	9a05      	ldr	r2, [sp, #20]
 8008338:	f04f 0a00 	mov.w	sl, #0
 800833c:	f04f 0b00 	mov.w	fp, #0
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	e76b      	b.n	800821c <_strtod_l+0x44c>
 8008344:	0800c2d5 	.word	0x0800c2d5
 8008348:	0800c498 	.word	0x0800c498
 800834c:	0800c2cd 	.word	0x0800c2cd
 8008350:	0800c307 	.word	0x0800c307
 8008354:	7ff00000 	.word	0x7ff00000
 8008358:	0800c496 	.word	0x0800c496
 800835c:	0800c620 	.word	0x0800c620
 8008360:	0800c5f8 	.word	0x0800c5f8
 8008364:	7ca00000 	.word	0x7ca00000
 8008368:	7fefffff 	.word	0x7fefffff
 800836c:	f014 0310 	ands.w	r3, r4, #16
 8008370:	bf18      	it	ne
 8008372:	236a      	movne	r3, #106	@ 0x6a
 8008374:	4650      	mov	r0, sl
 8008376:	9308      	str	r3, [sp, #32]
 8008378:	4659      	mov	r1, fp
 800837a:	2300      	movs	r3, #0
 800837c:	4e77      	ldr	r6, [pc, #476]	@ (800855c <_strtod_l+0x78c>)
 800837e:	07e7      	lsls	r7, r4, #31
 8008380:	d504      	bpl.n	800838c <_strtod_l+0x5bc>
 8008382:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008386:	f7f8 f8a7 	bl	80004d8 <__aeabi_dmul>
 800838a:	2301      	movs	r3, #1
 800838c:	1064      	asrs	r4, r4, #1
 800838e:	f106 0608 	add.w	r6, r6, #8
 8008392:	d1f4      	bne.n	800837e <_strtod_l+0x5ae>
 8008394:	b10b      	cbz	r3, 800839a <_strtod_l+0x5ca>
 8008396:	4682      	mov	sl, r0
 8008398:	468b      	mov	fp, r1
 800839a:	9b08      	ldr	r3, [sp, #32]
 800839c:	b1b3      	cbz	r3, 80083cc <_strtod_l+0x5fc>
 800839e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80083a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	4659      	mov	r1, fp
 80083aa:	dd0f      	ble.n	80083cc <_strtod_l+0x5fc>
 80083ac:	2b1f      	cmp	r3, #31
 80083ae:	dd58      	ble.n	8008462 <_strtod_l+0x692>
 80083b0:	2b34      	cmp	r3, #52	@ 0x34
 80083b2:	bfd8      	it	le
 80083b4:	f04f 33ff 	movle.w	r3, #4294967295
 80083b8:	f04f 0a00 	mov.w	sl, #0
 80083bc:	bfcf      	iteee	gt
 80083be:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80083c2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80083c6:	4093      	lslle	r3, r2
 80083c8:	ea03 0b01 	andle.w	fp, r3, r1
 80083cc:	2200      	movs	r2, #0
 80083ce:	2300      	movs	r3, #0
 80083d0:	4650      	mov	r0, sl
 80083d2:	4659      	mov	r1, fp
 80083d4:	f7f8 fae8 	bl	80009a8 <__aeabi_dcmpeq>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d1a7      	bne.n	800832c <_strtod_l+0x55c>
 80083dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083de:	464a      	mov	r2, r9
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80083e4:	462b      	mov	r3, r5
 80083e6:	9805      	ldr	r0, [sp, #20]
 80083e8:	f002 fd08 	bl	800adfc <__s2b>
 80083ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 80083ee:	2800      	cmp	r0, #0
 80083f0:	f43f af09 	beq.w	8008206 <_strtod_l+0x436>
 80083f4:	2400      	movs	r4, #0
 80083f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083fa:	2a00      	cmp	r2, #0
 80083fc:	eba3 0308 	sub.w	r3, r3, r8
 8008400:	bfa8      	it	ge
 8008402:	2300      	movge	r3, #0
 8008404:	46a0      	mov	r8, r4
 8008406:	9312      	str	r3, [sp, #72]	@ 0x48
 8008408:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800840c:	9316      	str	r3, [sp, #88]	@ 0x58
 800840e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008410:	9805      	ldr	r0, [sp, #20]
 8008412:	6859      	ldr	r1, [r3, #4]
 8008414:	f002 fc4a 	bl	800acac <_Balloc>
 8008418:	4681      	mov	r9, r0
 800841a:	2800      	cmp	r0, #0
 800841c:	f43f aef7 	beq.w	800820e <_strtod_l+0x43e>
 8008420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008422:	300c      	adds	r0, #12
 8008424:	691a      	ldr	r2, [r3, #16]
 8008426:	f103 010c 	add.w	r1, r3, #12
 800842a:	3202      	adds	r2, #2
 800842c:	0092      	lsls	r2, r2, #2
 800842e:	f001 f982 	bl	8009736 <memcpy>
 8008432:	ab1c      	add	r3, sp, #112	@ 0x70
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	4652      	mov	r2, sl
 800843c:	465b      	mov	r3, fp
 800843e:	9805      	ldr	r0, [sp, #20]
 8008440:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008444:	f003 f806 	bl	800b454 <__d2b>
 8008448:	901a      	str	r0, [sp, #104]	@ 0x68
 800844a:	2800      	cmp	r0, #0
 800844c:	f43f aedf 	beq.w	800820e <_strtod_l+0x43e>
 8008450:	2101      	movs	r1, #1
 8008452:	9805      	ldr	r0, [sp, #20]
 8008454:	f002 fd68 	bl	800af28 <__i2b>
 8008458:	4680      	mov	r8, r0
 800845a:	b948      	cbnz	r0, 8008470 <_strtod_l+0x6a0>
 800845c:	f04f 0800 	mov.w	r8, #0
 8008460:	e6d5      	b.n	800820e <_strtod_l+0x43e>
 8008462:	f04f 32ff 	mov.w	r2, #4294967295
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	ea03 0a0a 	and.w	sl, r3, sl
 800846e:	e7ad      	b.n	80083cc <_strtod_l+0x5fc>
 8008470:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008472:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008474:	2d00      	cmp	r5, #0
 8008476:	bfab      	itete	ge
 8008478:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800847a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800847c:	18ef      	addge	r7, r5, r3
 800847e:	1b5e      	sublt	r6, r3, r5
 8008480:	9b08      	ldr	r3, [sp, #32]
 8008482:	bfa8      	it	ge
 8008484:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008486:	eba5 0503 	sub.w	r5, r5, r3
 800848a:	4415      	add	r5, r2
 800848c:	4b34      	ldr	r3, [pc, #208]	@ (8008560 <_strtod_l+0x790>)
 800848e:	f105 35ff 	add.w	r5, r5, #4294967295
 8008492:	bfb8      	it	lt
 8008494:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008496:	429d      	cmp	r5, r3
 8008498:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800849c:	da50      	bge.n	8008540 <_strtod_l+0x770>
 800849e:	1b5b      	subs	r3, r3, r5
 80084a0:	2b1f      	cmp	r3, #31
 80084a2:	f04f 0101 	mov.w	r1, #1
 80084a6:	eba2 0203 	sub.w	r2, r2, r3
 80084aa:	dc3d      	bgt.n	8008528 <_strtod_l+0x758>
 80084ac:	fa01 f303 	lsl.w	r3, r1, r3
 80084b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084b2:	2300      	movs	r3, #0
 80084b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80084b6:	18bd      	adds	r5, r7, r2
 80084b8:	9b08      	ldr	r3, [sp, #32]
 80084ba:	42af      	cmp	r7, r5
 80084bc:	4416      	add	r6, r2
 80084be:	441e      	add	r6, r3
 80084c0:	463b      	mov	r3, r7
 80084c2:	bfa8      	it	ge
 80084c4:	462b      	movge	r3, r5
 80084c6:	42b3      	cmp	r3, r6
 80084c8:	bfa8      	it	ge
 80084ca:	4633      	movge	r3, r6
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	bfc2      	ittt	gt
 80084d0:	1aed      	subgt	r5, r5, r3
 80084d2:	1af6      	subgt	r6, r6, r3
 80084d4:	1aff      	subgt	r7, r7, r3
 80084d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084d8:	2b00      	cmp	r3, #0
 80084da:	dd16      	ble.n	800850a <_strtod_l+0x73a>
 80084dc:	4641      	mov	r1, r8
 80084de:	461a      	mov	r2, r3
 80084e0:	9805      	ldr	r0, [sp, #20]
 80084e2:	f002 fdd9 	bl	800b098 <__pow5mult>
 80084e6:	4680      	mov	r8, r0
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d0b7      	beq.n	800845c <_strtod_l+0x68c>
 80084ec:	4601      	mov	r1, r0
 80084ee:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80084f0:	9805      	ldr	r0, [sp, #20]
 80084f2:	f002 fd2f 	bl	800af54 <__multiply>
 80084f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80084f8:	2800      	cmp	r0, #0
 80084fa:	f43f ae88 	beq.w	800820e <_strtod_l+0x43e>
 80084fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008500:	9805      	ldr	r0, [sp, #20]
 8008502:	f002 fc13 	bl	800ad2c <_Bfree>
 8008506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008508:	931a      	str	r3, [sp, #104]	@ 0x68
 800850a:	2d00      	cmp	r5, #0
 800850c:	dc1d      	bgt.n	800854a <_strtod_l+0x77a>
 800850e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008510:	2b00      	cmp	r3, #0
 8008512:	dd27      	ble.n	8008564 <_strtod_l+0x794>
 8008514:	4649      	mov	r1, r9
 8008516:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008518:	9805      	ldr	r0, [sp, #20]
 800851a:	f002 fdbd 	bl	800b098 <__pow5mult>
 800851e:	4681      	mov	r9, r0
 8008520:	bb00      	cbnz	r0, 8008564 <_strtod_l+0x794>
 8008522:	f04f 0900 	mov.w	r9, #0
 8008526:	e672      	b.n	800820e <_strtod_l+0x43e>
 8008528:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800852c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008530:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008534:	35e2      	adds	r5, #226	@ 0xe2
 8008536:	fa01 f305 	lsl.w	r3, r1, r5
 800853a:	9310      	str	r3, [sp, #64]	@ 0x40
 800853c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800853e:	e7ba      	b.n	80084b6 <_strtod_l+0x6e6>
 8008540:	2300      	movs	r3, #0
 8008542:	9310      	str	r3, [sp, #64]	@ 0x40
 8008544:	2301      	movs	r3, #1
 8008546:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008548:	e7b5      	b.n	80084b6 <_strtod_l+0x6e6>
 800854a:	462a      	mov	r2, r5
 800854c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800854e:	9805      	ldr	r0, [sp, #20]
 8008550:	f002 fdfc 	bl	800b14c <__lshift>
 8008554:	901a      	str	r0, [sp, #104]	@ 0x68
 8008556:	2800      	cmp	r0, #0
 8008558:	d1d9      	bne.n	800850e <_strtod_l+0x73e>
 800855a:	e658      	b.n	800820e <_strtod_l+0x43e>
 800855c:	0800c4c0 	.word	0x0800c4c0
 8008560:	fffffc02 	.word	0xfffffc02
 8008564:	2e00      	cmp	r6, #0
 8008566:	dd07      	ble.n	8008578 <_strtod_l+0x7a8>
 8008568:	4649      	mov	r1, r9
 800856a:	4632      	mov	r2, r6
 800856c:	9805      	ldr	r0, [sp, #20]
 800856e:	f002 fded 	bl	800b14c <__lshift>
 8008572:	4681      	mov	r9, r0
 8008574:	2800      	cmp	r0, #0
 8008576:	d0d4      	beq.n	8008522 <_strtod_l+0x752>
 8008578:	2f00      	cmp	r7, #0
 800857a:	dd08      	ble.n	800858e <_strtod_l+0x7be>
 800857c:	4641      	mov	r1, r8
 800857e:	463a      	mov	r2, r7
 8008580:	9805      	ldr	r0, [sp, #20]
 8008582:	f002 fde3 	bl	800b14c <__lshift>
 8008586:	4680      	mov	r8, r0
 8008588:	2800      	cmp	r0, #0
 800858a:	f43f ae40 	beq.w	800820e <_strtod_l+0x43e>
 800858e:	464a      	mov	r2, r9
 8008590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008592:	9805      	ldr	r0, [sp, #20]
 8008594:	f002 fe62 	bl	800b25c <__mdiff>
 8008598:	4604      	mov	r4, r0
 800859a:	2800      	cmp	r0, #0
 800859c:	f43f ae37 	beq.w	800820e <_strtod_l+0x43e>
 80085a0:	68c3      	ldr	r3, [r0, #12]
 80085a2:	4641      	mov	r1, r8
 80085a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085a6:	2300      	movs	r3, #0
 80085a8:	60c3      	str	r3, [r0, #12]
 80085aa:	f002 fe3b 	bl	800b224 <__mcmp>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	da3d      	bge.n	800862e <_strtod_l+0x85e>
 80085b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085b4:	ea53 030a 	orrs.w	r3, r3, sl
 80085b8:	d163      	bne.n	8008682 <_strtod_l+0x8b2>
 80085ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d15f      	bne.n	8008682 <_strtod_l+0x8b2>
 80085c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085c6:	0d1b      	lsrs	r3, r3, #20
 80085c8:	051b      	lsls	r3, r3, #20
 80085ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80085ce:	d958      	bls.n	8008682 <_strtod_l+0x8b2>
 80085d0:	6963      	ldr	r3, [r4, #20]
 80085d2:	b913      	cbnz	r3, 80085da <_strtod_l+0x80a>
 80085d4:	6923      	ldr	r3, [r4, #16]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	dd53      	ble.n	8008682 <_strtod_l+0x8b2>
 80085da:	4621      	mov	r1, r4
 80085dc:	2201      	movs	r2, #1
 80085de:	9805      	ldr	r0, [sp, #20]
 80085e0:	f002 fdb4 	bl	800b14c <__lshift>
 80085e4:	4641      	mov	r1, r8
 80085e6:	4604      	mov	r4, r0
 80085e8:	f002 fe1c 	bl	800b224 <__mcmp>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	dd48      	ble.n	8008682 <_strtod_l+0x8b2>
 80085f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085f4:	9a08      	ldr	r2, [sp, #32]
 80085f6:	0d1b      	lsrs	r3, r3, #20
 80085f8:	051b      	lsls	r3, r3, #20
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	d062      	beq.n	80086c4 <_strtod_l+0x8f4>
 80085fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008602:	d85f      	bhi.n	80086c4 <_strtod_l+0x8f4>
 8008604:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008608:	f67f ae94 	bls.w	8008334 <_strtod_l+0x564>
 800860c:	4650      	mov	r0, sl
 800860e:	4659      	mov	r1, fp
 8008610:	4ba3      	ldr	r3, [pc, #652]	@ (80088a0 <_strtod_l+0xad0>)
 8008612:	2200      	movs	r2, #0
 8008614:	f7f7 ff60 	bl	80004d8 <__aeabi_dmul>
 8008618:	4ba2      	ldr	r3, [pc, #648]	@ (80088a4 <_strtod_l+0xad4>)
 800861a:	4682      	mov	sl, r0
 800861c:	400b      	ands	r3, r1
 800861e:	468b      	mov	fp, r1
 8008620:	2b00      	cmp	r3, #0
 8008622:	f47f adff 	bne.w	8008224 <_strtod_l+0x454>
 8008626:	2322      	movs	r3, #34	@ 0x22
 8008628:	9a05      	ldr	r2, [sp, #20]
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	e5fa      	b.n	8008224 <_strtod_l+0x454>
 800862e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008632:	d165      	bne.n	8008700 <_strtod_l+0x930>
 8008634:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008636:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800863a:	b35a      	cbz	r2, 8008694 <_strtod_l+0x8c4>
 800863c:	4a9a      	ldr	r2, [pc, #616]	@ (80088a8 <_strtod_l+0xad8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d12b      	bne.n	800869a <_strtod_l+0x8ca>
 8008642:	9b08      	ldr	r3, [sp, #32]
 8008644:	4651      	mov	r1, sl
 8008646:	b303      	cbz	r3, 800868a <_strtod_l+0x8ba>
 8008648:	465a      	mov	r2, fp
 800864a:	4b96      	ldr	r3, [pc, #600]	@ (80088a4 <_strtod_l+0xad4>)
 800864c:	4013      	ands	r3, r2
 800864e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008652:	f04f 32ff 	mov.w	r2, #4294967295
 8008656:	d81b      	bhi.n	8008690 <_strtod_l+0x8c0>
 8008658:	0d1b      	lsrs	r3, r3, #20
 800865a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800865e:	fa02 f303 	lsl.w	r3, r2, r3
 8008662:	4299      	cmp	r1, r3
 8008664:	d119      	bne.n	800869a <_strtod_l+0x8ca>
 8008666:	4b91      	ldr	r3, [pc, #580]	@ (80088ac <_strtod_l+0xadc>)
 8008668:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800866a:	429a      	cmp	r2, r3
 800866c:	d102      	bne.n	8008674 <_strtod_l+0x8a4>
 800866e:	3101      	adds	r1, #1
 8008670:	f43f adcd 	beq.w	800820e <_strtod_l+0x43e>
 8008674:	f04f 0a00 	mov.w	sl, #0
 8008678:	4b8a      	ldr	r3, [pc, #552]	@ (80088a4 <_strtod_l+0xad4>)
 800867a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800867c:	401a      	ands	r2, r3
 800867e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008682:	9b08      	ldr	r3, [sp, #32]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1c1      	bne.n	800860c <_strtod_l+0x83c>
 8008688:	e5cc      	b.n	8008224 <_strtod_l+0x454>
 800868a:	f04f 33ff 	mov.w	r3, #4294967295
 800868e:	e7e8      	b.n	8008662 <_strtod_l+0x892>
 8008690:	4613      	mov	r3, r2
 8008692:	e7e6      	b.n	8008662 <_strtod_l+0x892>
 8008694:	ea53 030a 	orrs.w	r3, r3, sl
 8008698:	d0aa      	beq.n	80085f0 <_strtod_l+0x820>
 800869a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800869c:	b1db      	cbz	r3, 80086d6 <_strtod_l+0x906>
 800869e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086a0:	4213      	tst	r3, r2
 80086a2:	d0ee      	beq.n	8008682 <_strtod_l+0x8b2>
 80086a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086a6:	4650      	mov	r0, sl
 80086a8:	4659      	mov	r1, fp
 80086aa:	9a08      	ldr	r2, [sp, #32]
 80086ac:	b1bb      	cbz	r3, 80086de <_strtod_l+0x90e>
 80086ae:	f7ff fb6e 	bl	8007d8e <sulp>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086ba:	f7f7 fd57 	bl	800016c <__adddf3>
 80086be:	4682      	mov	sl, r0
 80086c0:	468b      	mov	fp, r1
 80086c2:	e7de      	b.n	8008682 <_strtod_l+0x8b2>
 80086c4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80086c8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80086cc:	f04f 3aff 	mov.w	sl, #4294967295
 80086d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80086d4:	e7d5      	b.n	8008682 <_strtod_l+0x8b2>
 80086d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086d8:	ea13 0f0a 	tst.w	r3, sl
 80086dc:	e7e1      	b.n	80086a2 <_strtod_l+0x8d2>
 80086de:	f7ff fb56 	bl	8007d8e <sulp>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086ea:	f7f7 fd3d 	bl	8000168 <__aeabi_dsub>
 80086ee:	2200      	movs	r2, #0
 80086f0:	2300      	movs	r3, #0
 80086f2:	4682      	mov	sl, r0
 80086f4:	468b      	mov	fp, r1
 80086f6:	f7f8 f957 	bl	80009a8 <__aeabi_dcmpeq>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d0c1      	beq.n	8008682 <_strtod_l+0x8b2>
 80086fe:	e619      	b.n	8008334 <_strtod_l+0x564>
 8008700:	4641      	mov	r1, r8
 8008702:	4620      	mov	r0, r4
 8008704:	f002 fefe 	bl	800b504 <__ratio>
 8008708:	2200      	movs	r2, #0
 800870a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800870e:	4606      	mov	r6, r0
 8008710:	460f      	mov	r7, r1
 8008712:	f7f8 f95d 	bl	80009d0 <__aeabi_dcmple>
 8008716:	2800      	cmp	r0, #0
 8008718:	d06d      	beq.n	80087f6 <_strtod_l+0xa26>
 800871a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800871c:	2b00      	cmp	r3, #0
 800871e:	d178      	bne.n	8008812 <_strtod_l+0xa42>
 8008720:	f1ba 0f00 	cmp.w	sl, #0
 8008724:	d156      	bne.n	80087d4 <_strtod_l+0xa04>
 8008726:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800872c:	2b00      	cmp	r3, #0
 800872e:	d158      	bne.n	80087e2 <_strtod_l+0xa12>
 8008730:	2200      	movs	r2, #0
 8008732:	4630      	mov	r0, r6
 8008734:	4639      	mov	r1, r7
 8008736:	4b5e      	ldr	r3, [pc, #376]	@ (80088b0 <_strtod_l+0xae0>)
 8008738:	f7f8 f940 	bl	80009bc <__aeabi_dcmplt>
 800873c:	2800      	cmp	r0, #0
 800873e:	d157      	bne.n	80087f0 <_strtod_l+0xa20>
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	2200      	movs	r2, #0
 8008746:	4b5b      	ldr	r3, [pc, #364]	@ (80088b4 <_strtod_l+0xae4>)
 8008748:	f7f7 fec6 	bl	80004d8 <__aeabi_dmul>
 800874c:	4606      	mov	r6, r0
 800874e:	460f      	mov	r7, r1
 8008750:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008754:	9606      	str	r6, [sp, #24]
 8008756:	9307      	str	r3, [sp, #28]
 8008758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800875c:	4d51      	ldr	r5, [pc, #324]	@ (80088a4 <_strtod_l+0xad4>)
 800875e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008764:	401d      	ands	r5, r3
 8008766:	4b54      	ldr	r3, [pc, #336]	@ (80088b8 <_strtod_l+0xae8>)
 8008768:	429d      	cmp	r5, r3
 800876a:	f040 80ab 	bne.w	80088c4 <_strtod_l+0xaf4>
 800876e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008770:	4650      	mov	r0, sl
 8008772:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008776:	4659      	mov	r1, fp
 8008778:	f002 fe04 	bl	800b384 <__ulp>
 800877c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008780:	f7f7 feaa 	bl	80004d8 <__aeabi_dmul>
 8008784:	4652      	mov	r2, sl
 8008786:	465b      	mov	r3, fp
 8008788:	f7f7 fcf0 	bl	800016c <__adddf3>
 800878c:	460b      	mov	r3, r1
 800878e:	4945      	ldr	r1, [pc, #276]	@ (80088a4 <_strtod_l+0xad4>)
 8008790:	4a4a      	ldr	r2, [pc, #296]	@ (80088bc <_strtod_l+0xaec>)
 8008792:	4019      	ands	r1, r3
 8008794:	4291      	cmp	r1, r2
 8008796:	4682      	mov	sl, r0
 8008798:	d942      	bls.n	8008820 <_strtod_l+0xa50>
 800879a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800879c:	4b43      	ldr	r3, [pc, #268]	@ (80088ac <_strtod_l+0xadc>)
 800879e:	429a      	cmp	r2, r3
 80087a0:	d103      	bne.n	80087aa <_strtod_l+0x9da>
 80087a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087a4:	3301      	adds	r3, #1
 80087a6:	f43f ad32 	beq.w	800820e <_strtod_l+0x43e>
 80087aa:	f04f 3aff 	mov.w	sl, #4294967295
 80087ae:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80088ac <_strtod_l+0xadc>
 80087b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087b4:	9805      	ldr	r0, [sp, #20]
 80087b6:	f002 fab9 	bl	800ad2c <_Bfree>
 80087ba:	4649      	mov	r1, r9
 80087bc:	9805      	ldr	r0, [sp, #20]
 80087be:	f002 fab5 	bl	800ad2c <_Bfree>
 80087c2:	4641      	mov	r1, r8
 80087c4:	9805      	ldr	r0, [sp, #20]
 80087c6:	f002 fab1 	bl	800ad2c <_Bfree>
 80087ca:	4621      	mov	r1, r4
 80087cc:	9805      	ldr	r0, [sp, #20]
 80087ce:	f002 faad 	bl	800ad2c <_Bfree>
 80087d2:	e61c      	b.n	800840e <_strtod_l+0x63e>
 80087d4:	f1ba 0f01 	cmp.w	sl, #1
 80087d8:	d103      	bne.n	80087e2 <_strtod_l+0xa12>
 80087da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f43f ada9 	beq.w	8008334 <_strtod_l+0x564>
 80087e2:	2200      	movs	r2, #0
 80087e4:	4b36      	ldr	r3, [pc, #216]	@ (80088c0 <_strtod_l+0xaf0>)
 80087e6:	2600      	movs	r6, #0
 80087e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80087ec:	4f30      	ldr	r7, [pc, #192]	@ (80088b0 <_strtod_l+0xae0>)
 80087ee:	e7b3      	b.n	8008758 <_strtod_l+0x988>
 80087f0:	2600      	movs	r6, #0
 80087f2:	4f30      	ldr	r7, [pc, #192]	@ (80088b4 <_strtod_l+0xae4>)
 80087f4:	e7ac      	b.n	8008750 <_strtod_l+0x980>
 80087f6:	4630      	mov	r0, r6
 80087f8:	4639      	mov	r1, r7
 80087fa:	4b2e      	ldr	r3, [pc, #184]	@ (80088b4 <_strtod_l+0xae4>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	f7f7 fe6b 	bl	80004d8 <__aeabi_dmul>
 8008802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008804:	4606      	mov	r6, r0
 8008806:	460f      	mov	r7, r1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0a1      	beq.n	8008750 <_strtod_l+0x980>
 800880c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008810:	e7a2      	b.n	8008758 <_strtod_l+0x988>
 8008812:	2200      	movs	r2, #0
 8008814:	4b26      	ldr	r3, [pc, #152]	@ (80088b0 <_strtod_l+0xae0>)
 8008816:	4616      	mov	r6, r2
 8008818:	461f      	mov	r7, r3
 800881a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800881e:	e79b      	b.n	8008758 <_strtod_l+0x988>
 8008820:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008824:	9b08      	ldr	r3, [sp, #32]
 8008826:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1c1      	bne.n	80087b2 <_strtod_l+0x9e2>
 800882e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008832:	0d1b      	lsrs	r3, r3, #20
 8008834:	051b      	lsls	r3, r3, #20
 8008836:	429d      	cmp	r5, r3
 8008838:	d1bb      	bne.n	80087b2 <_strtod_l+0x9e2>
 800883a:	4630      	mov	r0, r6
 800883c:	4639      	mov	r1, r7
 800883e:	f7f8 fc2d 	bl	800109c <__aeabi_d2lz>
 8008842:	f7f7 fe1b 	bl	800047c <__aeabi_l2d>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4630      	mov	r0, r6
 800884c:	4639      	mov	r1, r7
 800884e:	f7f7 fc8b 	bl	8000168 <__aeabi_dsub>
 8008852:	460b      	mov	r3, r1
 8008854:	4602      	mov	r2, r0
 8008856:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800885a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800885e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008860:	ea46 060a 	orr.w	r6, r6, sl
 8008864:	431e      	orrs	r6, r3
 8008866:	d06a      	beq.n	800893e <_strtod_l+0xb6e>
 8008868:	a309      	add	r3, pc, #36	@ (adr r3, 8008890 <_strtod_l+0xac0>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f7f8 f8a5 	bl	80009bc <__aeabi_dcmplt>
 8008872:	2800      	cmp	r0, #0
 8008874:	f47f acd6 	bne.w	8008224 <_strtod_l+0x454>
 8008878:	a307      	add	r3, pc, #28	@ (adr r3, 8008898 <_strtod_l+0xac8>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008882:	f7f8 f8b9 	bl	80009f8 <__aeabi_dcmpgt>
 8008886:	2800      	cmp	r0, #0
 8008888:	d093      	beq.n	80087b2 <_strtod_l+0x9e2>
 800888a:	e4cb      	b.n	8008224 <_strtod_l+0x454>
 800888c:	f3af 8000 	nop.w
 8008890:	94a03595 	.word	0x94a03595
 8008894:	3fdfffff 	.word	0x3fdfffff
 8008898:	35afe535 	.word	0x35afe535
 800889c:	3fe00000 	.word	0x3fe00000
 80088a0:	39500000 	.word	0x39500000
 80088a4:	7ff00000 	.word	0x7ff00000
 80088a8:	000fffff 	.word	0x000fffff
 80088ac:	7fefffff 	.word	0x7fefffff
 80088b0:	3ff00000 	.word	0x3ff00000
 80088b4:	3fe00000 	.word	0x3fe00000
 80088b8:	7fe00000 	.word	0x7fe00000
 80088bc:	7c9fffff 	.word	0x7c9fffff
 80088c0:	bff00000 	.word	0xbff00000
 80088c4:	9b08      	ldr	r3, [sp, #32]
 80088c6:	b323      	cbz	r3, 8008912 <_strtod_l+0xb42>
 80088c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80088cc:	d821      	bhi.n	8008912 <_strtod_l+0xb42>
 80088ce:	a328      	add	r3, pc, #160	@ (adr r3, 8008970 <_strtod_l+0xba0>)
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	4630      	mov	r0, r6
 80088d6:	4639      	mov	r1, r7
 80088d8:	f7f8 f87a 	bl	80009d0 <__aeabi_dcmple>
 80088dc:	b1a0      	cbz	r0, 8008908 <_strtod_l+0xb38>
 80088de:	4639      	mov	r1, r7
 80088e0:	4630      	mov	r0, r6
 80088e2:	f7f8 f8d1 	bl	8000a88 <__aeabi_d2uiz>
 80088e6:	2801      	cmp	r0, #1
 80088e8:	bf38      	it	cc
 80088ea:	2001      	movcc	r0, #1
 80088ec:	f7f7 fd7a 	bl	80003e4 <__aeabi_ui2d>
 80088f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088f2:	4606      	mov	r6, r0
 80088f4:	460f      	mov	r7, r1
 80088f6:	b9fb      	cbnz	r3, 8008938 <_strtod_l+0xb68>
 80088f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80088fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80088fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8008900:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008904:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008908:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800890a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800890e:	1b5b      	subs	r3, r3, r5
 8008910:	9311      	str	r3, [sp, #68]	@ 0x44
 8008912:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008916:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800891a:	f002 fd33 	bl	800b384 <__ulp>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4650      	mov	r0, sl
 8008924:	4659      	mov	r1, fp
 8008926:	f7f7 fdd7 	bl	80004d8 <__aeabi_dmul>
 800892a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800892e:	f7f7 fc1d 	bl	800016c <__adddf3>
 8008932:	4682      	mov	sl, r0
 8008934:	468b      	mov	fp, r1
 8008936:	e775      	b.n	8008824 <_strtod_l+0xa54>
 8008938:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800893c:	e7e0      	b.n	8008900 <_strtod_l+0xb30>
 800893e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008978 <_strtod_l+0xba8>)
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f7f8 f83a 	bl	80009bc <__aeabi_dcmplt>
 8008948:	e79d      	b.n	8008886 <_strtod_l+0xab6>
 800894a:	2300      	movs	r3, #0
 800894c:	930e      	str	r3, [sp, #56]	@ 0x38
 800894e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008950:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	f7ff ba79 	b.w	8007e4a <_strtod_l+0x7a>
 8008958:	2a65      	cmp	r2, #101	@ 0x65
 800895a:	f43f ab72 	beq.w	8008042 <_strtod_l+0x272>
 800895e:	2a45      	cmp	r2, #69	@ 0x45
 8008960:	f43f ab6f 	beq.w	8008042 <_strtod_l+0x272>
 8008964:	2301      	movs	r3, #1
 8008966:	f7ff bbaa 	b.w	80080be <_strtod_l+0x2ee>
 800896a:	bf00      	nop
 800896c:	f3af 8000 	nop.w
 8008970:	ffc00000 	.word	0xffc00000
 8008974:	41dfffff 	.word	0x41dfffff
 8008978:	94a03595 	.word	0x94a03595
 800897c:	3fcfffff 	.word	0x3fcfffff

08008980 <strtod>:
 8008980:	460a      	mov	r2, r1
 8008982:	4601      	mov	r1, r0
 8008984:	4802      	ldr	r0, [pc, #8]	@ (8008990 <strtod+0x10>)
 8008986:	4b03      	ldr	r3, [pc, #12]	@ (8008994 <strtod+0x14>)
 8008988:	6800      	ldr	r0, [r0, #0]
 800898a:	f7ff ba21 	b.w	8007dd0 <_strtod_l>
 800898e:	bf00      	nop
 8008990:	20000188 	.word	0x20000188
 8008994:	2000001c 	.word	0x2000001c

08008998 <_strtoul_l.isra.0>:
 8008998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800899c:	4686      	mov	lr, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	4e33      	ldr	r6, [pc, #204]	@ (8008a70 <_strtoul_l.isra.0+0xd8>)
 80089a2:	4628      	mov	r0, r5
 80089a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089a8:	5d37      	ldrb	r7, [r6, r4]
 80089aa:	f017 0708 	ands.w	r7, r7, #8
 80089ae:	d1f8      	bne.n	80089a2 <_strtoul_l.isra.0+0xa>
 80089b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80089b2:	d110      	bne.n	80089d6 <_strtoul_l.isra.0+0x3e>
 80089b4:	2701      	movs	r7, #1
 80089b6:	782c      	ldrb	r4, [r5, #0]
 80089b8:	1c85      	adds	r5, r0, #2
 80089ba:	f033 0010 	bics.w	r0, r3, #16
 80089be:	d115      	bne.n	80089ec <_strtoul_l.isra.0+0x54>
 80089c0:	2c30      	cmp	r4, #48	@ 0x30
 80089c2:	d10d      	bne.n	80089e0 <_strtoul_l.isra.0+0x48>
 80089c4:	7828      	ldrb	r0, [r5, #0]
 80089c6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80089ca:	2858      	cmp	r0, #88	@ 0x58
 80089cc:	d108      	bne.n	80089e0 <_strtoul_l.isra.0+0x48>
 80089ce:	786c      	ldrb	r4, [r5, #1]
 80089d0:	3502      	adds	r5, #2
 80089d2:	2310      	movs	r3, #16
 80089d4:	e00a      	b.n	80089ec <_strtoul_l.isra.0+0x54>
 80089d6:	2c2b      	cmp	r4, #43	@ 0x2b
 80089d8:	bf04      	itt	eq
 80089da:	782c      	ldrbeq	r4, [r5, #0]
 80089dc:	1c85      	addeq	r5, r0, #2
 80089de:	e7ec      	b.n	80089ba <_strtoul_l.isra.0+0x22>
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1f6      	bne.n	80089d2 <_strtoul_l.isra.0+0x3a>
 80089e4:	2c30      	cmp	r4, #48	@ 0x30
 80089e6:	bf14      	ite	ne
 80089e8:	230a      	movne	r3, #10
 80089ea:	2308      	moveq	r3, #8
 80089ec:	f04f 38ff 	mov.w	r8, #4294967295
 80089f0:	fbb8 f8f3 	udiv	r8, r8, r3
 80089f4:	2600      	movs	r6, #0
 80089f6:	fb03 f908 	mul.w	r9, r3, r8
 80089fa:	4630      	mov	r0, r6
 80089fc:	ea6f 0909 	mvn.w	r9, r9
 8008a00:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008a04:	f1bc 0f09 	cmp.w	ip, #9
 8008a08:	d810      	bhi.n	8008a2c <_strtoul_l.isra.0+0x94>
 8008a0a:	4664      	mov	r4, ip
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	dd1e      	ble.n	8008a4e <_strtoul_l.isra.0+0xb6>
 8008a10:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008a14:	d007      	beq.n	8008a26 <_strtoul_l.isra.0+0x8e>
 8008a16:	4580      	cmp	r8, r0
 8008a18:	d316      	bcc.n	8008a48 <_strtoul_l.isra.0+0xb0>
 8008a1a:	d101      	bne.n	8008a20 <_strtoul_l.isra.0+0x88>
 8008a1c:	45a1      	cmp	r9, r4
 8008a1e:	db13      	blt.n	8008a48 <_strtoul_l.isra.0+0xb0>
 8008a20:	2601      	movs	r6, #1
 8008a22:	fb00 4003 	mla	r0, r0, r3, r4
 8008a26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a2a:	e7e9      	b.n	8008a00 <_strtoul_l.isra.0+0x68>
 8008a2c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008a30:	f1bc 0f19 	cmp.w	ip, #25
 8008a34:	d801      	bhi.n	8008a3a <_strtoul_l.isra.0+0xa2>
 8008a36:	3c37      	subs	r4, #55	@ 0x37
 8008a38:	e7e8      	b.n	8008a0c <_strtoul_l.isra.0+0x74>
 8008a3a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008a3e:	f1bc 0f19 	cmp.w	ip, #25
 8008a42:	d804      	bhi.n	8008a4e <_strtoul_l.isra.0+0xb6>
 8008a44:	3c57      	subs	r4, #87	@ 0x57
 8008a46:	e7e1      	b.n	8008a0c <_strtoul_l.isra.0+0x74>
 8008a48:	f04f 36ff 	mov.w	r6, #4294967295
 8008a4c:	e7eb      	b.n	8008a26 <_strtoul_l.isra.0+0x8e>
 8008a4e:	1c73      	adds	r3, r6, #1
 8008a50:	d106      	bne.n	8008a60 <_strtoul_l.isra.0+0xc8>
 8008a52:	2322      	movs	r3, #34	@ 0x22
 8008a54:	4630      	mov	r0, r6
 8008a56:	f8ce 3000 	str.w	r3, [lr]
 8008a5a:	b932      	cbnz	r2, 8008a6a <_strtoul_l.isra.0+0xd2>
 8008a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a60:	b107      	cbz	r7, 8008a64 <_strtoul_l.isra.0+0xcc>
 8008a62:	4240      	negs	r0, r0
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	d0f9      	beq.n	8008a5c <_strtoul_l.isra.0+0xc4>
 8008a68:	b106      	cbz	r6, 8008a6c <_strtoul_l.isra.0+0xd4>
 8008a6a:	1e69      	subs	r1, r5, #1
 8008a6c:	6011      	str	r1, [r2, #0]
 8008a6e:	e7f5      	b.n	8008a5c <_strtoul_l.isra.0+0xc4>
 8008a70:	0800c4e9 	.word	0x0800c4e9

08008a74 <strtoul>:
 8008a74:	4613      	mov	r3, r2
 8008a76:	460a      	mov	r2, r1
 8008a78:	4601      	mov	r1, r0
 8008a7a:	4802      	ldr	r0, [pc, #8]	@ (8008a84 <strtoul+0x10>)
 8008a7c:	6800      	ldr	r0, [r0, #0]
 8008a7e:	f7ff bf8b 	b.w	8008998 <_strtoul_l.isra.0>
 8008a82:	bf00      	nop
 8008a84:	20000188 	.word	0x20000188

08008a88 <__cvt>:
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a8e:	461d      	mov	r5, r3
 8008a90:	bfbb      	ittet	lt
 8008a92:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008a96:	461d      	movlt	r5, r3
 8008a98:	2300      	movge	r3, #0
 8008a9a:	232d      	movlt	r3, #45	@ 0x2d
 8008a9c:	b088      	sub	sp, #32
 8008a9e:	4614      	mov	r4, r2
 8008aa0:	bfb8      	it	lt
 8008aa2:	4614      	movlt	r4, r2
 8008aa4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008aa6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008aa8:	7013      	strb	r3, [r2, #0]
 8008aaa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008aac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008ab0:	f023 0820 	bic.w	r8, r3, #32
 8008ab4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ab8:	d005      	beq.n	8008ac6 <__cvt+0x3e>
 8008aba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008abe:	d100      	bne.n	8008ac2 <__cvt+0x3a>
 8008ac0:	3601      	adds	r6, #1
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e000      	b.n	8008ac8 <__cvt+0x40>
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	aa07      	add	r2, sp, #28
 8008aca:	9204      	str	r2, [sp, #16]
 8008acc:	aa06      	add	r2, sp, #24
 8008ace:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008ad2:	e9cd 3600 	strd	r3, r6, [sp]
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	462b      	mov	r3, r5
 8008ada:	f000 fec9 	bl	8009870 <_dtoa_r>
 8008ade:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	d119      	bne.n	8008b1a <__cvt+0x92>
 8008ae6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ae8:	07db      	lsls	r3, r3, #31
 8008aea:	d50e      	bpl.n	8008b0a <__cvt+0x82>
 8008aec:	eb00 0906 	add.w	r9, r0, r6
 8008af0:	2200      	movs	r2, #0
 8008af2:	2300      	movs	r3, #0
 8008af4:	4620      	mov	r0, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	f7f7 ff56 	bl	80009a8 <__aeabi_dcmpeq>
 8008afc:	b108      	cbz	r0, 8008b02 <__cvt+0x7a>
 8008afe:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b02:	2230      	movs	r2, #48	@ 0x30
 8008b04:	9b07      	ldr	r3, [sp, #28]
 8008b06:	454b      	cmp	r3, r9
 8008b08:	d31e      	bcc.n	8008b48 <__cvt+0xc0>
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008b10:	1bdb      	subs	r3, r3, r7
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	b008      	add	sp, #32
 8008b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b1e:	eb00 0906 	add.w	r9, r0, r6
 8008b22:	d1e5      	bne.n	8008af0 <__cvt+0x68>
 8008b24:	7803      	ldrb	r3, [r0, #0]
 8008b26:	2b30      	cmp	r3, #48	@ 0x30
 8008b28:	d10a      	bne.n	8008b40 <__cvt+0xb8>
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	f7f7 ff39 	bl	80009a8 <__aeabi_dcmpeq>
 8008b36:	b918      	cbnz	r0, 8008b40 <__cvt+0xb8>
 8008b38:	f1c6 0601 	rsb	r6, r6, #1
 8008b3c:	f8ca 6000 	str.w	r6, [sl]
 8008b40:	f8da 3000 	ldr.w	r3, [sl]
 8008b44:	4499      	add	r9, r3
 8008b46:	e7d3      	b.n	8008af0 <__cvt+0x68>
 8008b48:	1c59      	adds	r1, r3, #1
 8008b4a:	9107      	str	r1, [sp, #28]
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	e7d9      	b.n	8008b04 <__cvt+0x7c>

08008b50 <__exponent>:
 8008b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b52:	2900      	cmp	r1, #0
 8008b54:	bfb6      	itet	lt
 8008b56:	232d      	movlt	r3, #45	@ 0x2d
 8008b58:	232b      	movge	r3, #43	@ 0x2b
 8008b5a:	4249      	neglt	r1, r1
 8008b5c:	2909      	cmp	r1, #9
 8008b5e:	7002      	strb	r2, [r0, #0]
 8008b60:	7043      	strb	r3, [r0, #1]
 8008b62:	dd29      	ble.n	8008bb8 <__exponent+0x68>
 8008b64:	f10d 0307 	add.w	r3, sp, #7
 8008b68:	461d      	mov	r5, r3
 8008b6a:	270a      	movs	r7, #10
 8008b6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008b70:	461a      	mov	r2, r3
 8008b72:	fb07 1416 	mls	r4, r7, r6, r1
 8008b76:	3430      	adds	r4, #48	@ 0x30
 8008b78:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	2c63      	cmp	r4, #99	@ 0x63
 8008b80:	4631      	mov	r1, r6
 8008b82:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b86:	dcf1      	bgt.n	8008b6c <__exponent+0x1c>
 8008b88:	3130      	adds	r1, #48	@ 0x30
 8008b8a:	1e94      	subs	r4, r2, #2
 8008b8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b90:	4623      	mov	r3, r4
 8008b92:	1c41      	adds	r1, r0, #1
 8008b94:	42ab      	cmp	r3, r5
 8008b96:	d30a      	bcc.n	8008bae <__exponent+0x5e>
 8008b98:	f10d 0309 	add.w	r3, sp, #9
 8008b9c:	1a9b      	subs	r3, r3, r2
 8008b9e:	42ac      	cmp	r4, r5
 8008ba0:	bf88      	it	hi
 8008ba2:	2300      	movhi	r3, #0
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	4403      	add	r3, r0
 8008ba8:	1a18      	subs	r0, r3, r0
 8008baa:	b003      	add	sp, #12
 8008bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bae:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008bb2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008bb6:	e7ed      	b.n	8008b94 <__exponent+0x44>
 8008bb8:	2330      	movs	r3, #48	@ 0x30
 8008bba:	3130      	adds	r1, #48	@ 0x30
 8008bbc:	7083      	strb	r3, [r0, #2]
 8008bbe:	70c1      	strb	r1, [r0, #3]
 8008bc0:	1d03      	adds	r3, r0, #4
 8008bc2:	e7f1      	b.n	8008ba8 <__exponent+0x58>

08008bc4 <_printf_float>:
 8008bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	b091      	sub	sp, #68	@ 0x44
 8008bca:	460c      	mov	r4, r1
 8008bcc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008bd0:	4616      	mov	r6, r2
 8008bd2:	461f      	mov	r7, r3
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	f000 fd29 	bl	800962c <_localeconv_r>
 8008bda:	6803      	ldr	r3, [r0, #0]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	9308      	str	r3, [sp, #32]
 8008be0:	f7f7 fab6 	bl	8000150 <strlen>
 8008be4:	2300      	movs	r3, #0
 8008be6:	930e      	str	r3, [sp, #56]	@ 0x38
 8008be8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bec:	9009      	str	r0, [sp, #36]	@ 0x24
 8008bee:	3307      	adds	r3, #7
 8008bf0:	f023 0307 	bic.w	r3, r3, #7
 8008bf4:	f103 0208 	add.w	r2, r3, #8
 8008bf8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008bfc:	f8d4 b000 	ldr.w	fp, [r4]
 8008c00:	f8c8 2000 	str.w	r2, [r8]
 8008c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c0e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008c12:	f04f 32ff 	mov.w	r2, #4294967295
 8008c16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c1e:	4b9c      	ldr	r3, [pc, #624]	@ (8008e90 <_printf_float+0x2cc>)
 8008c20:	f7f7 fef4 	bl	8000a0c <__aeabi_dcmpun>
 8008c24:	bb70      	cbnz	r0, 8008c84 <_printf_float+0xc0>
 8008c26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2e:	4b98      	ldr	r3, [pc, #608]	@ (8008e90 <_printf_float+0x2cc>)
 8008c30:	f7f7 fece 	bl	80009d0 <__aeabi_dcmple>
 8008c34:	bb30      	cbnz	r0, 8008c84 <_printf_float+0xc0>
 8008c36:	2200      	movs	r2, #0
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	f7f7 febd 	bl	80009bc <__aeabi_dcmplt>
 8008c42:	b110      	cbz	r0, 8008c4a <_printf_float+0x86>
 8008c44:	232d      	movs	r3, #45	@ 0x2d
 8008c46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c4a:	4a92      	ldr	r2, [pc, #584]	@ (8008e94 <_printf_float+0x2d0>)
 8008c4c:	4b92      	ldr	r3, [pc, #584]	@ (8008e98 <_printf_float+0x2d4>)
 8008c4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c52:	bf8c      	ite	hi
 8008c54:	4690      	movhi	r8, r2
 8008c56:	4698      	movls	r8, r3
 8008c58:	2303      	movs	r3, #3
 8008c5a:	f04f 0900 	mov.w	r9, #0
 8008c5e:	6123      	str	r3, [r4, #16]
 8008c60:	f02b 0304 	bic.w	r3, fp, #4
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	4633      	mov	r3, r6
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	9700      	str	r7, [sp, #0]
 8008c6e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008c70:	f000 f9d4 	bl	800901c <_printf_common>
 8008c74:	3001      	adds	r0, #1
 8008c76:	f040 8090 	bne.w	8008d9a <_printf_float+0x1d6>
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	b011      	add	sp, #68	@ 0x44
 8008c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c84:	4642      	mov	r2, r8
 8008c86:	464b      	mov	r3, r9
 8008c88:	4640      	mov	r0, r8
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	f7f7 febe 	bl	8000a0c <__aeabi_dcmpun>
 8008c90:	b148      	cbz	r0, 8008ca6 <_printf_float+0xe2>
 8008c92:	464b      	mov	r3, r9
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	bfb8      	it	lt
 8008c98:	232d      	movlt	r3, #45	@ 0x2d
 8008c9a:	4a80      	ldr	r2, [pc, #512]	@ (8008e9c <_printf_float+0x2d8>)
 8008c9c:	bfb8      	it	lt
 8008c9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8008ea0 <_printf_float+0x2dc>)
 8008ca4:	e7d3      	b.n	8008c4e <_printf_float+0x8a>
 8008ca6:	6863      	ldr	r3, [r4, #4]
 8008ca8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008cac:	1c5a      	adds	r2, r3, #1
 8008cae:	d13f      	bne.n	8008d30 <_printf_float+0x16c>
 8008cb0:	2306      	movs	r3, #6
 8008cb2:	6063      	str	r3, [r4, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	9206      	str	r2, [sp, #24]
 8008cbe:	aa0e      	add	r2, sp, #56	@ 0x38
 8008cc0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008cc4:	aa0d      	add	r2, sp, #52	@ 0x34
 8008cc6:	9203      	str	r2, [sp, #12]
 8008cc8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008ccc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008cd0:	6863      	ldr	r3, [r4, #4]
 8008cd2:	4642      	mov	r2, r8
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	464b      	mov	r3, r9
 8008cda:	910a      	str	r1, [sp, #40]	@ 0x28
 8008cdc:	f7ff fed4 	bl	8008a88 <__cvt>
 8008ce0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	2947      	cmp	r1, #71	@ 0x47
 8008ce6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008ce8:	d128      	bne.n	8008d3c <_printf_float+0x178>
 8008cea:	1cc8      	adds	r0, r1, #3
 8008cec:	db02      	blt.n	8008cf4 <_printf_float+0x130>
 8008cee:	6863      	ldr	r3, [r4, #4]
 8008cf0:	4299      	cmp	r1, r3
 8008cf2:	dd40      	ble.n	8008d76 <_printf_float+0x1b2>
 8008cf4:	f1aa 0a02 	sub.w	sl, sl, #2
 8008cf8:	fa5f fa8a 	uxtb.w	sl, sl
 8008cfc:	4652      	mov	r2, sl
 8008cfe:	3901      	subs	r1, #1
 8008d00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d04:	910d      	str	r1, [sp, #52]	@ 0x34
 8008d06:	f7ff ff23 	bl	8008b50 <__exponent>
 8008d0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d0c:	4681      	mov	r9, r0
 8008d0e:	1813      	adds	r3, r2, r0
 8008d10:	2a01      	cmp	r2, #1
 8008d12:	6123      	str	r3, [r4, #16]
 8008d14:	dc02      	bgt.n	8008d1c <_printf_float+0x158>
 8008d16:	6822      	ldr	r2, [r4, #0]
 8008d18:	07d2      	lsls	r2, r2, #31
 8008d1a:	d501      	bpl.n	8008d20 <_printf_float+0x15c>
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d09e      	beq.n	8008c66 <_printf_float+0xa2>
 8008d28:	232d      	movs	r3, #45	@ 0x2d
 8008d2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d2e:	e79a      	b.n	8008c66 <_printf_float+0xa2>
 8008d30:	2947      	cmp	r1, #71	@ 0x47
 8008d32:	d1bf      	bne.n	8008cb4 <_printf_float+0xf0>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1bd      	bne.n	8008cb4 <_printf_float+0xf0>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e7ba      	b.n	8008cb2 <_printf_float+0xee>
 8008d3c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d40:	d9dc      	bls.n	8008cfc <_printf_float+0x138>
 8008d42:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d46:	d118      	bne.n	8008d7a <_printf_float+0x1b6>
 8008d48:	2900      	cmp	r1, #0
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	dd0b      	ble.n	8008d66 <_printf_float+0x1a2>
 8008d4e:	6121      	str	r1, [r4, #16]
 8008d50:	b913      	cbnz	r3, 8008d58 <_printf_float+0x194>
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	07d0      	lsls	r0, r2, #31
 8008d56:	d502      	bpl.n	8008d5e <_printf_float+0x19a>
 8008d58:	3301      	adds	r3, #1
 8008d5a:	440b      	add	r3, r1
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	f04f 0900 	mov.w	r9, #0
 8008d62:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d64:	e7dc      	b.n	8008d20 <_printf_float+0x15c>
 8008d66:	b913      	cbnz	r3, 8008d6e <_printf_float+0x1aa>
 8008d68:	6822      	ldr	r2, [r4, #0]
 8008d6a:	07d2      	lsls	r2, r2, #31
 8008d6c:	d501      	bpl.n	8008d72 <_printf_float+0x1ae>
 8008d6e:	3302      	adds	r3, #2
 8008d70:	e7f4      	b.n	8008d5c <_printf_float+0x198>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e7f2      	b.n	8008d5c <_printf_float+0x198>
 8008d76:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008d7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d7c:	4299      	cmp	r1, r3
 8008d7e:	db05      	blt.n	8008d8c <_printf_float+0x1c8>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	6121      	str	r1, [r4, #16]
 8008d84:	07d8      	lsls	r0, r3, #31
 8008d86:	d5ea      	bpl.n	8008d5e <_printf_float+0x19a>
 8008d88:	1c4b      	adds	r3, r1, #1
 8008d8a:	e7e7      	b.n	8008d5c <_printf_float+0x198>
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	bfcc      	ite	gt
 8008d90:	2201      	movgt	r2, #1
 8008d92:	f1c1 0202 	rsble	r2, r1, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	e7e0      	b.n	8008d5c <_printf_float+0x198>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	055a      	lsls	r2, r3, #21
 8008d9e:	d407      	bmi.n	8008db0 <_printf_float+0x1ec>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	4642      	mov	r2, r8
 8008da4:	4631      	mov	r1, r6
 8008da6:	4628      	mov	r0, r5
 8008da8:	47b8      	blx	r7
 8008daa:	3001      	adds	r0, #1
 8008dac:	d12b      	bne.n	8008e06 <_printf_float+0x242>
 8008dae:	e764      	b.n	8008c7a <_printf_float+0xb6>
 8008db0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008db4:	f240 80dc 	bls.w	8008f70 <_printf_float+0x3ac>
 8008db8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f7f7 fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d033      	beq.n	8008e30 <_printf_float+0x26c>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	4a35      	ldr	r2, [pc, #212]	@ (8008ea4 <_printf_float+0x2e0>)
 8008dd0:	47b8      	blx	r7
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	f43f af51 	beq.w	8008c7a <_printf_float+0xb6>
 8008dd8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008ddc:	4543      	cmp	r3, r8
 8008dde:	db02      	blt.n	8008de6 <_printf_float+0x222>
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	07d8      	lsls	r0, r3, #31
 8008de4:	d50f      	bpl.n	8008e06 <_printf_float+0x242>
 8008de6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008dea:	4631      	mov	r1, r6
 8008dec:	4628      	mov	r0, r5
 8008dee:	47b8      	blx	r7
 8008df0:	3001      	adds	r0, #1
 8008df2:	f43f af42 	beq.w	8008c7a <_printf_float+0xb6>
 8008df6:	f04f 0900 	mov.w	r9, #0
 8008dfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8008dfe:	f104 0a1a 	add.w	sl, r4, #26
 8008e02:	45c8      	cmp	r8, r9
 8008e04:	dc09      	bgt.n	8008e1a <_printf_float+0x256>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	079b      	lsls	r3, r3, #30
 8008e0a:	f100 8102 	bmi.w	8009012 <_printf_float+0x44e>
 8008e0e:	68e0      	ldr	r0, [r4, #12]
 8008e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e12:	4298      	cmp	r0, r3
 8008e14:	bfb8      	it	lt
 8008e16:	4618      	movlt	r0, r3
 8008e18:	e731      	b.n	8008c7e <_printf_float+0xba>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	4631      	mov	r1, r6
 8008e20:	4628      	mov	r0, r5
 8008e22:	47b8      	blx	r7
 8008e24:	3001      	adds	r0, #1
 8008e26:	f43f af28 	beq.w	8008c7a <_printf_float+0xb6>
 8008e2a:	f109 0901 	add.w	r9, r9, #1
 8008e2e:	e7e8      	b.n	8008e02 <_printf_float+0x23e>
 8008e30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dc38      	bgt.n	8008ea8 <_printf_float+0x2e4>
 8008e36:	2301      	movs	r3, #1
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	4a19      	ldr	r2, [pc, #100]	@ (8008ea4 <_printf_float+0x2e0>)
 8008e3e:	47b8      	blx	r7
 8008e40:	3001      	adds	r0, #1
 8008e42:	f43f af1a 	beq.w	8008c7a <_printf_float+0xb6>
 8008e46:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008e4a:	ea59 0303 	orrs.w	r3, r9, r3
 8008e4e:	d102      	bne.n	8008e56 <_printf_float+0x292>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	07d9      	lsls	r1, r3, #31
 8008e54:	d5d7      	bpl.n	8008e06 <_printf_float+0x242>
 8008e56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e5a:	4631      	mov	r1, r6
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	47b8      	blx	r7
 8008e60:	3001      	adds	r0, #1
 8008e62:	f43f af0a 	beq.w	8008c7a <_printf_float+0xb6>
 8008e66:	f04f 0a00 	mov.w	sl, #0
 8008e6a:	f104 0b1a 	add.w	fp, r4, #26
 8008e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e70:	425b      	negs	r3, r3
 8008e72:	4553      	cmp	r3, sl
 8008e74:	dc01      	bgt.n	8008e7a <_printf_float+0x2b6>
 8008e76:	464b      	mov	r3, r9
 8008e78:	e793      	b.n	8008da2 <_printf_float+0x1de>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	465a      	mov	r2, fp
 8008e7e:	4631      	mov	r1, r6
 8008e80:	4628      	mov	r0, r5
 8008e82:	47b8      	blx	r7
 8008e84:	3001      	adds	r0, #1
 8008e86:	f43f aef8 	beq.w	8008c7a <_printf_float+0xb6>
 8008e8a:	f10a 0a01 	add.w	sl, sl, #1
 8008e8e:	e7ee      	b.n	8008e6e <_printf_float+0x2aa>
 8008e90:	7fefffff 	.word	0x7fefffff
 8008e94:	0800c2cc 	.word	0x0800c2cc
 8008e98:	0800c2c8 	.word	0x0800c2c8
 8008e9c:	0800c2d4 	.word	0x0800c2d4
 8008ea0:	0800c2d0 	.word	0x0800c2d0
 8008ea4:	0800c2d8 	.word	0x0800c2d8
 8008ea8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008eaa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008eae:	4553      	cmp	r3, sl
 8008eb0:	bfa8      	it	ge
 8008eb2:	4653      	movge	r3, sl
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	4699      	mov	r9, r3
 8008eb8:	dc36      	bgt.n	8008f28 <_printf_float+0x364>
 8008eba:	f04f 0b00 	mov.w	fp, #0
 8008ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ec2:	f104 021a 	add.w	r2, r4, #26
 8008ec6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ec8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eca:	eba3 0309 	sub.w	r3, r3, r9
 8008ece:	455b      	cmp	r3, fp
 8008ed0:	dc31      	bgt.n	8008f36 <_printf_float+0x372>
 8008ed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ed4:	459a      	cmp	sl, r3
 8008ed6:	dc3a      	bgt.n	8008f4e <_printf_float+0x38a>
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	07da      	lsls	r2, r3, #31
 8008edc:	d437      	bmi.n	8008f4e <_printf_float+0x38a>
 8008ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ee0:	ebaa 0903 	sub.w	r9, sl, r3
 8008ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ee6:	ebaa 0303 	sub.w	r3, sl, r3
 8008eea:	4599      	cmp	r9, r3
 8008eec:	bfa8      	it	ge
 8008eee:	4699      	movge	r9, r3
 8008ef0:	f1b9 0f00 	cmp.w	r9, #0
 8008ef4:	dc33      	bgt.n	8008f5e <_printf_float+0x39a>
 8008ef6:	f04f 0800 	mov.w	r8, #0
 8008efa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008efe:	f104 0b1a 	add.w	fp, r4, #26
 8008f02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f04:	ebaa 0303 	sub.w	r3, sl, r3
 8008f08:	eba3 0309 	sub.w	r3, r3, r9
 8008f0c:	4543      	cmp	r3, r8
 8008f0e:	f77f af7a 	ble.w	8008e06 <_printf_float+0x242>
 8008f12:	2301      	movs	r3, #1
 8008f14:	465a      	mov	r2, fp
 8008f16:	4631      	mov	r1, r6
 8008f18:	4628      	mov	r0, r5
 8008f1a:	47b8      	blx	r7
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	f43f aeac 	beq.w	8008c7a <_printf_float+0xb6>
 8008f22:	f108 0801 	add.w	r8, r8, #1
 8008f26:	e7ec      	b.n	8008f02 <_printf_float+0x33e>
 8008f28:	4642      	mov	r2, r8
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b8      	blx	r7
 8008f30:	3001      	adds	r0, #1
 8008f32:	d1c2      	bne.n	8008eba <_printf_float+0x2f6>
 8008f34:	e6a1      	b.n	8008c7a <_printf_float+0xb6>
 8008f36:	2301      	movs	r3, #1
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	920a      	str	r2, [sp, #40]	@ 0x28
 8008f3e:	47b8      	blx	r7
 8008f40:	3001      	adds	r0, #1
 8008f42:	f43f ae9a 	beq.w	8008c7a <_printf_float+0xb6>
 8008f46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f48:	f10b 0b01 	add.w	fp, fp, #1
 8008f4c:	e7bb      	b.n	8008ec6 <_printf_float+0x302>
 8008f4e:	4631      	mov	r1, r6
 8008f50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f54:	4628      	mov	r0, r5
 8008f56:	47b8      	blx	r7
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d1c0      	bne.n	8008ede <_printf_float+0x31a>
 8008f5c:	e68d      	b.n	8008c7a <_printf_float+0xb6>
 8008f5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f60:	464b      	mov	r3, r9
 8008f62:	4631      	mov	r1, r6
 8008f64:	4628      	mov	r0, r5
 8008f66:	4442      	add	r2, r8
 8008f68:	47b8      	blx	r7
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d1c3      	bne.n	8008ef6 <_printf_float+0x332>
 8008f6e:	e684      	b.n	8008c7a <_printf_float+0xb6>
 8008f70:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008f74:	f1ba 0f01 	cmp.w	sl, #1
 8008f78:	dc01      	bgt.n	8008f7e <_printf_float+0x3ba>
 8008f7a:	07db      	lsls	r3, r3, #31
 8008f7c:	d536      	bpl.n	8008fec <_printf_float+0x428>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	4642      	mov	r2, r8
 8008f82:	4631      	mov	r1, r6
 8008f84:	4628      	mov	r0, r5
 8008f86:	47b8      	blx	r7
 8008f88:	3001      	adds	r0, #1
 8008f8a:	f43f ae76 	beq.w	8008c7a <_printf_float+0xb6>
 8008f8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f92:	4631      	mov	r1, r6
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b8      	blx	r7
 8008f98:	3001      	adds	r0, #1
 8008f9a:	f43f ae6e 	beq.w	8008c7a <_printf_float+0xb6>
 8008f9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008faa:	f7f7 fcfd 	bl	80009a8 <__aeabi_dcmpeq>
 8008fae:	b9c0      	cbnz	r0, 8008fe2 <_printf_float+0x41e>
 8008fb0:	4653      	mov	r3, sl
 8008fb2:	f108 0201 	add.w	r2, r8, #1
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	4628      	mov	r0, r5
 8008fba:	47b8      	blx	r7
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d10c      	bne.n	8008fda <_printf_float+0x416>
 8008fc0:	e65b      	b.n	8008c7a <_printf_float+0xb6>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	465a      	mov	r2, fp
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	4628      	mov	r0, r5
 8008fca:	47b8      	blx	r7
 8008fcc:	3001      	adds	r0, #1
 8008fce:	f43f ae54 	beq.w	8008c7a <_printf_float+0xb6>
 8008fd2:	f108 0801 	add.w	r8, r8, #1
 8008fd6:	45d0      	cmp	r8, sl
 8008fd8:	dbf3      	blt.n	8008fc2 <_printf_float+0x3fe>
 8008fda:	464b      	mov	r3, r9
 8008fdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008fe0:	e6e0      	b.n	8008da4 <_printf_float+0x1e0>
 8008fe2:	f04f 0800 	mov.w	r8, #0
 8008fe6:	f104 0b1a 	add.w	fp, r4, #26
 8008fea:	e7f4      	b.n	8008fd6 <_printf_float+0x412>
 8008fec:	2301      	movs	r3, #1
 8008fee:	4642      	mov	r2, r8
 8008ff0:	e7e1      	b.n	8008fb6 <_printf_float+0x3f2>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	464a      	mov	r2, r9
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b8      	blx	r7
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	f43f ae3c 	beq.w	8008c7a <_printf_float+0xb6>
 8009002:	f108 0801 	add.w	r8, r8, #1
 8009006:	68e3      	ldr	r3, [r4, #12]
 8009008:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800900a:	1a5b      	subs	r3, r3, r1
 800900c:	4543      	cmp	r3, r8
 800900e:	dcf0      	bgt.n	8008ff2 <_printf_float+0x42e>
 8009010:	e6fd      	b.n	8008e0e <_printf_float+0x24a>
 8009012:	f04f 0800 	mov.w	r8, #0
 8009016:	f104 0919 	add.w	r9, r4, #25
 800901a:	e7f4      	b.n	8009006 <_printf_float+0x442>

0800901c <_printf_common>:
 800901c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009020:	4616      	mov	r6, r2
 8009022:	4698      	mov	r8, r3
 8009024:	688a      	ldr	r2, [r1, #8]
 8009026:	690b      	ldr	r3, [r1, #16]
 8009028:	4607      	mov	r7, r0
 800902a:	4293      	cmp	r3, r2
 800902c:	bfb8      	it	lt
 800902e:	4613      	movlt	r3, r2
 8009030:	6033      	str	r3, [r6, #0]
 8009032:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009036:	460c      	mov	r4, r1
 8009038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800903c:	b10a      	cbz	r2, 8009042 <_printf_common+0x26>
 800903e:	3301      	adds	r3, #1
 8009040:	6033      	str	r3, [r6, #0]
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	0699      	lsls	r1, r3, #26
 8009046:	bf42      	ittt	mi
 8009048:	6833      	ldrmi	r3, [r6, #0]
 800904a:	3302      	addmi	r3, #2
 800904c:	6033      	strmi	r3, [r6, #0]
 800904e:	6825      	ldr	r5, [r4, #0]
 8009050:	f015 0506 	ands.w	r5, r5, #6
 8009054:	d106      	bne.n	8009064 <_printf_common+0x48>
 8009056:	f104 0a19 	add.w	sl, r4, #25
 800905a:	68e3      	ldr	r3, [r4, #12]
 800905c:	6832      	ldr	r2, [r6, #0]
 800905e:	1a9b      	subs	r3, r3, r2
 8009060:	42ab      	cmp	r3, r5
 8009062:	dc2b      	bgt.n	80090bc <_printf_common+0xa0>
 8009064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009068:	6822      	ldr	r2, [r4, #0]
 800906a:	3b00      	subs	r3, #0
 800906c:	bf18      	it	ne
 800906e:	2301      	movne	r3, #1
 8009070:	0692      	lsls	r2, r2, #26
 8009072:	d430      	bmi.n	80090d6 <_printf_common+0xba>
 8009074:	4641      	mov	r1, r8
 8009076:	4638      	mov	r0, r7
 8009078:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800907c:	47c8      	blx	r9
 800907e:	3001      	adds	r0, #1
 8009080:	d023      	beq.n	80090ca <_printf_common+0xae>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	6922      	ldr	r2, [r4, #16]
 8009086:	f003 0306 	and.w	r3, r3, #6
 800908a:	2b04      	cmp	r3, #4
 800908c:	bf14      	ite	ne
 800908e:	2500      	movne	r5, #0
 8009090:	6833      	ldreq	r3, [r6, #0]
 8009092:	f04f 0600 	mov.w	r6, #0
 8009096:	bf08      	it	eq
 8009098:	68e5      	ldreq	r5, [r4, #12]
 800909a:	f104 041a 	add.w	r4, r4, #26
 800909e:	bf08      	it	eq
 80090a0:	1aed      	subeq	r5, r5, r3
 80090a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80090a6:	bf08      	it	eq
 80090a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090ac:	4293      	cmp	r3, r2
 80090ae:	bfc4      	itt	gt
 80090b0:	1a9b      	subgt	r3, r3, r2
 80090b2:	18ed      	addgt	r5, r5, r3
 80090b4:	42b5      	cmp	r5, r6
 80090b6:	d11a      	bne.n	80090ee <_printf_common+0xd2>
 80090b8:	2000      	movs	r0, #0
 80090ba:	e008      	b.n	80090ce <_printf_common+0xb2>
 80090bc:	2301      	movs	r3, #1
 80090be:	4652      	mov	r2, sl
 80090c0:	4641      	mov	r1, r8
 80090c2:	4638      	mov	r0, r7
 80090c4:	47c8      	blx	r9
 80090c6:	3001      	adds	r0, #1
 80090c8:	d103      	bne.n	80090d2 <_printf_common+0xb6>
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	3501      	adds	r5, #1
 80090d4:	e7c1      	b.n	800905a <_printf_common+0x3e>
 80090d6:	2030      	movs	r0, #48	@ 0x30
 80090d8:	18e1      	adds	r1, r4, r3
 80090da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090e4:	4422      	add	r2, r4
 80090e6:	3302      	adds	r3, #2
 80090e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090ec:	e7c2      	b.n	8009074 <_printf_common+0x58>
 80090ee:	2301      	movs	r3, #1
 80090f0:	4622      	mov	r2, r4
 80090f2:	4641      	mov	r1, r8
 80090f4:	4638      	mov	r0, r7
 80090f6:	47c8      	blx	r9
 80090f8:	3001      	adds	r0, #1
 80090fa:	d0e6      	beq.n	80090ca <_printf_common+0xae>
 80090fc:	3601      	adds	r6, #1
 80090fe:	e7d9      	b.n	80090b4 <_printf_common+0x98>

08009100 <_printf_i>:
 8009100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009104:	7e0f      	ldrb	r7, [r1, #24]
 8009106:	4691      	mov	r9, r2
 8009108:	2f78      	cmp	r7, #120	@ 0x78
 800910a:	4680      	mov	r8, r0
 800910c:	460c      	mov	r4, r1
 800910e:	469a      	mov	sl, r3
 8009110:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009116:	d807      	bhi.n	8009128 <_printf_i+0x28>
 8009118:	2f62      	cmp	r7, #98	@ 0x62
 800911a:	d80a      	bhi.n	8009132 <_printf_i+0x32>
 800911c:	2f00      	cmp	r7, #0
 800911e:	f000 80d1 	beq.w	80092c4 <_printf_i+0x1c4>
 8009122:	2f58      	cmp	r7, #88	@ 0x58
 8009124:	f000 80b8 	beq.w	8009298 <_printf_i+0x198>
 8009128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800912c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009130:	e03a      	b.n	80091a8 <_printf_i+0xa8>
 8009132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009136:	2b15      	cmp	r3, #21
 8009138:	d8f6      	bhi.n	8009128 <_printf_i+0x28>
 800913a:	a101      	add	r1, pc, #4	@ (adr r1, 8009140 <_printf_i+0x40>)
 800913c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009140:	08009199 	.word	0x08009199
 8009144:	080091ad 	.word	0x080091ad
 8009148:	08009129 	.word	0x08009129
 800914c:	08009129 	.word	0x08009129
 8009150:	08009129 	.word	0x08009129
 8009154:	08009129 	.word	0x08009129
 8009158:	080091ad 	.word	0x080091ad
 800915c:	08009129 	.word	0x08009129
 8009160:	08009129 	.word	0x08009129
 8009164:	08009129 	.word	0x08009129
 8009168:	08009129 	.word	0x08009129
 800916c:	080092ab 	.word	0x080092ab
 8009170:	080091d7 	.word	0x080091d7
 8009174:	08009265 	.word	0x08009265
 8009178:	08009129 	.word	0x08009129
 800917c:	08009129 	.word	0x08009129
 8009180:	080092cd 	.word	0x080092cd
 8009184:	08009129 	.word	0x08009129
 8009188:	080091d7 	.word	0x080091d7
 800918c:	08009129 	.word	0x08009129
 8009190:	08009129 	.word	0x08009129
 8009194:	0800926d 	.word	0x0800926d
 8009198:	6833      	ldr	r3, [r6, #0]
 800919a:	1d1a      	adds	r2, r3, #4
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6032      	str	r2, [r6, #0]
 80091a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091a8:	2301      	movs	r3, #1
 80091aa:	e09c      	b.n	80092e6 <_printf_i+0x1e6>
 80091ac:	6833      	ldr	r3, [r6, #0]
 80091ae:	6820      	ldr	r0, [r4, #0]
 80091b0:	1d19      	adds	r1, r3, #4
 80091b2:	6031      	str	r1, [r6, #0]
 80091b4:	0606      	lsls	r6, r0, #24
 80091b6:	d501      	bpl.n	80091bc <_printf_i+0xbc>
 80091b8:	681d      	ldr	r5, [r3, #0]
 80091ba:	e003      	b.n	80091c4 <_printf_i+0xc4>
 80091bc:	0645      	lsls	r5, r0, #25
 80091be:	d5fb      	bpl.n	80091b8 <_printf_i+0xb8>
 80091c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091c4:	2d00      	cmp	r5, #0
 80091c6:	da03      	bge.n	80091d0 <_printf_i+0xd0>
 80091c8:	232d      	movs	r3, #45	@ 0x2d
 80091ca:	426d      	negs	r5, r5
 80091cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091d0:	230a      	movs	r3, #10
 80091d2:	4858      	ldr	r0, [pc, #352]	@ (8009334 <_printf_i+0x234>)
 80091d4:	e011      	b.n	80091fa <_printf_i+0xfa>
 80091d6:	6821      	ldr	r1, [r4, #0]
 80091d8:	6833      	ldr	r3, [r6, #0]
 80091da:	0608      	lsls	r0, r1, #24
 80091dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80091e0:	d402      	bmi.n	80091e8 <_printf_i+0xe8>
 80091e2:	0649      	lsls	r1, r1, #25
 80091e4:	bf48      	it	mi
 80091e6:	b2ad      	uxthmi	r5, r5
 80091e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80091ea:	6033      	str	r3, [r6, #0]
 80091ec:	bf14      	ite	ne
 80091ee:	230a      	movne	r3, #10
 80091f0:	2308      	moveq	r3, #8
 80091f2:	4850      	ldr	r0, [pc, #320]	@ (8009334 <_printf_i+0x234>)
 80091f4:	2100      	movs	r1, #0
 80091f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091fa:	6866      	ldr	r6, [r4, #4]
 80091fc:	2e00      	cmp	r6, #0
 80091fe:	60a6      	str	r6, [r4, #8]
 8009200:	db05      	blt.n	800920e <_printf_i+0x10e>
 8009202:	6821      	ldr	r1, [r4, #0]
 8009204:	432e      	orrs	r6, r5
 8009206:	f021 0104 	bic.w	r1, r1, #4
 800920a:	6021      	str	r1, [r4, #0]
 800920c:	d04b      	beq.n	80092a6 <_printf_i+0x1a6>
 800920e:	4616      	mov	r6, r2
 8009210:	fbb5 f1f3 	udiv	r1, r5, r3
 8009214:	fb03 5711 	mls	r7, r3, r1, r5
 8009218:	5dc7      	ldrb	r7, [r0, r7]
 800921a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800921e:	462f      	mov	r7, r5
 8009220:	42bb      	cmp	r3, r7
 8009222:	460d      	mov	r5, r1
 8009224:	d9f4      	bls.n	8009210 <_printf_i+0x110>
 8009226:	2b08      	cmp	r3, #8
 8009228:	d10b      	bne.n	8009242 <_printf_i+0x142>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	07df      	lsls	r7, r3, #31
 800922e:	d508      	bpl.n	8009242 <_printf_i+0x142>
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	6861      	ldr	r1, [r4, #4]
 8009234:	4299      	cmp	r1, r3
 8009236:	bfde      	ittt	le
 8009238:	2330      	movle	r3, #48	@ 0x30
 800923a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800923e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009242:	1b92      	subs	r2, r2, r6
 8009244:	6122      	str	r2, [r4, #16]
 8009246:	464b      	mov	r3, r9
 8009248:	4621      	mov	r1, r4
 800924a:	4640      	mov	r0, r8
 800924c:	f8cd a000 	str.w	sl, [sp]
 8009250:	aa03      	add	r2, sp, #12
 8009252:	f7ff fee3 	bl	800901c <_printf_common>
 8009256:	3001      	adds	r0, #1
 8009258:	d14a      	bne.n	80092f0 <_printf_i+0x1f0>
 800925a:	f04f 30ff 	mov.w	r0, #4294967295
 800925e:	b004      	add	sp, #16
 8009260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	f043 0320 	orr.w	r3, r3, #32
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	2778      	movs	r7, #120	@ 0x78
 800926e:	4832      	ldr	r0, [pc, #200]	@ (8009338 <_printf_i+0x238>)
 8009270:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	6831      	ldr	r1, [r6, #0]
 8009278:	061f      	lsls	r7, r3, #24
 800927a:	f851 5b04 	ldr.w	r5, [r1], #4
 800927e:	d402      	bmi.n	8009286 <_printf_i+0x186>
 8009280:	065f      	lsls	r7, r3, #25
 8009282:	bf48      	it	mi
 8009284:	b2ad      	uxthmi	r5, r5
 8009286:	6031      	str	r1, [r6, #0]
 8009288:	07d9      	lsls	r1, r3, #31
 800928a:	bf44      	itt	mi
 800928c:	f043 0320 	orrmi.w	r3, r3, #32
 8009290:	6023      	strmi	r3, [r4, #0]
 8009292:	b11d      	cbz	r5, 800929c <_printf_i+0x19c>
 8009294:	2310      	movs	r3, #16
 8009296:	e7ad      	b.n	80091f4 <_printf_i+0xf4>
 8009298:	4826      	ldr	r0, [pc, #152]	@ (8009334 <_printf_i+0x234>)
 800929a:	e7e9      	b.n	8009270 <_printf_i+0x170>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	f023 0320 	bic.w	r3, r3, #32
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	e7f6      	b.n	8009294 <_printf_i+0x194>
 80092a6:	4616      	mov	r6, r2
 80092a8:	e7bd      	b.n	8009226 <_printf_i+0x126>
 80092aa:	6833      	ldr	r3, [r6, #0]
 80092ac:	6825      	ldr	r5, [r4, #0]
 80092ae:	1d18      	adds	r0, r3, #4
 80092b0:	6961      	ldr	r1, [r4, #20]
 80092b2:	6030      	str	r0, [r6, #0]
 80092b4:	062e      	lsls	r6, r5, #24
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	d501      	bpl.n	80092be <_printf_i+0x1be>
 80092ba:	6019      	str	r1, [r3, #0]
 80092bc:	e002      	b.n	80092c4 <_printf_i+0x1c4>
 80092be:	0668      	lsls	r0, r5, #25
 80092c0:	d5fb      	bpl.n	80092ba <_printf_i+0x1ba>
 80092c2:	8019      	strh	r1, [r3, #0]
 80092c4:	2300      	movs	r3, #0
 80092c6:	4616      	mov	r6, r2
 80092c8:	6123      	str	r3, [r4, #16]
 80092ca:	e7bc      	b.n	8009246 <_printf_i+0x146>
 80092cc:	6833      	ldr	r3, [r6, #0]
 80092ce:	2100      	movs	r1, #0
 80092d0:	1d1a      	adds	r2, r3, #4
 80092d2:	6032      	str	r2, [r6, #0]
 80092d4:	681e      	ldr	r6, [r3, #0]
 80092d6:	6862      	ldr	r2, [r4, #4]
 80092d8:	4630      	mov	r0, r6
 80092da:	f000 fa1e 	bl	800971a <memchr>
 80092de:	b108      	cbz	r0, 80092e4 <_printf_i+0x1e4>
 80092e0:	1b80      	subs	r0, r0, r6
 80092e2:	6060      	str	r0, [r4, #4]
 80092e4:	6863      	ldr	r3, [r4, #4]
 80092e6:	6123      	str	r3, [r4, #16]
 80092e8:	2300      	movs	r3, #0
 80092ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092ee:	e7aa      	b.n	8009246 <_printf_i+0x146>
 80092f0:	4632      	mov	r2, r6
 80092f2:	4649      	mov	r1, r9
 80092f4:	4640      	mov	r0, r8
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	47d0      	blx	sl
 80092fa:	3001      	adds	r0, #1
 80092fc:	d0ad      	beq.n	800925a <_printf_i+0x15a>
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	079b      	lsls	r3, r3, #30
 8009302:	d413      	bmi.n	800932c <_printf_i+0x22c>
 8009304:	68e0      	ldr	r0, [r4, #12]
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	4298      	cmp	r0, r3
 800930a:	bfb8      	it	lt
 800930c:	4618      	movlt	r0, r3
 800930e:	e7a6      	b.n	800925e <_printf_i+0x15e>
 8009310:	2301      	movs	r3, #1
 8009312:	4632      	mov	r2, r6
 8009314:	4649      	mov	r1, r9
 8009316:	4640      	mov	r0, r8
 8009318:	47d0      	blx	sl
 800931a:	3001      	adds	r0, #1
 800931c:	d09d      	beq.n	800925a <_printf_i+0x15a>
 800931e:	3501      	adds	r5, #1
 8009320:	68e3      	ldr	r3, [r4, #12]
 8009322:	9903      	ldr	r1, [sp, #12]
 8009324:	1a5b      	subs	r3, r3, r1
 8009326:	42ab      	cmp	r3, r5
 8009328:	dcf2      	bgt.n	8009310 <_printf_i+0x210>
 800932a:	e7eb      	b.n	8009304 <_printf_i+0x204>
 800932c:	2500      	movs	r5, #0
 800932e:	f104 0619 	add.w	r6, r4, #25
 8009332:	e7f5      	b.n	8009320 <_printf_i+0x220>
 8009334:	0800c2da 	.word	0x0800c2da
 8009338:	0800c2eb 	.word	0x0800c2eb

0800933c <std>:
 800933c:	2300      	movs	r3, #0
 800933e:	b510      	push	{r4, lr}
 8009340:	4604      	mov	r4, r0
 8009342:	e9c0 3300 	strd	r3, r3, [r0]
 8009346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800934a:	6083      	str	r3, [r0, #8]
 800934c:	8181      	strh	r1, [r0, #12]
 800934e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009350:	81c2      	strh	r2, [r0, #14]
 8009352:	6183      	str	r3, [r0, #24]
 8009354:	4619      	mov	r1, r3
 8009356:	2208      	movs	r2, #8
 8009358:	305c      	adds	r0, #92	@ 0x5c
 800935a:	f000 f92a 	bl	80095b2 <memset>
 800935e:	4b0d      	ldr	r3, [pc, #52]	@ (8009394 <std+0x58>)
 8009360:	6224      	str	r4, [r4, #32]
 8009362:	6263      	str	r3, [r4, #36]	@ 0x24
 8009364:	4b0c      	ldr	r3, [pc, #48]	@ (8009398 <std+0x5c>)
 8009366:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009368:	4b0c      	ldr	r3, [pc, #48]	@ (800939c <std+0x60>)
 800936a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800936c:	4b0c      	ldr	r3, [pc, #48]	@ (80093a0 <std+0x64>)
 800936e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009370:	4b0c      	ldr	r3, [pc, #48]	@ (80093a4 <std+0x68>)
 8009372:	429c      	cmp	r4, r3
 8009374:	d006      	beq.n	8009384 <std+0x48>
 8009376:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800937a:	4294      	cmp	r4, r2
 800937c:	d002      	beq.n	8009384 <std+0x48>
 800937e:	33d0      	adds	r3, #208	@ 0xd0
 8009380:	429c      	cmp	r4, r3
 8009382:	d105      	bne.n	8009390 <std+0x54>
 8009384:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800938c:	f000 b9c2 	b.w	8009714 <__retarget_lock_init_recursive>
 8009390:	bd10      	pop	{r4, pc}
 8009392:	bf00      	nop
 8009394:	0800952d 	.word	0x0800952d
 8009398:	0800954f 	.word	0x0800954f
 800939c:	08009587 	.word	0x08009587
 80093a0:	080095ab 	.word	0x080095ab
 80093a4:	200013ac 	.word	0x200013ac

080093a8 <stdio_exit_handler>:
 80093a8:	4a02      	ldr	r2, [pc, #8]	@ (80093b4 <stdio_exit_handler+0xc>)
 80093aa:	4903      	ldr	r1, [pc, #12]	@ (80093b8 <stdio_exit_handler+0x10>)
 80093ac:	4803      	ldr	r0, [pc, #12]	@ (80093bc <stdio_exit_handler+0x14>)
 80093ae:	f000 b869 	b.w	8009484 <_fwalk_sglue>
 80093b2:	bf00      	nop
 80093b4:	20000010 	.word	0x20000010
 80093b8:	0800b9b5 	.word	0x0800b9b5
 80093bc:	2000018c 	.word	0x2000018c

080093c0 <cleanup_stdio>:
 80093c0:	6841      	ldr	r1, [r0, #4]
 80093c2:	4b0c      	ldr	r3, [pc, #48]	@ (80093f4 <cleanup_stdio+0x34>)
 80093c4:	b510      	push	{r4, lr}
 80093c6:	4299      	cmp	r1, r3
 80093c8:	4604      	mov	r4, r0
 80093ca:	d001      	beq.n	80093d0 <cleanup_stdio+0x10>
 80093cc:	f002 faf2 	bl	800b9b4 <_fflush_r>
 80093d0:	68a1      	ldr	r1, [r4, #8]
 80093d2:	4b09      	ldr	r3, [pc, #36]	@ (80093f8 <cleanup_stdio+0x38>)
 80093d4:	4299      	cmp	r1, r3
 80093d6:	d002      	beq.n	80093de <cleanup_stdio+0x1e>
 80093d8:	4620      	mov	r0, r4
 80093da:	f002 faeb 	bl	800b9b4 <_fflush_r>
 80093de:	68e1      	ldr	r1, [r4, #12]
 80093e0:	4b06      	ldr	r3, [pc, #24]	@ (80093fc <cleanup_stdio+0x3c>)
 80093e2:	4299      	cmp	r1, r3
 80093e4:	d004      	beq.n	80093f0 <cleanup_stdio+0x30>
 80093e6:	4620      	mov	r0, r4
 80093e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ec:	f002 bae2 	b.w	800b9b4 <_fflush_r>
 80093f0:	bd10      	pop	{r4, pc}
 80093f2:	bf00      	nop
 80093f4:	200013ac 	.word	0x200013ac
 80093f8:	20001414 	.word	0x20001414
 80093fc:	2000147c 	.word	0x2000147c

08009400 <global_stdio_init.part.0>:
 8009400:	b510      	push	{r4, lr}
 8009402:	4b0b      	ldr	r3, [pc, #44]	@ (8009430 <global_stdio_init.part.0+0x30>)
 8009404:	4c0b      	ldr	r4, [pc, #44]	@ (8009434 <global_stdio_init.part.0+0x34>)
 8009406:	4a0c      	ldr	r2, [pc, #48]	@ (8009438 <global_stdio_init.part.0+0x38>)
 8009408:	4620      	mov	r0, r4
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	2104      	movs	r1, #4
 800940e:	2200      	movs	r2, #0
 8009410:	f7ff ff94 	bl	800933c <std>
 8009414:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009418:	2201      	movs	r2, #1
 800941a:	2109      	movs	r1, #9
 800941c:	f7ff ff8e 	bl	800933c <std>
 8009420:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009424:	2202      	movs	r2, #2
 8009426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800942a:	2112      	movs	r1, #18
 800942c:	f7ff bf86 	b.w	800933c <std>
 8009430:	200014e4 	.word	0x200014e4
 8009434:	200013ac 	.word	0x200013ac
 8009438:	080093a9 	.word	0x080093a9

0800943c <__sfp_lock_acquire>:
 800943c:	4801      	ldr	r0, [pc, #4]	@ (8009444 <__sfp_lock_acquire+0x8>)
 800943e:	f000 b96a 	b.w	8009716 <__retarget_lock_acquire_recursive>
 8009442:	bf00      	nop
 8009444:	200014ed 	.word	0x200014ed

08009448 <__sfp_lock_release>:
 8009448:	4801      	ldr	r0, [pc, #4]	@ (8009450 <__sfp_lock_release+0x8>)
 800944a:	f000 b965 	b.w	8009718 <__retarget_lock_release_recursive>
 800944e:	bf00      	nop
 8009450:	200014ed 	.word	0x200014ed

08009454 <__sinit>:
 8009454:	b510      	push	{r4, lr}
 8009456:	4604      	mov	r4, r0
 8009458:	f7ff fff0 	bl	800943c <__sfp_lock_acquire>
 800945c:	6a23      	ldr	r3, [r4, #32]
 800945e:	b11b      	cbz	r3, 8009468 <__sinit+0x14>
 8009460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009464:	f7ff bff0 	b.w	8009448 <__sfp_lock_release>
 8009468:	4b04      	ldr	r3, [pc, #16]	@ (800947c <__sinit+0x28>)
 800946a:	6223      	str	r3, [r4, #32]
 800946c:	4b04      	ldr	r3, [pc, #16]	@ (8009480 <__sinit+0x2c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1f5      	bne.n	8009460 <__sinit+0xc>
 8009474:	f7ff ffc4 	bl	8009400 <global_stdio_init.part.0>
 8009478:	e7f2      	b.n	8009460 <__sinit+0xc>
 800947a:	bf00      	nop
 800947c:	080093c1 	.word	0x080093c1
 8009480:	200014e4 	.word	0x200014e4

08009484 <_fwalk_sglue>:
 8009484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009488:	4607      	mov	r7, r0
 800948a:	4688      	mov	r8, r1
 800948c:	4614      	mov	r4, r2
 800948e:	2600      	movs	r6, #0
 8009490:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009494:	f1b9 0901 	subs.w	r9, r9, #1
 8009498:	d505      	bpl.n	80094a6 <_fwalk_sglue+0x22>
 800949a:	6824      	ldr	r4, [r4, #0]
 800949c:	2c00      	cmp	r4, #0
 800949e:	d1f7      	bne.n	8009490 <_fwalk_sglue+0xc>
 80094a0:	4630      	mov	r0, r6
 80094a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094a6:	89ab      	ldrh	r3, [r5, #12]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d907      	bls.n	80094bc <_fwalk_sglue+0x38>
 80094ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094b0:	3301      	adds	r3, #1
 80094b2:	d003      	beq.n	80094bc <_fwalk_sglue+0x38>
 80094b4:	4629      	mov	r1, r5
 80094b6:	4638      	mov	r0, r7
 80094b8:	47c0      	blx	r8
 80094ba:	4306      	orrs	r6, r0
 80094bc:	3568      	adds	r5, #104	@ 0x68
 80094be:	e7e9      	b.n	8009494 <_fwalk_sglue+0x10>

080094c0 <sniprintf>:
 80094c0:	b40c      	push	{r2, r3}
 80094c2:	b530      	push	{r4, r5, lr}
 80094c4:	4b18      	ldr	r3, [pc, #96]	@ (8009528 <sniprintf+0x68>)
 80094c6:	1e0c      	subs	r4, r1, #0
 80094c8:	681d      	ldr	r5, [r3, #0]
 80094ca:	b09d      	sub	sp, #116	@ 0x74
 80094cc:	da08      	bge.n	80094e0 <sniprintf+0x20>
 80094ce:	238b      	movs	r3, #139	@ 0x8b
 80094d0:	f04f 30ff 	mov.w	r0, #4294967295
 80094d4:	602b      	str	r3, [r5, #0]
 80094d6:	b01d      	add	sp, #116	@ 0x74
 80094d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094dc:	b002      	add	sp, #8
 80094de:	4770      	bx	lr
 80094e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80094e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80094e8:	f04f 0300 	mov.w	r3, #0
 80094ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 80094ee:	bf0c      	ite	eq
 80094f0:	4623      	moveq	r3, r4
 80094f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	9307      	str	r3, [sp, #28]
 80094fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80094fe:	9002      	str	r0, [sp, #8]
 8009500:	9006      	str	r0, [sp, #24]
 8009502:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009506:	4628      	mov	r0, r5
 8009508:	ab21      	add	r3, sp, #132	@ 0x84
 800950a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800950c:	a902      	add	r1, sp, #8
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	f002 f8d4 	bl	800b6bc <_svfiprintf_r>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	bfbc      	itt	lt
 8009518:	238b      	movlt	r3, #139	@ 0x8b
 800951a:	602b      	strlt	r3, [r5, #0]
 800951c:	2c00      	cmp	r4, #0
 800951e:	d0da      	beq.n	80094d6 <sniprintf+0x16>
 8009520:	2200      	movs	r2, #0
 8009522:	9b02      	ldr	r3, [sp, #8]
 8009524:	701a      	strb	r2, [r3, #0]
 8009526:	e7d6      	b.n	80094d6 <sniprintf+0x16>
 8009528:	20000188 	.word	0x20000188

0800952c <__sread>:
 800952c:	b510      	push	{r4, lr}
 800952e:	460c      	mov	r4, r1
 8009530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009534:	f000 f8a0 	bl	8009678 <_read_r>
 8009538:	2800      	cmp	r0, #0
 800953a:	bfab      	itete	ge
 800953c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800953e:	89a3      	ldrhlt	r3, [r4, #12]
 8009540:	181b      	addge	r3, r3, r0
 8009542:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009546:	bfac      	ite	ge
 8009548:	6563      	strge	r3, [r4, #84]	@ 0x54
 800954a:	81a3      	strhlt	r3, [r4, #12]
 800954c:	bd10      	pop	{r4, pc}

0800954e <__swrite>:
 800954e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009552:	461f      	mov	r7, r3
 8009554:	898b      	ldrh	r3, [r1, #12]
 8009556:	4605      	mov	r5, r0
 8009558:	05db      	lsls	r3, r3, #23
 800955a:	460c      	mov	r4, r1
 800955c:	4616      	mov	r6, r2
 800955e:	d505      	bpl.n	800956c <__swrite+0x1e>
 8009560:	2302      	movs	r3, #2
 8009562:	2200      	movs	r2, #0
 8009564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009568:	f000 f874 	bl	8009654 <_lseek_r>
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	4632      	mov	r2, r6
 8009570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009574:	81a3      	strh	r3, [r4, #12]
 8009576:	4628      	mov	r0, r5
 8009578:	463b      	mov	r3, r7
 800957a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800957e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009582:	f000 b88b 	b.w	800969c <_write_r>

08009586 <__sseek>:
 8009586:	b510      	push	{r4, lr}
 8009588:	460c      	mov	r4, r1
 800958a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958e:	f000 f861 	bl	8009654 <_lseek_r>
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	bf15      	itete	ne
 8009598:	6560      	strne	r0, [r4, #84]	@ 0x54
 800959a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800959e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80095a2:	81a3      	strheq	r3, [r4, #12]
 80095a4:	bf18      	it	ne
 80095a6:	81a3      	strhne	r3, [r4, #12]
 80095a8:	bd10      	pop	{r4, pc}

080095aa <__sclose>:
 80095aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ae:	f000 b841 	b.w	8009634 <_close_r>

080095b2 <memset>:
 80095b2:	4603      	mov	r3, r0
 80095b4:	4402      	add	r2, r0
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d100      	bne.n	80095bc <memset+0xa>
 80095ba:	4770      	bx	lr
 80095bc:	f803 1b01 	strb.w	r1, [r3], #1
 80095c0:	e7f9      	b.n	80095b6 <memset+0x4>

080095c2 <strchr>:
 80095c2:	4603      	mov	r3, r0
 80095c4:	b2c9      	uxtb	r1, r1
 80095c6:	4618      	mov	r0, r3
 80095c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095cc:	b112      	cbz	r2, 80095d4 <strchr+0x12>
 80095ce:	428a      	cmp	r2, r1
 80095d0:	d1f9      	bne.n	80095c6 <strchr+0x4>
 80095d2:	4770      	bx	lr
 80095d4:	2900      	cmp	r1, #0
 80095d6:	bf18      	it	ne
 80095d8:	2000      	movne	r0, #0
 80095da:	4770      	bx	lr

080095dc <strncmp>:
 80095dc:	b510      	push	{r4, lr}
 80095de:	b16a      	cbz	r2, 80095fc <strncmp+0x20>
 80095e0:	3901      	subs	r1, #1
 80095e2:	1884      	adds	r4, r0, r2
 80095e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d103      	bne.n	80095f8 <strncmp+0x1c>
 80095f0:	42a0      	cmp	r0, r4
 80095f2:	d001      	beq.n	80095f8 <strncmp+0x1c>
 80095f4:	2a00      	cmp	r2, #0
 80095f6:	d1f5      	bne.n	80095e4 <strncmp+0x8>
 80095f8:	1ad0      	subs	r0, r2, r3
 80095fa:	bd10      	pop	{r4, pc}
 80095fc:	4610      	mov	r0, r2
 80095fe:	e7fc      	b.n	80095fa <strncmp+0x1e>

08009600 <strstr>:
 8009600:	780a      	ldrb	r2, [r1, #0]
 8009602:	b570      	push	{r4, r5, r6, lr}
 8009604:	b96a      	cbnz	r2, 8009622 <strstr+0x22>
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	429a      	cmp	r2, r3
 800960a:	d109      	bne.n	8009620 <strstr+0x20>
 800960c:	460c      	mov	r4, r1
 800960e:	4605      	mov	r5, r0
 8009610:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0f6      	beq.n	8009606 <strstr+0x6>
 8009618:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800961c:	429e      	cmp	r6, r3
 800961e:	d0f7      	beq.n	8009610 <strstr+0x10>
 8009620:	3001      	adds	r0, #1
 8009622:	7803      	ldrb	r3, [r0, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1ef      	bne.n	8009608 <strstr+0x8>
 8009628:	4618      	mov	r0, r3
 800962a:	e7ec      	b.n	8009606 <strstr+0x6>

0800962c <_localeconv_r>:
 800962c:	4800      	ldr	r0, [pc, #0]	@ (8009630 <_localeconv_r+0x4>)
 800962e:	4770      	bx	lr
 8009630:	2000010c 	.word	0x2000010c

08009634 <_close_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	2300      	movs	r3, #0
 8009638:	4d05      	ldr	r5, [pc, #20]	@ (8009650 <_close_r+0x1c>)
 800963a:	4604      	mov	r4, r0
 800963c:	4608      	mov	r0, r1
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	f7f8 fdad 	bl	800219e <_close>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_close_r+0x1a>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_close_r+0x1a>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	200014e8 	.word	0x200014e8

08009654 <_lseek_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4604      	mov	r4, r0
 8009658:	4608      	mov	r0, r1
 800965a:	4611      	mov	r1, r2
 800965c:	2200      	movs	r2, #0
 800965e:	4d05      	ldr	r5, [pc, #20]	@ (8009674 <_lseek_r+0x20>)
 8009660:	602a      	str	r2, [r5, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f7f8 fdbf 	bl	80021e6 <_lseek>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_lseek_r+0x1e>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_lseek_r+0x1e>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	200014e8 	.word	0x200014e8

08009678 <_read_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	4611      	mov	r1, r2
 8009680:	2200      	movs	r2, #0
 8009682:	4d05      	ldr	r5, [pc, #20]	@ (8009698 <_read_r+0x20>)
 8009684:	602a      	str	r2, [r5, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	f7f8 fd50 	bl	800212c <_read>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_read_r+0x1e>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_read_r+0x1e>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	200014e8 	.word	0x200014e8

0800969c <_write_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4604      	mov	r4, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	4611      	mov	r1, r2
 80096a4:	2200      	movs	r2, #0
 80096a6:	4d05      	ldr	r5, [pc, #20]	@ (80096bc <_write_r+0x20>)
 80096a8:	602a      	str	r2, [r5, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	f7f8 fd5b 	bl	8002166 <_write>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d102      	bne.n	80096ba <_write_r+0x1e>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	b103      	cbz	r3, 80096ba <_write_r+0x1e>
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	200014e8 	.word	0x200014e8

080096c0 <__errno>:
 80096c0:	4b01      	ldr	r3, [pc, #4]	@ (80096c8 <__errno+0x8>)
 80096c2:	6818      	ldr	r0, [r3, #0]
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	20000188 	.word	0x20000188

080096cc <__libc_init_array>:
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	2600      	movs	r6, #0
 80096d0:	4d0c      	ldr	r5, [pc, #48]	@ (8009704 <__libc_init_array+0x38>)
 80096d2:	4c0d      	ldr	r4, [pc, #52]	@ (8009708 <__libc_init_array+0x3c>)
 80096d4:	1b64      	subs	r4, r4, r5
 80096d6:	10a4      	asrs	r4, r4, #2
 80096d8:	42a6      	cmp	r6, r4
 80096da:	d109      	bne.n	80096f0 <__libc_init_array+0x24>
 80096dc:	f002 fd62 	bl	800c1a4 <_init>
 80096e0:	2600      	movs	r6, #0
 80096e2:	4d0a      	ldr	r5, [pc, #40]	@ (800970c <__libc_init_array+0x40>)
 80096e4:	4c0a      	ldr	r4, [pc, #40]	@ (8009710 <__libc_init_array+0x44>)
 80096e6:	1b64      	subs	r4, r4, r5
 80096e8:	10a4      	asrs	r4, r4, #2
 80096ea:	42a6      	cmp	r6, r4
 80096ec:	d105      	bne.n	80096fa <__libc_init_array+0x2e>
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
 80096f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f4:	4798      	blx	r3
 80096f6:	3601      	adds	r6, #1
 80096f8:	e7ee      	b.n	80096d8 <__libc_init_array+0xc>
 80096fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80096fe:	4798      	blx	r3
 8009700:	3601      	adds	r6, #1
 8009702:	e7f2      	b.n	80096ea <__libc_init_array+0x1e>
 8009704:	0800c6f8 	.word	0x0800c6f8
 8009708:	0800c6f8 	.word	0x0800c6f8
 800970c:	0800c6f8 	.word	0x0800c6f8
 8009710:	0800c6fc 	.word	0x0800c6fc

08009714 <__retarget_lock_init_recursive>:
 8009714:	4770      	bx	lr

08009716 <__retarget_lock_acquire_recursive>:
 8009716:	4770      	bx	lr

08009718 <__retarget_lock_release_recursive>:
 8009718:	4770      	bx	lr

0800971a <memchr>:
 800971a:	4603      	mov	r3, r0
 800971c:	b510      	push	{r4, lr}
 800971e:	b2c9      	uxtb	r1, r1
 8009720:	4402      	add	r2, r0
 8009722:	4293      	cmp	r3, r2
 8009724:	4618      	mov	r0, r3
 8009726:	d101      	bne.n	800972c <memchr+0x12>
 8009728:	2000      	movs	r0, #0
 800972a:	e003      	b.n	8009734 <memchr+0x1a>
 800972c:	7804      	ldrb	r4, [r0, #0]
 800972e:	3301      	adds	r3, #1
 8009730:	428c      	cmp	r4, r1
 8009732:	d1f6      	bne.n	8009722 <memchr+0x8>
 8009734:	bd10      	pop	{r4, pc}

08009736 <memcpy>:
 8009736:	440a      	add	r2, r1
 8009738:	4291      	cmp	r1, r2
 800973a:	f100 33ff 	add.w	r3, r0, #4294967295
 800973e:	d100      	bne.n	8009742 <memcpy+0xc>
 8009740:	4770      	bx	lr
 8009742:	b510      	push	{r4, lr}
 8009744:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009748:	4291      	cmp	r1, r2
 800974a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800974e:	d1f9      	bne.n	8009744 <memcpy+0xe>
 8009750:	bd10      	pop	{r4, pc}
	...

08009754 <nan>:
 8009754:	2000      	movs	r0, #0
 8009756:	4901      	ldr	r1, [pc, #4]	@ (800975c <nan+0x8>)
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	7ff80000 	.word	0x7ff80000

08009760 <quorem>:
 8009760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	6903      	ldr	r3, [r0, #16]
 8009766:	690c      	ldr	r4, [r1, #16]
 8009768:	4607      	mov	r7, r0
 800976a:	42a3      	cmp	r3, r4
 800976c:	db7e      	blt.n	800986c <quorem+0x10c>
 800976e:	3c01      	subs	r4, #1
 8009770:	00a3      	lsls	r3, r4, #2
 8009772:	f100 0514 	add.w	r5, r0, #20
 8009776:	f101 0814 	add.w	r8, r1, #20
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009786:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800978a:	3301      	adds	r3, #1
 800978c:	429a      	cmp	r2, r3
 800978e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009792:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009796:	d32e      	bcc.n	80097f6 <quorem+0x96>
 8009798:	f04f 0a00 	mov.w	sl, #0
 800979c:	46c4      	mov	ip, r8
 800979e:	46ae      	mov	lr, r5
 80097a0:	46d3      	mov	fp, sl
 80097a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097a6:	b298      	uxth	r0, r3
 80097a8:	fb06 a000 	mla	r0, r6, r0, sl
 80097ac:	0c1b      	lsrs	r3, r3, #16
 80097ae:	0c02      	lsrs	r2, r0, #16
 80097b0:	fb06 2303 	mla	r3, r6, r3, r2
 80097b4:	f8de 2000 	ldr.w	r2, [lr]
 80097b8:	b280      	uxth	r0, r0
 80097ba:	b292      	uxth	r2, r2
 80097bc:	1a12      	subs	r2, r2, r0
 80097be:	445a      	add	r2, fp
 80097c0:	f8de 0000 	ldr.w	r0, [lr]
 80097c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80097ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80097d2:	b292      	uxth	r2, r2
 80097d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80097d8:	45e1      	cmp	r9, ip
 80097da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80097de:	f84e 2b04 	str.w	r2, [lr], #4
 80097e2:	d2de      	bcs.n	80097a2 <quorem+0x42>
 80097e4:	9b00      	ldr	r3, [sp, #0]
 80097e6:	58eb      	ldr	r3, [r5, r3]
 80097e8:	b92b      	cbnz	r3, 80097f6 <quorem+0x96>
 80097ea:	9b01      	ldr	r3, [sp, #4]
 80097ec:	3b04      	subs	r3, #4
 80097ee:	429d      	cmp	r5, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	d32f      	bcc.n	8009854 <quorem+0xf4>
 80097f4:	613c      	str	r4, [r7, #16]
 80097f6:	4638      	mov	r0, r7
 80097f8:	f001 fd14 	bl	800b224 <__mcmp>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	db25      	blt.n	800984c <quorem+0xec>
 8009800:	4629      	mov	r1, r5
 8009802:	2000      	movs	r0, #0
 8009804:	f858 2b04 	ldr.w	r2, [r8], #4
 8009808:	f8d1 c000 	ldr.w	ip, [r1]
 800980c:	fa1f fe82 	uxth.w	lr, r2
 8009810:	fa1f f38c 	uxth.w	r3, ip
 8009814:	eba3 030e 	sub.w	r3, r3, lr
 8009818:	4403      	add	r3, r0
 800981a:	0c12      	lsrs	r2, r2, #16
 800981c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009820:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009824:	b29b      	uxth	r3, r3
 8009826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800982a:	45c1      	cmp	r9, r8
 800982c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009830:	f841 3b04 	str.w	r3, [r1], #4
 8009834:	d2e6      	bcs.n	8009804 <quorem+0xa4>
 8009836:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800983a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800983e:	b922      	cbnz	r2, 800984a <quorem+0xea>
 8009840:	3b04      	subs	r3, #4
 8009842:	429d      	cmp	r5, r3
 8009844:	461a      	mov	r2, r3
 8009846:	d30b      	bcc.n	8009860 <quorem+0x100>
 8009848:	613c      	str	r4, [r7, #16]
 800984a:	3601      	adds	r6, #1
 800984c:	4630      	mov	r0, r6
 800984e:	b003      	add	sp, #12
 8009850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009854:	6812      	ldr	r2, [r2, #0]
 8009856:	3b04      	subs	r3, #4
 8009858:	2a00      	cmp	r2, #0
 800985a:	d1cb      	bne.n	80097f4 <quorem+0x94>
 800985c:	3c01      	subs	r4, #1
 800985e:	e7c6      	b.n	80097ee <quorem+0x8e>
 8009860:	6812      	ldr	r2, [r2, #0]
 8009862:	3b04      	subs	r3, #4
 8009864:	2a00      	cmp	r2, #0
 8009866:	d1ef      	bne.n	8009848 <quorem+0xe8>
 8009868:	3c01      	subs	r4, #1
 800986a:	e7ea      	b.n	8009842 <quorem+0xe2>
 800986c:	2000      	movs	r0, #0
 800986e:	e7ee      	b.n	800984e <quorem+0xee>

08009870 <_dtoa_r>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	4614      	mov	r4, r2
 8009876:	461d      	mov	r5, r3
 8009878:	69c7      	ldr	r7, [r0, #28]
 800987a:	b097      	sub	sp, #92	@ 0x5c
 800987c:	4681      	mov	r9, r0
 800987e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009882:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009884:	b97f      	cbnz	r7, 80098a6 <_dtoa_r+0x36>
 8009886:	2010      	movs	r0, #16
 8009888:	f001 f948 	bl	800ab1c <malloc>
 800988c:	4602      	mov	r2, r0
 800988e:	f8c9 001c 	str.w	r0, [r9, #28]
 8009892:	b920      	cbnz	r0, 800989e <_dtoa_r+0x2e>
 8009894:	21ef      	movs	r1, #239	@ 0xef
 8009896:	4bac      	ldr	r3, [pc, #688]	@ (8009b48 <_dtoa_r+0x2d8>)
 8009898:	48ac      	ldr	r0, [pc, #688]	@ (8009b4c <_dtoa_r+0x2dc>)
 800989a:	f002 f8dd 	bl	800ba58 <__assert_func>
 800989e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80098a2:	6007      	str	r7, [r0, #0]
 80098a4:	60c7      	str	r7, [r0, #12]
 80098a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098aa:	6819      	ldr	r1, [r3, #0]
 80098ac:	b159      	cbz	r1, 80098c6 <_dtoa_r+0x56>
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	2301      	movs	r3, #1
 80098b2:	4093      	lsls	r3, r2
 80098b4:	604a      	str	r2, [r1, #4]
 80098b6:	608b      	str	r3, [r1, #8]
 80098b8:	4648      	mov	r0, r9
 80098ba:	f001 fa37 	bl	800ad2c <_Bfree>
 80098be:	2200      	movs	r2, #0
 80098c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	1e2b      	subs	r3, r5, #0
 80098c8:	bfaf      	iteee	ge
 80098ca:	2300      	movge	r3, #0
 80098cc:	2201      	movlt	r2, #1
 80098ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80098d2:	9307      	strlt	r3, [sp, #28]
 80098d4:	bfa8      	it	ge
 80098d6:	6033      	strge	r3, [r6, #0]
 80098d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80098dc:	4b9c      	ldr	r3, [pc, #624]	@ (8009b50 <_dtoa_r+0x2e0>)
 80098de:	bfb8      	it	lt
 80098e0:	6032      	strlt	r2, [r6, #0]
 80098e2:	ea33 0308 	bics.w	r3, r3, r8
 80098e6:	d112      	bne.n	800990e <_dtoa_r+0x9e>
 80098e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80098ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80098f4:	4323      	orrs	r3, r4
 80098f6:	f000 855e 	beq.w	800a3b6 <_dtoa_r+0xb46>
 80098fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80098fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009b54 <_dtoa_r+0x2e4>
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 8560 	beq.w	800a3c6 <_dtoa_r+0xb56>
 8009906:	f10a 0303 	add.w	r3, sl, #3
 800990a:	f000 bd5a 	b.w	800a3c2 <_dtoa_r+0xb52>
 800990e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009912:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800991a:	2200      	movs	r2, #0
 800991c:	2300      	movs	r3, #0
 800991e:	f7f7 f843 	bl	80009a8 <__aeabi_dcmpeq>
 8009922:	4607      	mov	r7, r0
 8009924:	b158      	cbz	r0, 800993e <_dtoa_r+0xce>
 8009926:	2301      	movs	r3, #1
 8009928:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800992e:	b113      	cbz	r3, 8009936 <_dtoa_r+0xc6>
 8009930:	4b89      	ldr	r3, [pc, #548]	@ (8009b58 <_dtoa_r+0x2e8>)
 8009932:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009b5c <_dtoa_r+0x2ec>
 800993a:	f000 bd44 	b.w	800a3c6 <_dtoa_r+0xb56>
 800993e:	ab14      	add	r3, sp, #80	@ 0x50
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	ab15      	add	r3, sp, #84	@ 0x54
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	4648      	mov	r0, r9
 8009948:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800994c:	f001 fd82 	bl	800b454 <__d2b>
 8009950:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009954:	9003      	str	r0, [sp, #12]
 8009956:	2e00      	cmp	r6, #0
 8009958:	d078      	beq.n	8009a4c <_dtoa_r+0x1dc>
 800995a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800995e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009960:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009968:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800996c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009970:	9712      	str	r7, [sp, #72]	@ 0x48
 8009972:	4619      	mov	r1, r3
 8009974:	2200      	movs	r2, #0
 8009976:	4b7a      	ldr	r3, [pc, #488]	@ (8009b60 <_dtoa_r+0x2f0>)
 8009978:	f7f6 fbf6 	bl	8000168 <__aeabi_dsub>
 800997c:	a36c      	add	r3, pc, #432	@ (adr r3, 8009b30 <_dtoa_r+0x2c0>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	f7f6 fda9 	bl	80004d8 <__aeabi_dmul>
 8009986:	a36c      	add	r3, pc, #432	@ (adr r3, 8009b38 <_dtoa_r+0x2c8>)
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f7f6 fbee 	bl	800016c <__adddf3>
 8009990:	4604      	mov	r4, r0
 8009992:	4630      	mov	r0, r6
 8009994:	460d      	mov	r5, r1
 8009996:	f7f6 fd35 	bl	8000404 <__aeabi_i2d>
 800999a:	a369      	add	r3, pc, #420	@ (adr r3, 8009b40 <_dtoa_r+0x2d0>)
 800999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a0:	f7f6 fd9a 	bl	80004d8 <__aeabi_dmul>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	4620      	mov	r0, r4
 80099aa:	4629      	mov	r1, r5
 80099ac:	f7f6 fbde 	bl	800016c <__adddf3>
 80099b0:	4604      	mov	r4, r0
 80099b2:	460d      	mov	r5, r1
 80099b4:	f7f7 f840 	bl	8000a38 <__aeabi_d2iz>
 80099b8:	2200      	movs	r2, #0
 80099ba:	4607      	mov	r7, r0
 80099bc:	2300      	movs	r3, #0
 80099be:	4620      	mov	r0, r4
 80099c0:	4629      	mov	r1, r5
 80099c2:	f7f6 fffb 	bl	80009bc <__aeabi_dcmplt>
 80099c6:	b140      	cbz	r0, 80099da <_dtoa_r+0x16a>
 80099c8:	4638      	mov	r0, r7
 80099ca:	f7f6 fd1b 	bl	8000404 <__aeabi_i2d>
 80099ce:	4622      	mov	r2, r4
 80099d0:	462b      	mov	r3, r5
 80099d2:	f7f6 ffe9 	bl	80009a8 <__aeabi_dcmpeq>
 80099d6:	b900      	cbnz	r0, 80099da <_dtoa_r+0x16a>
 80099d8:	3f01      	subs	r7, #1
 80099da:	2f16      	cmp	r7, #22
 80099dc:	d854      	bhi.n	8009a88 <_dtoa_r+0x218>
 80099de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099e2:	4b60      	ldr	r3, [pc, #384]	@ (8009b64 <_dtoa_r+0x2f4>)
 80099e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	f7f6 ffe6 	bl	80009bc <__aeabi_dcmplt>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d04b      	beq.n	8009a8c <_dtoa_r+0x21c>
 80099f4:	2300      	movs	r3, #0
 80099f6:	3f01      	subs	r7, #1
 80099f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099fc:	1b9b      	subs	r3, r3, r6
 80099fe:	1e5a      	subs	r2, r3, #1
 8009a00:	bf49      	itett	mi
 8009a02:	f1c3 0301 	rsbmi	r3, r3, #1
 8009a06:	2300      	movpl	r3, #0
 8009a08:	9304      	strmi	r3, [sp, #16]
 8009a0a:	2300      	movmi	r3, #0
 8009a0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a0e:	bf54      	ite	pl
 8009a10:	9304      	strpl	r3, [sp, #16]
 8009a12:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009a14:	2f00      	cmp	r7, #0
 8009a16:	db3b      	blt.n	8009a90 <_dtoa_r+0x220>
 8009a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a1a:	970e      	str	r7, [sp, #56]	@ 0x38
 8009a1c:	443b      	add	r3, r7
 8009a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a20:	2300      	movs	r3, #0
 8009a22:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009a26:	2b09      	cmp	r3, #9
 8009a28:	d865      	bhi.n	8009af6 <_dtoa_r+0x286>
 8009a2a:	2b05      	cmp	r3, #5
 8009a2c:	bfc4      	itt	gt
 8009a2e:	3b04      	subgt	r3, #4
 8009a30:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009a32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009a34:	bfc8      	it	gt
 8009a36:	2400      	movgt	r4, #0
 8009a38:	f1a3 0302 	sub.w	r3, r3, #2
 8009a3c:	bfd8      	it	le
 8009a3e:	2401      	movle	r4, #1
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d864      	bhi.n	8009b0e <_dtoa_r+0x29e>
 8009a44:	e8df f003 	tbb	[pc, r3]
 8009a48:	2c385553 	.word	0x2c385553
 8009a4c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009a50:	441e      	add	r6, r3
 8009a52:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	bfc1      	itttt	gt
 8009a5a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009a5e:	fa08 f803 	lslgt.w	r8, r8, r3
 8009a62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009a66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009a6a:	bfd6      	itet	le
 8009a6c:	f1c3 0320 	rsble	r3, r3, #32
 8009a70:	ea48 0003 	orrgt.w	r0, r8, r3
 8009a74:	fa04 f003 	lslle.w	r0, r4, r3
 8009a78:	f7f6 fcb4 	bl	80003e4 <__aeabi_ui2d>
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009a82:	3e01      	subs	r6, #1
 8009a84:	9212      	str	r2, [sp, #72]	@ 0x48
 8009a86:	e774      	b.n	8009972 <_dtoa_r+0x102>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e7b5      	b.n	80099f8 <_dtoa_r+0x188>
 8009a8c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009a8e:	e7b4      	b.n	80099fa <_dtoa_r+0x18a>
 8009a90:	9b04      	ldr	r3, [sp, #16]
 8009a92:	1bdb      	subs	r3, r3, r7
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	427b      	negs	r3, r7
 8009a98:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a9e:	e7c1      	b.n	8009a24 <_dtoa_r+0x1b4>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009aa4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009aa6:	eb07 0b03 	add.w	fp, r7, r3
 8009aaa:	f10b 0301 	add.w	r3, fp, #1
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	9308      	str	r3, [sp, #32]
 8009ab2:	bfb8      	it	lt
 8009ab4:	2301      	movlt	r3, #1
 8009ab6:	e006      	b.n	8009ac6 <_dtoa_r+0x256>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009abc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	dd28      	ble.n	8009b14 <_dtoa_r+0x2a4>
 8009ac2:	469b      	mov	fp, r3
 8009ac4:	9308      	str	r3, [sp, #32]
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	2204      	movs	r2, #4
 8009aca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009ace:	f102 0514 	add.w	r5, r2, #20
 8009ad2:	429d      	cmp	r5, r3
 8009ad4:	d926      	bls.n	8009b24 <_dtoa_r+0x2b4>
 8009ad6:	6041      	str	r1, [r0, #4]
 8009ad8:	4648      	mov	r0, r9
 8009ada:	f001 f8e7 	bl	800acac <_Balloc>
 8009ade:	4682      	mov	sl, r0
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d143      	bne.n	8009b6c <_dtoa_r+0x2fc>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	f240 11af 	movw	r1, #431	@ 0x1af
 8009aea:	4b1f      	ldr	r3, [pc, #124]	@ (8009b68 <_dtoa_r+0x2f8>)
 8009aec:	e6d4      	b.n	8009898 <_dtoa_r+0x28>
 8009aee:	2300      	movs	r3, #0
 8009af0:	e7e3      	b.n	8009aba <_dtoa_r+0x24a>
 8009af2:	2300      	movs	r3, #0
 8009af4:	e7d5      	b.n	8009aa2 <_dtoa_r+0x232>
 8009af6:	2401      	movs	r4, #1
 8009af8:	2300      	movs	r3, #0
 8009afa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009afc:	9320      	str	r3, [sp, #128]	@ 0x80
 8009afe:	f04f 3bff 	mov.w	fp, #4294967295
 8009b02:	2200      	movs	r2, #0
 8009b04:	2312      	movs	r3, #18
 8009b06:	f8cd b020 	str.w	fp, [sp, #32]
 8009b0a:	9221      	str	r2, [sp, #132]	@ 0x84
 8009b0c:	e7db      	b.n	8009ac6 <_dtoa_r+0x256>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b12:	e7f4      	b.n	8009afe <_dtoa_r+0x28e>
 8009b14:	f04f 0b01 	mov.w	fp, #1
 8009b18:	465b      	mov	r3, fp
 8009b1a:	f8cd b020 	str.w	fp, [sp, #32]
 8009b1e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8009b22:	e7d0      	b.n	8009ac6 <_dtoa_r+0x256>
 8009b24:	3101      	adds	r1, #1
 8009b26:	0052      	lsls	r2, r2, #1
 8009b28:	e7d1      	b.n	8009ace <_dtoa_r+0x25e>
 8009b2a:	bf00      	nop
 8009b2c:	f3af 8000 	nop.w
 8009b30:	636f4361 	.word	0x636f4361
 8009b34:	3fd287a7 	.word	0x3fd287a7
 8009b38:	8b60c8b3 	.word	0x8b60c8b3
 8009b3c:	3fc68a28 	.word	0x3fc68a28
 8009b40:	509f79fb 	.word	0x509f79fb
 8009b44:	3fd34413 	.word	0x3fd34413
 8009b48:	0800c311 	.word	0x0800c311
 8009b4c:	0800c328 	.word	0x0800c328
 8009b50:	7ff00000 	.word	0x7ff00000
 8009b54:	0800c30d 	.word	0x0800c30d
 8009b58:	0800c2d9 	.word	0x0800c2d9
 8009b5c:	0800c2d8 	.word	0x0800c2d8
 8009b60:	3ff80000 	.word	0x3ff80000
 8009b64:	0800c620 	.word	0x0800c620
 8009b68:	0800c380 	.word	0x0800c380
 8009b6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009b70:	6018      	str	r0, [r3, #0]
 8009b72:	9b08      	ldr	r3, [sp, #32]
 8009b74:	2b0e      	cmp	r3, #14
 8009b76:	f200 80a1 	bhi.w	8009cbc <_dtoa_r+0x44c>
 8009b7a:	2c00      	cmp	r4, #0
 8009b7c:	f000 809e 	beq.w	8009cbc <_dtoa_r+0x44c>
 8009b80:	2f00      	cmp	r7, #0
 8009b82:	dd33      	ble.n	8009bec <_dtoa_r+0x37c>
 8009b84:	4b9c      	ldr	r3, [pc, #624]	@ (8009df8 <_dtoa_r+0x588>)
 8009b86:	f007 020f 	and.w	r2, r7, #15
 8009b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b8e:	05f8      	lsls	r0, r7, #23
 8009b90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b94:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009b98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009b9c:	d516      	bpl.n	8009bcc <_dtoa_r+0x35c>
 8009b9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ba2:	4b96      	ldr	r3, [pc, #600]	@ (8009dfc <_dtoa_r+0x58c>)
 8009ba4:	2603      	movs	r6, #3
 8009ba6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009baa:	f7f6 fdbf 	bl	800072c <__aeabi_ddiv>
 8009bae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bb2:	f004 040f 	and.w	r4, r4, #15
 8009bb6:	4d91      	ldr	r5, [pc, #580]	@ (8009dfc <_dtoa_r+0x58c>)
 8009bb8:	b954      	cbnz	r4, 8009bd0 <_dtoa_r+0x360>
 8009bba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bc2:	f7f6 fdb3 	bl	800072c <__aeabi_ddiv>
 8009bc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bca:	e028      	b.n	8009c1e <_dtoa_r+0x3ae>
 8009bcc:	2602      	movs	r6, #2
 8009bce:	e7f2      	b.n	8009bb6 <_dtoa_r+0x346>
 8009bd0:	07e1      	lsls	r1, r4, #31
 8009bd2:	d508      	bpl.n	8009be6 <_dtoa_r+0x376>
 8009bd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009bd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bdc:	f7f6 fc7c 	bl	80004d8 <__aeabi_dmul>
 8009be0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009be4:	3601      	adds	r6, #1
 8009be6:	1064      	asrs	r4, r4, #1
 8009be8:	3508      	adds	r5, #8
 8009bea:	e7e5      	b.n	8009bb8 <_dtoa_r+0x348>
 8009bec:	f000 80af 	beq.w	8009d4e <_dtoa_r+0x4de>
 8009bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bf4:	427c      	negs	r4, r7
 8009bf6:	4b80      	ldr	r3, [pc, #512]	@ (8009df8 <_dtoa_r+0x588>)
 8009bf8:	f004 020f 	and.w	r2, r4, #15
 8009bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f7f6 fc68 	bl	80004d8 <__aeabi_dmul>
 8009c08:	2602      	movs	r6, #2
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c10:	4d7a      	ldr	r5, [pc, #488]	@ (8009dfc <_dtoa_r+0x58c>)
 8009c12:	1124      	asrs	r4, r4, #4
 8009c14:	2c00      	cmp	r4, #0
 8009c16:	f040 808f 	bne.w	8009d38 <_dtoa_r+0x4c8>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1d3      	bne.n	8009bc6 <_dtoa_r+0x356>
 8009c1e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009c22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 8094 	beq.w	8009d52 <_dtoa_r+0x4e2>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	4629      	mov	r1, r5
 8009c30:	4b73      	ldr	r3, [pc, #460]	@ (8009e00 <_dtoa_r+0x590>)
 8009c32:	f7f6 fec3 	bl	80009bc <__aeabi_dcmplt>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f000 808b 	beq.w	8009d52 <_dtoa_r+0x4e2>
 8009c3c:	9b08      	ldr	r3, [sp, #32]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 8087 	beq.w	8009d52 <_dtoa_r+0x4e2>
 8009c44:	f1bb 0f00 	cmp.w	fp, #0
 8009c48:	dd34      	ble.n	8009cb4 <_dtoa_r+0x444>
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	4629      	mov	r1, r5
 8009c50:	4b6c      	ldr	r3, [pc, #432]	@ (8009e04 <_dtoa_r+0x594>)
 8009c52:	f7f6 fc41 	bl	80004d8 <__aeabi_dmul>
 8009c56:	465c      	mov	r4, fp
 8009c58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c5c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009c60:	3601      	adds	r6, #1
 8009c62:	4630      	mov	r0, r6
 8009c64:	f7f6 fbce 	bl	8000404 <__aeabi_i2d>
 8009c68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c6c:	f7f6 fc34 	bl	80004d8 <__aeabi_dmul>
 8009c70:	2200      	movs	r2, #0
 8009c72:	4b65      	ldr	r3, [pc, #404]	@ (8009e08 <_dtoa_r+0x598>)
 8009c74:	f7f6 fa7a 	bl	800016c <__adddf3>
 8009c78:	4605      	mov	r5, r0
 8009c7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009c7e:	2c00      	cmp	r4, #0
 8009c80:	d16a      	bne.n	8009d58 <_dtoa_r+0x4e8>
 8009c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c86:	2200      	movs	r2, #0
 8009c88:	4b60      	ldr	r3, [pc, #384]	@ (8009e0c <_dtoa_r+0x59c>)
 8009c8a:	f7f6 fa6d 	bl	8000168 <__aeabi_dsub>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c96:	462a      	mov	r2, r5
 8009c98:	4633      	mov	r3, r6
 8009c9a:	f7f6 fead 	bl	80009f8 <__aeabi_dcmpgt>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f040 8298 	bne.w	800a1d4 <_dtoa_r+0x964>
 8009ca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ca8:	462a      	mov	r2, r5
 8009caa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009cae:	f7f6 fe85 	bl	80009bc <__aeabi_dcmplt>
 8009cb2:	bb38      	cbnz	r0, 8009d04 <_dtoa_r+0x494>
 8009cb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009cb8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009cbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f2c0 8157 	blt.w	8009f72 <_dtoa_r+0x702>
 8009cc4:	2f0e      	cmp	r7, #14
 8009cc6:	f300 8154 	bgt.w	8009f72 <_dtoa_r+0x702>
 8009cca:	4b4b      	ldr	r3, [pc, #300]	@ (8009df8 <_dtoa_r+0x588>)
 8009ccc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009cd4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009cd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f280 80e5 	bge.w	8009eaa <_dtoa_r+0x63a>
 8009ce0:	9b08      	ldr	r3, [sp, #32]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f300 80e1 	bgt.w	8009eaa <_dtoa_r+0x63a>
 8009ce8:	d10c      	bne.n	8009d04 <_dtoa_r+0x494>
 8009cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	4b46      	ldr	r3, [pc, #280]	@ (8009e0c <_dtoa_r+0x59c>)
 8009cf2:	f7f6 fbf1 	bl	80004d8 <__aeabi_dmul>
 8009cf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cfa:	f7f6 fe73 	bl	80009e4 <__aeabi_dcmpge>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f000 8266 	beq.w	800a1d0 <_dtoa_r+0x960>
 8009d04:	2400      	movs	r4, #0
 8009d06:	4625      	mov	r5, r4
 8009d08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d0a:	4656      	mov	r6, sl
 8009d0c:	ea6f 0803 	mvn.w	r8, r3
 8009d10:	2700      	movs	r7, #0
 8009d12:	4621      	mov	r1, r4
 8009d14:	4648      	mov	r0, r9
 8009d16:	f001 f809 	bl	800ad2c <_Bfree>
 8009d1a:	2d00      	cmp	r5, #0
 8009d1c:	f000 80bd 	beq.w	8009e9a <_dtoa_r+0x62a>
 8009d20:	b12f      	cbz	r7, 8009d2e <_dtoa_r+0x4be>
 8009d22:	42af      	cmp	r7, r5
 8009d24:	d003      	beq.n	8009d2e <_dtoa_r+0x4be>
 8009d26:	4639      	mov	r1, r7
 8009d28:	4648      	mov	r0, r9
 8009d2a:	f000 ffff 	bl	800ad2c <_Bfree>
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4648      	mov	r0, r9
 8009d32:	f000 fffb 	bl	800ad2c <_Bfree>
 8009d36:	e0b0      	b.n	8009e9a <_dtoa_r+0x62a>
 8009d38:	07e2      	lsls	r2, r4, #31
 8009d3a:	d505      	bpl.n	8009d48 <_dtoa_r+0x4d8>
 8009d3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d40:	f7f6 fbca 	bl	80004d8 <__aeabi_dmul>
 8009d44:	2301      	movs	r3, #1
 8009d46:	3601      	adds	r6, #1
 8009d48:	1064      	asrs	r4, r4, #1
 8009d4a:	3508      	adds	r5, #8
 8009d4c:	e762      	b.n	8009c14 <_dtoa_r+0x3a4>
 8009d4e:	2602      	movs	r6, #2
 8009d50:	e765      	b.n	8009c1e <_dtoa_r+0x3ae>
 8009d52:	46b8      	mov	r8, r7
 8009d54:	9c08      	ldr	r4, [sp, #32]
 8009d56:	e784      	b.n	8009c62 <_dtoa_r+0x3f2>
 8009d58:	4b27      	ldr	r3, [pc, #156]	@ (8009df8 <_dtoa_r+0x588>)
 8009d5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d64:	4454      	add	r4, sl
 8009d66:	2900      	cmp	r1, #0
 8009d68:	d054      	beq.n	8009e14 <_dtoa_r+0x5a4>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	4928      	ldr	r1, [pc, #160]	@ (8009e10 <_dtoa_r+0x5a0>)
 8009d6e:	f7f6 fcdd 	bl	800072c <__aeabi_ddiv>
 8009d72:	4633      	mov	r3, r6
 8009d74:	462a      	mov	r2, r5
 8009d76:	f7f6 f9f7 	bl	8000168 <__aeabi_dsub>
 8009d7a:	4656      	mov	r6, sl
 8009d7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d84:	f7f6 fe58 	bl	8000a38 <__aeabi_d2iz>
 8009d88:	4605      	mov	r5, r0
 8009d8a:	f7f6 fb3b 	bl	8000404 <__aeabi_i2d>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d96:	f7f6 f9e7 	bl	8000168 <__aeabi_dsub>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	3530      	adds	r5, #48	@ 0x30
 8009da0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009da4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009da8:	f806 5b01 	strb.w	r5, [r6], #1
 8009dac:	f7f6 fe06 	bl	80009bc <__aeabi_dcmplt>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d172      	bne.n	8009e9a <_dtoa_r+0x62a>
 8009db4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009db8:	2000      	movs	r0, #0
 8009dba:	4911      	ldr	r1, [pc, #68]	@ (8009e00 <_dtoa_r+0x590>)
 8009dbc:	f7f6 f9d4 	bl	8000168 <__aeabi_dsub>
 8009dc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009dc4:	f7f6 fdfa 	bl	80009bc <__aeabi_dcmplt>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	f040 80b4 	bne.w	8009f36 <_dtoa_r+0x6c6>
 8009dce:	42a6      	cmp	r6, r4
 8009dd0:	f43f af70 	beq.w	8009cb4 <_dtoa_r+0x444>
 8009dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4b0a      	ldr	r3, [pc, #40]	@ (8009e04 <_dtoa_r+0x594>)
 8009ddc:	f7f6 fb7c 	bl	80004d8 <__aeabi_dmul>
 8009de0:	2200      	movs	r2, #0
 8009de2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dea:	4b06      	ldr	r3, [pc, #24]	@ (8009e04 <_dtoa_r+0x594>)
 8009dec:	f7f6 fb74 	bl	80004d8 <__aeabi_dmul>
 8009df0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009df4:	e7c4      	b.n	8009d80 <_dtoa_r+0x510>
 8009df6:	bf00      	nop
 8009df8:	0800c620 	.word	0x0800c620
 8009dfc:	0800c5f8 	.word	0x0800c5f8
 8009e00:	3ff00000 	.word	0x3ff00000
 8009e04:	40240000 	.word	0x40240000
 8009e08:	401c0000 	.word	0x401c0000
 8009e0c:	40140000 	.word	0x40140000
 8009e10:	3fe00000 	.word	0x3fe00000
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	f7f6 fb5e 	bl	80004d8 <__aeabi_dmul>
 8009e1c:	4656      	mov	r6, sl
 8009e1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e22:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e28:	f7f6 fe06 	bl	8000a38 <__aeabi_d2iz>
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	f7f6 fae9 	bl	8000404 <__aeabi_i2d>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e3a:	f7f6 f995 	bl	8000168 <__aeabi_dsub>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	3530      	adds	r5, #48	@ 0x30
 8009e44:	f806 5b01 	strb.w	r5, [r6], #1
 8009e48:	42a6      	cmp	r6, r4
 8009e4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	d124      	bne.n	8009e9e <_dtoa_r+0x62e>
 8009e54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009e58:	4bae      	ldr	r3, [pc, #696]	@ (800a114 <_dtoa_r+0x8a4>)
 8009e5a:	f7f6 f987 	bl	800016c <__adddf3>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e66:	f7f6 fdc7 	bl	80009f8 <__aeabi_dcmpgt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d163      	bne.n	8009f36 <_dtoa_r+0x6c6>
 8009e6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e72:	2000      	movs	r0, #0
 8009e74:	49a7      	ldr	r1, [pc, #668]	@ (800a114 <_dtoa_r+0x8a4>)
 8009e76:	f7f6 f977 	bl	8000168 <__aeabi_dsub>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e82:	f7f6 fd9b 	bl	80009bc <__aeabi_dcmplt>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	f43f af14 	beq.w	8009cb4 <_dtoa_r+0x444>
 8009e8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009e8e:	1e73      	subs	r3, r6, #1
 8009e90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e96:	2b30      	cmp	r3, #48	@ 0x30
 8009e98:	d0f8      	beq.n	8009e8c <_dtoa_r+0x61c>
 8009e9a:	4647      	mov	r7, r8
 8009e9c:	e03b      	b.n	8009f16 <_dtoa_r+0x6a6>
 8009e9e:	4b9e      	ldr	r3, [pc, #632]	@ (800a118 <_dtoa_r+0x8a8>)
 8009ea0:	f7f6 fb1a 	bl	80004d8 <__aeabi_dmul>
 8009ea4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009ea8:	e7bc      	b.n	8009e24 <_dtoa_r+0x5b4>
 8009eaa:	4656      	mov	r6, sl
 8009eac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009eb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	f7f6 fc38 	bl	800072c <__aeabi_ddiv>
 8009ebc:	f7f6 fdbc 	bl	8000a38 <__aeabi_d2iz>
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	f7f6 fa9f 	bl	8000404 <__aeabi_i2d>
 8009ec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eca:	f7f6 fb05 	bl	80004d8 <__aeabi_dmul>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	f7f6 f947 	bl	8000168 <__aeabi_dsub>
 8009eda:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ede:	9d08      	ldr	r5, [sp, #32]
 8009ee0:	f806 4b01 	strb.w	r4, [r6], #1
 8009ee4:	eba6 040a 	sub.w	r4, r6, sl
 8009ee8:	42a5      	cmp	r5, r4
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	d133      	bne.n	8009f58 <_dtoa_r+0x6e8>
 8009ef0:	f7f6 f93c 	bl	800016c <__adddf3>
 8009ef4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ef8:	4604      	mov	r4, r0
 8009efa:	460d      	mov	r5, r1
 8009efc:	f7f6 fd7c 	bl	80009f8 <__aeabi_dcmpgt>
 8009f00:	b9c0      	cbnz	r0, 8009f34 <_dtoa_r+0x6c4>
 8009f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f06:	4620      	mov	r0, r4
 8009f08:	4629      	mov	r1, r5
 8009f0a:	f7f6 fd4d 	bl	80009a8 <__aeabi_dcmpeq>
 8009f0e:	b110      	cbz	r0, 8009f16 <_dtoa_r+0x6a6>
 8009f10:	f018 0f01 	tst.w	r8, #1
 8009f14:	d10e      	bne.n	8009f34 <_dtoa_r+0x6c4>
 8009f16:	4648      	mov	r0, r9
 8009f18:	9903      	ldr	r1, [sp, #12]
 8009f1a:	f000 ff07 	bl	800ad2c <_Bfree>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	7033      	strb	r3, [r6, #0]
 8009f22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009f24:	3701      	adds	r7, #1
 8009f26:	601f      	str	r7, [r3, #0]
 8009f28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 824b 	beq.w	800a3c6 <_dtoa_r+0xb56>
 8009f30:	601e      	str	r6, [r3, #0]
 8009f32:	e248      	b.n	800a3c6 <_dtoa_r+0xb56>
 8009f34:	46b8      	mov	r8, r7
 8009f36:	4633      	mov	r3, r6
 8009f38:	461e      	mov	r6, r3
 8009f3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f3e:	2a39      	cmp	r2, #57	@ 0x39
 8009f40:	d106      	bne.n	8009f50 <_dtoa_r+0x6e0>
 8009f42:	459a      	cmp	sl, r3
 8009f44:	d1f8      	bne.n	8009f38 <_dtoa_r+0x6c8>
 8009f46:	2230      	movs	r2, #48	@ 0x30
 8009f48:	f108 0801 	add.w	r8, r8, #1
 8009f4c:	f88a 2000 	strb.w	r2, [sl]
 8009f50:	781a      	ldrb	r2, [r3, #0]
 8009f52:	3201      	adds	r2, #1
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	e7a0      	b.n	8009e9a <_dtoa_r+0x62a>
 8009f58:	2200      	movs	r2, #0
 8009f5a:	4b6f      	ldr	r3, [pc, #444]	@ (800a118 <_dtoa_r+0x8a8>)
 8009f5c:	f7f6 fabc 	bl	80004d8 <__aeabi_dmul>
 8009f60:	2200      	movs	r2, #0
 8009f62:	2300      	movs	r3, #0
 8009f64:	4604      	mov	r4, r0
 8009f66:	460d      	mov	r5, r1
 8009f68:	f7f6 fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d09f      	beq.n	8009eb0 <_dtoa_r+0x640>
 8009f70:	e7d1      	b.n	8009f16 <_dtoa_r+0x6a6>
 8009f72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	f000 80ea 	beq.w	800a14e <_dtoa_r+0x8de>
 8009f7a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009f7c:	2a01      	cmp	r2, #1
 8009f7e:	f300 80cd 	bgt.w	800a11c <_dtoa_r+0x8ac>
 8009f82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009f84:	2a00      	cmp	r2, #0
 8009f86:	f000 80c1 	beq.w	800a10c <_dtoa_r+0x89c>
 8009f8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009f8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f90:	9e04      	ldr	r6, [sp, #16]
 8009f92:	9a04      	ldr	r2, [sp, #16]
 8009f94:	2101      	movs	r1, #1
 8009f96:	441a      	add	r2, r3
 8009f98:	9204      	str	r2, [sp, #16]
 8009f9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f9c:	4648      	mov	r0, r9
 8009f9e:	441a      	add	r2, r3
 8009fa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fa2:	f000 ffc1 	bl	800af28 <__i2b>
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	b166      	cbz	r6, 8009fc4 <_dtoa_r+0x754>
 8009faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	dd09      	ble.n	8009fc4 <_dtoa_r+0x754>
 8009fb0:	42b3      	cmp	r3, r6
 8009fb2:	bfa8      	it	ge
 8009fb4:	4633      	movge	r3, r6
 8009fb6:	9a04      	ldr	r2, [sp, #16]
 8009fb8:	1af6      	subs	r6, r6, r3
 8009fba:	1ad2      	subs	r2, r2, r3
 8009fbc:	9204      	str	r2, [sp, #16]
 8009fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fc6:	b30b      	cbz	r3, 800a00c <_dtoa_r+0x79c>
 8009fc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 80c6 	beq.w	800a15c <_dtoa_r+0x8ec>
 8009fd0:	2c00      	cmp	r4, #0
 8009fd2:	f000 80c0 	beq.w	800a156 <_dtoa_r+0x8e6>
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	4622      	mov	r2, r4
 8009fda:	4648      	mov	r0, r9
 8009fdc:	f001 f85c 	bl	800b098 <__pow5mult>
 8009fe0:	9a03      	ldr	r2, [sp, #12]
 8009fe2:	4601      	mov	r1, r0
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	4648      	mov	r0, r9
 8009fe8:	f000 ffb4 	bl	800af54 <__multiply>
 8009fec:	9903      	ldr	r1, [sp, #12]
 8009fee:	4680      	mov	r8, r0
 8009ff0:	4648      	mov	r0, r9
 8009ff2:	f000 fe9b 	bl	800ad2c <_Bfree>
 8009ff6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ff8:	1b1b      	subs	r3, r3, r4
 8009ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ffc:	f000 80b1 	beq.w	800a162 <_dtoa_r+0x8f2>
 800a000:	4641      	mov	r1, r8
 800a002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a004:	4648      	mov	r0, r9
 800a006:	f001 f847 	bl	800b098 <__pow5mult>
 800a00a:	9003      	str	r0, [sp, #12]
 800a00c:	2101      	movs	r1, #1
 800a00e:	4648      	mov	r0, r9
 800a010:	f000 ff8a 	bl	800af28 <__i2b>
 800a014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a016:	4604      	mov	r4, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 81d8 	beq.w	800a3ce <_dtoa_r+0xb5e>
 800a01e:	461a      	mov	r2, r3
 800a020:	4601      	mov	r1, r0
 800a022:	4648      	mov	r0, r9
 800a024:	f001 f838 	bl	800b098 <__pow5mult>
 800a028:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a02a:	4604      	mov	r4, r0
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	f300 809f 	bgt.w	800a170 <_dtoa_r+0x900>
 800a032:	9b06      	ldr	r3, [sp, #24]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f040 8097 	bne.w	800a168 <_dtoa_r+0x8f8>
 800a03a:	9b07      	ldr	r3, [sp, #28]
 800a03c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a040:	2b00      	cmp	r3, #0
 800a042:	f040 8093 	bne.w	800a16c <_dtoa_r+0x8fc>
 800a046:	9b07      	ldr	r3, [sp, #28]
 800a048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a04c:	0d1b      	lsrs	r3, r3, #20
 800a04e:	051b      	lsls	r3, r3, #20
 800a050:	b133      	cbz	r3, 800a060 <_dtoa_r+0x7f0>
 800a052:	9b04      	ldr	r3, [sp, #16]
 800a054:	3301      	adds	r3, #1
 800a056:	9304      	str	r3, [sp, #16]
 800a058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a05a:	3301      	adds	r3, #1
 800a05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a05e:	2301      	movs	r3, #1
 800a060:	930a      	str	r3, [sp, #40]	@ 0x28
 800a062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 81b8 	beq.w	800a3da <_dtoa_r+0xb6a>
 800a06a:	6923      	ldr	r3, [r4, #16]
 800a06c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a070:	6918      	ldr	r0, [r3, #16]
 800a072:	f000 ff0d 	bl	800ae90 <__hi0bits>
 800a076:	f1c0 0020 	rsb	r0, r0, #32
 800a07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a07c:	4418      	add	r0, r3
 800a07e:	f010 001f 	ands.w	r0, r0, #31
 800a082:	f000 8082 	beq.w	800a18a <_dtoa_r+0x91a>
 800a086:	f1c0 0320 	rsb	r3, r0, #32
 800a08a:	2b04      	cmp	r3, #4
 800a08c:	dd73      	ble.n	800a176 <_dtoa_r+0x906>
 800a08e:	9b04      	ldr	r3, [sp, #16]
 800a090:	f1c0 001c 	rsb	r0, r0, #28
 800a094:	4403      	add	r3, r0
 800a096:	9304      	str	r3, [sp, #16]
 800a098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a09a:	4406      	add	r6, r0
 800a09c:	4403      	add	r3, r0
 800a09e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0a0:	9b04      	ldr	r3, [sp, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	dd05      	ble.n	800a0b2 <_dtoa_r+0x842>
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4648      	mov	r0, r9
 800a0aa:	9903      	ldr	r1, [sp, #12]
 800a0ac:	f001 f84e 	bl	800b14c <__lshift>
 800a0b0:	9003      	str	r0, [sp, #12]
 800a0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dd05      	ble.n	800a0c4 <_dtoa_r+0x854>
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	4648      	mov	r0, r9
 800a0be:	f001 f845 	bl	800b14c <__lshift>
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d061      	beq.n	800a18e <_dtoa_r+0x91e>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	9803      	ldr	r0, [sp, #12]
 800a0ce:	f001 f8a9 	bl	800b224 <__mcmp>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	da5b      	bge.n	800a18e <_dtoa_r+0x91e>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	220a      	movs	r2, #10
 800a0da:	4648      	mov	r0, r9
 800a0dc:	9903      	ldr	r1, [sp, #12]
 800a0de:	f000 fe47 	bl	800ad70 <__multadd>
 800a0e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0e4:	f107 38ff 	add.w	r8, r7, #4294967295
 800a0e8:	9003      	str	r0, [sp, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 8177 	beq.w	800a3de <_dtoa_r+0xb6e>
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	4648      	mov	r0, r9
 800a0f8:	f000 fe3a 	bl	800ad70 <__multadd>
 800a0fc:	f1bb 0f00 	cmp.w	fp, #0
 800a100:	4605      	mov	r5, r0
 800a102:	dc6f      	bgt.n	800a1e4 <_dtoa_r+0x974>
 800a104:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a106:	2b02      	cmp	r3, #2
 800a108:	dc49      	bgt.n	800a19e <_dtoa_r+0x92e>
 800a10a:	e06b      	b.n	800a1e4 <_dtoa_r+0x974>
 800a10c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a10e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a112:	e73c      	b.n	8009f8e <_dtoa_r+0x71e>
 800a114:	3fe00000 	.word	0x3fe00000
 800a118:	40240000 	.word	0x40240000
 800a11c:	9b08      	ldr	r3, [sp, #32]
 800a11e:	1e5c      	subs	r4, r3, #1
 800a120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a122:	42a3      	cmp	r3, r4
 800a124:	db09      	blt.n	800a13a <_dtoa_r+0x8ca>
 800a126:	1b1c      	subs	r4, r3, r4
 800a128:	9b08      	ldr	r3, [sp, #32]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f6bf af30 	bge.w	8009f90 <_dtoa_r+0x720>
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	9a08      	ldr	r2, [sp, #32]
 800a134:	1a9e      	subs	r6, r3, r2
 800a136:	2300      	movs	r3, #0
 800a138:	e72b      	b.n	8009f92 <_dtoa_r+0x722>
 800a13a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a13c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a13e:	1ae3      	subs	r3, r4, r3
 800a140:	441a      	add	r2, r3
 800a142:	940a      	str	r4, [sp, #40]	@ 0x28
 800a144:	9e04      	ldr	r6, [sp, #16]
 800a146:	2400      	movs	r4, #0
 800a148:	9b08      	ldr	r3, [sp, #32]
 800a14a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a14c:	e721      	b.n	8009f92 <_dtoa_r+0x722>
 800a14e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a150:	9e04      	ldr	r6, [sp, #16]
 800a152:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a154:	e728      	b.n	8009fa8 <_dtoa_r+0x738>
 800a156:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a15a:	e751      	b.n	800a000 <_dtoa_r+0x790>
 800a15c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a15e:	9903      	ldr	r1, [sp, #12]
 800a160:	e750      	b.n	800a004 <_dtoa_r+0x794>
 800a162:	f8cd 800c 	str.w	r8, [sp, #12]
 800a166:	e751      	b.n	800a00c <_dtoa_r+0x79c>
 800a168:	2300      	movs	r3, #0
 800a16a:	e779      	b.n	800a060 <_dtoa_r+0x7f0>
 800a16c:	9b06      	ldr	r3, [sp, #24]
 800a16e:	e777      	b.n	800a060 <_dtoa_r+0x7f0>
 800a170:	2300      	movs	r3, #0
 800a172:	930a      	str	r3, [sp, #40]	@ 0x28
 800a174:	e779      	b.n	800a06a <_dtoa_r+0x7fa>
 800a176:	d093      	beq.n	800a0a0 <_dtoa_r+0x830>
 800a178:	9a04      	ldr	r2, [sp, #16]
 800a17a:	331c      	adds	r3, #28
 800a17c:	441a      	add	r2, r3
 800a17e:	9204      	str	r2, [sp, #16]
 800a180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a182:	441e      	add	r6, r3
 800a184:	441a      	add	r2, r3
 800a186:	9209      	str	r2, [sp, #36]	@ 0x24
 800a188:	e78a      	b.n	800a0a0 <_dtoa_r+0x830>
 800a18a:	4603      	mov	r3, r0
 800a18c:	e7f4      	b.n	800a178 <_dtoa_r+0x908>
 800a18e:	9b08      	ldr	r3, [sp, #32]
 800a190:	46b8      	mov	r8, r7
 800a192:	2b00      	cmp	r3, #0
 800a194:	dc20      	bgt.n	800a1d8 <_dtoa_r+0x968>
 800a196:	469b      	mov	fp, r3
 800a198:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	dd1e      	ble.n	800a1dc <_dtoa_r+0x96c>
 800a19e:	f1bb 0f00 	cmp.w	fp, #0
 800a1a2:	f47f adb1 	bne.w	8009d08 <_dtoa_r+0x498>
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	465b      	mov	r3, fp
 800a1aa:	2205      	movs	r2, #5
 800a1ac:	4648      	mov	r0, r9
 800a1ae:	f000 fddf 	bl	800ad70 <__multadd>
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	9803      	ldr	r0, [sp, #12]
 800a1b8:	f001 f834 	bl	800b224 <__mcmp>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	f77f ada3 	ble.w	8009d08 <_dtoa_r+0x498>
 800a1c2:	4656      	mov	r6, sl
 800a1c4:	2331      	movs	r3, #49	@ 0x31
 800a1c6:	f108 0801 	add.w	r8, r8, #1
 800a1ca:	f806 3b01 	strb.w	r3, [r6], #1
 800a1ce:	e59f      	b.n	8009d10 <_dtoa_r+0x4a0>
 800a1d0:	46b8      	mov	r8, r7
 800a1d2:	9c08      	ldr	r4, [sp, #32]
 800a1d4:	4625      	mov	r5, r4
 800a1d6:	e7f4      	b.n	800a1c2 <_dtoa_r+0x952>
 800a1d8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a1dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 8101 	beq.w	800a3e6 <_dtoa_r+0xb76>
 800a1e4:	2e00      	cmp	r6, #0
 800a1e6:	dd05      	ble.n	800a1f4 <_dtoa_r+0x984>
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	4632      	mov	r2, r6
 800a1ec:	4648      	mov	r0, r9
 800a1ee:	f000 ffad 	bl	800b14c <__lshift>
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d05c      	beq.n	800a2b4 <_dtoa_r+0xa44>
 800a1fa:	4648      	mov	r0, r9
 800a1fc:	6869      	ldr	r1, [r5, #4]
 800a1fe:	f000 fd55 	bl	800acac <_Balloc>
 800a202:	4606      	mov	r6, r0
 800a204:	b928      	cbnz	r0, 800a212 <_dtoa_r+0x9a2>
 800a206:	4602      	mov	r2, r0
 800a208:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a20c:	4b80      	ldr	r3, [pc, #512]	@ (800a410 <_dtoa_r+0xba0>)
 800a20e:	f7ff bb43 	b.w	8009898 <_dtoa_r+0x28>
 800a212:	692a      	ldr	r2, [r5, #16]
 800a214:	f105 010c 	add.w	r1, r5, #12
 800a218:	3202      	adds	r2, #2
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	300c      	adds	r0, #12
 800a21e:	f7ff fa8a 	bl	8009736 <memcpy>
 800a222:	2201      	movs	r2, #1
 800a224:	4631      	mov	r1, r6
 800a226:	4648      	mov	r0, r9
 800a228:	f000 ff90 	bl	800b14c <__lshift>
 800a22c:	462f      	mov	r7, r5
 800a22e:	4605      	mov	r5, r0
 800a230:	f10a 0301 	add.w	r3, sl, #1
 800a234:	9304      	str	r3, [sp, #16]
 800a236:	eb0a 030b 	add.w	r3, sl, fp
 800a23a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a23c:	9b06      	ldr	r3, [sp, #24]
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	9309      	str	r3, [sp, #36]	@ 0x24
 800a244:	9b04      	ldr	r3, [sp, #16]
 800a246:	4621      	mov	r1, r4
 800a248:	9803      	ldr	r0, [sp, #12]
 800a24a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a24e:	f7ff fa87 	bl	8009760 <quorem>
 800a252:	4603      	mov	r3, r0
 800a254:	4639      	mov	r1, r7
 800a256:	3330      	adds	r3, #48	@ 0x30
 800a258:	9006      	str	r0, [sp, #24]
 800a25a:	9803      	ldr	r0, [sp, #12]
 800a25c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a25e:	f000 ffe1 	bl	800b224 <__mcmp>
 800a262:	462a      	mov	r2, r5
 800a264:	9008      	str	r0, [sp, #32]
 800a266:	4621      	mov	r1, r4
 800a268:	4648      	mov	r0, r9
 800a26a:	f000 fff7 	bl	800b25c <__mdiff>
 800a26e:	68c2      	ldr	r2, [r0, #12]
 800a270:	4606      	mov	r6, r0
 800a272:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a274:	bb02      	cbnz	r2, 800a2b8 <_dtoa_r+0xa48>
 800a276:	4601      	mov	r1, r0
 800a278:	9803      	ldr	r0, [sp, #12]
 800a27a:	f000 ffd3 	bl	800b224 <__mcmp>
 800a27e:	4602      	mov	r2, r0
 800a280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a282:	4631      	mov	r1, r6
 800a284:	4648      	mov	r0, r9
 800a286:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800a28a:	f000 fd4f 	bl	800ad2c <_Bfree>
 800a28e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a290:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a292:	9e04      	ldr	r6, [sp, #16]
 800a294:	ea42 0103 	orr.w	r1, r2, r3
 800a298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a29a:	4319      	orrs	r1, r3
 800a29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a29e:	d10d      	bne.n	800a2bc <_dtoa_r+0xa4c>
 800a2a0:	2b39      	cmp	r3, #57	@ 0x39
 800a2a2:	d027      	beq.n	800a2f4 <_dtoa_r+0xa84>
 800a2a4:	9a08      	ldr	r2, [sp, #32]
 800a2a6:	2a00      	cmp	r2, #0
 800a2a8:	dd01      	ble.n	800a2ae <_dtoa_r+0xa3e>
 800a2aa:	9b06      	ldr	r3, [sp, #24]
 800a2ac:	3331      	adds	r3, #49	@ 0x31
 800a2ae:	f88b 3000 	strb.w	r3, [fp]
 800a2b2:	e52e      	b.n	8009d12 <_dtoa_r+0x4a2>
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	e7b9      	b.n	800a22c <_dtoa_r+0x9bc>
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	e7e2      	b.n	800a282 <_dtoa_r+0xa12>
 800a2bc:	9908      	ldr	r1, [sp, #32]
 800a2be:	2900      	cmp	r1, #0
 800a2c0:	db04      	blt.n	800a2cc <_dtoa_r+0xa5c>
 800a2c2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800a2c4:	4301      	orrs	r1, r0
 800a2c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2c8:	4301      	orrs	r1, r0
 800a2ca:	d120      	bne.n	800a30e <_dtoa_r+0xa9e>
 800a2cc:	2a00      	cmp	r2, #0
 800a2ce:	ddee      	ble.n	800a2ae <_dtoa_r+0xa3e>
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	9903      	ldr	r1, [sp, #12]
 800a2d4:	4648      	mov	r0, r9
 800a2d6:	9304      	str	r3, [sp, #16]
 800a2d8:	f000 ff38 	bl	800b14c <__lshift>
 800a2dc:	4621      	mov	r1, r4
 800a2de:	9003      	str	r0, [sp, #12]
 800a2e0:	f000 ffa0 	bl	800b224 <__mcmp>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	9b04      	ldr	r3, [sp, #16]
 800a2e8:	dc02      	bgt.n	800a2f0 <_dtoa_r+0xa80>
 800a2ea:	d1e0      	bne.n	800a2ae <_dtoa_r+0xa3e>
 800a2ec:	07da      	lsls	r2, r3, #31
 800a2ee:	d5de      	bpl.n	800a2ae <_dtoa_r+0xa3e>
 800a2f0:	2b39      	cmp	r3, #57	@ 0x39
 800a2f2:	d1da      	bne.n	800a2aa <_dtoa_r+0xa3a>
 800a2f4:	2339      	movs	r3, #57	@ 0x39
 800a2f6:	f88b 3000 	strb.w	r3, [fp]
 800a2fa:	4633      	mov	r3, r6
 800a2fc:	461e      	mov	r6, r3
 800a2fe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a302:	3b01      	subs	r3, #1
 800a304:	2a39      	cmp	r2, #57	@ 0x39
 800a306:	d04e      	beq.n	800a3a6 <_dtoa_r+0xb36>
 800a308:	3201      	adds	r2, #1
 800a30a:	701a      	strb	r2, [r3, #0]
 800a30c:	e501      	b.n	8009d12 <_dtoa_r+0x4a2>
 800a30e:	2a00      	cmp	r2, #0
 800a310:	dd03      	ble.n	800a31a <_dtoa_r+0xaaa>
 800a312:	2b39      	cmp	r3, #57	@ 0x39
 800a314:	d0ee      	beq.n	800a2f4 <_dtoa_r+0xa84>
 800a316:	3301      	adds	r3, #1
 800a318:	e7c9      	b.n	800a2ae <_dtoa_r+0xa3e>
 800a31a:	9a04      	ldr	r2, [sp, #16]
 800a31c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a31e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a322:	428a      	cmp	r2, r1
 800a324:	d028      	beq.n	800a378 <_dtoa_r+0xb08>
 800a326:	2300      	movs	r3, #0
 800a328:	220a      	movs	r2, #10
 800a32a:	9903      	ldr	r1, [sp, #12]
 800a32c:	4648      	mov	r0, r9
 800a32e:	f000 fd1f 	bl	800ad70 <__multadd>
 800a332:	42af      	cmp	r7, r5
 800a334:	9003      	str	r0, [sp, #12]
 800a336:	f04f 0300 	mov.w	r3, #0
 800a33a:	f04f 020a 	mov.w	r2, #10
 800a33e:	4639      	mov	r1, r7
 800a340:	4648      	mov	r0, r9
 800a342:	d107      	bne.n	800a354 <_dtoa_r+0xae4>
 800a344:	f000 fd14 	bl	800ad70 <__multadd>
 800a348:	4607      	mov	r7, r0
 800a34a:	4605      	mov	r5, r0
 800a34c:	9b04      	ldr	r3, [sp, #16]
 800a34e:	3301      	adds	r3, #1
 800a350:	9304      	str	r3, [sp, #16]
 800a352:	e777      	b.n	800a244 <_dtoa_r+0x9d4>
 800a354:	f000 fd0c 	bl	800ad70 <__multadd>
 800a358:	4629      	mov	r1, r5
 800a35a:	4607      	mov	r7, r0
 800a35c:	2300      	movs	r3, #0
 800a35e:	220a      	movs	r2, #10
 800a360:	4648      	mov	r0, r9
 800a362:	f000 fd05 	bl	800ad70 <__multadd>
 800a366:	4605      	mov	r5, r0
 800a368:	e7f0      	b.n	800a34c <_dtoa_r+0xadc>
 800a36a:	f1bb 0f00 	cmp.w	fp, #0
 800a36e:	bfcc      	ite	gt
 800a370:	465e      	movgt	r6, fp
 800a372:	2601      	movle	r6, #1
 800a374:	2700      	movs	r7, #0
 800a376:	4456      	add	r6, sl
 800a378:	2201      	movs	r2, #1
 800a37a:	9903      	ldr	r1, [sp, #12]
 800a37c:	4648      	mov	r0, r9
 800a37e:	9304      	str	r3, [sp, #16]
 800a380:	f000 fee4 	bl	800b14c <__lshift>
 800a384:	4621      	mov	r1, r4
 800a386:	9003      	str	r0, [sp, #12]
 800a388:	f000 ff4c 	bl	800b224 <__mcmp>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	dcb4      	bgt.n	800a2fa <_dtoa_r+0xa8a>
 800a390:	d102      	bne.n	800a398 <_dtoa_r+0xb28>
 800a392:	9b04      	ldr	r3, [sp, #16]
 800a394:	07db      	lsls	r3, r3, #31
 800a396:	d4b0      	bmi.n	800a2fa <_dtoa_r+0xa8a>
 800a398:	4633      	mov	r3, r6
 800a39a:	461e      	mov	r6, r3
 800a39c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3a0:	2a30      	cmp	r2, #48	@ 0x30
 800a3a2:	d0fa      	beq.n	800a39a <_dtoa_r+0xb2a>
 800a3a4:	e4b5      	b.n	8009d12 <_dtoa_r+0x4a2>
 800a3a6:	459a      	cmp	sl, r3
 800a3a8:	d1a8      	bne.n	800a2fc <_dtoa_r+0xa8c>
 800a3aa:	2331      	movs	r3, #49	@ 0x31
 800a3ac:	f108 0801 	add.w	r8, r8, #1
 800a3b0:	f88a 3000 	strb.w	r3, [sl]
 800a3b4:	e4ad      	b.n	8009d12 <_dtoa_r+0x4a2>
 800a3b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a3b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a414 <_dtoa_r+0xba4>
 800a3bc:	b11b      	cbz	r3, 800a3c6 <_dtoa_r+0xb56>
 800a3be:	f10a 0308 	add.w	r3, sl, #8
 800a3c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	4650      	mov	r0, sl
 800a3c8:	b017      	add	sp, #92	@ 0x5c
 800a3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	f77f ae2e 	ble.w	800a032 <_dtoa_r+0x7c2>
 800a3d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3da:	2001      	movs	r0, #1
 800a3dc:	e64d      	b.n	800a07a <_dtoa_r+0x80a>
 800a3de:	f1bb 0f00 	cmp.w	fp, #0
 800a3e2:	f77f aed9 	ble.w	800a198 <_dtoa_r+0x928>
 800a3e6:	4656      	mov	r6, sl
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	9803      	ldr	r0, [sp, #12]
 800a3ec:	f7ff f9b8 	bl	8009760 <quorem>
 800a3f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a3f4:	f806 3b01 	strb.w	r3, [r6], #1
 800a3f8:	eba6 020a 	sub.w	r2, r6, sl
 800a3fc:	4593      	cmp	fp, r2
 800a3fe:	ddb4      	ble.n	800a36a <_dtoa_r+0xafa>
 800a400:	2300      	movs	r3, #0
 800a402:	220a      	movs	r2, #10
 800a404:	4648      	mov	r0, r9
 800a406:	9903      	ldr	r1, [sp, #12]
 800a408:	f000 fcb2 	bl	800ad70 <__multadd>
 800a40c:	9003      	str	r0, [sp, #12]
 800a40e:	e7eb      	b.n	800a3e8 <_dtoa_r+0xb78>
 800a410:	0800c380 	.word	0x0800c380
 800a414:	0800c304 	.word	0x0800c304

0800a418 <_free_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4605      	mov	r5, r0
 800a41c:	2900      	cmp	r1, #0
 800a41e:	d040      	beq.n	800a4a2 <_free_r+0x8a>
 800a420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a424:	1f0c      	subs	r4, r1, #4
 800a426:	2b00      	cmp	r3, #0
 800a428:	bfb8      	it	lt
 800a42a:	18e4      	addlt	r4, r4, r3
 800a42c:	f000 fc32 	bl	800ac94 <__malloc_lock>
 800a430:	4a1c      	ldr	r2, [pc, #112]	@ (800a4a4 <_free_r+0x8c>)
 800a432:	6813      	ldr	r3, [r2, #0]
 800a434:	b933      	cbnz	r3, 800a444 <_free_r+0x2c>
 800a436:	6063      	str	r3, [r4, #4]
 800a438:	6014      	str	r4, [r2, #0]
 800a43a:	4628      	mov	r0, r5
 800a43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a440:	f000 bc2e 	b.w	800aca0 <__malloc_unlock>
 800a444:	42a3      	cmp	r3, r4
 800a446:	d908      	bls.n	800a45a <_free_r+0x42>
 800a448:	6820      	ldr	r0, [r4, #0]
 800a44a:	1821      	adds	r1, r4, r0
 800a44c:	428b      	cmp	r3, r1
 800a44e:	bf01      	itttt	eq
 800a450:	6819      	ldreq	r1, [r3, #0]
 800a452:	685b      	ldreq	r3, [r3, #4]
 800a454:	1809      	addeq	r1, r1, r0
 800a456:	6021      	streq	r1, [r4, #0]
 800a458:	e7ed      	b.n	800a436 <_free_r+0x1e>
 800a45a:	461a      	mov	r2, r3
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	b10b      	cbz	r3, 800a464 <_free_r+0x4c>
 800a460:	42a3      	cmp	r3, r4
 800a462:	d9fa      	bls.n	800a45a <_free_r+0x42>
 800a464:	6811      	ldr	r1, [r2, #0]
 800a466:	1850      	adds	r0, r2, r1
 800a468:	42a0      	cmp	r0, r4
 800a46a:	d10b      	bne.n	800a484 <_free_r+0x6c>
 800a46c:	6820      	ldr	r0, [r4, #0]
 800a46e:	4401      	add	r1, r0
 800a470:	1850      	adds	r0, r2, r1
 800a472:	4283      	cmp	r3, r0
 800a474:	6011      	str	r1, [r2, #0]
 800a476:	d1e0      	bne.n	800a43a <_free_r+0x22>
 800a478:	6818      	ldr	r0, [r3, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	4408      	add	r0, r1
 800a47e:	6010      	str	r0, [r2, #0]
 800a480:	6053      	str	r3, [r2, #4]
 800a482:	e7da      	b.n	800a43a <_free_r+0x22>
 800a484:	d902      	bls.n	800a48c <_free_r+0x74>
 800a486:	230c      	movs	r3, #12
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	e7d6      	b.n	800a43a <_free_r+0x22>
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	1821      	adds	r1, r4, r0
 800a490:	428b      	cmp	r3, r1
 800a492:	bf01      	itttt	eq
 800a494:	6819      	ldreq	r1, [r3, #0]
 800a496:	685b      	ldreq	r3, [r3, #4]
 800a498:	1809      	addeq	r1, r1, r0
 800a49a:	6021      	streq	r1, [r4, #0]
 800a49c:	6063      	str	r3, [r4, #4]
 800a49e:	6054      	str	r4, [r2, #4]
 800a4a0:	e7cb      	b.n	800a43a <_free_r+0x22>
 800a4a2:	bd38      	pop	{r3, r4, r5, pc}
 800a4a4:	200014f4 	.word	0x200014f4

0800a4a8 <rshift>:
 800a4a8:	6903      	ldr	r3, [r0, #16]
 800a4aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4b2:	f100 0414 	add.w	r4, r0, #20
 800a4b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4ba:	dd46      	ble.n	800a54a <rshift+0xa2>
 800a4bc:	f011 011f 	ands.w	r1, r1, #31
 800a4c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4c8:	d10c      	bne.n	800a4e4 <rshift+0x3c>
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f100 0710 	add.w	r7, r0, #16
 800a4d0:	42b1      	cmp	r1, r6
 800a4d2:	d335      	bcc.n	800a540 <rshift+0x98>
 800a4d4:	1a9b      	subs	r3, r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	1eea      	subs	r2, r5, #3
 800a4da:	4296      	cmp	r6, r2
 800a4dc:	bf38      	it	cc
 800a4de:	2300      	movcc	r3, #0
 800a4e0:	4423      	add	r3, r4
 800a4e2:	e015      	b.n	800a510 <rshift+0x68>
 800a4e4:	46a1      	mov	r9, r4
 800a4e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a4ea:	f1c1 0820 	rsb	r8, r1, #32
 800a4ee:	40cf      	lsrs	r7, r1
 800a4f0:	f105 0e04 	add.w	lr, r5, #4
 800a4f4:	4576      	cmp	r6, lr
 800a4f6:	46f4      	mov	ip, lr
 800a4f8:	d816      	bhi.n	800a528 <rshift+0x80>
 800a4fa:	1a9a      	subs	r2, r3, r2
 800a4fc:	0092      	lsls	r2, r2, #2
 800a4fe:	3a04      	subs	r2, #4
 800a500:	3501      	adds	r5, #1
 800a502:	42ae      	cmp	r6, r5
 800a504:	bf38      	it	cc
 800a506:	2200      	movcc	r2, #0
 800a508:	18a3      	adds	r3, r4, r2
 800a50a:	50a7      	str	r7, [r4, r2]
 800a50c:	b107      	cbz	r7, 800a510 <rshift+0x68>
 800a50e:	3304      	adds	r3, #4
 800a510:	42a3      	cmp	r3, r4
 800a512:	eba3 0204 	sub.w	r2, r3, r4
 800a516:	bf08      	it	eq
 800a518:	2300      	moveq	r3, #0
 800a51a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a51e:	6102      	str	r2, [r0, #16]
 800a520:	bf08      	it	eq
 800a522:	6143      	streq	r3, [r0, #20]
 800a524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a528:	f8dc c000 	ldr.w	ip, [ip]
 800a52c:	fa0c fc08 	lsl.w	ip, ip, r8
 800a530:	ea4c 0707 	orr.w	r7, ip, r7
 800a534:	f849 7b04 	str.w	r7, [r9], #4
 800a538:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a53c:	40cf      	lsrs	r7, r1
 800a53e:	e7d9      	b.n	800a4f4 <rshift+0x4c>
 800a540:	f851 cb04 	ldr.w	ip, [r1], #4
 800a544:	f847 cf04 	str.w	ip, [r7, #4]!
 800a548:	e7c2      	b.n	800a4d0 <rshift+0x28>
 800a54a:	4623      	mov	r3, r4
 800a54c:	e7e0      	b.n	800a510 <rshift+0x68>

0800a54e <__hexdig_fun>:
 800a54e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a552:	2b09      	cmp	r3, #9
 800a554:	d802      	bhi.n	800a55c <__hexdig_fun+0xe>
 800a556:	3820      	subs	r0, #32
 800a558:	b2c0      	uxtb	r0, r0
 800a55a:	4770      	bx	lr
 800a55c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a560:	2b05      	cmp	r3, #5
 800a562:	d801      	bhi.n	800a568 <__hexdig_fun+0x1a>
 800a564:	3847      	subs	r0, #71	@ 0x47
 800a566:	e7f7      	b.n	800a558 <__hexdig_fun+0xa>
 800a568:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a56c:	2b05      	cmp	r3, #5
 800a56e:	d801      	bhi.n	800a574 <__hexdig_fun+0x26>
 800a570:	3827      	subs	r0, #39	@ 0x27
 800a572:	e7f1      	b.n	800a558 <__hexdig_fun+0xa>
 800a574:	2000      	movs	r0, #0
 800a576:	4770      	bx	lr

0800a578 <__gethex>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	468a      	mov	sl, r1
 800a57e:	4690      	mov	r8, r2
 800a580:	b085      	sub	sp, #20
 800a582:	9302      	str	r3, [sp, #8]
 800a584:	680b      	ldr	r3, [r1, #0]
 800a586:	9001      	str	r0, [sp, #4]
 800a588:	1c9c      	adds	r4, r3, #2
 800a58a:	46a1      	mov	r9, r4
 800a58c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a590:	2830      	cmp	r0, #48	@ 0x30
 800a592:	d0fa      	beq.n	800a58a <__gethex+0x12>
 800a594:	eba9 0303 	sub.w	r3, r9, r3
 800a598:	f1a3 0b02 	sub.w	fp, r3, #2
 800a59c:	f7ff ffd7 	bl	800a54e <__hexdig_fun>
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d168      	bne.n	800a678 <__gethex+0x100>
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	4648      	mov	r0, r9
 800a5aa:	499f      	ldr	r1, [pc, #636]	@ (800a828 <__gethex+0x2b0>)
 800a5ac:	f7ff f816 	bl	80095dc <strncmp>
 800a5b0:	4607      	mov	r7, r0
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d167      	bne.n	800a686 <__gethex+0x10e>
 800a5b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a5ba:	4626      	mov	r6, r4
 800a5bc:	f7ff ffc7 	bl	800a54e <__hexdig_fun>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d062      	beq.n	800a68a <__gethex+0x112>
 800a5c4:	4623      	mov	r3, r4
 800a5c6:	7818      	ldrb	r0, [r3, #0]
 800a5c8:	4699      	mov	r9, r3
 800a5ca:	2830      	cmp	r0, #48	@ 0x30
 800a5cc:	f103 0301 	add.w	r3, r3, #1
 800a5d0:	d0f9      	beq.n	800a5c6 <__gethex+0x4e>
 800a5d2:	f7ff ffbc 	bl	800a54e <__hexdig_fun>
 800a5d6:	fab0 f580 	clz	r5, r0
 800a5da:	f04f 0b01 	mov.w	fp, #1
 800a5de:	096d      	lsrs	r5, r5, #5
 800a5e0:	464a      	mov	r2, r9
 800a5e2:	4616      	mov	r6, r2
 800a5e4:	7830      	ldrb	r0, [r6, #0]
 800a5e6:	3201      	adds	r2, #1
 800a5e8:	f7ff ffb1 	bl	800a54e <__hexdig_fun>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d1f8      	bne.n	800a5e2 <__gethex+0x6a>
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	498c      	ldr	r1, [pc, #560]	@ (800a828 <__gethex+0x2b0>)
 800a5f6:	f7fe fff1 	bl	80095dc <strncmp>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d13f      	bne.n	800a67e <__gethex+0x106>
 800a5fe:	b944      	cbnz	r4, 800a612 <__gethex+0x9a>
 800a600:	1c74      	adds	r4, r6, #1
 800a602:	4622      	mov	r2, r4
 800a604:	4616      	mov	r6, r2
 800a606:	7830      	ldrb	r0, [r6, #0]
 800a608:	3201      	adds	r2, #1
 800a60a:	f7ff ffa0 	bl	800a54e <__hexdig_fun>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d1f8      	bne.n	800a604 <__gethex+0x8c>
 800a612:	1ba4      	subs	r4, r4, r6
 800a614:	00a7      	lsls	r7, r4, #2
 800a616:	7833      	ldrb	r3, [r6, #0]
 800a618:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a61c:	2b50      	cmp	r3, #80	@ 0x50
 800a61e:	d13e      	bne.n	800a69e <__gethex+0x126>
 800a620:	7873      	ldrb	r3, [r6, #1]
 800a622:	2b2b      	cmp	r3, #43	@ 0x2b
 800a624:	d033      	beq.n	800a68e <__gethex+0x116>
 800a626:	2b2d      	cmp	r3, #45	@ 0x2d
 800a628:	d034      	beq.n	800a694 <__gethex+0x11c>
 800a62a:	2400      	movs	r4, #0
 800a62c:	1c71      	adds	r1, r6, #1
 800a62e:	7808      	ldrb	r0, [r1, #0]
 800a630:	f7ff ff8d 	bl	800a54e <__hexdig_fun>
 800a634:	1e43      	subs	r3, r0, #1
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b18      	cmp	r3, #24
 800a63a:	d830      	bhi.n	800a69e <__gethex+0x126>
 800a63c:	f1a0 0210 	sub.w	r2, r0, #16
 800a640:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a644:	f7ff ff83 	bl	800a54e <__hexdig_fun>
 800a648:	f100 3cff 	add.w	ip, r0, #4294967295
 800a64c:	fa5f fc8c 	uxtb.w	ip, ip
 800a650:	f1bc 0f18 	cmp.w	ip, #24
 800a654:	f04f 030a 	mov.w	r3, #10
 800a658:	d91e      	bls.n	800a698 <__gethex+0x120>
 800a65a:	b104      	cbz	r4, 800a65e <__gethex+0xe6>
 800a65c:	4252      	negs	r2, r2
 800a65e:	4417      	add	r7, r2
 800a660:	f8ca 1000 	str.w	r1, [sl]
 800a664:	b1ed      	cbz	r5, 800a6a2 <__gethex+0x12a>
 800a666:	f1bb 0f00 	cmp.w	fp, #0
 800a66a:	bf0c      	ite	eq
 800a66c:	2506      	moveq	r5, #6
 800a66e:	2500      	movne	r5, #0
 800a670:	4628      	mov	r0, r5
 800a672:	b005      	add	sp, #20
 800a674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a678:	2500      	movs	r5, #0
 800a67a:	462c      	mov	r4, r5
 800a67c:	e7b0      	b.n	800a5e0 <__gethex+0x68>
 800a67e:	2c00      	cmp	r4, #0
 800a680:	d1c7      	bne.n	800a612 <__gethex+0x9a>
 800a682:	4627      	mov	r7, r4
 800a684:	e7c7      	b.n	800a616 <__gethex+0x9e>
 800a686:	464e      	mov	r6, r9
 800a688:	462f      	mov	r7, r5
 800a68a:	2501      	movs	r5, #1
 800a68c:	e7c3      	b.n	800a616 <__gethex+0x9e>
 800a68e:	2400      	movs	r4, #0
 800a690:	1cb1      	adds	r1, r6, #2
 800a692:	e7cc      	b.n	800a62e <__gethex+0xb6>
 800a694:	2401      	movs	r4, #1
 800a696:	e7fb      	b.n	800a690 <__gethex+0x118>
 800a698:	fb03 0002 	mla	r0, r3, r2, r0
 800a69c:	e7ce      	b.n	800a63c <__gethex+0xc4>
 800a69e:	4631      	mov	r1, r6
 800a6a0:	e7de      	b.n	800a660 <__gethex+0xe8>
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	eba6 0309 	sub.w	r3, r6, r9
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	2b07      	cmp	r3, #7
 800a6ac:	dc0a      	bgt.n	800a6c4 <__gethex+0x14c>
 800a6ae:	9801      	ldr	r0, [sp, #4]
 800a6b0:	f000 fafc 	bl	800acac <_Balloc>
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	b940      	cbnz	r0, 800a6ca <__gethex+0x152>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	21e4      	movs	r1, #228	@ 0xe4
 800a6bc:	4b5b      	ldr	r3, [pc, #364]	@ (800a82c <__gethex+0x2b4>)
 800a6be:	485c      	ldr	r0, [pc, #368]	@ (800a830 <__gethex+0x2b8>)
 800a6c0:	f001 f9ca 	bl	800ba58 <__assert_func>
 800a6c4:	3101      	adds	r1, #1
 800a6c6:	105b      	asrs	r3, r3, #1
 800a6c8:	e7ef      	b.n	800a6aa <__gethex+0x132>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f100 0a14 	add.w	sl, r0, #20
 800a6d0:	4655      	mov	r5, sl
 800a6d2:	469b      	mov	fp, r3
 800a6d4:	45b1      	cmp	r9, r6
 800a6d6:	d337      	bcc.n	800a748 <__gethex+0x1d0>
 800a6d8:	f845 bb04 	str.w	fp, [r5], #4
 800a6dc:	eba5 050a 	sub.w	r5, r5, sl
 800a6e0:	10ad      	asrs	r5, r5, #2
 800a6e2:	6125      	str	r5, [r4, #16]
 800a6e4:	4658      	mov	r0, fp
 800a6e6:	f000 fbd3 	bl	800ae90 <__hi0bits>
 800a6ea:	016d      	lsls	r5, r5, #5
 800a6ec:	f8d8 6000 	ldr.w	r6, [r8]
 800a6f0:	1a2d      	subs	r5, r5, r0
 800a6f2:	42b5      	cmp	r5, r6
 800a6f4:	dd54      	ble.n	800a7a0 <__gethex+0x228>
 800a6f6:	1bad      	subs	r5, r5, r6
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 ff55 	bl	800b5aa <__any_on>
 800a700:	4681      	mov	r9, r0
 800a702:	b178      	cbz	r0, 800a724 <__gethex+0x1ac>
 800a704:	f04f 0901 	mov.w	r9, #1
 800a708:	1e6b      	subs	r3, r5, #1
 800a70a:	1159      	asrs	r1, r3, #5
 800a70c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a710:	f003 021f 	and.w	r2, r3, #31
 800a714:	fa09 f202 	lsl.w	r2, r9, r2
 800a718:	420a      	tst	r2, r1
 800a71a:	d003      	beq.n	800a724 <__gethex+0x1ac>
 800a71c:	454b      	cmp	r3, r9
 800a71e:	dc36      	bgt.n	800a78e <__gethex+0x216>
 800a720:	f04f 0902 	mov.w	r9, #2
 800a724:	4629      	mov	r1, r5
 800a726:	4620      	mov	r0, r4
 800a728:	f7ff febe 	bl	800a4a8 <rshift>
 800a72c:	442f      	add	r7, r5
 800a72e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a732:	42bb      	cmp	r3, r7
 800a734:	da42      	bge.n	800a7bc <__gethex+0x244>
 800a736:	4621      	mov	r1, r4
 800a738:	9801      	ldr	r0, [sp, #4]
 800a73a:	f000 faf7 	bl	800ad2c <_Bfree>
 800a73e:	2300      	movs	r3, #0
 800a740:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a742:	25a3      	movs	r5, #163	@ 0xa3
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	e793      	b.n	800a670 <__gethex+0xf8>
 800a748:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a74c:	2a2e      	cmp	r2, #46	@ 0x2e
 800a74e:	d012      	beq.n	800a776 <__gethex+0x1fe>
 800a750:	2b20      	cmp	r3, #32
 800a752:	d104      	bne.n	800a75e <__gethex+0x1e6>
 800a754:	f845 bb04 	str.w	fp, [r5], #4
 800a758:	f04f 0b00 	mov.w	fp, #0
 800a75c:	465b      	mov	r3, fp
 800a75e:	7830      	ldrb	r0, [r6, #0]
 800a760:	9303      	str	r3, [sp, #12]
 800a762:	f7ff fef4 	bl	800a54e <__hexdig_fun>
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	f000 000f 	and.w	r0, r0, #15
 800a76c:	4098      	lsls	r0, r3
 800a76e:	ea4b 0b00 	orr.w	fp, fp, r0
 800a772:	3304      	adds	r3, #4
 800a774:	e7ae      	b.n	800a6d4 <__gethex+0x15c>
 800a776:	45b1      	cmp	r9, r6
 800a778:	d8ea      	bhi.n	800a750 <__gethex+0x1d8>
 800a77a:	2201      	movs	r2, #1
 800a77c:	4630      	mov	r0, r6
 800a77e:	492a      	ldr	r1, [pc, #168]	@ (800a828 <__gethex+0x2b0>)
 800a780:	9303      	str	r3, [sp, #12]
 800a782:	f7fe ff2b 	bl	80095dc <strncmp>
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	2800      	cmp	r0, #0
 800a78a:	d1e1      	bne.n	800a750 <__gethex+0x1d8>
 800a78c:	e7a2      	b.n	800a6d4 <__gethex+0x15c>
 800a78e:	4620      	mov	r0, r4
 800a790:	1ea9      	subs	r1, r5, #2
 800a792:	f000 ff0a 	bl	800b5aa <__any_on>
 800a796:	2800      	cmp	r0, #0
 800a798:	d0c2      	beq.n	800a720 <__gethex+0x1a8>
 800a79a:	f04f 0903 	mov.w	r9, #3
 800a79e:	e7c1      	b.n	800a724 <__gethex+0x1ac>
 800a7a0:	da09      	bge.n	800a7b6 <__gethex+0x23e>
 800a7a2:	1b75      	subs	r5, r6, r5
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	462a      	mov	r2, r5
 800a7a8:	9801      	ldr	r0, [sp, #4]
 800a7aa:	f000 fccf 	bl	800b14c <__lshift>
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	1b7f      	subs	r7, r7, r5
 800a7b2:	f100 0a14 	add.w	sl, r0, #20
 800a7b6:	f04f 0900 	mov.w	r9, #0
 800a7ba:	e7b8      	b.n	800a72e <__gethex+0x1b6>
 800a7bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7c0:	42bd      	cmp	r5, r7
 800a7c2:	dd6f      	ble.n	800a8a4 <__gethex+0x32c>
 800a7c4:	1bed      	subs	r5, r5, r7
 800a7c6:	42ae      	cmp	r6, r5
 800a7c8:	dc34      	bgt.n	800a834 <__gethex+0x2bc>
 800a7ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d022      	beq.n	800a818 <__gethex+0x2a0>
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d024      	beq.n	800a820 <__gethex+0x2a8>
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d115      	bne.n	800a806 <__gethex+0x28e>
 800a7da:	42ae      	cmp	r6, r5
 800a7dc:	d113      	bne.n	800a806 <__gethex+0x28e>
 800a7de:	2e01      	cmp	r6, #1
 800a7e0:	d10b      	bne.n	800a7fa <__gethex+0x282>
 800a7e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7e6:	9a02      	ldr	r2, [sp, #8]
 800a7e8:	2562      	movs	r5, #98	@ 0x62
 800a7ea:	6013      	str	r3, [r2, #0]
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	6123      	str	r3, [r4, #16]
 800a7f0:	f8ca 3000 	str.w	r3, [sl]
 800a7f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7f6:	601c      	str	r4, [r3, #0]
 800a7f8:	e73a      	b.n	800a670 <__gethex+0xf8>
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	1e71      	subs	r1, r6, #1
 800a7fe:	f000 fed4 	bl	800b5aa <__any_on>
 800a802:	2800      	cmp	r0, #0
 800a804:	d1ed      	bne.n	800a7e2 <__gethex+0x26a>
 800a806:	4621      	mov	r1, r4
 800a808:	9801      	ldr	r0, [sp, #4]
 800a80a:	f000 fa8f 	bl	800ad2c <_Bfree>
 800a80e:	2300      	movs	r3, #0
 800a810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a812:	2550      	movs	r5, #80	@ 0x50
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	e72b      	b.n	800a670 <__gethex+0xf8>
 800a818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1f3      	bne.n	800a806 <__gethex+0x28e>
 800a81e:	e7e0      	b.n	800a7e2 <__gethex+0x26a>
 800a820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1dd      	bne.n	800a7e2 <__gethex+0x26a>
 800a826:	e7ee      	b.n	800a806 <__gethex+0x28e>
 800a828:	0800c2c6 	.word	0x0800c2c6
 800a82c:	0800c380 	.word	0x0800c380
 800a830:	0800c391 	.word	0x0800c391
 800a834:	1e6f      	subs	r7, r5, #1
 800a836:	f1b9 0f00 	cmp.w	r9, #0
 800a83a:	d130      	bne.n	800a89e <__gethex+0x326>
 800a83c:	b127      	cbz	r7, 800a848 <__gethex+0x2d0>
 800a83e:	4639      	mov	r1, r7
 800a840:	4620      	mov	r0, r4
 800a842:	f000 feb2 	bl	800b5aa <__any_on>
 800a846:	4681      	mov	r9, r0
 800a848:	2301      	movs	r3, #1
 800a84a:	4629      	mov	r1, r5
 800a84c:	1b76      	subs	r6, r6, r5
 800a84e:	2502      	movs	r5, #2
 800a850:	117a      	asrs	r2, r7, #5
 800a852:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a856:	f007 071f 	and.w	r7, r7, #31
 800a85a:	40bb      	lsls	r3, r7
 800a85c:	4213      	tst	r3, r2
 800a85e:	4620      	mov	r0, r4
 800a860:	bf18      	it	ne
 800a862:	f049 0902 	orrne.w	r9, r9, #2
 800a866:	f7ff fe1f 	bl	800a4a8 <rshift>
 800a86a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a86e:	f1b9 0f00 	cmp.w	r9, #0
 800a872:	d047      	beq.n	800a904 <__gethex+0x38c>
 800a874:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d015      	beq.n	800a8a8 <__gethex+0x330>
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d017      	beq.n	800a8b0 <__gethex+0x338>
 800a880:	2b01      	cmp	r3, #1
 800a882:	d109      	bne.n	800a898 <__gethex+0x320>
 800a884:	f019 0f02 	tst.w	r9, #2
 800a888:	d006      	beq.n	800a898 <__gethex+0x320>
 800a88a:	f8da 3000 	ldr.w	r3, [sl]
 800a88e:	ea49 0903 	orr.w	r9, r9, r3
 800a892:	f019 0f01 	tst.w	r9, #1
 800a896:	d10e      	bne.n	800a8b6 <__gethex+0x33e>
 800a898:	f045 0510 	orr.w	r5, r5, #16
 800a89c:	e032      	b.n	800a904 <__gethex+0x38c>
 800a89e:	f04f 0901 	mov.w	r9, #1
 800a8a2:	e7d1      	b.n	800a848 <__gethex+0x2d0>
 800a8a4:	2501      	movs	r5, #1
 800a8a6:	e7e2      	b.n	800a86e <__gethex+0x2f6>
 800a8a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8aa:	f1c3 0301 	rsb	r3, r3, #1
 800a8ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0f0      	beq.n	800a898 <__gethex+0x320>
 800a8b6:	f04f 0c00 	mov.w	ip, #0
 800a8ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8be:	f104 0314 	add.w	r3, r4, #20
 800a8c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a8c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a8d4:	d01b      	beq.n	800a90e <__gethex+0x396>
 800a8d6:	3201      	adds	r2, #1
 800a8d8:	6002      	str	r2, [r0, #0]
 800a8da:	2d02      	cmp	r5, #2
 800a8dc:	f104 0314 	add.w	r3, r4, #20
 800a8e0:	d13c      	bne.n	800a95c <__gethex+0x3e4>
 800a8e2:	f8d8 2000 	ldr.w	r2, [r8]
 800a8e6:	3a01      	subs	r2, #1
 800a8e8:	42b2      	cmp	r2, r6
 800a8ea:	d109      	bne.n	800a900 <__gethex+0x388>
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	1171      	asrs	r1, r6, #5
 800a8f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8f4:	f006 061f 	and.w	r6, r6, #31
 800a8f8:	fa02 f606 	lsl.w	r6, r2, r6
 800a8fc:	421e      	tst	r6, r3
 800a8fe:	d13a      	bne.n	800a976 <__gethex+0x3fe>
 800a900:	f045 0520 	orr.w	r5, r5, #32
 800a904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a906:	601c      	str	r4, [r3, #0]
 800a908:	9b02      	ldr	r3, [sp, #8]
 800a90a:	601f      	str	r7, [r3, #0]
 800a90c:	e6b0      	b.n	800a670 <__gethex+0xf8>
 800a90e:	4299      	cmp	r1, r3
 800a910:	f843 cc04 	str.w	ip, [r3, #-4]
 800a914:	d8d9      	bhi.n	800a8ca <__gethex+0x352>
 800a916:	68a3      	ldr	r3, [r4, #8]
 800a918:	459b      	cmp	fp, r3
 800a91a:	db17      	blt.n	800a94c <__gethex+0x3d4>
 800a91c:	6861      	ldr	r1, [r4, #4]
 800a91e:	9801      	ldr	r0, [sp, #4]
 800a920:	3101      	adds	r1, #1
 800a922:	f000 f9c3 	bl	800acac <_Balloc>
 800a926:	4681      	mov	r9, r0
 800a928:	b918      	cbnz	r0, 800a932 <__gethex+0x3ba>
 800a92a:	4602      	mov	r2, r0
 800a92c:	2184      	movs	r1, #132	@ 0x84
 800a92e:	4b19      	ldr	r3, [pc, #100]	@ (800a994 <__gethex+0x41c>)
 800a930:	e6c5      	b.n	800a6be <__gethex+0x146>
 800a932:	6922      	ldr	r2, [r4, #16]
 800a934:	f104 010c 	add.w	r1, r4, #12
 800a938:	3202      	adds	r2, #2
 800a93a:	0092      	lsls	r2, r2, #2
 800a93c:	300c      	adds	r0, #12
 800a93e:	f7fe fefa 	bl	8009736 <memcpy>
 800a942:	4621      	mov	r1, r4
 800a944:	9801      	ldr	r0, [sp, #4]
 800a946:	f000 f9f1 	bl	800ad2c <_Bfree>
 800a94a:	464c      	mov	r4, r9
 800a94c:	6923      	ldr	r3, [r4, #16]
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	6122      	str	r2, [r4, #16]
 800a952:	2201      	movs	r2, #1
 800a954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a958:	615a      	str	r2, [r3, #20]
 800a95a:	e7be      	b.n	800a8da <__gethex+0x362>
 800a95c:	6922      	ldr	r2, [r4, #16]
 800a95e:	455a      	cmp	r2, fp
 800a960:	dd0b      	ble.n	800a97a <__gethex+0x402>
 800a962:	2101      	movs	r1, #1
 800a964:	4620      	mov	r0, r4
 800a966:	f7ff fd9f 	bl	800a4a8 <rshift>
 800a96a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a96e:	3701      	adds	r7, #1
 800a970:	42bb      	cmp	r3, r7
 800a972:	f6ff aee0 	blt.w	800a736 <__gethex+0x1be>
 800a976:	2501      	movs	r5, #1
 800a978:	e7c2      	b.n	800a900 <__gethex+0x388>
 800a97a:	f016 061f 	ands.w	r6, r6, #31
 800a97e:	d0fa      	beq.n	800a976 <__gethex+0x3fe>
 800a980:	4453      	add	r3, sl
 800a982:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a986:	f000 fa83 	bl	800ae90 <__hi0bits>
 800a98a:	f1c6 0620 	rsb	r6, r6, #32
 800a98e:	42b0      	cmp	r0, r6
 800a990:	dbe7      	blt.n	800a962 <__gethex+0x3ea>
 800a992:	e7f0      	b.n	800a976 <__gethex+0x3fe>
 800a994:	0800c380 	.word	0x0800c380

0800a998 <L_shift>:
 800a998:	f1c2 0208 	rsb	r2, r2, #8
 800a99c:	0092      	lsls	r2, r2, #2
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	f1c2 0620 	rsb	r6, r2, #32
 800a9a4:	6843      	ldr	r3, [r0, #4]
 800a9a6:	6804      	ldr	r4, [r0, #0]
 800a9a8:	fa03 f506 	lsl.w	r5, r3, r6
 800a9ac:	432c      	orrs	r4, r5
 800a9ae:	40d3      	lsrs	r3, r2
 800a9b0:	6004      	str	r4, [r0, #0]
 800a9b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9b6:	4288      	cmp	r0, r1
 800a9b8:	d3f4      	bcc.n	800a9a4 <L_shift+0xc>
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}

0800a9bc <__match>:
 800a9bc:	b530      	push	{r4, r5, lr}
 800a9be:	6803      	ldr	r3, [r0, #0]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c6:	b914      	cbnz	r4, 800a9ce <__match+0x12>
 800a9c8:	6003      	str	r3, [r0, #0]
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	bd30      	pop	{r4, r5, pc}
 800a9ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9d2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a9d6:	2d19      	cmp	r5, #25
 800a9d8:	bf98      	it	ls
 800a9da:	3220      	addls	r2, #32
 800a9dc:	42a2      	cmp	r2, r4
 800a9de:	d0f0      	beq.n	800a9c2 <__match+0x6>
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	e7f3      	b.n	800a9cc <__match+0x10>

0800a9e4 <__hexnan>:
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	2500      	movs	r5, #0
 800a9ea:	680b      	ldr	r3, [r1, #0]
 800a9ec:	4682      	mov	sl, r0
 800a9ee:	115e      	asrs	r6, r3, #5
 800a9f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9f4:	f013 031f 	ands.w	r3, r3, #31
 800a9f8:	bf18      	it	ne
 800a9fa:	3604      	addne	r6, #4
 800a9fc:	1f37      	subs	r7, r6, #4
 800a9fe:	4690      	mov	r8, r2
 800aa00:	46b9      	mov	r9, r7
 800aa02:	463c      	mov	r4, r7
 800aa04:	46ab      	mov	fp, r5
 800aa06:	b087      	sub	sp, #28
 800aa08:	6801      	ldr	r1, [r0, #0]
 800aa0a:	9301      	str	r3, [sp, #4]
 800aa0c:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa10:	9502      	str	r5, [sp, #8]
 800aa12:	784a      	ldrb	r2, [r1, #1]
 800aa14:	1c4b      	adds	r3, r1, #1
 800aa16:	9303      	str	r3, [sp, #12]
 800aa18:	b342      	cbz	r2, 800aa6c <__hexnan+0x88>
 800aa1a:	4610      	mov	r0, r2
 800aa1c:	9105      	str	r1, [sp, #20]
 800aa1e:	9204      	str	r2, [sp, #16]
 800aa20:	f7ff fd95 	bl	800a54e <__hexdig_fun>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d151      	bne.n	800aacc <__hexnan+0xe8>
 800aa28:	9a04      	ldr	r2, [sp, #16]
 800aa2a:	9905      	ldr	r1, [sp, #20]
 800aa2c:	2a20      	cmp	r2, #32
 800aa2e:	d818      	bhi.n	800aa62 <__hexnan+0x7e>
 800aa30:	9b02      	ldr	r3, [sp, #8]
 800aa32:	459b      	cmp	fp, r3
 800aa34:	dd13      	ble.n	800aa5e <__hexnan+0x7a>
 800aa36:	454c      	cmp	r4, r9
 800aa38:	d206      	bcs.n	800aa48 <__hexnan+0x64>
 800aa3a:	2d07      	cmp	r5, #7
 800aa3c:	dc04      	bgt.n	800aa48 <__hexnan+0x64>
 800aa3e:	462a      	mov	r2, r5
 800aa40:	4649      	mov	r1, r9
 800aa42:	4620      	mov	r0, r4
 800aa44:	f7ff ffa8 	bl	800a998 <L_shift>
 800aa48:	4544      	cmp	r4, r8
 800aa4a:	d952      	bls.n	800aaf2 <__hexnan+0x10e>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f1a4 0904 	sub.w	r9, r4, #4
 800aa52:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa56:	461d      	mov	r5, r3
 800aa58:	464c      	mov	r4, r9
 800aa5a:	f8cd b008 	str.w	fp, [sp, #8]
 800aa5e:	9903      	ldr	r1, [sp, #12]
 800aa60:	e7d7      	b.n	800aa12 <__hexnan+0x2e>
 800aa62:	2a29      	cmp	r2, #41	@ 0x29
 800aa64:	d157      	bne.n	800ab16 <__hexnan+0x132>
 800aa66:	3102      	adds	r1, #2
 800aa68:	f8ca 1000 	str.w	r1, [sl]
 800aa6c:	f1bb 0f00 	cmp.w	fp, #0
 800aa70:	d051      	beq.n	800ab16 <__hexnan+0x132>
 800aa72:	454c      	cmp	r4, r9
 800aa74:	d206      	bcs.n	800aa84 <__hexnan+0xa0>
 800aa76:	2d07      	cmp	r5, #7
 800aa78:	dc04      	bgt.n	800aa84 <__hexnan+0xa0>
 800aa7a:	462a      	mov	r2, r5
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f7ff ff8a 	bl	800a998 <L_shift>
 800aa84:	4544      	cmp	r4, r8
 800aa86:	d936      	bls.n	800aaf6 <__hexnan+0x112>
 800aa88:	4623      	mov	r3, r4
 800aa8a:	f1a8 0204 	sub.w	r2, r8, #4
 800aa8e:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa92:	429f      	cmp	r7, r3
 800aa94:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa98:	d2f9      	bcs.n	800aa8e <__hexnan+0xaa>
 800aa9a:	1b3b      	subs	r3, r7, r4
 800aa9c:	f023 0303 	bic.w	r3, r3, #3
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	3401      	adds	r4, #1
 800aaa4:	3e03      	subs	r6, #3
 800aaa6:	42b4      	cmp	r4, r6
 800aaa8:	bf88      	it	hi
 800aaaa:	2304      	movhi	r3, #4
 800aaac:	2200      	movs	r2, #0
 800aaae:	4443      	add	r3, r8
 800aab0:	f843 2b04 	str.w	r2, [r3], #4
 800aab4:	429f      	cmp	r7, r3
 800aab6:	d2fb      	bcs.n	800aab0 <__hexnan+0xcc>
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	b91b      	cbnz	r3, 800aac4 <__hexnan+0xe0>
 800aabc:	4547      	cmp	r7, r8
 800aabe:	d128      	bne.n	800ab12 <__hexnan+0x12e>
 800aac0:	2301      	movs	r3, #1
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	2005      	movs	r0, #5
 800aac6:	b007      	add	sp, #28
 800aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aacc:	3501      	adds	r5, #1
 800aace:	2d08      	cmp	r5, #8
 800aad0:	f10b 0b01 	add.w	fp, fp, #1
 800aad4:	dd06      	ble.n	800aae4 <__hexnan+0x100>
 800aad6:	4544      	cmp	r4, r8
 800aad8:	d9c1      	bls.n	800aa5e <__hexnan+0x7a>
 800aada:	2300      	movs	r3, #0
 800aadc:	2501      	movs	r5, #1
 800aade:	f844 3c04 	str.w	r3, [r4, #-4]
 800aae2:	3c04      	subs	r4, #4
 800aae4:	6822      	ldr	r2, [r4, #0]
 800aae6:	f000 000f 	and.w	r0, r0, #15
 800aaea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aaee:	6020      	str	r0, [r4, #0]
 800aaf0:	e7b5      	b.n	800aa5e <__hexnan+0x7a>
 800aaf2:	2508      	movs	r5, #8
 800aaf4:	e7b3      	b.n	800aa5e <__hexnan+0x7a>
 800aaf6:	9b01      	ldr	r3, [sp, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d0dd      	beq.n	800aab8 <__hexnan+0xd4>
 800aafc:	f04f 32ff 	mov.w	r2, #4294967295
 800ab00:	f1c3 0320 	rsb	r3, r3, #32
 800ab04:	40da      	lsrs	r2, r3
 800ab06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab10:	e7d2      	b.n	800aab8 <__hexnan+0xd4>
 800ab12:	3f04      	subs	r7, #4
 800ab14:	e7d0      	b.n	800aab8 <__hexnan+0xd4>
 800ab16:	2004      	movs	r0, #4
 800ab18:	e7d5      	b.n	800aac6 <__hexnan+0xe2>
	...

0800ab1c <malloc>:
 800ab1c:	4b02      	ldr	r3, [pc, #8]	@ (800ab28 <malloc+0xc>)
 800ab1e:	4601      	mov	r1, r0
 800ab20:	6818      	ldr	r0, [r3, #0]
 800ab22:	f000 b825 	b.w	800ab70 <_malloc_r>
 800ab26:	bf00      	nop
 800ab28:	20000188 	.word	0x20000188

0800ab2c <sbrk_aligned>:
 800ab2c:	b570      	push	{r4, r5, r6, lr}
 800ab2e:	4e0f      	ldr	r6, [pc, #60]	@ (800ab6c <sbrk_aligned+0x40>)
 800ab30:	460c      	mov	r4, r1
 800ab32:	6831      	ldr	r1, [r6, #0]
 800ab34:	4605      	mov	r5, r0
 800ab36:	b911      	cbnz	r1, 800ab3e <sbrk_aligned+0x12>
 800ab38:	f000 ff7e 	bl	800ba38 <_sbrk_r>
 800ab3c:	6030      	str	r0, [r6, #0]
 800ab3e:	4621      	mov	r1, r4
 800ab40:	4628      	mov	r0, r5
 800ab42:	f000 ff79 	bl	800ba38 <_sbrk_r>
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	d103      	bne.n	800ab52 <sbrk_aligned+0x26>
 800ab4a:	f04f 34ff 	mov.w	r4, #4294967295
 800ab4e:	4620      	mov	r0, r4
 800ab50:	bd70      	pop	{r4, r5, r6, pc}
 800ab52:	1cc4      	adds	r4, r0, #3
 800ab54:	f024 0403 	bic.w	r4, r4, #3
 800ab58:	42a0      	cmp	r0, r4
 800ab5a:	d0f8      	beq.n	800ab4e <sbrk_aligned+0x22>
 800ab5c:	1a21      	subs	r1, r4, r0
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f000 ff6a 	bl	800ba38 <_sbrk_r>
 800ab64:	3001      	adds	r0, #1
 800ab66:	d1f2      	bne.n	800ab4e <sbrk_aligned+0x22>
 800ab68:	e7ef      	b.n	800ab4a <sbrk_aligned+0x1e>
 800ab6a:	bf00      	nop
 800ab6c:	200014f0 	.word	0x200014f0

0800ab70 <_malloc_r>:
 800ab70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab74:	1ccd      	adds	r5, r1, #3
 800ab76:	f025 0503 	bic.w	r5, r5, #3
 800ab7a:	3508      	adds	r5, #8
 800ab7c:	2d0c      	cmp	r5, #12
 800ab7e:	bf38      	it	cc
 800ab80:	250c      	movcc	r5, #12
 800ab82:	2d00      	cmp	r5, #0
 800ab84:	4606      	mov	r6, r0
 800ab86:	db01      	blt.n	800ab8c <_malloc_r+0x1c>
 800ab88:	42a9      	cmp	r1, r5
 800ab8a:	d904      	bls.n	800ab96 <_malloc_r+0x26>
 800ab8c:	230c      	movs	r3, #12
 800ab8e:	6033      	str	r3, [r6, #0]
 800ab90:	2000      	movs	r0, #0
 800ab92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac6c <_malloc_r+0xfc>
 800ab9a:	f000 f87b 	bl	800ac94 <__malloc_lock>
 800ab9e:	f8d8 3000 	ldr.w	r3, [r8]
 800aba2:	461c      	mov	r4, r3
 800aba4:	bb44      	cbnz	r4, 800abf8 <_malloc_r+0x88>
 800aba6:	4629      	mov	r1, r5
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7ff ffbf 	bl	800ab2c <sbrk_aligned>
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	4604      	mov	r4, r0
 800abb2:	d158      	bne.n	800ac66 <_malloc_r+0xf6>
 800abb4:	f8d8 4000 	ldr.w	r4, [r8]
 800abb8:	4627      	mov	r7, r4
 800abba:	2f00      	cmp	r7, #0
 800abbc:	d143      	bne.n	800ac46 <_malloc_r+0xd6>
 800abbe:	2c00      	cmp	r4, #0
 800abc0:	d04b      	beq.n	800ac5a <_malloc_r+0xea>
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	4639      	mov	r1, r7
 800abc6:	4630      	mov	r0, r6
 800abc8:	eb04 0903 	add.w	r9, r4, r3
 800abcc:	f000 ff34 	bl	800ba38 <_sbrk_r>
 800abd0:	4581      	cmp	r9, r0
 800abd2:	d142      	bne.n	800ac5a <_malloc_r+0xea>
 800abd4:	6821      	ldr	r1, [r4, #0]
 800abd6:	4630      	mov	r0, r6
 800abd8:	1a6d      	subs	r5, r5, r1
 800abda:	4629      	mov	r1, r5
 800abdc:	f7ff ffa6 	bl	800ab2c <sbrk_aligned>
 800abe0:	3001      	adds	r0, #1
 800abe2:	d03a      	beq.n	800ac5a <_malloc_r+0xea>
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	442b      	add	r3, r5
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	f8d8 3000 	ldr.w	r3, [r8]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	bb62      	cbnz	r2, 800ac4c <_malloc_r+0xdc>
 800abf2:	f8c8 7000 	str.w	r7, [r8]
 800abf6:	e00f      	b.n	800ac18 <_malloc_r+0xa8>
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	1b52      	subs	r2, r2, r5
 800abfc:	d420      	bmi.n	800ac40 <_malloc_r+0xd0>
 800abfe:	2a0b      	cmp	r2, #11
 800ac00:	d917      	bls.n	800ac32 <_malloc_r+0xc2>
 800ac02:	1961      	adds	r1, r4, r5
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	6025      	str	r5, [r4, #0]
 800ac08:	bf18      	it	ne
 800ac0a:	6059      	strne	r1, [r3, #4]
 800ac0c:	6863      	ldr	r3, [r4, #4]
 800ac0e:	bf08      	it	eq
 800ac10:	f8c8 1000 	streq.w	r1, [r8]
 800ac14:	5162      	str	r2, [r4, r5]
 800ac16:	604b      	str	r3, [r1, #4]
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f000 f841 	bl	800aca0 <__malloc_unlock>
 800ac1e:	f104 000b 	add.w	r0, r4, #11
 800ac22:	1d23      	adds	r3, r4, #4
 800ac24:	f020 0007 	bic.w	r0, r0, #7
 800ac28:	1ac2      	subs	r2, r0, r3
 800ac2a:	bf1c      	itt	ne
 800ac2c:	1a1b      	subne	r3, r3, r0
 800ac2e:	50a3      	strne	r3, [r4, r2]
 800ac30:	e7af      	b.n	800ab92 <_malloc_r+0x22>
 800ac32:	6862      	ldr	r2, [r4, #4]
 800ac34:	42a3      	cmp	r3, r4
 800ac36:	bf0c      	ite	eq
 800ac38:	f8c8 2000 	streq.w	r2, [r8]
 800ac3c:	605a      	strne	r2, [r3, #4]
 800ac3e:	e7eb      	b.n	800ac18 <_malloc_r+0xa8>
 800ac40:	4623      	mov	r3, r4
 800ac42:	6864      	ldr	r4, [r4, #4]
 800ac44:	e7ae      	b.n	800aba4 <_malloc_r+0x34>
 800ac46:	463c      	mov	r4, r7
 800ac48:	687f      	ldr	r7, [r7, #4]
 800ac4a:	e7b6      	b.n	800abba <_malloc_r+0x4a>
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	42a3      	cmp	r3, r4
 800ac52:	d1fb      	bne.n	800ac4c <_malloc_r+0xdc>
 800ac54:	2300      	movs	r3, #0
 800ac56:	6053      	str	r3, [r2, #4]
 800ac58:	e7de      	b.n	800ac18 <_malloc_r+0xa8>
 800ac5a:	230c      	movs	r3, #12
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	6033      	str	r3, [r6, #0]
 800ac60:	f000 f81e 	bl	800aca0 <__malloc_unlock>
 800ac64:	e794      	b.n	800ab90 <_malloc_r+0x20>
 800ac66:	6005      	str	r5, [r0, #0]
 800ac68:	e7d6      	b.n	800ac18 <_malloc_r+0xa8>
 800ac6a:	bf00      	nop
 800ac6c:	200014f4 	.word	0x200014f4

0800ac70 <__ascii_mbtowc>:
 800ac70:	b082      	sub	sp, #8
 800ac72:	b901      	cbnz	r1, 800ac76 <__ascii_mbtowc+0x6>
 800ac74:	a901      	add	r1, sp, #4
 800ac76:	b142      	cbz	r2, 800ac8a <__ascii_mbtowc+0x1a>
 800ac78:	b14b      	cbz	r3, 800ac8e <__ascii_mbtowc+0x1e>
 800ac7a:	7813      	ldrb	r3, [r2, #0]
 800ac7c:	600b      	str	r3, [r1, #0]
 800ac7e:	7812      	ldrb	r2, [r2, #0]
 800ac80:	1e10      	subs	r0, r2, #0
 800ac82:	bf18      	it	ne
 800ac84:	2001      	movne	r0, #1
 800ac86:	b002      	add	sp, #8
 800ac88:	4770      	bx	lr
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	e7fb      	b.n	800ac86 <__ascii_mbtowc+0x16>
 800ac8e:	f06f 0001 	mvn.w	r0, #1
 800ac92:	e7f8      	b.n	800ac86 <__ascii_mbtowc+0x16>

0800ac94 <__malloc_lock>:
 800ac94:	4801      	ldr	r0, [pc, #4]	@ (800ac9c <__malloc_lock+0x8>)
 800ac96:	f7fe bd3e 	b.w	8009716 <__retarget_lock_acquire_recursive>
 800ac9a:	bf00      	nop
 800ac9c:	200014ec 	.word	0x200014ec

0800aca0 <__malloc_unlock>:
 800aca0:	4801      	ldr	r0, [pc, #4]	@ (800aca8 <__malloc_unlock+0x8>)
 800aca2:	f7fe bd39 	b.w	8009718 <__retarget_lock_release_recursive>
 800aca6:	bf00      	nop
 800aca8:	200014ec 	.word	0x200014ec

0800acac <_Balloc>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	69c6      	ldr	r6, [r0, #28]
 800acb0:	4604      	mov	r4, r0
 800acb2:	460d      	mov	r5, r1
 800acb4:	b976      	cbnz	r6, 800acd4 <_Balloc+0x28>
 800acb6:	2010      	movs	r0, #16
 800acb8:	f7ff ff30 	bl	800ab1c <malloc>
 800acbc:	4602      	mov	r2, r0
 800acbe:	61e0      	str	r0, [r4, #28]
 800acc0:	b920      	cbnz	r0, 800accc <_Balloc+0x20>
 800acc2:	216b      	movs	r1, #107	@ 0x6b
 800acc4:	4b17      	ldr	r3, [pc, #92]	@ (800ad24 <_Balloc+0x78>)
 800acc6:	4818      	ldr	r0, [pc, #96]	@ (800ad28 <_Balloc+0x7c>)
 800acc8:	f000 fec6 	bl	800ba58 <__assert_func>
 800accc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acd0:	6006      	str	r6, [r0, #0]
 800acd2:	60c6      	str	r6, [r0, #12]
 800acd4:	69e6      	ldr	r6, [r4, #28]
 800acd6:	68f3      	ldr	r3, [r6, #12]
 800acd8:	b183      	cbz	r3, 800acfc <_Balloc+0x50>
 800acda:	69e3      	ldr	r3, [r4, #28]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ace2:	b9b8      	cbnz	r0, 800ad14 <_Balloc+0x68>
 800ace4:	2101      	movs	r1, #1
 800ace6:	fa01 f605 	lsl.w	r6, r1, r5
 800acea:	1d72      	adds	r2, r6, #5
 800acec:	4620      	mov	r0, r4
 800acee:	0092      	lsls	r2, r2, #2
 800acf0:	f000 fed0 	bl	800ba94 <_calloc_r>
 800acf4:	b160      	cbz	r0, 800ad10 <_Balloc+0x64>
 800acf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acfa:	e00e      	b.n	800ad1a <_Balloc+0x6e>
 800acfc:	2221      	movs	r2, #33	@ 0x21
 800acfe:	2104      	movs	r1, #4
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 fec7 	bl	800ba94 <_calloc_r>
 800ad06:	69e3      	ldr	r3, [r4, #28]
 800ad08:	60f0      	str	r0, [r6, #12]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1e4      	bne.n	800acda <_Balloc+0x2e>
 800ad10:	2000      	movs	r0, #0
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	6802      	ldr	r2, [r0, #0]
 800ad16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad20:	e7f7      	b.n	800ad12 <_Balloc+0x66>
 800ad22:	bf00      	nop
 800ad24:	0800c311 	.word	0x0800c311
 800ad28:	0800c3f1 	.word	0x0800c3f1

0800ad2c <_Bfree>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	69c6      	ldr	r6, [r0, #28]
 800ad30:	4605      	mov	r5, r0
 800ad32:	460c      	mov	r4, r1
 800ad34:	b976      	cbnz	r6, 800ad54 <_Bfree+0x28>
 800ad36:	2010      	movs	r0, #16
 800ad38:	f7ff fef0 	bl	800ab1c <malloc>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	61e8      	str	r0, [r5, #28]
 800ad40:	b920      	cbnz	r0, 800ad4c <_Bfree+0x20>
 800ad42:	218f      	movs	r1, #143	@ 0x8f
 800ad44:	4b08      	ldr	r3, [pc, #32]	@ (800ad68 <_Bfree+0x3c>)
 800ad46:	4809      	ldr	r0, [pc, #36]	@ (800ad6c <_Bfree+0x40>)
 800ad48:	f000 fe86 	bl	800ba58 <__assert_func>
 800ad4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad50:	6006      	str	r6, [r0, #0]
 800ad52:	60c6      	str	r6, [r0, #12]
 800ad54:	b13c      	cbz	r4, 800ad66 <_Bfree+0x3a>
 800ad56:	69eb      	ldr	r3, [r5, #28]
 800ad58:	6862      	ldr	r2, [r4, #4]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad60:	6021      	str	r1, [r4, #0]
 800ad62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	0800c311 	.word	0x0800c311
 800ad6c:	0800c3f1 	.word	0x0800c3f1

0800ad70 <__multadd>:
 800ad70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad74:	4607      	mov	r7, r0
 800ad76:	460c      	mov	r4, r1
 800ad78:	461e      	mov	r6, r3
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	690d      	ldr	r5, [r1, #16]
 800ad7e:	f101 0c14 	add.w	ip, r1, #20
 800ad82:	f8dc 3000 	ldr.w	r3, [ip]
 800ad86:	3001      	adds	r0, #1
 800ad88:	b299      	uxth	r1, r3
 800ad8a:	fb02 6101 	mla	r1, r2, r1, r6
 800ad8e:	0c1e      	lsrs	r6, r3, #16
 800ad90:	0c0b      	lsrs	r3, r1, #16
 800ad92:	fb02 3306 	mla	r3, r2, r6, r3
 800ad96:	b289      	uxth	r1, r1
 800ad98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad9c:	4285      	cmp	r5, r0
 800ad9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ada2:	f84c 1b04 	str.w	r1, [ip], #4
 800ada6:	dcec      	bgt.n	800ad82 <__multadd+0x12>
 800ada8:	b30e      	cbz	r6, 800adee <__multadd+0x7e>
 800adaa:	68a3      	ldr	r3, [r4, #8]
 800adac:	42ab      	cmp	r3, r5
 800adae:	dc19      	bgt.n	800ade4 <__multadd+0x74>
 800adb0:	6861      	ldr	r1, [r4, #4]
 800adb2:	4638      	mov	r0, r7
 800adb4:	3101      	adds	r1, #1
 800adb6:	f7ff ff79 	bl	800acac <_Balloc>
 800adba:	4680      	mov	r8, r0
 800adbc:	b928      	cbnz	r0, 800adca <__multadd+0x5a>
 800adbe:	4602      	mov	r2, r0
 800adc0:	21ba      	movs	r1, #186	@ 0xba
 800adc2:	4b0c      	ldr	r3, [pc, #48]	@ (800adf4 <__multadd+0x84>)
 800adc4:	480c      	ldr	r0, [pc, #48]	@ (800adf8 <__multadd+0x88>)
 800adc6:	f000 fe47 	bl	800ba58 <__assert_func>
 800adca:	6922      	ldr	r2, [r4, #16]
 800adcc:	f104 010c 	add.w	r1, r4, #12
 800add0:	3202      	adds	r2, #2
 800add2:	0092      	lsls	r2, r2, #2
 800add4:	300c      	adds	r0, #12
 800add6:	f7fe fcae 	bl	8009736 <memcpy>
 800adda:	4621      	mov	r1, r4
 800addc:	4638      	mov	r0, r7
 800adde:	f7ff ffa5 	bl	800ad2c <_Bfree>
 800ade2:	4644      	mov	r4, r8
 800ade4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ade8:	3501      	adds	r5, #1
 800adea:	615e      	str	r6, [r3, #20]
 800adec:	6125      	str	r5, [r4, #16]
 800adee:	4620      	mov	r0, r4
 800adf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf4:	0800c380 	.word	0x0800c380
 800adf8:	0800c3f1 	.word	0x0800c3f1

0800adfc <__s2b>:
 800adfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae00:	4615      	mov	r5, r2
 800ae02:	2209      	movs	r2, #9
 800ae04:	461f      	mov	r7, r3
 800ae06:	3308      	adds	r3, #8
 800ae08:	460c      	mov	r4, r1
 800ae0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae0e:	4606      	mov	r6, r0
 800ae10:	2201      	movs	r2, #1
 800ae12:	2100      	movs	r1, #0
 800ae14:	429a      	cmp	r2, r3
 800ae16:	db09      	blt.n	800ae2c <__s2b+0x30>
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7ff ff47 	bl	800acac <_Balloc>
 800ae1e:	b940      	cbnz	r0, 800ae32 <__s2b+0x36>
 800ae20:	4602      	mov	r2, r0
 800ae22:	21d3      	movs	r1, #211	@ 0xd3
 800ae24:	4b18      	ldr	r3, [pc, #96]	@ (800ae88 <__s2b+0x8c>)
 800ae26:	4819      	ldr	r0, [pc, #100]	@ (800ae8c <__s2b+0x90>)
 800ae28:	f000 fe16 	bl	800ba58 <__assert_func>
 800ae2c:	0052      	lsls	r2, r2, #1
 800ae2e:	3101      	adds	r1, #1
 800ae30:	e7f0      	b.n	800ae14 <__s2b+0x18>
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	2d09      	cmp	r5, #9
 800ae36:	6143      	str	r3, [r0, #20]
 800ae38:	f04f 0301 	mov.w	r3, #1
 800ae3c:	6103      	str	r3, [r0, #16]
 800ae3e:	dd16      	ble.n	800ae6e <__s2b+0x72>
 800ae40:	f104 0909 	add.w	r9, r4, #9
 800ae44:	46c8      	mov	r8, r9
 800ae46:	442c      	add	r4, r5
 800ae48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae4c:	4601      	mov	r1, r0
 800ae4e:	220a      	movs	r2, #10
 800ae50:	4630      	mov	r0, r6
 800ae52:	3b30      	subs	r3, #48	@ 0x30
 800ae54:	f7ff ff8c 	bl	800ad70 <__multadd>
 800ae58:	45a0      	cmp	r8, r4
 800ae5a:	d1f5      	bne.n	800ae48 <__s2b+0x4c>
 800ae5c:	f1a5 0408 	sub.w	r4, r5, #8
 800ae60:	444c      	add	r4, r9
 800ae62:	1b2d      	subs	r5, r5, r4
 800ae64:	1963      	adds	r3, r4, r5
 800ae66:	42bb      	cmp	r3, r7
 800ae68:	db04      	blt.n	800ae74 <__s2b+0x78>
 800ae6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6e:	2509      	movs	r5, #9
 800ae70:	340a      	adds	r4, #10
 800ae72:	e7f6      	b.n	800ae62 <__s2b+0x66>
 800ae74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae78:	4601      	mov	r1, r0
 800ae7a:	220a      	movs	r2, #10
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	3b30      	subs	r3, #48	@ 0x30
 800ae80:	f7ff ff76 	bl	800ad70 <__multadd>
 800ae84:	e7ee      	b.n	800ae64 <__s2b+0x68>
 800ae86:	bf00      	nop
 800ae88:	0800c380 	.word	0x0800c380
 800ae8c:	0800c3f1 	.word	0x0800c3f1

0800ae90 <__hi0bits>:
 800ae90:	4603      	mov	r3, r0
 800ae92:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae96:	bf3a      	itte	cc
 800ae98:	0403      	lslcc	r3, r0, #16
 800ae9a:	2010      	movcc	r0, #16
 800ae9c:	2000      	movcs	r0, #0
 800ae9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aea2:	bf3c      	itt	cc
 800aea4:	021b      	lslcc	r3, r3, #8
 800aea6:	3008      	addcc	r0, #8
 800aea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aeac:	bf3c      	itt	cc
 800aeae:	011b      	lslcc	r3, r3, #4
 800aeb0:	3004      	addcc	r0, #4
 800aeb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeb6:	bf3c      	itt	cc
 800aeb8:	009b      	lslcc	r3, r3, #2
 800aeba:	3002      	addcc	r0, #2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	db05      	blt.n	800aecc <__hi0bits+0x3c>
 800aec0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aec4:	f100 0001 	add.w	r0, r0, #1
 800aec8:	bf08      	it	eq
 800aeca:	2020      	moveq	r0, #32
 800aecc:	4770      	bx	lr

0800aece <__lo0bits>:
 800aece:	6803      	ldr	r3, [r0, #0]
 800aed0:	4602      	mov	r2, r0
 800aed2:	f013 0007 	ands.w	r0, r3, #7
 800aed6:	d00b      	beq.n	800aef0 <__lo0bits+0x22>
 800aed8:	07d9      	lsls	r1, r3, #31
 800aeda:	d421      	bmi.n	800af20 <__lo0bits+0x52>
 800aedc:	0798      	lsls	r0, r3, #30
 800aede:	bf49      	itett	mi
 800aee0:	085b      	lsrmi	r3, r3, #1
 800aee2:	089b      	lsrpl	r3, r3, #2
 800aee4:	2001      	movmi	r0, #1
 800aee6:	6013      	strmi	r3, [r2, #0]
 800aee8:	bf5c      	itt	pl
 800aeea:	2002      	movpl	r0, #2
 800aeec:	6013      	strpl	r3, [r2, #0]
 800aeee:	4770      	bx	lr
 800aef0:	b299      	uxth	r1, r3
 800aef2:	b909      	cbnz	r1, 800aef8 <__lo0bits+0x2a>
 800aef4:	2010      	movs	r0, #16
 800aef6:	0c1b      	lsrs	r3, r3, #16
 800aef8:	b2d9      	uxtb	r1, r3
 800aefa:	b909      	cbnz	r1, 800af00 <__lo0bits+0x32>
 800aefc:	3008      	adds	r0, #8
 800aefe:	0a1b      	lsrs	r3, r3, #8
 800af00:	0719      	lsls	r1, r3, #28
 800af02:	bf04      	itt	eq
 800af04:	091b      	lsreq	r3, r3, #4
 800af06:	3004      	addeq	r0, #4
 800af08:	0799      	lsls	r1, r3, #30
 800af0a:	bf04      	itt	eq
 800af0c:	089b      	lsreq	r3, r3, #2
 800af0e:	3002      	addeq	r0, #2
 800af10:	07d9      	lsls	r1, r3, #31
 800af12:	d403      	bmi.n	800af1c <__lo0bits+0x4e>
 800af14:	085b      	lsrs	r3, r3, #1
 800af16:	f100 0001 	add.w	r0, r0, #1
 800af1a:	d003      	beq.n	800af24 <__lo0bits+0x56>
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	4770      	bx	lr
 800af20:	2000      	movs	r0, #0
 800af22:	4770      	bx	lr
 800af24:	2020      	movs	r0, #32
 800af26:	4770      	bx	lr

0800af28 <__i2b>:
 800af28:	b510      	push	{r4, lr}
 800af2a:	460c      	mov	r4, r1
 800af2c:	2101      	movs	r1, #1
 800af2e:	f7ff febd 	bl	800acac <_Balloc>
 800af32:	4602      	mov	r2, r0
 800af34:	b928      	cbnz	r0, 800af42 <__i2b+0x1a>
 800af36:	f240 1145 	movw	r1, #325	@ 0x145
 800af3a:	4b04      	ldr	r3, [pc, #16]	@ (800af4c <__i2b+0x24>)
 800af3c:	4804      	ldr	r0, [pc, #16]	@ (800af50 <__i2b+0x28>)
 800af3e:	f000 fd8b 	bl	800ba58 <__assert_func>
 800af42:	2301      	movs	r3, #1
 800af44:	6144      	str	r4, [r0, #20]
 800af46:	6103      	str	r3, [r0, #16]
 800af48:	bd10      	pop	{r4, pc}
 800af4a:	bf00      	nop
 800af4c:	0800c380 	.word	0x0800c380
 800af50:	0800c3f1 	.word	0x0800c3f1

0800af54 <__multiply>:
 800af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	4617      	mov	r7, r2
 800af5a:	690a      	ldr	r2, [r1, #16]
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	4689      	mov	r9, r1
 800af60:	429a      	cmp	r2, r3
 800af62:	bfa2      	ittt	ge
 800af64:	463b      	movge	r3, r7
 800af66:	460f      	movge	r7, r1
 800af68:	4699      	movge	r9, r3
 800af6a:	693d      	ldr	r5, [r7, #16]
 800af6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6879      	ldr	r1, [r7, #4]
 800af74:	eb05 060a 	add.w	r6, r5, sl
 800af78:	42b3      	cmp	r3, r6
 800af7a:	b085      	sub	sp, #20
 800af7c:	bfb8      	it	lt
 800af7e:	3101      	addlt	r1, #1
 800af80:	f7ff fe94 	bl	800acac <_Balloc>
 800af84:	b930      	cbnz	r0, 800af94 <__multiply+0x40>
 800af86:	4602      	mov	r2, r0
 800af88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af8c:	4b40      	ldr	r3, [pc, #256]	@ (800b090 <__multiply+0x13c>)
 800af8e:	4841      	ldr	r0, [pc, #260]	@ (800b094 <__multiply+0x140>)
 800af90:	f000 fd62 	bl	800ba58 <__assert_func>
 800af94:	f100 0414 	add.w	r4, r0, #20
 800af98:	4623      	mov	r3, r4
 800af9a:	2200      	movs	r2, #0
 800af9c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800afa0:	4573      	cmp	r3, lr
 800afa2:	d320      	bcc.n	800afe6 <__multiply+0x92>
 800afa4:	f107 0814 	add.w	r8, r7, #20
 800afa8:	f109 0114 	add.w	r1, r9, #20
 800afac:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800afb0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800afb4:	9302      	str	r3, [sp, #8]
 800afb6:	1beb      	subs	r3, r5, r7
 800afb8:	3b15      	subs	r3, #21
 800afba:	f023 0303 	bic.w	r3, r3, #3
 800afbe:	3304      	adds	r3, #4
 800afc0:	3715      	adds	r7, #21
 800afc2:	42bd      	cmp	r5, r7
 800afc4:	bf38      	it	cc
 800afc6:	2304      	movcc	r3, #4
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	9b02      	ldr	r3, [sp, #8]
 800afcc:	9103      	str	r1, [sp, #12]
 800afce:	428b      	cmp	r3, r1
 800afd0:	d80c      	bhi.n	800afec <__multiply+0x98>
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	dd03      	ble.n	800afde <__multiply+0x8a>
 800afd6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d055      	beq.n	800b08a <__multiply+0x136>
 800afde:	6106      	str	r6, [r0, #16]
 800afe0:	b005      	add	sp, #20
 800afe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe6:	f843 2b04 	str.w	r2, [r3], #4
 800afea:	e7d9      	b.n	800afa0 <__multiply+0x4c>
 800afec:	f8b1 a000 	ldrh.w	sl, [r1]
 800aff0:	f1ba 0f00 	cmp.w	sl, #0
 800aff4:	d01f      	beq.n	800b036 <__multiply+0xe2>
 800aff6:	46c4      	mov	ip, r8
 800aff8:	46a1      	mov	r9, r4
 800affa:	2700      	movs	r7, #0
 800affc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b000:	f8d9 3000 	ldr.w	r3, [r9]
 800b004:	fa1f fb82 	uxth.w	fp, r2
 800b008:	b29b      	uxth	r3, r3
 800b00a:	fb0a 330b 	mla	r3, sl, fp, r3
 800b00e:	443b      	add	r3, r7
 800b010:	f8d9 7000 	ldr.w	r7, [r9]
 800b014:	0c12      	lsrs	r2, r2, #16
 800b016:	0c3f      	lsrs	r7, r7, #16
 800b018:	fb0a 7202 	mla	r2, sl, r2, r7
 800b01c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b020:	b29b      	uxth	r3, r3
 800b022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b026:	4565      	cmp	r5, ip
 800b028:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b02c:	f849 3b04 	str.w	r3, [r9], #4
 800b030:	d8e4      	bhi.n	800affc <__multiply+0xa8>
 800b032:	9b01      	ldr	r3, [sp, #4]
 800b034:	50e7      	str	r7, [r4, r3]
 800b036:	9b03      	ldr	r3, [sp, #12]
 800b038:	3104      	adds	r1, #4
 800b03a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b03e:	f1b9 0f00 	cmp.w	r9, #0
 800b042:	d020      	beq.n	800b086 <__multiply+0x132>
 800b044:	4647      	mov	r7, r8
 800b046:	46a4      	mov	ip, r4
 800b048:	f04f 0a00 	mov.w	sl, #0
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	f8b7 b000 	ldrh.w	fp, [r7]
 800b052:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b056:	b29b      	uxth	r3, r3
 800b058:	fb09 220b 	mla	r2, r9, fp, r2
 800b05c:	4452      	add	r2, sl
 800b05e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b062:	f84c 3b04 	str.w	r3, [ip], #4
 800b066:	f857 3b04 	ldr.w	r3, [r7], #4
 800b06a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b06e:	f8bc 3000 	ldrh.w	r3, [ip]
 800b072:	42bd      	cmp	r5, r7
 800b074:	fb09 330a 	mla	r3, r9, sl, r3
 800b078:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b07c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b080:	d8e5      	bhi.n	800b04e <__multiply+0xfa>
 800b082:	9a01      	ldr	r2, [sp, #4]
 800b084:	50a3      	str	r3, [r4, r2]
 800b086:	3404      	adds	r4, #4
 800b088:	e79f      	b.n	800afca <__multiply+0x76>
 800b08a:	3e01      	subs	r6, #1
 800b08c:	e7a1      	b.n	800afd2 <__multiply+0x7e>
 800b08e:	bf00      	nop
 800b090:	0800c380 	.word	0x0800c380
 800b094:	0800c3f1 	.word	0x0800c3f1

0800b098 <__pow5mult>:
 800b098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b09c:	4615      	mov	r5, r2
 800b09e:	f012 0203 	ands.w	r2, r2, #3
 800b0a2:	4607      	mov	r7, r0
 800b0a4:	460e      	mov	r6, r1
 800b0a6:	d007      	beq.n	800b0b8 <__pow5mult+0x20>
 800b0a8:	4c25      	ldr	r4, [pc, #148]	@ (800b140 <__pow5mult+0xa8>)
 800b0aa:	3a01      	subs	r2, #1
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0b2:	f7ff fe5d 	bl	800ad70 <__multadd>
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	10ad      	asrs	r5, r5, #2
 800b0ba:	d03d      	beq.n	800b138 <__pow5mult+0xa0>
 800b0bc:	69fc      	ldr	r4, [r7, #28]
 800b0be:	b97c      	cbnz	r4, 800b0e0 <__pow5mult+0x48>
 800b0c0:	2010      	movs	r0, #16
 800b0c2:	f7ff fd2b 	bl	800ab1c <malloc>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	61f8      	str	r0, [r7, #28]
 800b0ca:	b928      	cbnz	r0, 800b0d8 <__pow5mult+0x40>
 800b0cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b0d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b144 <__pow5mult+0xac>)
 800b0d2:	481d      	ldr	r0, [pc, #116]	@ (800b148 <__pow5mult+0xb0>)
 800b0d4:	f000 fcc0 	bl	800ba58 <__assert_func>
 800b0d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0dc:	6004      	str	r4, [r0, #0]
 800b0de:	60c4      	str	r4, [r0, #12]
 800b0e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b0e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0e8:	b94c      	cbnz	r4, 800b0fe <__pow5mult+0x66>
 800b0ea:	f240 2171 	movw	r1, #625	@ 0x271
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	f7ff ff1a 	bl	800af28 <__i2b>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0fc:	6003      	str	r3, [r0, #0]
 800b0fe:	f04f 0900 	mov.w	r9, #0
 800b102:	07eb      	lsls	r3, r5, #31
 800b104:	d50a      	bpl.n	800b11c <__pow5mult+0x84>
 800b106:	4631      	mov	r1, r6
 800b108:	4622      	mov	r2, r4
 800b10a:	4638      	mov	r0, r7
 800b10c:	f7ff ff22 	bl	800af54 <__multiply>
 800b110:	4680      	mov	r8, r0
 800b112:	4631      	mov	r1, r6
 800b114:	4638      	mov	r0, r7
 800b116:	f7ff fe09 	bl	800ad2c <_Bfree>
 800b11a:	4646      	mov	r6, r8
 800b11c:	106d      	asrs	r5, r5, #1
 800b11e:	d00b      	beq.n	800b138 <__pow5mult+0xa0>
 800b120:	6820      	ldr	r0, [r4, #0]
 800b122:	b938      	cbnz	r0, 800b134 <__pow5mult+0x9c>
 800b124:	4622      	mov	r2, r4
 800b126:	4621      	mov	r1, r4
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff ff13 	bl	800af54 <__multiply>
 800b12e:	6020      	str	r0, [r4, #0]
 800b130:	f8c0 9000 	str.w	r9, [r0]
 800b134:	4604      	mov	r4, r0
 800b136:	e7e4      	b.n	800b102 <__pow5mult+0x6a>
 800b138:	4630      	mov	r0, r6
 800b13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13e:	bf00      	nop
 800b140:	0800c5ec 	.word	0x0800c5ec
 800b144:	0800c311 	.word	0x0800c311
 800b148:	0800c3f1 	.word	0x0800c3f1

0800b14c <__lshift>:
 800b14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b150:	460c      	mov	r4, r1
 800b152:	4607      	mov	r7, r0
 800b154:	4691      	mov	r9, r2
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	6849      	ldr	r1, [r1, #4]
 800b15a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b15e:	68a3      	ldr	r3, [r4, #8]
 800b160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b164:	f108 0601 	add.w	r6, r8, #1
 800b168:	42b3      	cmp	r3, r6
 800b16a:	db0b      	blt.n	800b184 <__lshift+0x38>
 800b16c:	4638      	mov	r0, r7
 800b16e:	f7ff fd9d 	bl	800acac <_Balloc>
 800b172:	4605      	mov	r5, r0
 800b174:	b948      	cbnz	r0, 800b18a <__lshift+0x3e>
 800b176:	4602      	mov	r2, r0
 800b178:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b17c:	4b27      	ldr	r3, [pc, #156]	@ (800b21c <__lshift+0xd0>)
 800b17e:	4828      	ldr	r0, [pc, #160]	@ (800b220 <__lshift+0xd4>)
 800b180:	f000 fc6a 	bl	800ba58 <__assert_func>
 800b184:	3101      	adds	r1, #1
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	e7ee      	b.n	800b168 <__lshift+0x1c>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f100 0114 	add.w	r1, r0, #20
 800b190:	f100 0210 	add.w	r2, r0, #16
 800b194:	4618      	mov	r0, r3
 800b196:	4553      	cmp	r3, sl
 800b198:	db33      	blt.n	800b202 <__lshift+0xb6>
 800b19a:	6920      	ldr	r0, [r4, #16]
 800b19c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1a0:	f104 0314 	add.w	r3, r4, #20
 800b1a4:	f019 091f 	ands.w	r9, r9, #31
 800b1a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1b0:	d02b      	beq.n	800b20a <__lshift+0xbe>
 800b1b2:	468a      	mov	sl, r1
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b1ba:	6818      	ldr	r0, [r3, #0]
 800b1bc:	fa00 f009 	lsl.w	r0, r0, r9
 800b1c0:	4310      	orrs	r0, r2
 800b1c2:	f84a 0b04 	str.w	r0, [sl], #4
 800b1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ca:	459c      	cmp	ip, r3
 800b1cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1d0:	d8f3      	bhi.n	800b1ba <__lshift+0x6e>
 800b1d2:	ebac 0304 	sub.w	r3, ip, r4
 800b1d6:	3b15      	subs	r3, #21
 800b1d8:	f023 0303 	bic.w	r3, r3, #3
 800b1dc:	3304      	adds	r3, #4
 800b1de:	f104 0015 	add.w	r0, r4, #21
 800b1e2:	4560      	cmp	r0, ip
 800b1e4:	bf88      	it	hi
 800b1e6:	2304      	movhi	r3, #4
 800b1e8:	50ca      	str	r2, [r1, r3]
 800b1ea:	b10a      	cbz	r2, 800b1f0 <__lshift+0xa4>
 800b1ec:	f108 0602 	add.w	r6, r8, #2
 800b1f0:	3e01      	subs	r6, #1
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	612e      	str	r6, [r5, #16]
 800b1f8:	f7ff fd98 	bl	800ad2c <_Bfree>
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b202:	f842 0f04 	str.w	r0, [r2, #4]!
 800b206:	3301      	adds	r3, #1
 800b208:	e7c5      	b.n	800b196 <__lshift+0x4a>
 800b20a:	3904      	subs	r1, #4
 800b20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b210:	459c      	cmp	ip, r3
 800b212:	f841 2f04 	str.w	r2, [r1, #4]!
 800b216:	d8f9      	bhi.n	800b20c <__lshift+0xc0>
 800b218:	e7ea      	b.n	800b1f0 <__lshift+0xa4>
 800b21a:	bf00      	nop
 800b21c:	0800c380 	.word	0x0800c380
 800b220:	0800c3f1 	.word	0x0800c3f1

0800b224 <__mcmp>:
 800b224:	4603      	mov	r3, r0
 800b226:	690a      	ldr	r2, [r1, #16]
 800b228:	6900      	ldr	r0, [r0, #16]
 800b22a:	b530      	push	{r4, r5, lr}
 800b22c:	1a80      	subs	r0, r0, r2
 800b22e:	d10e      	bne.n	800b24e <__mcmp+0x2a>
 800b230:	3314      	adds	r3, #20
 800b232:	3114      	adds	r1, #20
 800b234:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b238:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b23c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b240:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b244:	4295      	cmp	r5, r2
 800b246:	d003      	beq.n	800b250 <__mcmp+0x2c>
 800b248:	d205      	bcs.n	800b256 <__mcmp+0x32>
 800b24a:	f04f 30ff 	mov.w	r0, #4294967295
 800b24e:	bd30      	pop	{r4, r5, pc}
 800b250:	42a3      	cmp	r3, r4
 800b252:	d3f3      	bcc.n	800b23c <__mcmp+0x18>
 800b254:	e7fb      	b.n	800b24e <__mcmp+0x2a>
 800b256:	2001      	movs	r0, #1
 800b258:	e7f9      	b.n	800b24e <__mcmp+0x2a>
	...

0800b25c <__mdiff>:
 800b25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b260:	4689      	mov	r9, r1
 800b262:	4606      	mov	r6, r0
 800b264:	4611      	mov	r1, r2
 800b266:	4648      	mov	r0, r9
 800b268:	4614      	mov	r4, r2
 800b26a:	f7ff ffdb 	bl	800b224 <__mcmp>
 800b26e:	1e05      	subs	r5, r0, #0
 800b270:	d112      	bne.n	800b298 <__mdiff+0x3c>
 800b272:	4629      	mov	r1, r5
 800b274:	4630      	mov	r0, r6
 800b276:	f7ff fd19 	bl	800acac <_Balloc>
 800b27a:	4602      	mov	r2, r0
 800b27c:	b928      	cbnz	r0, 800b28a <__mdiff+0x2e>
 800b27e:	f240 2137 	movw	r1, #567	@ 0x237
 800b282:	4b3e      	ldr	r3, [pc, #248]	@ (800b37c <__mdiff+0x120>)
 800b284:	483e      	ldr	r0, [pc, #248]	@ (800b380 <__mdiff+0x124>)
 800b286:	f000 fbe7 	bl	800ba58 <__assert_func>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b290:	4610      	mov	r0, r2
 800b292:	b003      	add	sp, #12
 800b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b298:	bfbc      	itt	lt
 800b29a:	464b      	movlt	r3, r9
 800b29c:	46a1      	movlt	r9, r4
 800b29e:	4630      	mov	r0, r6
 800b2a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b2a4:	bfba      	itte	lt
 800b2a6:	461c      	movlt	r4, r3
 800b2a8:	2501      	movlt	r5, #1
 800b2aa:	2500      	movge	r5, #0
 800b2ac:	f7ff fcfe 	bl	800acac <_Balloc>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	b918      	cbnz	r0, 800b2bc <__mdiff+0x60>
 800b2b4:	f240 2145 	movw	r1, #581	@ 0x245
 800b2b8:	4b30      	ldr	r3, [pc, #192]	@ (800b37c <__mdiff+0x120>)
 800b2ba:	e7e3      	b.n	800b284 <__mdiff+0x28>
 800b2bc:	f100 0b14 	add.w	fp, r0, #20
 800b2c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b2c4:	f109 0310 	add.w	r3, r9, #16
 800b2c8:	60c5      	str	r5, [r0, #12]
 800b2ca:	f04f 0c00 	mov.w	ip, #0
 800b2ce:	f109 0514 	add.w	r5, r9, #20
 800b2d2:	46d9      	mov	r9, fp
 800b2d4:	6926      	ldr	r6, [r4, #16]
 800b2d6:	f104 0e14 	add.w	lr, r4, #20
 800b2da:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b2de:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b2e2:	9301      	str	r3, [sp, #4]
 800b2e4:	9b01      	ldr	r3, [sp, #4]
 800b2e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b2ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b2ee:	b281      	uxth	r1, r0
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	fa1f f38a 	uxth.w	r3, sl
 800b2f6:	1a5b      	subs	r3, r3, r1
 800b2f8:	0c00      	lsrs	r0, r0, #16
 800b2fa:	4463      	add	r3, ip
 800b2fc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b300:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b304:	b29b      	uxth	r3, r3
 800b306:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b30a:	4576      	cmp	r6, lr
 800b30c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b310:	f849 3b04 	str.w	r3, [r9], #4
 800b314:	d8e6      	bhi.n	800b2e4 <__mdiff+0x88>
 800b316:	1b33      	subs	r3, r6, r4
 800b318:	3b15      	subs	r3, #21
 800b31a:	f023 0303 	bic.w	r3, r3, #3
 800b31e:	3415      	adds	r4, #21
 800b320:	3304      	adds	r3, #4
 800b322:	42a6      	cmp	r6, r4
 800b324:	bf38      	it	cc
 800b326:	2304      	movcc	r3, #4
 800b328:	441d      	add	r5, r3
 800b32a:	445b      	add	r3, fp
 800b32c:	461e      	mov	r6, r3
 800b32e:	462c      	mov	r4, r5
 800b330:	4544      	cmp	r4, r8
 800b332:	d30e      	bcc.n	800b352 <__mdiff+0xf6>
 800b334:	f108 0103 	add.w	r1, r8, #3
 800b338:	1b49      	subs	r1, r1, r5
 800b33a:	f021 0103 	bic.w	r1, r1, #3
 800b33e:	3d03      	subs	r5, #3
 800b340:	45a8      	cmp	r8, r5
 800b342:	bf38      	it	cc
 800b344:	2100      	movcc	r1, #0
 800b346:	440b      	add	r3, r1
 800b348:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b34c:	b199      	cbz	r1, 800b376 <__mdiff+0x11a>
 800b34e:	6117      	str	r7, [r2, #16]
 800b350:	e79e      	b.n	800b290 <__mdiff+0x34>
 800b352:	46e6      	mov	lr, ip
 800b354:	f854 1b04 	ldr.w	r1, [r4], #4
 800b358:	fa1f fc81 	uxth.w	ip, r1
 800b35c:	44f4      	add	ip, lr
 800b35e:	0c08      	lsrs	r0, r1, #16
 800b360:	4471      	add	r1, lr
 800b362:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b366:	b289      	uxth	r1, r1
 800b368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b36c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b370:	f846 1b04 	str.w	r1, [r6], #4
 800b374:	e7dc      	b.n	800b330 <__mdiff+0xd4>
 800b376:	3f01      	subs	r7, #1
 800b378:	e7e6      	b.n	800b348 <__mdiff+0xec>
 800b37a:	bf00      	nop
 800b37c:	0800c380 	.word	0x0800c380
 800b380:	0800c3f1 	.word	0x0800c3f1

0800b384 <__ulp>:
 800b384:	4b0e      	ldr	r3, [pc, #56]	@ (800b3c0 <__ulp+0x3c>)
 800b386:	400b      	ands	r3, r1
 800b388:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	dc08      	bgt.n	800b3a2 <__ulp+0x1e>
 800b390:	425b      	negs	r3, r3
 800b392:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b396:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b39a:	da04      	bge.n	800b3a6 <__ulp+0x22>
 800b39c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b3a0:	4113      	asrs	r3, r2
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	e008      	b.n	800b3b8 <__ulp+0x34>
 800b3a6:	f1a2 0314 	sub.w	r3, r2, #20
 800b3aa:	2b1e      	cmp	r3, #30
 800b3ac:	bfd6      	itet	le
 800b3ae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b3b2:	2201      	movgt	r2, #1
 800b3b4:	40da      	lsrle	r2, r3
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	7ff00000 	.word	0x7ff00000

0800b3c4 <__b2d>:
 800b3c4:	6902      	ldr	r2, [r0, #16]
 800b3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c8:	f100 0614 	add.w	r6, r0, #20
 800b3cc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b3d0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b3d4:	4f1e      	ldr	r7, [pc, #120]	@ (800b450 <__b2d+0x8c>)
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7ff fd5a 	bl	800ae90 <__hi0bits>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	f1c0 0020 	rsb	r0, r0, #32
 800b3e2:	2b0a      	cmp	r3, #10
 800b3e4:	f1a2 0504 	sub.w	r5, r2, #4
 800b3e8:	6008      	str	r0, [r1, #0]
 800b3ea:	dc12      	bgt.n	800b412 <__b2d+0x4e>
 800b3ec:	42ae      	cmp	r6, r5
 800b3ee:	bf2c      	ite	cs
 800b3f0:	2200      	movcs	r2, #0
 800b3f2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b3f6:	f1c3 0c0b 	rsb	ip, r3, #11
 800b3fa:	3315      	adds	r3, #21
 800b3fc:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b400:	fa04 f303 	lsl.w	r3, r4, r3
 800b404:	fa22 f20c 	lsr.w	r2, r2, ip
 800b408:	ea4e 0107 	orr.w	r1, lr, r7
 800b40c:	431a      	orrs	r2, r3
 800b40e:	4610      	mov	r0, r2
 800b410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b412:	42ae      	cmp	r6, r5
 800b414:	bf36      	itet	cc
 800b416:	f1a2 0508 	subcc.w	r5, r2, #8
 800b41a:	2200      	movcs	r2, #0
 800b41c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b420:	3b0b      	subs	r3, #11
 800b422:	d012      	beq.n	800b44a <__b2d+0x86>
 800b424:	f1c3 0720 	rsb	r7, r3, #32
 800b428:	fa22 f107 	lsr.w	r1, r2, r7
 800b42c:	409c      	lsls	r4, r3
 800b42e:	430c      	orrs	r4, r1
 800b430:	42b5      	cmp	r5, r6
 800b432:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b436:	bf94      	ite	ls
 800b438:	2400      	movls	r4, #0
 800b43a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b43e:	409a      	lsls	r2, r3
 800b440:	40fc      	lsrs	r4, r7
 800b442:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b446:	4322      	orrs	r2, r4
 800b448:	e7e1      	b.n	800b40e <__b2d+0x4a>
 800b44a:	ea44 0107 	orr.w	r1, r4, r7
 800b44e:	e7de      	b.n	800b40e <__b2d+0x4a>
 800b450:	3ff00000 	.word	0x3ff00000

0800b454 <__d2b>:
 800b454:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b458:	2101      	movs	r1, #1
 800b45a:	4690      	mov	r8, r2
 800b45c:	4699      	mov	r9, r3
 800b45e:	9e08      	ldr	r6, [sp, #32]
 800b460:	f7ff fc24 	bl	800acac <_Balloc>
 800b464:	4604      	mov	r4, r0
 800b466:	b930      	cbnz	r0, 800b476 <__d2b+0x22>
 800b468:	4602      	mov	r2, r0
 800b46a:	f240 310f 	movw	r1, #783	@ 0x30f
 800b46e:	4b23      	ldr	r3, [pc, #140]	@ (800b4fc <__d2b+0xa8>)
 800b470:	4823      	ldr	r0, [pc, #140]	@ (800b500 <__d2b+0xac>)
 800b472:	f000 faf1 	bl	800ba58 <__assert_func>
 800b476:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b47a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b47e:	b10d      	cbz	r5, 800b484 <__d2b+0x30>
 800b480:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	f1b8 0300 	subs.w	r3, r8, #0
 800b48a:	d024      	beq.n	800b4d6 <__d2b+0x82>
 800b48c:	4668      	mov	r0, sp
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	f7ff fd1d 	bl	800aece <__lo0bits>
 800b494:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b498:	b1d8      	cbz	r0, 800b4d2 <__d2b+0x7e>
 800b49a:	f1c0 0320 	rsb	r3, r0, #32
 800b49e:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	40c2      	lsrs	r2, r0
 800b4a6:	6163      	str	r3, [r4, #20]
 800b4a8:	9201      	str	r2, [sp, #4]
 800b4aa:	9b01      	ldr	r3, [sp, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	bf0c      	ite	eq
 800b4b0:	2201      	moveq	r2, #1
 800b4b2:	2202      	movne	r2, #2
 800b4b4:	61a3      	str	r3, [r4, #24]
 800b4b6:	6122      	str	r2, [r4, #16]
 800b4b8:	b1ad      	cbz	r5, 800b4e6 <__d2b+0x92>
 800b4ba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b4be:	4405      	add	r5, r0
 800b4c0:	6035      	str	r5, [r6, #0]
 800b4c2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4c8:	6018      	str	r0, [r3, #0]
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	b002      	add	sp, #8
 800b4ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b4d2:	6161      	str	r1, [r4, #20]
 800b4d4:	e7e9      	b.n	800b4aa <__d2b+0x56>
 800b4d6:	a801      	add	r0, sp, #4
 800b4d8:	f7ff fcf9 	bl	800aece <__lo0bits>
 800b4dc:	9b01      	ldr	r3, [sp, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	6163      	str	r3, [r4, #20]
 800b4e2:	3020      	adds	r0, #32
 800b4e4:	e7e7      	b.n	800b4b6 <__d2b+0x62>
 800b4e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b4ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4ee:	6030      	str	r0, [r6, #0]
 800b4f0:	6918      	ldr	r0, [r3, #16]
 800b4f2:	f7ff fccd 	bl	800ae90 <__hi0bits>
 800b4f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4fa:	e7e4      	b.n	800b4c6 <__d2b+0x72>
 800b4fc:	0800c380 	.word	0x0800c380
 800b500:	0800c3f1 	.word	0x0800c3f1

0800b504 <__ratio>:
 800b504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b508:	b085      	sub	sp, #20
 800b50a:	e9cd 1000 	strd	r1, r0, [sp]
 800b50e:	a902      	add	r1, sp, #8
 800b510:	f7ff ff58 	bl	800b3c4 <__b2d>
 800b514:	468b      	mov	fp, r1
 800b516:	4606      	mov	r6, r0
 800b518:	460f      	mov	r7, r1
 800b51a:	9800      	ldr	r0, [sp, #0]
 800b51c:	a903      	add	r1, sp, #12
 800b51e:	f7ff ff51 	bl	800b3c4 <__b2d>
 800b522:	460d      	mov	r5, r1
 800b524:	9b01      	ldr	r3, [sp, #4]
 800b526:	4689      	mov	r9, r1
 800b528:	6919      	ldr	r1, [r3, #16]
 800b52a:	9b00      	ldr	r3, [sp, #0]
 800b52c:	4604      	mov	r4, r0
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	4630      	mov	r0, r6
 800b532:	1ac9      	subs	r1, r1, r3
 800b534:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b538:	1a9b      	subs	r3, r3, r2
 800b53a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b53e:	2b00      	cmp	r3, #0
 800b540:	bfcd      	iteet	gt
 800b542:	463a      	movgt	r2, r7
 800b544:	462a      	movle	r2, r5
 800b546:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b54a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b54e:	bfd8      	it	le
 800b550:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b554:	464b      	mov	r3, r9
 800b556:	4622      	mov	r2, r4
 800b558:	4659      	mov	r1, fp
 800b55a:	f7f5 f8e7 	bl	800072c <__aeabi_ddiv>
 800b55e:	b005      	add	sp, #20
 800b560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b564 <__copybits>:
 800b564:	3901      	subs	r1, #1
 800b566:	b570      	push	{r4, r5, r6, lr}
 800b568:	1149      	asrs	r1, r1, #5
 800b56a:	6914      	ldr	r4, [r2, #16]
 800b56c:	3101      	adds	r1, #1
 800b56e:	f102 0314 	add.w	r3, r2, #20
 800b572:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b576:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b57a:	1f05      	subs	r5, r0, #4
 800b57c:	42a3      	cmp	r3, r4
 800b57e:	d30c      	bcc.n	800b59a <__copybits+0x36>
 800b580:	1aa3      	subs	r3, r4, r2
 800b582:	3b11      	subs	r3, #17
 800b584:	f023 0303 	bic.w	r3, r3, #3
 800b588:	3211      	adds	r2, #17
 800b58a:	42a2      	cmp	r2, r4
 800b58c:	bf88      	it	hi
 800b58e:	2300      	movhi	r3, #0
 800b590:	4418      	add	r0, r3
 800b592:	2300      	movs	r3, #0
 800b594:	4288      	cmp	r0, r1
 800b596:	d305      	bcc.n	800b5a4 <__copybits+0x40>
 800b598:	bd70      	pop	{r4, r5, r6, pc}
 800b59a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b59e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5a2:	e7eb      	b.n	800b57c <__copybits+0x18>
 800b5a4:	f840 3b04 	str.w	r3, [r0], #4
 800b5a8:	e7f4      	b.n	800b594 <__copybits+0x30>

0800b5aa <__any_on>:
 800b5aa:	f100 0214 	add.w	r2, r0, #20
 800b5ae:	6900      	ldr	r0, [r0, #16]
 800b5b0:	114b      	asrs	r3, r1, #5
 800b5b2:	4298      	cmp	r0, r3
 800b5b4:	b510      	push	{r4, lr}
 800b5b6:	db11      	blt.n	800b5dc <__any_on+0x32>
 800b5b8:	dd0a      	ble.n	800b5d0 <__any_on+0x26>
 800b5ba:	f011 011f 	ands.w	r1, r1, #31
 800b5be:	d007      	beq.n	800b5d0 <__any_on+0x26>
 800b5c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5c4:	fa24 f001 	lsr.w	r0, r4, r1
 800b5c8:	fa00 f101 	lsl.w	r1, r0, r1
 800b5cc:	428c      	cmp	r4, r1
 800b5ce:	d10b      	bne.n	800b5e8 <__any_on+0x3e>
 800b5d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d803      	bhi.n	800b5e0 <__any_on+0x36>
 800b5d8:	2000      	movs	r0, #0
 800b5da:	bd10      	pop	{r4, pc}
 800b5dc:	4603      	mov	r3, r0
 800b5de:	e7f7      	b.n	800b5d0 <__any_on+0x26>
 800b5e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5e4:	2900      	cmp	r1, #0
 800b5e6:	d0f5      	beq.n	800b5d4 <__any_on+0x2a>
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	e7f6      	b.n	800b5da <__any_on+0x30>

0800b5ec <__ascii_wctomb>:
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	b141      	cbz	r1, 800b604 <__ascii_wctomb+0x18>
 800b5f2:	2aff      	cmp	r2, #255	@ 0xff
 800b5f4:	d904      	bls.n	800b600 <__ascii_wctomb+0x14>
 800b5f6:	228a      	movs	r2, #138	@ 0x8a
 800b5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	4770      	bx	lr
 800b600:	2001      	movs	r0, #1
 800b602:	700a      	strb	r2, [r1, #0]
 800b604:	4770      	bx	lr

0800b606 <__ssputs_r>:
 800b606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b60a:	461f      	mov	r7, r3
 800b60c:	688e      	ldr	r6, [r1, #8]
 800b60e:	4682      	mov	sl, r0
 800b610:	42be      	cmp	r6, r7
 800b612:	460c      	mov	r4, r1
 800b614:	4690      	mov	r8, r2
 800b616:	680b      	ldr	r3, [r1, #0]
 800b618:	d82d      	bhi.n	800b676 <__ssputs_r+0x70>
 800b61a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b61e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b622:	d026      	beq.n	800b672 <__ssputs_r+0x6c>
 800b624:	6965      	ldr	r5, [r4, #20]
 800b626:	6909      	ldr	r1, [r1, #16]
 800b628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b62c:	eba3 0901 	sub.w	r9, r3, r1
 800b630:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b634:	1c7b      	adds	r3, r7, #1
 800b636:	444b      	add	r3, r9
 800b638:	106d      	asrs	r5, r5, #1
 800b63a:	429d      	cmp	r5, r3
 800b63c:	bf38      	it	cc
 800b63e:	461d      	movcc	r5, r3
 800b640:	0553      	lsls	r3, r2, #21
 800b642:	d527      	bpl.n	800b694 <__ssputs_r+0x8e>
 800b644:	4629      	mov	r1, r5
 800b646:	f7ff fa93 	bl	800ab70 <_malloc_r>
 800b64a:	4606      	mov	r6, r0
 800b64c:	b360      	cbz	r0, 800b6a8 <__ssputs_r+0xa2>
 800b64e:	464a      	mov	r2, r9
 800b650:	6921      	ldr	r1, [r4, #16]
 800b652:	f7fe f870 	bl	8009736 <memcpy>
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b65c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b660:	81a3      	strh	r3, [r4, #12]
 800b662:	6126      	str	r6, [r4, #16]
 800b664:	444e      	add	r6, r9
 800b666:	6026      	str	r6, [r4, #0]
 800b668:	463e      	mov	r6, r7
 800b66a:	6165      	str	r5, [r4, #20]
 800b66c:	eba5 0509 	sub.w	r5, r5, r9
 800b670:	60a5      	str	r5, [r4, #8]
 800b672:	42be      	cmp	r6, r7
 800b674:	d900      	bls.n	800b678 <__ssputs_r+0x72>
 800b676:	463e      	mov	r6, r7
 800b678:	4632      	mov	r2, r6
 800b67a:	4641      	mov	r1, r8
 800b67c:	6820      	ldr	r0, [r4, #0]
 800b67e:	f000 f9c1 	bl	800ba04 <memmove>
 800b682:	2000      	movs	r0, #0
 800b684:	68a3      	ldr	r3, [r4, #8]
 800b686:	1b9b      	subs	r3, r3, r6
 800b688:	60a3      	str	r3, [r4, #8]
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	4433      	add	r3, r6
 800b68e:	6023      	str	r3, [r4, #0]
 800b690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b694:	462a      	mov	r2, r5
 800b696:	f000 fa11 	bl	800babc <_realloc_r>
 800b69a:	4606      	mov	r6, r0
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d1e0      	bne.n	800b662 <__ssputs_r+0x5c>
 800b6a0:	4650      	mov	r0, sl
 800b6a2:	6921      	ldr	r1, [r4, #16]
 800b6a4:	f7fe feb8 	bl	800a418 <_free_r>
 800b6a8:	230c      	movs	r3, #12
 800b6aa:	f8ca 3000 	str.w	r3, [sl]
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6b8:	81a3      	strh	r3, [r4, #12]
 800b6ba:	e7e9      	b.n	800b690 <__ssputs_r+0x8a>

0800b6bc <_svfiprintf_r>:
 800b6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c0:	4698      	mov	r8, r3
 800b6c2:	898b      	ldrh	r3, [r1, #12]
 800b6c4:	4607      	mov	r7, r0
 800b6c6:	061b      	lsls	r3, r3, #24
 800b6c8:	460d      	mov	r5, r1
 800b6ca:	4614      	mov	r4, r2
 800b6cc:	b09d      	sub	sp, #116	@ 0x74
 800b6ce:	d510      	bpl.n	800b6f2 <_svfiprintf_r+0x36>
 800b6d0:	690b      	ldr	r3, [r1, #16]
 800b6d2:	b973      	cbnz	r3, 800b6f2 <_svfiprintf_r+0x36>
 800b6d4:	2140      	movs	r1, #64	@ 0x40
 800b6d6:	f7ff fa4b 	bl	800ab70 <_malloc_r>
 800b6da:	6028      	str	r0, [r5, #0]
 800b6dc:	6128      	str	r0, [r5, #16]
 800b6de:	b930      	cbnz	r0, 800b6ee <_svfiprintf_r+0x32>
 800b6e0:	230c      	movs	r3, #12
 800b6e2:	603b      	str	r3, [r7, #0]
 800b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e8:	b01d      	add	sp, #116	@ 0x74
 800b6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ee:	2340      	movs	r3, #64	@ 0x40
 800b6f0:	616b      	str	r3, [r5, #20]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6f6:	2320      	movs	r3, #32
 800b6f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6fc:	2330      	movs	r3, #48	@ 0x30
 800b6fe:	f04f 0901 	mov.w	r9, #1
 800b702:	f8cd 800c 	str.w	r8, [sp, #12]
 800b706:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b8a0 <_svfiprintf_r+0x1e4>
 800b70a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b70e:	4623      	mov	r3, r4
 800b710:	469a      	mov	sl, r3
 800b712:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b716:	b10a      	cbz	r2, 800b71c <_svfiprintf_r+0x60>
 800b718:	2a25      	cmp	r2, #37	@ 0x25
 800b71a:	d1f9      	bne.n	800b710 <_svfiprintf_r+0x54>
 800b71c:	ebba 0b04 	subs.w	fp, sl, r4
 800b720:	d00b      	beq.n	800b73a <_svfiprintf_r+0x7e>
 800b722:	465b      	mov	r3, fp
 800b724:	4622      	mov	r2, r4
 800b726:	4629      	mov	r1, r5
 800b728:	4638      	mov	r0, r7
 800b72a:	f7ff ff6c 	bl	800b606 <__ssputs_r>
 800b72e:	3001      	adds	r0, #1
 800b730:	f000 80a7 	beq.w	800b882 <_svfiprintf_r+0x1c6>
 800b734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b736:	445a      	add	r2, fp
 800b738:	9209      	str	r2, [sp, #36]	@ 0x24
 800b73a:	f89a 3000 	ldrb.w	r3, [sl]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 809f 	beq.w	800b882 <_svfiprintf_r+0x1c6>
 800b744:	2300      	movs	r3, #0
 800b746:	f04f 32ff 	mov.w	r2, #4294967295
 800b74a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b74e:	f10a 0a01 	add.w	sl, sl, #1
 800b752:	9304      	str	r3, [sp, #16]
 800b754:	9307      	str	r3, [sp, #28]
 800b756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b75a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b75c:	4654      	mov	r4, sl
 800b75e:	2205      	movs	r2, #5
 800b760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b764:	484e      	ldr	r0, [pc, #312]	@ (800b8a0 <_svfiprintf_r+0x1e4>)
 800b766:	f7fd ffd8 	bl	800971a <memchr>
 800b76a:	9a04      	ldr	r2, [sp, #16]
 800b76c:	b9d8      	cbnz	r0, 800b7a6 <_svfiprintf_r+0xea>
 800b76e:	06d0      	lsls	r0, r2, #27
 800b770:	bf44      	itt	mi
 800b772:	2320      	movmi	r3, #32
 800b774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b778:	0711      	lsls	r1, r2, #28
 800b77a:	bf44      	itt	mi
 800b77c:	232b      	movmi	r3, #43	@ 0x2b
 800b77e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b782:	f89a 3000 	ldrb.w	r3, [sl]
 800b786:	2b2a      	cmp	r3, #42	@ 0x2a
 800b788:	d015      	beq.n	800b7b6 <_svfiprintf_r+0xfa>
 800b78a:	4654      	mov	r4, sl
 800b78c:	2000      	movs	r0, #0
 800b78e:	f04f 0c0a 	mov.w	ip, #10
 800b792:	9a07      	ldr	r2, [sp, #28]
 800b794:	4621      	mov	r1, r4
 800b796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b79a:	3b30      	subs	r3, #48	@ 0x30
 800b79c:	2b09      	cmp	r3, #9
 800b79e:	d94b      	bls.n	800b838 <_svfiprintf_r+0x17c>
 800b7a0:	b1b0      	cbz	r0, 800b7d0 <_svfiprintf_r+0x114>
 800b7a2:	9207      	str	r2, [sp, #28]
 800b7a4:	e014      	b.n	800b7d0 <_svfiprintf_r+0x114>
 800b7a6:	eba0 0308 	sub.w	r3, r0, r8
 800b7aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	46a2      	mov	sl, r4
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	e7d2      	b.n	800b75c <_svfiprintf_r+0xa0>
 800b7b6:	9b03      	ldr	r3, [sp, #12]
 800b7b8:	1d19      	adds	r1, r3, #4
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	9103      	str	r1, [sp, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	bfbb      	ittet	lt
 800b7c2:	425b      	neglt	r3, r3
 800b7c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b7c8:	9307      	strge	r3, [sp, #28]
 800b7ca:	9307      	strlt	r3, [sp, #28]
 800b7cc:	bfb8      	it	lt
 800b7ce:	9204      	strlt	r2, [sp, #16]
 800b7d0:	7823      	ldrb	r3, [r4, #0]
 800b7d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7d4:	d10a      	bne.n	800b7ec <_svfiprintf_r+0x130>
 800b7d6:	7863      	ldrb	r3, [r4, #1]
 800b7d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7da:	d132      	bne.n	800b842 <_svfiprintf_r+0x186>
 800b7dc:	9b03      	ldr	r3, [sp, #12]
 800b7de:	3402      	adds	r4, #2
 800b7e0:	1d1a      	adds	r2, r3, #4
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	9203      	str	r2, [sp, #12]
 800b7e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7ea:	9305      	str	r3, [sp, #20]
 800b7ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b8a4 <_svfiprintf_r+0x1e8>
 800b7f0:	2203      	movs	r2, #3
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	7821      	ldrb	r1, [r4, #0]
 800b7f6:	f7fd ff90 	bl	800971a <memchr>
 800b7fa:	b138      	cbz	r0, 800b80c <_svfiprintf_r+0x150>
 800b7fc:	2240      	movs	r2, #64	@ 0x40
 800b7fe:	9b04      	ldr	r3, [sp, #16]
 800b800:	eba0 000a 	sub.w	r0, r0, sl
 800b804:	4082      	lsls	r2, r0
 800b806:	4313      	orrs	r3, r2
 800b808:	3401      	adds	r4, #1
 800b80a:	9304      	str	r3, [sp, #16]
 800b80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b810:	2206      	movs	r2, #6
 800b812:	4825      	ldr	r0, [pc, #148]	@ (800b8a8 <_svfiprintf_r+0x1ec>)
 800b814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b818:	f7fd ff7f 	bl	800971a <memchr>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d036      	beq.n	800b88e <_svfiprintf_r+0x1d2>
 800b820:	4b22      	ldr	r3, [pc, #136]	@ (800b8ac <_svfiprintf_r+0x1f0>)
 800b822:	bb1b      	cbnz	r3, 800b86c <_svfiprintf_r+0x1b0>
 800b824:	9b03      	ldr	r3, [sp, #12]
 800b826:	3307      	adds	r3, #7
 800b828:	f023 0307 	bic.w	r3, r3, #7
 800b82c:	3308      	adds	r3, #8
 800b82e:	9303      	str	r3, [sp, #12]
 800b830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b832:	4433      	add	r3, r6
 800b834:	9309      	str	r3, [sp, #36]	@ 0x24
 800b836:	e76a      	b.n	800b70e <_svfiprintf_r+0x52>
 800b838:	460c      	mov	r4, r1
 800b83a:	2001      	movs	r0, #1
 800b83c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b840:	e7a8      	b.n	800b794 <_svfiprintf_r+0xd8>
 800b842:	2300      	movs	r3, #0
 800b844:	f04f 0c0a 	mov.w	ip, #10
 800b848:	4619      	mov	r1, r3
 800b84a:	3401      	adds	r4, #1
 800b84c:	9305      	str	r3, [sp, #20]
 800b84e:	4620      	mov	r0, r4
 800b850:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b854:	3a30      	subs	r2, #48	@ 0x30
 800b856:	2a09      	cmp	r2, #9
 800b858:	d903      	bls.n	800b862 <_svfiprintf_r+0x1a6>
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d0c6      	beq.n	800b7ec <_svfiprintf_r+0x130>
 800b85e:	9105      	str	r1, [sp, #20]
 800b860:	e7c4      	b.n	800b7ec <_svfiprintf_r+0x130>
 800b862:	4604      	mov	r4, r0
 800b864:	2301      	movs	r3, #1
 800b866:	fb0c 2101 	mla	r1, ip, r1, r2
 800b86a:	e7f0      	b.n	800b84e <_svfiprintf_r+0x192>
 800b86c:	ab03      	add	r3, sp, #12
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	462a      	mov	r2, r5
 800b872:	4638      	mov	r0, r7
 800b874:	4b0e      	ldr	r3, [pc, #56]	@ (800b8b0 <_svfiprintf_r+0x1f4>)
 800b876:	a904      	add	r1, sp, #16
 800b878:	f7fd f9a4 	bl	8008bc4 <_printf_float>
 800b87c:	1c42      	adds	r2, r0, #1
 800b87e:	4606      	mov	r6, r0
 800b880:	d1d6      	bne.n	800b830 <_svfiprintf_r+0x174>
 800b882:	89ab      	ldrh	r3, [r5, #12]
 800b884:	065b      	lsls	r3, r3, #25
 800b886:	f53f af2d 	bmi.w	800b6e4 <_svfiprintf_r+0x28>
 800b88a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b88c:	e72c      	b.n	800b6e8 <_svfiprintf_r+0x2c>
 800b88e:	ab03      	add	r3, sp, #12
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	462a      	mov	r2, r5
 800b894:	4638      	mov	r0, r7
 800b896:	4b06      	ldr	r3, [pc, #24]	@ (800b8b0 <_svfiprintf_r+0x1f4>)
 800b898:	a904      	add	r1, sp, #16
 800b89a:	f7fd fc31 	bl	8009100 <_printf_i>
 800b89e:	e7ed      	b.n	800b87c <_svfiprintf_r+0x1c0>
 800b8a0:	0800c44a 	.word	0x0800c44a
 800b8a4:	0800c450 	.word	0x0800c450
 800b8a8:	0800c454 	.word	0x0800c454
 800b8ac:	08008bc5 	.word	0x08008bc5
 800b8b0:	0800b607 	.word	0x0800b607

0800b8b4 <__sflush_r>:
 800b8b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	0716      	lsls	r6, r2, #28
 800b8bc:	4605      	mov	r5, r0
 800b8be:	460c      	mov	r4, r1
 800b8c0:	d454      	bmi.n	800b96c <__sflush_r+0xb8>
 800b8c2:	684b      	ldr	r3, [r1, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	dc02      	bgt.n	800b8ce <__sflush_r+0x1a>
 800b8c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	dd48      	ble.n	800b960 <__sflush_r+0xac>
 800b8ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8d0:	2e00      	cmp	r6, #0
 800b8d2:	d045      	beq.n	800b960 <__sflush_r+0xac>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8da:	682f      	ldr	r7, [r5, #0]
 800b8dc:	6a21      	ldr	r1, [r4, #32]
 800b8de:	602b      	str	r3, [r5, #0]
 800b8e0:	d030      	beq.n	800b944 <__sflush_r+0x90>
 800b8e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	0759      	lsls	r1, r3, #29
 800b8e8:	d505      	bpl.n	800b8f6 <__sflush_r+0x42>
 800b8ea:	6863      	ldr	r3, [r4, #4]
 800b8ec:	1ad2      	subs	r2, r2, r3
 800b8ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8f0:	b10b      	cbz	r3, 800b8f6 <__sflush_r+0x42>
 800b8f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8f4:	1ad2      	subs	r2, r2, r3
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8fc:	6a21      	ldr	r1, [r4, #32]
 800b8fe:	47b0      	blx	r6
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	d106      	bne.n	800b914 <__sflush_r+0x60>
 800b906:	6829      	ldr	r1, [r5, #0]
 800b908:	291d      	cmp	r1, #29
 800b90a:	d82b      	bhi.n	800b964 <__sflush_r+0xb0>
 800b90c:	4a28      	ldr	r2, [pc, #160]	@ (800b9b0 <__sflush_r+0xfc>)
 800b90e:	40ca      	lsrs	r2, r1
 800b910:	07d6      	lsls	r6, r2, #31
 800b912:	d527      	bpl.n	800b964 <__sflush_r+0xb0>
 800b914:	2200      	movs	r2, #0
 800b916:	6062      	str	r2, [r4, #4]
 800b918:	6922      	ldr	r2, [r4, #16]
 800b91a:	04d9      	lsls	r1, r3, #19
 800b91c:	6022      	str	r2, [r4, #0]
 800b91e:	d504      	bpl.n	800b92a <__sflush_r+0x76>
 800b920:	1c42      	adds	r2, r0, #1
 800b922:	d101      	bne.n	800b928 <__sflush_r+0x74>
 800b924:	682b      	ldr	r3, [r5, #0]
 800b926:	b903      	cbnz	r3, 800b92a <__sflush_r+0x76>
 800b928:	6560      	str	r0, [r4, #84]	@ 0x54
 800b92a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b92c:	602f      	str	r7, [r5, #0]
 800b92e:	b1b9      	cbz	r1, 800b960 <__sflush_r+0xac>
 800b930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b934:	4299      	cmp	r1, r3
 800b936:	d002      	beq.n	800b93e <__sflush_r+0x8a>
 800b938:	4628      	mov	r0, r5
 800b93a:	f7fe fd6d 	bl	800a418 <_free_r>
 800b93e:	2300      	movs	r3, #0
 800b940:	6363      	str	r3, [r4, #52]	@ 0x34
 800b942:	e00d      	b.n	800b960 <__sflush_r+0xac>
 800b944:	2301      	movs	r3, #1
 800b946:	4628      	mov	r0, r5
 800b948:	47b0      	blx	r6
 800b94a:	4602      	mov	r2, r0
 800b94c:	1c50      	adds	r0, r2, #1
 800b94e:	d1c9      	bne.n	800b8e4 <__sflush_r+0x30>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d0c6      	beq.n	800b8e4 <__sflush_r+0x30>
 800b956:	2b1d      	cmp	r3, #29
 800b958:	d001      	beq.n	800b95e <__sflush_r+0xaa>
 800b95a:	2b16      	cmp	r3, #22
 800b95c:	d11d      	bne.n	800b99a <__sflush_r+0xe6>
 800b95e:	602f      	str	r7, [r5, #0]
 800b960:	2000      	movs	r0, #0
 800b962:	e021      	b.n	800b9a8 <__sflush_r+0xf4>
 800b964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b968:	b21b      	sxth	r3, r3
 800b96a:	e01a      	b.n	800b9a2 <__sflush_r+0xee>
 800b96c:	690f      	ldr	r7, [r1, #16]
 800b96e:	2f00      	cmp	r7, #0
 800b970:	d0f6      	beq.n	800b960 <__sflush_r+0xac>
 800b972:	0793      	lsls	r3, r2, #30
 800b974:	bf18      	it	ne
 800b976:	2300      	movne	r3, #0
 800b978:	680e      	ldr	r6, [r1, #0]
 800b97a:	bf08      	it	eq
 800b97c:	694b      	ldreq	r3, [r1, #20]
 800b97e:	1bf6      	subs	r6, r6, r7
 800b980:	600f      	str	r7, [r1, #0]
 800b982:	608b      	str	r3, [r1, #8]
 800b984:	2e00      	cmp	r6, #0
 800b986:	ddeb      	ble.n	800b960 <__sflush_r+0xac>
 800b988:	4633      	mov	r3, r6
 800b98a:	463a      	mov	r2, r7
 800b98c:	4628      	mov	r0, r5
 800b98e:	6a21      	ldr	r1, [r4, #32]
 800b990:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b994:	47e0      	blx	ip
 800b996:	2800      	cmp	r0, #0
 800b998:	dc07      	bgt.n	800b9aa <__sflush_r+0xf6>
 800b99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b99e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a6:	81a3      	strh	r3, [r4, #12]
 800b9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9aa:	4407      	add	r7, r0
 800b9ac:	1a36      	subs	r6, r6, r0
 800b9ae:	e7e9      	b.n	800b984 <__sflush_r+0xd0>
 800b9b0:	20400001 	.word	0x20400001

0800b9b4 <_fflush_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	690b      	ldr	r3, [r1, #16]
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	b913      	cbnz	r3, 800b9c4 <_fflush_r+0x10>
 800b9be:	2500      	movs	r5, #0
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
 800b9c4:	b118      	cbz	r0, 800b9ce <_fflush_r+0x1a>
 800b9c6:	6a03      	ldr	r3, [r0, #32]
 800b9c8:	b90b      	cbnz	r3, 800b9ce <_fflush_r+0x1a>
 800b9ca:	f7fd fd43 	bl	8009454 <__sinit>
 800b9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d0f3      	beq.n	800b9be <_fflush_r+0xa>
 800b9d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9d8:	07d0      	lsls	r0, r2, #31
 800b9da:	d404      	bmi.n	800b9e6 <_fflush_r+0x32>
 800b9dc:	0599      	lsls	r1, r3, #22
 800b9de:	d402      	bmi.n	800b9e6 <_fflush_r+0x32>
 800b9e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9e2:	f7fd fe98 	bl	8009716 <__retarget_lock_acquire_recursive>
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	f7ff ff63 	bl	800b8b4 <__sflush_r>
 800b9ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9f0:	4605      	mov	r5, r0
 800b9f2:	07da      	lsls	r2, r3, #31
 800b9f4:	d4e4      	bmi.n	800b9c0 <_fflush_r+0xc>
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	059b      	lsls	r3, r3, #22
 800b9fa:	d4e1      	bmi.n	800b9c0 <_fflush_r+0xc>
 800b9fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9fe:	f7fd fe8b 	bl	8009718 <__retarget_lock_release_recursive>
 800ba02:	e7dd      	b.n	800b9c0 <_fflush_r+0xc>

0800ba04 <memmove>:
 800ba04:	4288      	cmp	r0, r1
 800ba06:	b510      	push	{r4, lr}
 800ba08:	eb01 0402 	add.w	r4, r1, r2
 800ba0c:	d902      	bls.n	800ba14 <memmove+0x10>
 800ba0e:	4284      	cmp	r4, r0
 800ba10:	4623      	mov	r3, r4
 800ba12:	d807      	bhi.n	800ba24 <memmove+0x20>
 800ba14:	1e43      	subs	r3, r0, #1
 800ba16:	42a1      	cmp	r1, r4
 800ba18:	d008      	beq.n	800ba2c <memmove+0x28>
 800ba1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba22:	e7f8      	b.n	800ba16 <memmove+0x12>
 800ba24:	4601      	mov	r1, r0
 800ba26:	4402      	add	r2, r0
 800ba28:	428a      	cmp	r2, r1
 800ba2a:	d100      	bne.n	800ba2e <memmove+0x2a>
 800ba2c:	bd10      	pop	{r4, pc}
 800ba2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba36:	e7f7      	b.n	800ba28 <memmove+0x24>

0800ba38 <_sbrk_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	4d05      	ldr	r5, [pc, #20]	@ (800ba54 <_sbrk_r+0x1c>)
 800ba3e:	4604      	mov	r4, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	602b      	str	r3, [r5, #0]
 800ba44:	f7f6 fbdc 	bl	8002200 <_sbrk>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_sbrk_r+0x1a>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_sbrk_r+0x1a>
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	200014e8 	.word	0x200014e8

0800ba58 <__assert_func>:
 800ba58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba5a:	4614      	mov	r4, r2
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4b09      	ldr	r3, [pc, #36]	@ (800ba84 <__assert_func+0x2c>)
 800ba60:	4605      	mov	r5, r0
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68d8      	ldr	r0, [r3, #12]
 800ba66:	b14c      	cbz	r4, 800ba7c <__assert_func+0x24>
 800ba68:	4b07      	ldr	r3, [pc, #28]	@ (800ba88 <__assert_func+0x30>)
 800ba6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba6e:	9100      	str	r1, [sp, #0]
 800ba70:	462b      	mov	r3, r5
 800ba72:	4906      	ldr	r1, [pc, #24]	@ (800ba8c <__assert_func+0x34>)
 800ba74:	f000 f850 	bl	800bb18 <fiprintf>
 800ba78:	f000 f860 	bl	800bb3c <abort>
 800ba7c:	4b04      	ldr	r3, [pc, #16]	@ (800ba90 <__assert_func+0x38>)
 800ba7e:	461c      	mov	r4, r3
 800ba80:	e7f3      	b.n	800ba6a <__assert_func+0x12>
 800ba82:	bf00      	nop
 800ba84:	20000188 	.word	0x20000188
 800ba88:	0800c45b 	.word	0x0800c45b
 800ba8c:	0800c468 	.word	0x0800c468
 800ba90:	0800c496 	.word	0x0800c496

0800ba94 <_calloc_r>:
 800ba94:	b570      	push	{r4, r5, r6, lr}
 800ba96:	fba1 5402 	umull	r5, r4, r1, r2
 800ba9a:	b934      	cbnz	r4, 800baaa <_calloc_r+0x16>
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	f7ff f867 	bl	800ab70 <_malloc_r>
 800baa2:	4606      	mov	r6, r0
 800baa4:	b928      	cbnz	r0, 800bab2 <_calloc_r+0x1e>
 800baa6:	4630      	mov	r0, r6
 800baa8:	bd70      	pop	{r4, r5, r6, pc}
 800baaa:	220c      	movs	r2, #12
 800baac:	2600      	movs	r6, #0
 800baae:	6002      	str	r2, [r0, #0]
 800bab0:	e7f9      	b.n	800baa6 <_calloc_r+0x12>
 800bab2:	462a      	mov	r2, r5
 800bab4:	4621      	mov	r1, r4
 800bab6:	f7fd fd7c 	bl	80095b2 <memset>
 800baba:	e7f4      	b.n	800baa6 <_calloc_r+0x12>

0800babc <_realloc_r>:
 800babc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac0:	4607      	mov	r7, r0
 800bac2:	4614      	mov	r4, r2
 800bac4:	460d      	mov	r5, r1
 800bac6:	b921      	cbnz	r1, 800bad2 <_realloc_r+0x16>
 800bac8:	4611      	mov	r1, r2
 800baca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bace:	f7ff b84f 	b.w	800ab70 <_malloc_r>
 800bad2:	b92a      	cbnz	r2, 800bae0 <_realloc_r+0x24>
 800bad4:	f7fe fca0 	bl	800a418 <_free_r>
 800bad8:	4625      	mov	r5, r4
 800bada:	4628      	mov	r0, r5
 800badc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae0:	f000 f833 	bl	800bb4a <_malloc_usable_size_r>
 800bae4:	4284      	cmp	r4, r0
 800bae6:	4606      	mov	r6, r0
 800bae8:	d802      	bhi.n	800baf0 <_realloc_r+0x34>
 800baea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800baee:	d8f4      	bhi.n	800bada <_realloc_r+0x1e>
 800baf0:	4621      	mov	r1, r4
 800baf2:	4638      	mov	r0, r7
 800baf4:	f7ff f83c 	bl	800ab70 <_malloc_r>
 800baf8:	4680      	mov	r8, r0
 800bafa:	b908      	cbnz	r0, 800bb00 <_realloc_r+0x44>
 800bafc:	4645      	mov	r5, r8
 800bafe:	e7ec      	b.n	800bada <_realloc_r+0x1e>
 800bb00:	42b4      	cmp	r4, r6
 800bb02:	4622      	mov	r2, r4
 800bb04:	4629      	mov	r1, r5
 800bb06:	bf28      	it	cs
 800bb08:	4632      	movcs	r2, r6
 800bb0a:	f7fd fe14 	bl	8009736 <memcpy>
 800bb0e:	4629      	mov	r1, r5
 800bb10:	4638      	mov	r0, r7
 800bb12:	f7fe fc81 	bl	800a418 <_free_r>
 800bb16:	e7f1      	b.n	800bafc <_realloc_r+0x40>

0800bb18 <fiprintf>:
 800bb18:	b40e      	push	{r1, r2, r3}
 800bb1a:	b503      	push	{r0, r1, lr}
 800bb1c:	4601      	mov	r1, r0
 800bb1e:	ab03      	add	r3, sp, #12
 800bb20:	4805      	ldr	r0, [pc, #20]	@ (800bb38 <fiprintf+0x20>)
 800bb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb26:	6800      	ldr	r0, [r0, #0]
 800bb28:	9301      	str	r3, [sp, #4]
 800bb2a:	f000 f83d 	bl	800bba8 <_vfiprintf_r>
 800bb2e:	b002      	add	sp, #8
 800bb30:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb34:	b003      	add	sp, #12
 800bb36:	4770      	bx	lr
 800bb38:	20000188 	.word	0x20000188

0800bb3c <abort>:
 800bb3c:	2006      	movs	r0, #6
 800bb3e:	b508      	push	{r3, lr}
 800bb40:	f000 fa06 	bl	800bf50 <raise>
 800bb44:	2001      	movs	r0, #1
 800bb46:	f7f6 fae6 	bl	8002116 <_exit>

0800bb4a <_malloc_usable_size_r>:
 800bb4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb4e:	1f18      	subs	r0, r3, #4
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	bfbc      	itt	lt
 800bb54:	580b      	ldrlt	r3, [r1, r0]
 800bb56:	18c0      	addlt	r0, r0, r3
 800bb58:	4770      	bx	lr

0800bb5a <__sfputc_r>:
 800bb5a:	6893      	ldr	r3, [r2, #8]
 800bb5c:	b410      	push	{r4}
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	6093      	str	r3, [r2, #8]
 800bb64:	da07      	bge.n	800bb76 <__sfputc_r+0x1c>
 800bb66:	6994      	ldr	r4, [r2, #24]
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	db01      	blt.n	800bb70 <__sfputc_r+0x16>
 800bb6c:	290a      	cmp	r1, #10
 800bb6e:	d102      	bne.n	800bb76 <__sfputc_r+0x1c>
 800bb70:	bc10      	pop	{r4}
 800bb72:	f000 b931 	b.w	800bdd8 <__swbuf_r>
 800bb76:	6813      	ldr	r3, [r2, #0]
 800bb78:	1c58      	adds	r0, r3, #1
 800bb7a:	6010      	str	r0, [r2, #0]
 800bb7c:	7019      	strb	r1, [r3, #0]
 800bb7e:	4608      	mov	r0, r1
 800bb80:	bc10      	pop	{r4}
 800bb82:	4770      	bx	lr

0800bb84 <__sfputs_r>:
 800bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb86:	4606      	mov	r6, r0
 800bb88:	460f      	mov	r7, r1
 800bb8a:	4614      	mov	r4, r2
 800bb8c:	18d5      	adds	r5, r2, r3
 800bb8e:	42ac      	cmp	r4, r5
 800bb90:	d101      	bne.n	800bb96 <__sfputs_r+0x12>
 800bb92:	2000      	movs	r0, #0
 800bb94:	e007      	b.n	800bba6 <__sfputs_r+0x22>
 800bb96:	463a      	mov	r2, r7
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb9e:	f7ff ffdc 	bl	800bb5a <__sfputc_r>
 800bba2:	1c43      	adds	r3, r0, #1
 800bba4:	d1f3      	bne.n	800bb8e <__sfputs_r+0xa>
 800bba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bba8 <_vfiprintf_r>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	460d      	mov	r5, r1
 800bbae:	4614      	mov	r4, r2
 800bbb0:	4698      	mov	r8, r3
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	b09d      	sub	sp, #116	@ 0x74
 800bbb6:	b118      	cbz	r0, 800bbc0 <_vfiprintf_r+0x18>
 800bbb8:	6a03      	ldr	r3, [r0, #32]
 800bbba:	b90b      	cbnz	r3, 800bbc0 <_vfiprintf_r+0x18>
 800bbbc:	f7fd fc4a 	bl	8009454 <__sinit>
 800bbc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbc2:	07d9      	lsls	r1, r3, #31
 800bbc4:	d405      	bmi.n	800bbd2 <_vfiprintf_r+0x2a>
 800bbc6:	89ab      	ldrh	r3, [r5, #12]
 800bbc8:	059a      	lsls	r2, r3, #22
 800bbca:	d402      	bmi.n	800bbd2 <_vfiprintf_r+0x2a>
 800bbcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbce:	f7fd fda2 	bl	8009716 <__retarget_lock_acquire_recursive>
 800bbd2:	89ab      	ldrh	r3, [r5, #12]
 800bbd4:	071b      	lsls	r3, r3, #28
 800bbd6:	d501      	bpl.n	800bbdc <_vfiprintf_r+0x34>
 800bbd8:	692b      	ldr	r3, [r5, #16]
 800bbda:	b99b      	cbnz	r3, 800bc04 <_vfiprintf_r+0x5c>
 800bbdc:	4629      	mov	r1, r5
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f000 f938 	bl	800be54 <__swsetup_r>
 800bbe4:	b170      	cbz	r0, 800bc04 <_vfiprintf_r+0x5c>
 800bbe6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbe8:	07dc      	lsls	r4, r3, #31
 800bbea:	d504      	bpl.n	800bbf6 <_vfiprintf_r+0x4e>
 800bbec:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf0:	b01d      	add	sp, #116	@ 0x74
 800bbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	0598      	lsls	r0, r3, #22
 800bbfa:	d4f7      	bmi.n	800bbec <_vfiprintf_r+0x44>
 800bbfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbfe:	f7fd fd8b 	bl	8009718 <__retarget_lock_release_recursive>
 800bc02:	e7f3      	b.n	800bbec <_vfiprintf_r+0x44>
 800bc04:	2300      	movs	r3, #0
 800bc06:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc08:	2320      	movs	r3, #32
 800bc0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc0e:	2330      	movs	r3, #48	@ 0x30
 800bc10:	f04f 0901 	mov.w	r9, #1
 800bc14:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc18:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bdc4 <_vfiprintf_r+0x21c>
 800bc1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc20:	4623      	mov	r3, r4
 800bc22:	469a      	mov	sl, r3
 800bc24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc28:	b10a      	cbz	r2, 800bc2e <_vfiprintf_r+0x86>
 800bc2a:	2a25      	cmp	r2, #37	@ 0x25
 800bc2c:	d1f9      	bne.n	800bc22 <_vfiprintf_r+0x7a>
 800bc2e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc32:	d00b      	beq.n	800bc4c <_vfiprintf_r+0xa4>
 800bc34:	465b      	mov	r3, fp
 800bc36:	4622      	mov	r2, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7ff ffa2 	bl	800bb84 <__sfputs_r>
 800bc40:	3001      	adds	r0, #1
 800bc42:	f000 80a7 	beq.w	800bd94 <_vfiprintf_r+0x1ec>
 800bc46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc48:	445a      	add	r2, fp
 800bc4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 809f 	beq.w	800bd94 <_vfiprintf_r+0x1ec>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc60:	f10a 0a01 	add.w	sl, sl, #1
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	9307      	str	r3, [sp, #28]
 800bc68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc6e:	4654      	mov	r4, sl
 800bc70:	2205      	movs	r2, #5
 800bc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc76:	4853      	ldr	r0, [pc, #332]	@ (800bdc4 <_vfiprintf_r+0x21c>)
 800bc78:	f7fd fd4f 	bl	800971a <memchr>
 800bc7c:	9a04      	ldr	r2, [sp, #16]
 800bc7e:	b9d8      	cbnz	r0, 800bcb8 <_vfiprintf_r+0x110>
 800bc80:	06d1      	lsls	r1, r2, #27
 800bc82:	bf44      	itt	mi
 800bc84:	2320      	movmi	r3, #32
 800bc86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc8a:	0713      	lsls	r3, r2, #28
 800bc8c:	bf44      	itt	mi
 800bc8e:	232b      	movmi	r3, #43	@ 0x2b
 800bc90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc94:	f89a 3000 	ldrb.w	r3, [sl]
 800bc98:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc9a:	d015      	beq.n	800bcc8 <_vfiprintf_r+0x120>
 800bc9c:	4654      	mov	r4, sl
 800bc9e:	2000      	movs	r0, #0
 800bca0:	f04f 0c0a 	mov.w	ip, #10
 800bca4:	9a07      	ldr	r2, [sp, #28]
 800bca6:	4621      	mov	r1, r4
 800bca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcac:	3b30      	subs	r3, #48	@ 0x30
 800bcae:	2b09      	cmp	r3, #9
 800bcb0:	d94b      	bls.n	800bd4a <_vfiprintf_r+0x1a2>
 800bcb2:	b1b0      	cbz	r0, 800bce2 <_vfiprintf_r+0x13a>
 800bcb4:	9207      	str	r2, [sp, #28]
 800bcb6:	e014      	b.n	800bce2 <_vfiprintf_r+0x13a>
 800bcb8:	eba0 0308 	sub.w	r3, r0, r8
 800bcbc:	fa09 f303 	lsl.w	r3, r9, r3
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	46a2      	mov	sl, r4
 800bcc4:	9304      	str	r3, [sp, #16]
 800bcc6:	e7d2      	b.n	800bc6e <_vfiprintf_r+0xc6>
 800bcc8:	9b03      	ldr	r3, [sp, #12]
 800bcca:	1d19      	adds	r1, r3, #4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	9103      	str	r1, [sp, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	bfbb      	ittet	lt
 800bcd4:	425b      	neglt	r3, r3
 800bcd6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcda:	9307      	strge	r3, [sp, #28]
 800bcdc:	9307      	strlt	r3, [sp, #28]
 800bcde:	bfb8      	it	lt
 800bce0:	9204      	strlt	r2, [sp, #16]
 800bce2:	7823      	ldrb	r3, [r4, #0]
 800bce4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bce6:	d10a      	bne.n	800bcfe <_vfiprintf_r+0x156>
 800bce8:	7863      	ldrb	r3, [r4, #1]
 800bcea:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcec:	d132      	bne.n	800bd54 <_vfiprintf_r+0x1ac>
 800bcee:	9b03      	ldr	r3, [sp, #12]
 800bcf0:	3402      	adds	r4, #2
 800bcf2:	1d1a      	adds	r2, r3, #4
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	9203      	str	r2, [sp, #12]
 800bcf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcfc:	9305      	str	r3, [sp, #20]
 800bcfe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bdc8 <_vfiprintf_r+0x220>
 800bd02:	2203      	movs	r2, #3
 800bd04:	4650      	mov	r0, sl
 800bd06:	7821      	ldrb	r1, [r4, #0]
 800bd08:	f7fd fd07 	bl	800971a <memchr>
 800bd0c:	b138      	cbz	r0, 800bd1e <_vfiprintf_r+0x176>
 800bd0e:	2240      	movs	r2, #64	@ 0x40
 800bd10:	9b04      	ldr	r3, [sp, #16]
 800bd12:	eba0 000a 	sub.w	r0, r0, sl
 800bd16:	4082      	lsls	r2, r0
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	3401      	adds	r4, #1
 800bd1c:	9304      	str	r3, [sp, #16]
 800bd1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd22:	2206      	movs	r2, #6
 800bd24:	4829      	ldr	r0, [pc, #164]	@ (800bdcc <_vfiprintf_r+0x224>)
 800bd26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd2a:	f7fd fcf6 	bl	800971a <memchr>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d03f      	beq.n	800bdb2 <_vfiprintf_r+0x20a>
 800bd32:	4b27      	ldr	r3, [pc, #156]	@ (800bdd0 <_vfiprintf_r+0x228>)
 800bd34:	bb1b      	cbnz	r3, 800bd7e <_vfiprintf_r+0x1d6>
 800bd36:	9b03      	ldr	r3, [sp, #12]
 800bd38:	3307      	adds	r3, #7
 800bd3a:	f023 0307 	bic.w	r3, r3, #7
 800bd3e:	3308      	adds	r3, #8
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd44:	443b      	add	r3, r7
 800bd46:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd48:	e76a      	b.n	800bc20 <_vfiprintf_r+0x78>
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	2001      	movs	r0, #1
 800bd4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd52:	e7a8      	b.n	800bca6 <_vfiprintf_r+0xfe>
 800bd54:	2300      	movs	r3, #0
 800bd56:	f04f 0c0a 	mov.w	ip, #10
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	3401      	adds	r4, #1
 800bd5e:	9305      	str	r3, [sp, #20]
 800bd60:	4620      	mov	r0, r4
 800bd62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd66:	3a30      	subs	r2, #48	@ 0x30
 800bd68:	2a09      	cmp	r2, #9
 800bd6a:	d903      	bls.n	800bd74 <_vfiprintf_r+0x1cc>
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d0c6      	beq.n	800bcfe <_vfiprintf_r+0x156>
 800bd70:	9105      	str	r1, [sp, #20]
 800bd72:	e7c4      	b.n	800bcfe <_vfiprintf_r+0x156>
 800bd74:	4604      	mov	r4, r0
 800bd76:	2301      	movs	r3, #1
 800bd78:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd7c:	e7f0      	b.n	800bd60 <_vfiprintf_r+0x1b8>
 800bd7e:	ab03      	add	r3, sp, #12
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	462a      	mov	r2, r5
 800bd84:	4630      	mov	r0, r6
 800bd86:	4b13      	ldr	r3, [pc, #76]	@ (800bdd4 <_vfiprintf_r+0x22c>)
 800bd88:	a904      	add	r1, sp, #16
 800bd8a:	f7fc ff1b 	bl	8008bc4 <_printf_float>
 800bd8e:	4607      	mov	r7, r0
 800bd90:	1c78      	adds	r0, r7, #1
 800bd92:	d1d6      	bne.n	800bd42 <_vfiprintf_r+0x19a>
 800bd94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd96:	07d9      	lsls	r1, r3, #31
 800bd98:	d405      	bmi.n	800bda6 <_vfiprintf_r+0x1fe>
 800bd9a:	89ab      	ldrh	r3, [r5, #12]
 800bd9c:	059a      	lsls	r2, r3, #22
 800bd9e:	d402      	bmi.n	800bda6 <_vfiprintf_r+0x1fe>
 800bda0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bda2:	f7fd fcb9 	bl	8009718 <__retarget_lock_release_recursive>
 800bda6:	89ab      	ldrh	r3, [r5, #12]
 800bda8:	065b      	lsls	r3, r3, #25
 800bdaa:	f53f af1f 	bmi.w	800bbec <_vfiprintf_r+0x44>
 800bdae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdb0:	e71e      	b.n	800bbf0 <_vfiprintf_r+0x48>
 800bdb2:	ab03      	add	r3, sp, #12
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	462a      	mov	r2, r5
 800bdb8:	4630      	mov	r0, r6
 800bdba:	4b06      	ldr	r3, [pc, #24]	@ (800bdd4 <_vfiprintf_r+0x22c>)
 800bdbc:	a904      	add	r1, sp, #16
 800bdbe:	f7fd f99f 	bl	8009100 <_printf_i>
 800bdc2:	e7e4      	b.n	800bd8e <_vfiprintf_r+0x1e6>
 800bdc4:	0800c44a 	.word	0x0800c44a
 800bdc8:	0800c450 	.word	0x0800c450
 800bdcc:	0800c454 	.word	0x0800c454
 800bdd0:	08008bc5 	.word	0x08008bc5
 800bdd4:	0800bb85 	.word	0x0800bb85

0800bdd8 <__swbuf_r>:
 800bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdda:	460e      	mov	r6, r1
 800bddc:	4614      	mov	r4, r2
 800bdde:	4605      	mov	r5, r0
 800bde0:	b118      	cbz	r0, 800bdea <__swbuf_r+0x12>
 800bde2:	6a03      	ldr	r3, [r0, #32]
 800bde4:	b90b      	cbnz	r3, 800bdea <__swbuf_r+0x12>
 800bde6:	f7fd fb35 	bl	8009454 <__sinit>
 800bdea:	69a3      	ldr	r3, [r4, #24]
 800bdec:	60a3      	str	r3, [r4, #8]
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	071a      	lsls	r2, r3, #28
 800bdf2:	d501      	bpl.n	800bdf8 <__swbuf_r+0x20>
 800bdf4:	6923      	ldr	r3, [r4, #16]
 800bdf6:	b943      	cbnz	r3, 800be0a <__swbuf_r+0x32>
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f000 f82a 	bl	800be54 <__swsetup_r>
 800be00:	b118      	cbz	r0, 800be0a <__swbuf_r+0x32>
 800be02:	f04f 37ff 	mov.w	r7, #4294967295
 800be06:	4638      	mov	r0, r7
 800be08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	6922      	ldr	r2, [r4, #16]
 800be0e:	b2f6      	uxtb	r6, r6
 800be10:	1a98      	subs	r0, r3, r2
 800be12:	6963      	ldr	r3, [r4, #20]
 800be14:	4637      	mov	r7, r6
 800be16:	4283      	cmp	r3, r0
 800be18:	dc05      	bgt.n	800be26 <__swbuf_r+0x4e>
 800be1a:	4621      	mov	r1, r4
 800be1c:	4628      	mov	r0, r5
 800be1e:	f7ff fdc9 	bl	800b9b4 <_fflush_r>
 800be22:	2800      	cmp	r0, #0
 800be24:	d1ed      	bne.n	800be02 <__swbuf_r+0x2a>
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	3b01      	subs	r3, #1
 800be2a:	60a3      	str	r3, [r4, #8]
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	6022      	str	r2, [r4, #0]
 800be32:	701e      	strb	r6, [r3, #0]
 800be34:	6962      	ldr	r2, [r4, #20]
 800be36:	1c43      	adds	r3, r0, #1
 800be38:	429a      	cmp	r2, r3
 800be3a:	d004      	beq.n	800be46 <__swbuf_r+0x6e>
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	07db      	lsls	r3, r3, #31
 800be40:	d5e1      	bpl.n	800be06 <__swbuf_r+0x2e>
 800be42:	2e0a      	cmp	r6, #10
 800be44:	d1df      	bne.n	800be06 <__swbuf_r+0x2e>
 800be46:	4621      	mov	r1, r4
 800be48:	4628      	mov	r0, r5
 800be4a:	f7ff fdb3 	bl	800b9b4 <_fflush_r>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d0d9      	beq.n	800be06 <__swbuf_r+0x2e>
 800be52:	e7d6      	b.n	800be02 <__swbuf_r+0x2a>

0800be54 <__swsetup_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4b29      	ldr	r3, [pc, #164]	@ (800befc <__swsetup_r+0xa8>)
 800be58:	4605      	mov	r5, r0
 800be5a:	6818      	ldr	r0, [r3, #0]
 800be5c:	460c      	mov	r4, r1
 800be5e:	b118      	cbz	r0, 800be68 <__swsetup_r+0x14>
 800be60:	6a03      	ldr	r3, [r0, #32]
 800be62:	b90b      	cbnz	r3, 800be68 <__swsetup_r+0x14>
 800be64:	f7fd faf6 	bl	8009454 <__sinit>
 800be68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be6c:	0719      	lsls	r1, r3, #28
 800be6e:	d422      	bmi.n	800beb6 <__swsetup_r+0x62>
 800be70:	06da      	lsls	r2, r3, #27
 800be72:	d407      	bmi.n	800be84 <__swsetup_r+0x30>
 800be74:	2209      	movs	r2, #9
 800be76:	602a      	str	r2, [r5, #0]
 800be78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be7c:	f04f 30ff 	mov.w	r0, #4294967295
 800be80:	81a3      	strh	r3, [r4, #12]
 800be82:	e033      	b.n	800beec <__swsetup_r+0x98>
 800be84:	0758      	lsls	r0, r3, #29
 800be86:	d512      	bpl.n	800beae <__swsetup_r+0x5a>
 800be88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be8a:	b141      	cbz	r1, 800be9e <__swsetup_r+0x4a>
 800be8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be90:	4299      	cmp	r1, r3
 800be92:	d002      	beq.n	800be9a <__swsetup_r+0x46>
 800be94:	4628      	mov	r0, r5
 800be96:	f7fe fabf 	bl	800a418 <_free_r>
 800be9a:	2300      	movs	r3, #0
 800be9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bea4:	81a3      	strh	r3, [r4, #12]
 800bea6:	2300      	movs	r3, #0
 800bea8:	6063      	str	r3, [r4, #4]
 800beaa:	6923      	ldr	r3, [r4, #16]
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	f043 0308 	orr.w	r3, r3, #8
 800beb4:	81a3      	strh	r3, [r4, #12]
 800beb6:	6923      	ldr	r3, [r4, #16]
 800beb8:	b94b      	cbnz	r3, 800bece <__swsetup_r+0x7a>
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bec4:	d003      	beq.n	800bece <__swsetup_r+0x7a>
 800bec6:	4621      	mov	r1, r4
 800bec8:	4628      	mov	r0, r5
 800beca:	f000 f882 	bl	800bfd2 <__smakebuf_r>
 800bece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed2:	f013 0201 	ands.w	r2, r3, #1
 800bed6:	d00a      	beq.n	800beee <__swsetup_r+0x9a>
 800bed8:	2200      	movs	r2, #0
 800beda:	60a2      	str	r2, [r4, #8]
 800bedc:	6962      	ldr	r2, [r4, #20]
 800bede:	4252      	negs	r2, r2
 800bee0:	61a2      	str	r2, [r4, #24]
 800bee2:	6922      	ldr	r2, [r4, #16]
 800bee4:	b942      	cbnz	r2, 800bef8 <__swsetup_r+0xa4>
 800bee6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800beea:	d1c5      	bne.n	800be78 <__swsetup_r+0x24>
 800beec:	bd38      	pop	{r3, r4, r5, pc}
 800beee:	0799      	lsls	r1, r3, #30
 800bef0:	bf58      	it	pl
 800bef2:	6962      	ldrpl	r2, [r4, #20]
 800bef4:	60a2      	str	r2, [r4, #8]
 800bef6:	e7f4      	b.n	800bee2 <__swsetup_r+0x8e>
 800bef8:	2000      	movs	r0, #0
 800befa:	e7f7      	b.n	800beec <__swsetup_r+0x98>
 800befc:	20000188 	.word	0x20000188

0800bf00 <_raise_r>:
 800bf00:	291f      	cmp	r1, #31
 800bf02:	b538      	push	{r3, r4, r5, lr}
 800bf04:	4605      	mov	r5, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	d904      	bls.n	800bf14 <_raise_r+0x14>
 800bf0a:	2316      	movs	r3, #22
 800bf0c:	6003      	str	r3, [r0, #0]
 800bf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf16:	b112      	cbz	r2, 800bf1e <_raise_r+0x1e>
 800bf18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf1c:	b94b      	cbnz	r3, 800bf32 <_raise_r+0x32>
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f000 f830 	bl	800bf84 <_getpid_r>
 800bf24:	4622      	mov	r2, r4
 800bf26:	4601      	mov	r1, r0
 800bf28:	4628      	mov	r0, r5
 800bf2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf2e:	f000 b817 	b.w	800bf60 <_kill_r>
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d00a      	beq.n	800bf4c <_raise_r+0x4c>
 800bf36:	1c59      	adds	r1, r3, #1
 800bf38:	d103      	bne.n	800bf42 <_raise_r+0x42>
 800bf3a:	2316      	movs	r3, #22
 800bf3c:	6003      	str	r3, [r0, #0]
 800bf3e:	2001      	movs	r0, #1
 800bf40:	e7e7      	b.n	800bf12 <_raise_r+0x12>
 800bf42:	2100      	movs	r1, #0
 800bf44:	4620      	mov	r0, r4
 800bf46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf4a:	4798      	blx	r3
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	e7e0      	b.n	800bf12 <_raise_r+0x12>

0800bf50 <raise>:
 800bf50:	4b02      	ldr	r3, [pc, #8]	@ (800bf5c <raise+0xc>)
 800bf52:	4601      	mov	r1, r0
 800bf54:	6818      	ldr	r0, [r3, #0]
 800bf56:	f7ff bfd3 	b.w	800bf00 <_raise_r>
 800bf5a:	bf00      	nop
 800bf5c:	20000188 	.word	0x20000188

0800bf60 <_kill_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	2300      	movs	r3, #0
 800bf64:	4d06      	ldr	r5, [pc, #24]	@ (800bf80 <_kill_r+0x20>)
 800bf66:	4604      	mov	r4, r0
 800bf68:	4608      	mov	r0, r1
 800bf6a:	4611      	mov	r1, r2
 800bf6c:	602b      	str	r3, [r5, #0]
 800bf6e:	f7f6 f8c2 	bl	80020f6 <_kill>
 800bf72:	1c43      	adds	r3, r0, #1
 800bf74:	d102      	bne.n	800bf7c <_kill_r+0x1c>
 800bf76:	682b      	ldr	r3, [r5, #0]
 800bf78:	b103      	cbz	r3, 800bf7c <_kill_r+0x1c>
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	bd38      	pop	{r3, r4, r5, pc}
 800bf7e:	bf00      	nop
 800bf80:	200014e8 	.word	0x200014e8

0800bf84 <_getpid_r>:
 800bf84:	f7f6 b8b0 	b.w	80020e8 <_getpid>

0800bf88 <__swhatbuf_r>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf90:	4615      	mov	r5, r2
 800bf92:	2900      	cmp	r1, #0
 800bf94:	461e      	mov	r6, r3
 800bf96:	b096      	sub	sp, #88	@ 0x58
 800bf98:	da0c      	bge.n	800bfb4 <__swhatbuf_r+0x2c>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfa2:	bf14      	ite	ne
 800bfa4:	2340      	movne	r3, #64	@ 0x40
 800bfa6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bfaa:	2000      	movs	r0, #0
 800bfac:	6031      	str	r1, [r6, #0]
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	b016      	add	sp, #88	@ 0x58
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	466a      	mov	r2, sp
 800bfb6:	f000 f849 	bl	800c04c <_fstat_r>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	dbed      	blt.n	800bf9a <__swhatbuf_r+0x12>
 800bfbe:	9901      	ldr	r1, [sp, #4]
 800bfc0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bfc4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bfc8:	4259      	negs	r1, r3
 800bfca:	4159      	adcs	r1, r3
 800bfcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfd0:	e7eb      	b.n	800bfaa <__swhatbuf_r+0x22>

0800bfd2 <__smakebuf_r>:
 800bfd2:	898b      	ldrh	r3, [r1, #12]
 800bfd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfd6:	079d      	lsls	r5, r3, #30
 800bfd8:	4606      	mov	r6, r0
 800bfda:	460c      	mov	r4, r1
 800bfdc:	d507      	bpl.n	800bfee <__smakebuf_r+0x1c>
 800bfde:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfe2:	6023      	str	r3, [r4, #0]
 800bfe4:	6123      	str	r3, [r4, #16]
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	6163      	str	r3, [r4, #20]
 800bfea:	b003      	add	sp, #12
 800bfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfee:	466a      	mov	r2, sp
 800bff0:	ab01      	add	r3, sp, #4
 800bff2:	f7ff ffc9 	bl	800bf88 <__swhatbuf_r>
 800bff6:	9f00      	ldr	r7, [sp, #0]
 800bff8:	4605      	mov	r5, r0
 800bffa:	4639      	mov	r1, r7
 800bffc:	4630      	mov	r0, r6
 800bffe:	f7fe fdb7 	bl	800ab70 <_malloc_r>
 800c002:	b948      	cbnz	r0, 800c018 <__smakebuf_r+0x46>
 800c004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c008:	059a      	lsls	r2, r3, #22
 800c00a:	d4ee      	bmi.n	800bfea <__smakebuf_r+0x18>
 800c00c:	f023 0303 	bic.w	r3, r3, #3
 800c010:	f043 0302 	orr.w	r3, r3, #2
 800c014:	81a3      	strh	r3, [r4, #12]
 800c016:	e7e2      	b.n	800bfde <__smakebuf_r+0xc>
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c01e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c022:	81a3      	strh	r3, [r4, #12]
 800c024:	9b01      	ldr	r3, [sp, #4]
 800c026:	6020      	str	r0, [r4, #0]
 800c028:	b15b      	cbz	r3, 800c042 <__smakebuf_r+0x70>
 800c02a:	4630      	mov	r0, r6
 800c02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c030:	f000 f81e 	bl	800c070 <_isatty_r>
 800c034:	b128      	cbz	r0, 800c042 <__smakebuf_r+0x70>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f023 0303 	bic.w	r3, r3, #3
 800c03c:	f043 0301 	orr.w	r3, r3, #1
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	431d      	orrs	r5, r3
 800c046:	81a5      	strh	r5, [r4, #12]
 800c048:	e7cf      	b.n	800bfea <__smakebuf_r+0x18>
	...

0800c04c <_fstat_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	2300      	movs	r3, #0
 800c050:	4d06      	ldr	r5, [pc, #24]	@ (800c06c <_fstat_r+0x20>)
 800c052:	4604      	mov	r4, r0
 800c054:	4608      	mov	r0, r1
 800c056:	4611      	mov	r1, r2
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	f7f6 f8ab 	bl	80021b4 <_fstat>
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	d102      	bne.n	800c068 <_fstat_r+0x1c>
 800c062:	682b      	ldr	r3, [r5, #0]
 800c064:	b103      	cbz	r3, 800c068 <_fstat_r+0x1c>
 800c066:	6023      	str	r3, [r4, #0]
 800c068:	bd38      	pop	{r3, r4, r5, pc}
 800c06a:	bf00      	nop
 800c06c:	200014e8 	.word	0x200014e8

0800c070 <_isatty_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	2300      	movs	r3, #0
 800c074:	4d05      	ldr	r5, [pc, #20]	@ (800c08c <_isatty_r+0x1c>)
 800c076:	4604      	mov	r4, r0
 800c078:	4608      	mov	r0, r1
 800c07a:	602b      	str	r3, [r5, #0]
 800c07c:	f7f6 f8a9 	bl	80021d2 <_isatty>
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	d102      	bne.n	800c08a <_isatty_r+0x1a>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	b103      	cbz	r3, 800c08a <_isatty_r+0x1a>
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	bd38      	pop	{r3, r4, r5, pc}
 800c08c:	200014e8 	.word	0x200014e8

0800c090 <sqrtf>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4605      	mov	r5, r0
 800c094:	f000 f816 	bl	800c0c4 <__ieee754_sqrtf>
 800c098:	4629      	mov	r1, r5
 800c09a:	4604      	mov	r4, r0
 800c09c:	4628      	mov	r0, r5
 800c09e:	f7f4 ffe7 	bl	8001070 <__aeabi_fcmpun>
 800c0a2:	b968      	cbnz	r0, 800c0c0 <sqrtf+0x30>
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	f7f4 ffba 	bl	8001020 <__aeabi_fcmplt>
 800c0ac:	b140      	cbz	r0, 800c0c0 <sqrtf+0x30>
 800c0ae:	f7fd fb07 	bl	80096c0 <__errno>
 800c0b2:	2321      	movs	r3, #33	@ 0x21
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	6003      	str	r3, [r0, #0]
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	f7f4 fec7 	bl	8000e4c <__aeabi_fdiv>
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	bd38      	pop	{r3, r4, r5, pc}

0800c0c4 <__ieee754_sqrtf>:
 800c0c4:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800c0c8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	d30a      	bcc.n	800c0ec <__ieee754_sqrtf+0x28>
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	f7f4 fe04 	bl	8000ce4 <__aeabi_fmul>
 800c0dc:	4601      	mov	r1, r0
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f7f4 fcf8 	bl	8000ad4 <__addsf3>
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ec:	2a00      	cmp	r2, #0
 800c0ee:	d0fa      	beq.n	800c0e6 <__ieee754_sqrtf+0x22>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	da06      	bge.n	800c102 <__ieee754_sqrtf+0x3e>
 800c0f4:	4601      	mov	r1, r0
 800c0f6:	f7f4 fceb 	bl	8000ad0 <__aeabi_fsub>
 800c0fa:	4601      	mov	r1, r0
 800c0fc:	f7f4 fea6 	bl	8000e4c <__aeabi_fdiv>
 800c100:	e7f0      	b.n	800c0e4 <__ieee754_sqrtf+0x20>
 800c102:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800c106:	d03c      	beq.n	800c182 <__ieee754_sqrtf+0xbe>
 800c108:	15c2      	asrs	r2, r0, #23
 800c10a:	2400      	movs	r4, #0
 800c10c:	2019      	movs	r0, #25
 800c10e:	4626      	mov	r6, r4
 800c110:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800c114:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c118:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800c11c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c120:	07d2      	lsls	r2, r2, #31
 800c122:	bf58      	it	pl
 800c124:	005b      	lslpl	r3, r3, #1
 800c126:	106d      	asrs	r5, r5, #1
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	1872      	adds	r2, r6, r1
 800c12c:	429a      	cmp	r2, r3
 800c12e:	bfcf      	iteee	gt
 800c130:	461a      	movgt	r2, r3
 800c132:	1856      	addle	r6, r2, r1
 800c134:	1864      	addle	r4, r4, r1
 800c136:	1a9a      	suble	r2, r3, r2
 800c138:	3801      	subs	r0, #1
 800c13a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800c13e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c142:	d1f2      	bne.n	800c12a <__ieee754_sqrtf+0x66>
 800c144:	b1ba      	cbz	r2, 800c176 <__ieee754_sqrtf+0xb2>
 800c146:	4e15      	ldr	r6, [pc, #84]	@ (800c19c <__ieee754_sqrtf+0xd8>)
 800c148:	4f15      	ldr	r7, [pc, #84]	@ (800c1a0 <__ieee754_sqrtf+0xdc>)
 800c14a:	6830      	ldr	r0, [r6, #0]
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	f7f4 fcbf 	bl	8000ad0 <__aeabi_fsub>
 800c152:	f8d6 8000 	ldr.w	r8, [r6]
 800c156:	4601      	mov	r1, r0
 800c158:	4640      	mov	r0, r8
 800c15a:	f7f4 ff6b 	bl	8001034 <__aeabi_fcmple>
 800c15e:	b150      	cbz	r0, 800c176 <__ieee754_sqrtf+0xb2>
 800c160:	6830      	ldr	r0, [r6, #0]
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	f7f4 fcb6 	bl	8000ad4 <__addsf3>
 800c168:	6836      	ldr	r6, [r6, #0]
 800c16a:	4601      	mov	r1, r0
 800c16c:	4630      	mov	r0, r6
 800c16e:	f7f4 ff57 	bl	8001020 <__aeabi_fcmplt>
 800c172:	b170      	cbz	r0, 800c192 <__ieee754_sqrtf+0xce>
 800c174:	3402      	adds	r4, #2
 800c176:	1064      	asrs	r4, r4, #1
 800c178:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800c17c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800c180:	e7b1      	b.n	800c0e6 <__ieee754_sqrtf+0x22>
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	0218      	lsls	r0, r3, #8
 800c186:	460a      	mov	r2, r1
 800c188:	f101 0101 	add.w	r1, r1, #1
 800c18c:	d5f9      	bpl.n	800c182 <__ieee754_sqrtf+0xbe>
 800c18e:	4252      	negs	r2, r2
 800c190:	e7bb      	b.n	800c10a <__ieee754_sqrtf+0x46>
 800c192:	3401      	adds	r4, #1
 800c194:	f024 0401 	bic.w	r4, r4, #1
 800c198:	e7ed      	b.n	800c176 <__ieee754_sqrtf+0xb2>
 800c19a:	bf00      	nop
 800c19c:	0800c6ec 	.word	0x0800c6ec
 800c1a0:	0800c6e8 	.word	0x0800c6e8

0800c1a4 <_init>:
 800c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a6:	bf00      	nop
 800c1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1aa:	bc08      	pop	{r3}
 800c1ac:	469e      	mov	lr, r3
 800c1ae:	4770      	bx	lr

0800c1b0 <_fini>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	bf00      	nop
 800c1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1b6:	bc08      	pop	{r3}
 800c1b8:	469e      	mov	lr, r3
 800c1ba:	4770      	bx	lr
