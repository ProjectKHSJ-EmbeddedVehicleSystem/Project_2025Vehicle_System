
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005484  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005594  08005594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f0  080055f0  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080055f0  080055f0  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080055f0  080055f0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f0  080055f0  000065f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055f4  080055f4  000065f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080055f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001608  20000010  08005608  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001618  08005608  00007618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b8d  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a17  00000000  00000000  00017bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0001a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cea  00000000  00000000  0001b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018616  00000000  00000000  0001c342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121a0  00000000  00000000  00034958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091fef  00000000  00000000  00046af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8ae7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000448c  00000000  00000000  000d8b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000dcfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800557c 	.word	0x0800557c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800557c 	.word	0x0800557c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a07      	ldr	r2, [pc, #28]	@ (80001ac <vApplicationGetTimerTaskMemory+0x2c>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a06      	ldr	r2, [pc, #24]	@ (80001b0 <vApplicationGetTimerTaskMemory+0x30>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800019e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000280 	.word	0x20000280
 80001b0:	200002d4 	.word	0x200002d4

080001b4 <Force_NoRemap_TIM3>:
static void MotorTask(void *arg);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static inline void Force_NoRemap_TIM3(void){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 80001ba:	4b0b      	ldr	r3, [pc, #44]	@ (80001e8 <Force_NoRemap_TIM3+0x34>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a0a      	ldr	r2, [pc, #40]	@ (80001e8 <Force_NoRemap_TIM3+0x34>)
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	6193      	str	r3, [r2, #24]
 80001c6:	4b08      	ldr	r3, [pc, #32]	@ (80001e8 <Force_NoRemap_TIM3+0x34>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	f003 0301 	and.w	r3, r3, #1
 80001ce:	607b      	str	r3, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]
  AFIO->MAPR &= ~(AFIO_MAPR_TIM3_REMAP); // 00 = No Remap → CH3=PB0
 80001d2:	4b06      	ldr	r3, [pc, #24]	@ (80001ec <Force_NoRemap_TIM3+0x38>)
 80001d4:	685b      	ldr	r3, [r3, #4]
 80001d6:	4a05      	ldr	r2, [pc, #20]	@ (80001ec <Force_NoRemap_TIM3+0x38>)
 80001d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001dc:	6053      	str	r3, [r2, #4]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	40021000 	.word	0x40021000
 80001ec:	40010000 	.word	0x40010000

080001f0 <Motor_SetDuty>:

/* ENA=PWM(TIM3_CH3), IN1/IN2=방향 GPIO */
static inline void Motor_SetDuty(uint16_t d){
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	80fb      	strh	r3, [r7, #6]
  if (d > PWM_MAX) d = PWM_MAX;
 80001fa:	88fb      	ldrh	r3, [r7, #6]
 80001fc:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000200:	d902      	bls.n	8000208 <Motor_SetDuty+0x18>
 8000202:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8000206:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, d);
 8000208:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <Motor_SetDuty+0x34>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	88fa      	ldrh	r2, [r7, #6]
 800020e:	63da      	str	r2, [r3, #60]	@ 0x3c
  g_pwm = d;
 8000210:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000214:	4b04      	ldr	r3, [pc, #16]	@ (8000228 <Motor_SetDuty+0x38>)
 8000216:	801a      	strh	r2, [r3, #0]
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	200006d4 	.word	0x200006d4
 8000228:	20000772 	.word	0x20000772

0800022c <Motor_Fwd>:
static inline void Motor_Fwd(void){  // IN1=1, IN2=0
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	4805      	ldr	r0, [pc, #20]	@ (800024c <Motor_Fwd+0x20>)
 8000236:	f001 f8cc 	bl	80013d2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000240:	4802      	ldr	r0, [pc, #8]	@ (800024c <Motor_Fwd+0x20>)
 8000242:	f001 f8c6 	bl	80013d2 <HAL_GPIO_WritePin>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010c00 	.word	0x40010c00

08000250 <Motor_Bck>:
static inline void Motor_Bck(void){  // IN1=0, IN2=1
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	2104      	movs	r1, #4
 8000258:	4805      	ldr	r0, [pc, #20]	@ (8000270 <Motor_Bck+0x20>)
 800025a:	f001 f8ba 	bl	80013d2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000264:	4802      	ldr	r0, [pc, #8]	@ (8000270 <Motor_Bck+0x20>)
 8000266:	f001 f8b4 	bl	80013d2 <HAL_GPIO_WritePin>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010c00 	.word	0x40010c00

08000274 <Motor_Stop>:
static inline void Motor_Stop(void){ // 프리휠 + 듀티 0
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  Motor_SetDuty(0);
 8000278:	2000      	movs	r0, #0
 800027a:	f7ff ffb9 	bl	80001f0 <Motor_SetDuty>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_11, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	f640 0104 	movw	r1, #2052	@ 0x804
 8000284:	4802      	ldr	r0, [pc, #8]	@ (8000290 <Motor_Stop+0x1c>)
 8000286:	f001 f8a4 	bl	80013d2 <HAL_GPIO_WritePin>
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40010c00 	.word	0x40010c00

08000294 <ReadGear_HoldPrev>:

/* 기어 입력: PC8=FWD(LOW), PC6=BACK(LOW) */
static inline gear_t ReadGear_HoldPrev(gear_t prev)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
  GPIO_PinState p8 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8); // FWD (LOW=선택)
 800029e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a2:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <ReadGear_HoldPrev+0x64>)
 80002a4:	f001 f87e 	bl	80013a4 <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	73fb      	strb	r3, [r7, #15]
  GPIO_PinState p6 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); // BACK(LOW=선택)
 80002ac:	2140      	movs	r1, #64	@ 0x40
 80002ae:	4812      	ldr	r0, [pc, #72]	@ (80002f8 <ReadGear_HoldPrev+0x64>)
 80002b0:	f001 f878 	bl	80013a4 <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	73bb      	strb	r3, [r7, #14]

  if (p8 == GPIO_PIN_RESET && p6 == GPIO_PIN_SET)  return GEAR_FWD;
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d104      	bne.n	80002c8 <ReadGear_HoldPrev+0x34>
 80002be:	7bbb      	ldrb	r3, [r7, #14]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d101      	bne.n	80002c8 <ReadGear_HoldPrev+0x34>
 80002c4:	2301      	movs	r3, #1
 80002c6:	e012      	b.n	80002ee <ReadGear_HoldPrev+0x5a>
  if (p6 == GPIO_PIN_RESET && p8 == GPIO_PIN_SET)  return GEAR_BACK;
 80002c8:	7bbb      	ldrb	r3, [r7, #14]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d105      	bne.n	80002da <ReadGear_HoldPrev+0x46>
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d102      	bne.n	80002da <ReadGear_HoldPrev+0x46>
 80002d4:	f04f 33ff 	mov.w	r3, #4294967295
 80002d8:	e009      	b.n	80002ee <ReadGear_HoldPrev+0x5a>
  if (p8 == GPIO_PIN_SET   && p6 == GPIO_PIN_SET)  return GEAR_NEUTRAL;
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d104      	bne.n	80002ea <ReadGear_HoldPrev+0x56>
 80002e0:	7bbb      	ldrb	r3, [r7, #14]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d101      	bne.n	80002ea <ReadGear_HoldPrev+0x56>
 80002e6:	2300      	movs	r3, #0
 80002e8:	e001      	b.n	80002ee <ReadGear_HoldPrev+0x5a>
  return prev;
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40011000 	.word	0x40011000

080002fc <BtnReleaseTimerCb>:

/* 버튼 해제(one-shot) 폴링 타이머 */
static void BtnReleaseTimerCb(TimerHandle_t xTimer) {
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b089      	sub	sp, #36	@ 0x24
 8000300:	af02      	add	r7, sp, #8
 8000302:	6078      	str	r0, [r7, #4]
  (void)xTimer;
  static uint32_t highStart = 0;
  TickType_t now = xTaskGetTickCount();
 8000304:	f003 fc16 	bl	8003b34 <xTaskGetTickCount>
 8000308:	6178      	str	r0, [r7, #20]

  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 800030a:	2120      	movs	r1, #32
 800030c:	481c      	ldr	r0, [pc, #112]	@ (8000380 <BtnReleaseTimerCb+0x84>)
 800030e:	f001 f849 	bl	80013a4 <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	2b01      	cmp	r3, #1
 8000316:	d120      	bne.n	800035a <BtnReleaseTimerCb+0x5e>
    if (highStart == 0) highStart = now;
 8000318:	4b1a      	ldr	r3, [pc, #104]	@ (8000384 <BtnReleaseTimerCb+0x88>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d102      	bne.n	8000326 <BtnReleaseTimerCb+0x2a>
 8000320:	4a18      	ldr	r2, [pc, #96]	@ (8000384 <BtnReleaseTimerCb+0x88>)
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	6013      	str	r3, [r2, #0]
    if ((now - highStart) >= pdMS_TO_TICKS(DEBOUNCE_MS_RELEASE)) {
 8000326:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <BtnReleaseTimerCb+0x88>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	697a      	ldr	r2, [r7, #20]
 800032c:	1ad3      	subs	r3, r2, r3
 800032e:	2b27      	cmp	r3, #39	@ 0x27
 8000330:	d916      	bls.n	8000360 <BtnReleaseTimerCb+0x64>
      evt_t e = { .type = EVT_BTN_UP, .tick = now, .pin = GPIO_PIN_5, .level = 1 };
 8000332:	2302      	movs	r3, #2
 8000334:	723b      	strb	r3, [r7, #8]
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	2320      	movs	r3, #32
 800033c:	823b      	strh	r3, [r7, #16]
 800033e:	2301      	movs	r3, #1
 8000340:	74bb      	strb	r3, [r7, #18]
      xQueueSend(qEvt, &e, 0);
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <BtnReleaseTimerCb+0x8c>)
 8000344:	6818      	ldr	r0, [r3, #0]
 8000346:	f107 0108 	add.w	r1, r7, #8
 800034a:	2300      	movs	r3, #0
 800034c:	2200      	movs	r2, #0
 800034e:	f002 fbaf 	bl	8002ab0 <xQueueGenericSend>
      highStart = 0;
 8000352:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <BtnReleaseTimerCb+0x88>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	e00e      	b.n	8000378 <BtnReleaseTimerCb+0x7c>
      return; // one-shot
    }
  } else {
    highStart = 0;
 800035a:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <BtnReleaseTimerCb+0x88>)
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
  }
  xTimerStart(tBtnRelease, 0);
 8000360:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <BtnReleaseTimerCb+0x90>)
 8000362:	681c      	ldr	r4, [r3, #0]
 8000364:	f003 fbe6 	bl	8003b34 <xTaskGetTickCount>
 8000368:	4602      	mov	r2, r0
 800036a:	2300      	movs	r3, #0
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2300      	movs	r3, #0
 8000370:	2101      	movs	r1, #1
 8000372:	4620      	mov	r0, r4
 8000374:	f004 f9f4 	bl	8004760 <xTimerGenericCommand>
}
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	bd90      	pop	{r4, r7, pc}
 800037e:	bf00      	nop
 8000380:	40011000 	.word	0x40011000
 8000384:	2000077c 	.word	0x2000077c
 8000388:	20000764 	.word	0x20000764
 800038c:	20000768 	.word	0x20000768

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	@ 0x28
 8000394:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000396:	f000 fd11 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039a:	f000 f8b9 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039e:	f000 f97d 	bl	800069c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003a2:	f000 f955 	bl	8000650 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80003a6:	f000 f8f9 	bl	800059c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* TIM3 No-Remap 강제 (CH3=PB0) */
  Force_NoRemap_TIM3();
 80003aa:	f7ff ff03 	bl	80001b4 <Force_NoRemap_TIM3>

  /* PB0를 AF_PP로 한 번 더 보증(보드/생성옵션에 따라 안전용) */
  {
    GPIO_InitTypeDef gi = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	4b47      	ldr	r3, [pc, #284]	@ (80004d8 <main+0x148>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a46      	ldr	r2, [pc, #280]	@ (80004d8 <main+0x148>)
 80003c0:	f043 0308 	orr.w	r3, r3, #8
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b44      	ldr	r3, [pc, #272]	@ (80004d8 <main+0x148>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0308 	and.w	r3, r3, #8
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]
    gi.Pin   = GPIO_PIN_0;
 80003d2:	2301      	movs	r3, #1
 80003d4:	607b      	str	r3, [r7, #4]
    gi.Mode  = GPIO_MODE_AF_PP;
 80003d6:	2302      	movs	r3, #2
 80003d8:	60bb      	str	r3, [r7, #8]
    gi.Pull  = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
    gi.Speed = GPIO_SPEED_FREQ_HIGH;
 80003de:	2303      	movs	r3, #3
 80003e0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &gi);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4619      	mov	r1, r3
 80003e6:	483d      	ldr	r0, [pc, #244]	@ (80004dc <main+0x14c>)
 80003e8:	f000 fe58 	bl	800109c <HAL_GPIO_Init>
  }

  /* 초기 기어 반영 */
  g_gear = ReadGear_HoldPrev(GEAR_NEUTRAL);
 80003ec:	2000      	movs	r0, #0
 80003ee:	f7ff ff51 	bl	8000294 <ReadGear_HoldPrev>
 80003f2:	4603      	mov	r3, r0
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b3a      	ldr	r3, [pc, #232]	@ (80004e0 <main+0x150>)
 80003f8:	701a      	strb	r2, [r3, #0]

  /* PWM 시작(CH3) & 모터 정지 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80003fa:	2108      	movs	r1, #8
 80003fc:	4839      	ldr	r0, [pc, #228]	@ (80004e4 <main+0x154>)
 80003fe:	f001 fc79 	bl	8001cf4 <HAL_TIM_PWM_Start>
  Motor_Stop();
 8000402:	f7ff ff37 	bl	8000274 <Motor_Stop>
  g_last_step_ms = HAL_GetTick();
 8000406:	f000 fd31 	bl	8000e6c <HAL_GetTick>
 800040a:	4603      	mov	r3, r0
 800040c:	4a36      	ldr	r2, [pc, #216]	@ (80004e8 <main+0x158>)
 800040e:	6013      	str	r3, [r2, #0]

  /* RTOS 객체 생성 */
  qEvt = xQueueCreate(16, sizeof(evt_t));
 8000410:	2200      	movs	r2, #0
 8000412:	210c      	movs	r1, #12
 8000414:	2010      	movs	r0, #16
 8000416:	f002 fabe 	bl	8002996 <xQueueGenericCreate>
 800041a:	4603      	mov	r3, r0
 800041c:	4a33      	ldr	r2, [pc, #204]	@ (80004ec <main+0x15c>)
 800041e:	6013      	str	r3, [r2, #0]
  configASSERT(qEvt != NULL);
 8000420:	4b32      	ldr	r3, [pc, #200]	@ (80004ec <main+0x15c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d10b      	bne.n	8000440 <main+0xb0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800042c:	f383 8811 	msr	BASEPRI, r3
 8000430:	f3bf 8f6f 	isb	sy
 8000434:	f3bf 8f4f 	dsb	sy
 8000438:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <main+0xac>

  tBtnRelease = xTimerCreate("btnRel",
 8000440:	4b2b      	ldr	r3, [pc, #172]	@ (80004f0 <main+0x160>)
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2300      	movs	r3, #0
 8000446:	2200      	movs	r2, #0
 8000448:	210a      	movs	r1, #10
 800044a:	482a      	ldr	r0, [pc, #168]	@ (80004f4 <main+0x164>)
 800044c:	f004 f92a 	bl	80046a4 <xTimerCreate>
 8000450:	4603      	mov	r3, r0
 8000452:	4a29      	ldr	r2, [pc, #164]	@ (80004f8 <main+0x168>)
 8000454:	6013      	str	r3, [r2, #0]
                             pdMS_TO_TICKS(RELEASE_POLL_MS),
                             pdFALSE, NULL, BtnReleaseTimerCb);
  configASSERT(tBtnRelease != NULL);
 8000456:	4b28      	ldr	r3, [pc, #160]	@ (80004f8 <main+0x168>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10b      	bne.n	8000476 <main+0xe6>
	__asm volatile
 800045e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000462:	f383 8811 	msr	BASEPRI, r3
 8000466:	f3bf 8f6f 	isb	sy
 800046a:	f3bf 8f4f 	dsb	sy
 800046e:	61bb      	str	r3, [r7, #24]
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	e7fd      	b.n	8000472 <main+0xe2>

  // 뮤텍스 생성
  xMotorMutex = xSemaphoreCreateMutex();
 8000476:	2001      	movs	r0, #1
 8000478:	f002 fb01 	bl	8002a7e <xQueueCreateMutex>
 800047c:	4603      	mov	r3, r0
 800047e:	4a1f      	ldr	r2, [pc, #124]	@ (80004fc <main+0x16c>)
 8000480:	6013      	str	r3, [r2, #0]
  configASSERT(xMotorMutex != NULL);
 8000482:	4b1e      	ldr	r3, [pc, #120]	@ (80004fc <main+0x16c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d10b      	bne.n	80004a2 <main+0x112>
	__asm volatile
 800048a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800048e:	f383 8811 	msr	BASEPRI, r3
 8000492:	f3bf 8f6f 	isb	sy
 8000496:	f3bf 8f4f 	dsb	sy
 800049a:	617b      	str	r3, [r7, #20]
}
 800049c:	bf00      	nop
 800049e:	bf00      	nop
 80004a0:	e7fd      	b.n	800049e <main+0x10e>

  /* 태스크 생성 */
  xTaskCreate(ControlTask, "ctrl", 320, NULL, tskIDLE_PRIORITY + 3, NULL);
 80004a2:	2300      	movs	r3, #0
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2303      	movs	r3, #3
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	2300      	movs	r3, #0
 80004ac:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80004b0:	4913      	ldr	r1, [pc, #76]	@ (8000500 <main+0x170>)
 80004b2:	4814      	ldr	r0, [pc, #80]	@ (8000504 <main+0x174>)
 80004b4:	f003 f872 	bl	800359c <xTaskCreate>
  xTaskCreate(MotorTask,   "motor",256, NULL, tskIDLE_PRIORITY + 2, NULL);
 80004b8:	2300      	movs	r3, #0
 80004ba:	9301      	str	r3, [sp, #4]
 80004bc:	2302      	movs	r3, #2
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2300      	movs	r3, #0
 80004c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004c6:	4910      	ldr	r1, [pc, #64]	@ (8000508 <main+0x178>)
 80004c8:	4810      	ldr	r0, [pc, #64]	@ (800050c <main+0x17c>)
 80004ca:	f003 f867 	bl	800359c <xTaskCreate>

  /* 스케줄러 시작 */
  vTaskStartScheduler();
 80004ce:	f003 fa1d 	bl	800390c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d2:	bf00      	nop
 80004d4:	e7fd      	b.n	80004d2 <main+0x142>
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	20000778 	.word	0x20000778
 80004e4:	200006d4 	.word	0x200006d4
 80004e8:	20000774 	.word	0x20000774
 80004ec:	20000764 	.word	0x20000764
 80004f0:	080002fd 	.word	0x080002fd
 80004f4:	08005594 	.word	0x08005594
 80004f8:	20000768 	.word	0x20000768
 80004fc:	2000076c 	.word	0x2000076c
 8000500:	0800559c 	.word	0x0800559c
 8000504:	080008e1 	.word	0x080008e1
 8000508:	080055a4 	.word	0x080055a4
 800050c:	08000a31 	.word	0x08000a31

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b090      	sub	sp, #64	@ 0x40
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0318 	add.w	r3, r7, #24
 800051a:	2228      	movs	r2, #40	@ 0x28
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f004 fff2 	bl	8005508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000536:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800053a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2302      	movs	r3, #2
 8000546:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800054c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	4618      	mov	r0, r3
 800055a:	f000 ff6b 	bl	8001434 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000564:	f000 faf4 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056c:	2302      	movs	r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2102      	movs	r1, #2
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f9d8 	bl	8001938 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800058e:	f000 fadf 	bl	8000b50 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3740      	adds	r7, #64	@ 0x40
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005be:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <MX_TIM3_Init+0xac>)
 80005c0:	4a22      	ldr	r2, [pc, #136]	@ (800064c <MX_TIM3_Init+0xb0>)
 80005c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <MX_TIM3_Init+0xac>)
 80005c6:	2247      	movs	r2, #71	@ 0x47
 80005c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <MX_TIM3_Init+0xac>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <MX_TIM3_Init+0xac>)
 80005d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <MX_TIM3_Init+0xac>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005de:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_TIM3_Init+0xac>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005e4:	4818      	ldr	r0, [pc, #96]	@ (8000648 <MX_TIM3_Init+0xac>)
 80005e6:	f001 fb35 	bl	8001c54 <HAL_TIM_PWM_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80005f0:	f000 faae 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4619      	mov	r1, r3
 8000602:	4811      	ldr	r0, [pc, #68]	@ (8000648 <MX_TIM3_Init+0xac>)
 8000604:	f001 fef4 	bl	80023f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800060e:	f000 fa9f 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000612:	2360      	movs	r3, #96	@ 0x60
 8000614:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2208      	movs	r2, #8
 8000626:	4619      	mov	r1, r3
 8000628:	4807      	ldr	r0, [pc, #28]	@ (8000648 <MX_TIM3_Init+0xac>)
 800062a:	f001 fc05 	bl	8001e38 <HAL_TIM_PWM_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000634:	f000 fa8c 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <MX_TIM3_Init+0xac>)
 800063a:	f000 fae5 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	@ 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200006d4 	.word	0x200006d4
 800064c:	40000400 	.word	0x40000400

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_USART2_UART_Init+0x44>)
 8000656:	4a10      	ldr	r2, [pc, #64]	@ (8000698 <MX_USART2_UART_Init+0x48>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USART2_UART_Init+0x44>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_USART2_UART_Init+0x44>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_USART2_UART_Init+0x44>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_USART2_UART_Init+0x44>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_USART2_UART_Init+0x44>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_USART2_UART_Init+0x44>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_USART2_UART_Init+0x44>)
 8000682:	f001 ff13 	bl	80024ac <HAL_UART_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_USART2_UART_Init+0x40>
  {
    Error_Handler();
 800068c:	f000 fa60 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000071c 	.word	0x2000071c
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b0:	4b48      	ldr	r3, [pc, #288]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a47      	ldr	r2, [pc, #284]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b45      	ldr	r3, [pc, #276]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0310 	and.w	r3, r3, #16
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c8:	4b42      	ldr	r3, [pc, #264]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a41      	ldr	r2, [pc, #260]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b3f      	ldr	r3, [pc, #252]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0320 	and.w	r3, r3, #32
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b3c      	ldr	r3, [pc, #240]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a3b      	ldr	r2, [pc, #236]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b39      	ldr	r3, [pc, #228]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b36      	ldr	r3, [pc, #216]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a35      	ldr	r2, [pc, #212]	@ (80007d4 <MX_GPIO_Init+0x138>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b33      	ldr	r3, [pc, #204]	@ (80007d4 <MX_GPIO_Init+0x138>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2120      	movs	r1, #32
 8000714:	4830      	ldr	r0, [pc, #192]	@ (80007d8 <MX_GPIO_Init+0x13c>)
 8000716:	f000 fe5c 	bl	80013d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_11, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f640 0104 	movw	r1, #2052	@ 0x804
 8000720:	482e      	ldr	r0, [pc, #184]	@ (80007dc <MX_GPIO_Init+0x140>)
 8000722:	f000 fe56 	bl	80013d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000726:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072c:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <MX_GPIO_Init+0x144>)
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	482a      	ldr	r0, [pc, #168]	@ (80007e4 <MX_GPIO_Init+0x148>)
 800073c:	f000 fcae 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000740:	2320      	movs	r3, #32
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	4820      	ldr	r0, [pc, #128]	@ (80007d8 <MX_GPIO_Init+0x13c>)
 8000758:	f000 fca0 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800075c:	2320      	movs	r3, #32
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000760:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	481d      	ldr	r0, [pc, #116]	@ (80007e4 <MX_GPIO_Init+0x148>)
 8000770:	f000 fc94 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 8000774:	f640 0304 	movw	r3, #2052	@ 0x804
 8000778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2302      	movs	r3, #2
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	4813      	ldr	r0, [pc, #76]	@ (80007dc <MX_GPIO_Init+0x140>)
 800078e:	f000 fc85 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000792:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_GPIO_Init+0x150>)
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079c:	2301      	movs	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	480f      	ldr	r0, [pc, #60]	@ (80007e4 <MX_GPIO_Init+0x148>)
 80007a8:	f000 fc78 	bl	800109c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2105      	movs	r1, #5
 80007b0:	2017      	movs	r0, #23
 80007b2:	f000 fc3c 	bl	800102e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007b6:	2017      	movs	r0, #23
 80007b8:	f000 fc55 	bl	8001066 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2105      	movs	r1, #5
 80007c0:	2028      	movs	r0, #40	@ 0x28
 80007c2:	f000 fc34 	bl	800102e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007c6:	2028      	movs	r0, #40	@ 0x28
 80007c8:	f000 fc4d 	bl	8001066 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010800 	.word	0x40010800
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	10110000 	.word	0x10110000
 80007e4:	40011000 	.word	0x40011000
 80007e8:	10210000 	.word	0x10210000
 80007ec:	10310000 	.word	0x10310000

080007f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/* EXTI 콜백: 버튼/기어 이벤트를 큐로 보냄 */
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b08d      	sub	sp, #52	@ 0x34
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
  BaseType_t hpw = pdFALSE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  TickType_t now = xTaskGetTickCountFromISR();
 80007fe:	f003 f9a7 	bl	8003b50 <xTaskGetTickCountFromISR>
 8000802:	6278      	str	r0, [r7, #36]	@ 0x24

  if (pin == GPIO_PIN_5) {  // 버튼: 눌림(FALLING)
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	2b20      	cmp	r3, #32
 8000808:	d12e      	bne.n	8000868 <HAL_GPIO_EXTI_Callback+0x78>
    static TickType_t lastPress = 0;
    if ((now - lastPress) < pdMS_TO_TICKS(DEBOUNCE_MS_PRESS)) return;
 800080a:	4b30      	ldr	r3, [pc, #192]	@ (80008cc <HAL_GPIO_EXTI_Callback+0xdc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	2b3b      	cmp	r3, #59	@ 0x3b
 8000814:	d956      	bls.n	80008c4 <HAL_GPIO_EXTI_Callback+0xd4>
    lastPress = now;
 8000816:	4a2d      	ldr	r2, [pc, #180]	@ (80008cc <HAL_GPIO_EXTI_Callback+0xdc>)
 8000818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081a:	6013      	str	r3, [r2, #0]

    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_RESET) {
 800081c:	2120      	movs	r1, #32
 800081e:	482c      	ldr	r0, [pc, #176]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000820:	f000 fdc0 	bl	80013a4 <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d140      	bne.n	80008ac <HAL_GPIO_EXTI_Callback+0xbc>
      evt_t e = { .type = EVT_BTN_DOWN, .tick = now, .pin = GPIO_PIN_5, .level = 0 };
 800082a:	2301      	movs	r3, #1
 800082c:	753b      	strb	r3, [r7, #20]
 800082e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	2320      	movs	r3, #32
 8000834:	83bb      	strh	r3, [r7, #28]
 8000836:	2300      	movs	r3, #0
 8000838:	77bb      	strb	r3, [r7, #30]
      xQueueSendFromISR(qEvt, &e, &hpw);
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	f107 0220 	add.w	r2, r7, #32
 8000842:	f107 0114 	add.w	r1, r7, #20
 8000846:	2300      	movs	r3, #0
 8000848:	f002 fa34 	bl	8002cb4 <xQueueGenericSendFromISR>
      xTimerStartFromISR(tBtnRelease, &hpw); // 해제 감시 시작
 800084c:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800084e:	681c      	ldr	r4, [r3, #0]
 8000850:	f003 f97e 	bl	8003b50 <xTaskGetTickCountFromISR>
 8000854:	4602      	mov	r2, r0
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2100      	movs	r1, #0
 800085c:	9100      	str	r1, [sp, #0]
 800085e:	2106      	movs	r1, #6
 8000860:	4620      	mov	r0, r4
 8000862:	f003 ff7d 	bl	8004760 <xTimerGenericCommand>
 8000866:	e021      	b.n	80008ac <HAL_GPIO_EXTI_Callback+0xbc>
    }
  }
  else if (pin == GPIO_PIN_6 || pin == GPIO_PIN_8) { // 기어 엣지
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	2b40      	cmp	r3, #64	@ 0x40
 800086c:	d003      	beq.n	8000876 <HAL_GPIO_EXTI_Callback+0x86>
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000874:	d11a      	bne.n	80008ac <HAL_GPIO_EXTI_Callback+0xbc>
    evt_t e = { .type = EVT_GEAR_EDGE, .tick = now, .pin = pin,
 8000876:	2303      	movs	r3, #3
 8000878:	723b      	strb	r3, [r7, #8]
 800087a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	823b      	strh	r3, [r7, #16]
                .level = (HAL_GPIO_ReadPin(GPIOC, pin)==GPIO_PIN_SET) };
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	4619      	mov	r1, r3
 8000886:	4812      	ldr	r0, [pc, #72]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000888:	f000 fd8c 	bl	80013a4 <HAL_GPIO_ReadPin>
 800088c:	4603      	mov	r3, r0
 800088e:	2b01      	cmp	r3, #1
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
    evt_t e = { .type = EVT_GEAR_EDGE, .tick = now, .pin = pin,
 8000898:	74bb      	strb	r3, [r7, #18]
    xQueueSendFromISR(qEvt, &e, &hpw);
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	f107 0220 	add.w	r2, r7, #32
 80008a2:	f107 0108 	add.w	r1, r7, #8
 80008a6:	2300      	movs	r3, #0
 80008a8:	f002 fa04 	bl	8002cb4 <xQueueGenericSendFromISR>
  }
  portYIELD_FROM_ISR(hpw);
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d009      	beq.n	80008c6 <HAL_GPIO_EXTI_Callback+0xd6>
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <HAL_GPIO_EXTI_Callback+0xec>)
 80008b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	f3bf 8f6f 	isb	sy
 80008c2:	e000      	b.n	80008c6 <HAL_GPIO_EXTI_Callback+0xd6>
    if ((now - lastPress) < pdMS_TO_TICKS(DEBOUNCE_MS_PRESS)) return;
 80008c4:	bf00      	nop
}
 80008c6:	372c      	adds	r7, #44	@ 0x2c
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	20000780 	.word	0x20000780
 80008d0:	40011000 	.word	0x40011000
 80008d4:	20000764 	.word	0x20000764
 80008d8:	20000768 	.word	0x20000768
 80008dc:	e000ed04 	.word	0xe000ed04

080008e0 <ControlTask>:

/* 컨트롤 태스크 */
static void ControlTask(void *arg)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  (void)arg;
  evt_t e;

  for (;;) {
    if (xQueueReceive(qEvt, &e, portMAX_DELAY) != pdTRUE) continue;
 80008e8:	4b4b      	ldr	r3, [pc, #300]	@ (8000a18 <ControlTask+0x138>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f107 0108 	add.w	r1, r7, #8
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fa7b 	bl	8002df0 <xQueueReceive>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	f040 8087 	bne.w	8000a10 <ControlTask+0x130>

    switch (e.type) {
 8000902:	7a3b      	ldrb	r3, [r7, #8]
 8000904:	2b03      	cmp	r3, #3
 8000906:	d056      	beq.n	80009b6 <ControlTask+0xd6>
 8000908:	2b03      	cmp	r3, #3
 800090a:	f300 8083 	bgt.w	8000a14 <ControlTask+0x134>
 800090e:	2b01      	cmp	r3, #1
 8000910:	d002      	beq.n	8000918 <ControlTask+0x38>
 8000912:	2b02      	cmp	r3, #2
 8000914:	d02f      	beq.n	8000976 <ControlTask+0x96>
          }
        }
        xSemaphoreGive(xMotorMutex);
        break;
      }
      default: break;
 8000916:	e07d      	b.n	8000a14 <ControlTask+0x134>
        xSemaphoreTake(xMotorMutex, portMAX_DELAY);
 8000918:	4b40      	ldr	r3, [pc, #256]	@ (8000a1c <ControlTask+0x13c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fb47 	bl	8002fb4 <xQueueSemaphoreTake>
        if (!g_pressed) {
 8000926:	4b3e      	ldr	r3, [pc, #248]	@ (8000a20 <ControlTask+0x140>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d11b      	bne.n	8000966 <ControlTask+0x86>
          g_pressed = 1;
 800092e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a20 <ControlTask+0x140>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
          g_last_step_ms = HAL_GetTick();
 8000934:	f000 fa9a 	bl	8000e6c <HAL_GetTick>
 8000938:	4603      	mov	r3, r0
 800093a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a24 <ControlTask+0x144>)
 800093c:	6013      	str	r3, [r2, #0]
          HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800093e:	2201      	movs	r2, #1
 8000940:	2120      	movs	r1, #32
 8000942:	4839      	ldr	r0, [pc, #228]	@ (8000a28 <ControlTask+0x148>)
 8000944:	f000 fd45 	bl	80013d2 <HAL_GPIO_WritePin>
          if (g_gear != GEAR_NEUTRAL) {
 8000948:	4b38      	ldr	r3, [pc, #224]	@ (8000a2c <ControlTask+0x14c>)
 800094a:	f993 3000 	ldrsb.w	r3, [r3]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d009      	beq.n	8000966 <ControlTask+0x86>
            if (g_gear == GEAR_FWD) Motor_Fwd(); else Motor_Bck();
 8000952:	4b36      	ldr	r3, [pc, #216]	@ (8000a2c <ControlTask+0x14c>)
 8000954:	f993 3000 	ldrsb.w	r3, [r3]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d102      	bne.n	8000962 <ControlTask+0x82>
 800095c:	f7ff fc66 	bl	800022c <Motor_Fwd>
 8000960:	e001      	b.n	8000966 <ControlTask+0x86>
 8000962:	f7ff fc75 	bl	8000250 <Motor_Bck>
        xSemaphoreGive(xMotorMutex);
 8000966:	4b2d      	ldr	r3, [pc, #180]	@ (8000a1c <ControlTask+0x13c>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	2300      	movs	r3, #0
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	f002 f89e 	bl	8002ab0 <xQueueGenericSend>
        break;
 8000974:	e04f      	b.n	8000a16 <ControlTask+0x136>
        xSemaphoreTake(xMotorMutex, portMAX_DELAY);
 8000976:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <ControlTask+0x13c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f04f 31ff 	mov.w	r1, #4294967295
 800097e:	4618      	mov	r0, r3
 8000980:	f002 fb18 	bl	8002fb4 <xQueueSemaphoreTake>
        if (g_pressed) {
 8000984:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <ControlTask+0x140>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00c      	beq.n	80009a6 <ControlTask+0xc6>
          g_pressed = 0;
 800098c:	4b24      	ldr	r3, [pc, #144]	@ (8000a20 <ControlTask+0x140>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
          g_last_step_ms = HAL_GetTick(); // 타이밍 변수 초기화 추가
 8000992:	f000 fa6b 	bl	8000e6c <HAL_GetTick>
 8000996:	4603      	mov	r3, r0
 8000998:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <ControlTask+0x144>)
 800099a:	6013      	str	r3, [r2, #0]
          HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2120      	movs	r1, #32
 80009a0:	4821      	ldr	r0, [pc, #132]	@ (8000a28 <ControlTask+0x148>)
 80009a2:	f000 fd16 	bl	80013d2 <HAL_GPIO_WritePin>
        xSemaphoreGive(xMotorMutex);
 80009a6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <ControlTask+0x13c>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	f002 f87e 	bl	8002ab0 <xQueueGenericSend>
        break;
 80009b4:	e02f      	b.n	8000a16 <ControlTask+0x136>
        gear_t newg = ReadGear_HoldPrev(g_gear);
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <ControlTask+0x14c>)
 80009b8:	f993 3000 	ldrsb.w	r3, [r3]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fc69 	bl	8000294 <ReadGear_HoldPrev>
 80009c2:	4603      	mov	r3, r0
 80009c4:	75fb      	strb	r3, [r7, #23]
        xSemaphoreTake(xMotorMutex, portMAX_DELAY);
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <ControlTask+0x13c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f04f 31ff 	mov.w	r1, #4294967295
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 faf0 	bl	8002fb4 <xQueueSemaphoreTake>
        if (newg != g_gear) {
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <ControlTask+0x14c>)
 80009d6:	f993 3000 	ldrsb.w	r3, [r3]
 80009da:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d00e      	beq.n	8000a00 <ControlTask+0x120>
          g_gear = newg;
 80009e2:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <ControlTask+0x14c>)
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	7013      	strb	r3, [r2, #0]
          if (g_pressed) {
 80009e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <ControlTask+0x140>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d007      	beq.n	8000a00 <ControlTask+0x120>
            g_pressed = 0;
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <ControlTask+0x140>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
            g_last_step_ms = HAL_GetTick(); // 타이밍 변수 초기화 추가
 80009f6:	f000 fa39 	bl	8000e6c <HAL_GetTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <ControlTask+0x144>)
 80009fe:	6013      	str	r3, [r2, #0]
        xSemaphoreGive(xMotorMutex);
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <ControlTask+0x13c>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	2300      	movs	r3, #0
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f002 f851 	bl	8002ab0 <xQueueGenericSend>
        break;
 8000a0e:	e002      	b.n	8000a16 <ControlTask+0x136>
    if (xQueueReceive(qEvt, &e, portMAX_DELAY) != pdTRUE) continue;
 8000a10:	bf00      	nop
 8000a12:	e769      	b.n	80008e8 <ControlTask+0x8>
      default: break;
 8000a14:	bf00      	nop
    if (xQueueReceive(qEvt, &e, portMAX_DELAY) != pdTRUE) continue;
 8000a16:	e767      	b.n	80008e8 <ControlTask+0x8>
 8000a18:	20000764 	.word	0x20000764
 8000a1c:	2000076c 	.word	0x2000076c
 8000a20:	20000770 	.word	0x20000770
 8000a24:	20000774 	.word	0x20000774
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	20000778 	.word	0x20000778

08000a30 <MotorTask>:
  }
}

/* 모터 램프업/다운 태스크 */
static void MotorTask(void *arg)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  (void)arg;
  const TickType_t period = pdMS_TO_TICKS(10);
 8000a38:	230a      	movs	r3, #10
 8000a3a:	617b      	str	r3, [r7, #20]
  TickType_t last = xTaskGetTickCount();
 8000a3c:	f003 f87a 	bl	8003b34 <xTaskGetTickCount>
 8000a40:	4603      	mov	r3, r0
 8000a42:	60bb      	str	r3, [r7, #8]

  for(;;) {
    xSemaphoreTake(xMotorMutex, portMAX_DELAY);
 8000a44:	4b3d      	ldr	r3, [pc, #244]	@ (8000b3c <MotorTask+0x10c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 fab1 	bl	8002fb4 <xQueueSemaphoreTake>

    // 버튼이 눌려있지 않거나 기어가 중립일 때 -> 감속 또는 정지
    if (!g_pressed || g_gear == GEAR_NEUTRAL) {
 8000a52:	4b3b      	ldr	r3, [pc, #236]	@ (8000b40 <MotorTask+0x110>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d004      	beq.n	8000a64 <MotorTask+0x34>
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b44 <MotorTask+0x114>)
 8000a5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d12c      	bne.n	8000abe <MotorTask+0x8e>
        if (g_pwm > 0) {
 8000a64:	4b38      	ldr	r3, [pc, #224]	@ (8000b48 <MotorTask+0x118>)
 8000a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	dd24      	ble.n	8000ab8 <MotorTask+0x88>
            uint32_t now = HAL_GetTick();
 8000a6e:	f000 f9fd 	bl	8000e6c <HAL_GetTick>
 8000a72:	60f8      	str	r0, [r7, #12]
            if ((now - g_last_step_ms) >= STEP_PERIOD_MS) {
 8000a74:	4b35      	ldr	r3, [pc, #212]	@ (8000b4c <MotorTask+0x11c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	2b22      	cmp	r3, #34	@ 0x22
 8000a7e:	d94d      	bls.n	8000b1c <MotorTask+0xec>
                g_last_step_ms = now;
 8000a80:	4a32      	ldr	r2, [pc, #200]	@ (8000b4c <MotorTask+0x11c>)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6013      	str	r3, [r2, #0]
                g_pwm -= PWM_STEP;
 8000a86:	4b30      	ldr	r3, [pc, #192]	@ (8000b48 <MotorTask+0x118>)
 8000a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	3b08      	subs	r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <MotorTask+0x118>)
 8000a96:	801a      	strh	r2, [r3, #0]
                if (g_pwm < 0) g_pwm = 0;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <MotorTask+0x118>)
 8000a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da02      	bge.n	8000aa8 <MotorTask+0x78>
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MotorTask+0x118>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	801a      	strh	r2, [r3, #0]
                Motor_SetDuty(g_pwm);
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <MotorTask+0x118>)
 8000aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fb9d 	bl	80001f0 <Motor_SetDuty>
        if (g_pwm > 0) {
 8000ab6:	e031      	b.n	8000b1c <MotorTask+0xec>
            }
        } else {
            Motor_Stop();
 8000ab8:	f7ff fbdc 	bl	8000274 <Motor_Stop>
        if (g_pwm > 0) {
 8000abc:	e02e      	b.n	8000b1c <MotorTask+0xec>
        }
    }
    // 버튼이 눌려있고 기어가 중립이 아닐 때 -> 가속
    else {
      if (g_gear == GEAR_FWD) Motor_Fwd(); else Motor_Bck();
 8000abe:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <MotorTask+0x114>)
 8000ac0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d102      	bne.n	8000ace <MotorTask+0x9e>
 8000ac8:	f7ff fbb0 	bl	800022c <Motor_Fwd>
 8000acc:	e001      	b.n	8000ad2 <MotorTask+0xa2>
 8000ace:	f7ff fbbf 	bl	8000250 <Motor_Bck>

      uint32_t now = HAL_GetTick();
 8000ad2:	f000 f9cb 	bl	8000e6c <HAL_GetTick>
 8000ad6:	6138      	str	r0, [r7, #16]
      if ((now - g_last_step_ms) >= STEP_PERIOD_MS) {
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MotorTask+0x11c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b22      	cmp	r3, #34	@ 0x22
 8000ae2:	d91c      	bls.n	8000b1e <MotorTask+0xee>
        g_last_step_ms = now;
 8000ae4:	4a19      	ldr	r2, [pc, #100]	@ (8000b4c <MotorTask+0x11c>)
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	6013      	str	r3, [r2, #0]
        if (g_pwm < START_DUTY)      Motor_SetDuty(START_DUTY);
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MotorTask+0x118>)
 8000aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af0:	2bc7      	cmp	r3, #199	@ 0xc7
 8000af2:	dc03      	bgt.n	8000afc <MotorTask+0xcc>
 8000af4:	20c8      	movs	r0, #200	@ 0xc8
 8000af6:	f7ff fb7b 	bl	80001f0 <Motor_SetDuty>
 8000afa:	e010      	b.n	8000b1e <MotorTask+0xee>
        else if (g_pwm < PWM_MAX)    Motor_SetDuty(g_pwm + PWM_STEP);
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MotorTask+0x118>)
 8000afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b02:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000b06:	da0a      	bge.n	8000b1e <MotorTask+0xee>
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MotorTask+0x118>)
 8000b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	3308      	adds	r3, #8
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fb6b 	bl	80001f0 <Motor_SetDuty>
 8000b1a:	e000      	b.n	8000b1e <MotorTask+0xee>
        if (g_pwm > 0) {
 8000b1c:	bf00      	nop
      }
    }

    xSemaphoreGive(xMotorMutex);
 8000b1e:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <MotorTask+0x10c>)
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	f001 ffc2 	bl	8002ab0 <xQueueGenericSend>
    vTaskDelayUntil(&last, period);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	6979      	ldr	r1, [r7, #20]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 fe6a 	bl	800380c <vTaskDelayUntil>
    xSemaphoreTake(xMotorMutex, portMAX_DELAY);
 8000b38:	e784      	b.n	8000a44 <MotorTask+0x14>
 8000b3a:	bf00      	nop
 8000b3c:	2000076c 	.word	0x2000076c
 8000b40:	20000770 	.word	0x20000770
 8000b44:	20000778 	.word	0x20000778
 8000b48:	20000772 	.word	0x20000772
 8000b4c:	20000774 	.word	0x20000774

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_MspInit+0x68>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_MspInit+0x68>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6193      	str	r3, [r2, #24]
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_MspInit+0x68>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <HAL_MspInit+0x68>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	4a11      	ldr	r2, [pc, #68]	@ (8000bc4 <HAL_MspInit+0x68>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b84:	61d3      	str	r3, [r2, #28]
 8000b86:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <HAL_MspInit+0x68>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	210f      	movs	r1, #15
 8000b96:	f06f 0001 	mvn.w	r0, #1
 8000b9a:	f000 fa48 	bl	800102e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_MspInit+0x6c>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <HAL_MspInit+0x6c>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010000 	.word	0x40010000

08000bcc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a09      	ldr	r2, [pc, #36]	@ (8000c00 <HAL_TIM_PWM_MspInit+0x34>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_TIM_PWM_MspInit+0x38>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a08      	ldr	r2, [pc, #32]	@ (8000c04 <HAL_TIM_PWM_MspInit+0x38>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_TIM_PWM_MspInit+0x38>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40000400 	.word	0x40000400
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <HAL_TIM_MspPostInit+0x58>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d117      	bne.n	8000c58 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_TIM_MspPostInit+0x5c>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <HAL_TIM_MspPostInit+0x5c>)
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <HAL_TIM_MspPostInit+0x5c>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c40:	2301      	movs	r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <HAL_TIM_MspPostInit+0x60>)
 8000c54:	f000 fa22 	bl	800109c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40000400 	.word	0x40000400
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010c00 	.word	0x40010c00

08000c6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a15      	ldr	r2, [pc, #84]	@ (8000cdc <HAL_UART_MspInit+0x70>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d123      	bne.n	8000cd4 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <HAL_UART_MspInit+0x74>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	4a13      	ldr	r2, [pc, #76]	@ (8000ce0 <HAL_UART_MspInit+0x74>)
 8000c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c96:	61d3      	str	r3, [r2, #28]
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <HAL_UART_MspInit+0x74>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_UART_MspInit+0x74>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <HAL_UART_MspInit+0x74>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <HAL_UART_MspInit+0x74>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <HAL_UART_MspInit+0x78>)
 8000cd0:	f000 f9e4 	bl	800109c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <NMI_Handler+0x4>

08000cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f892 	bl	8000e48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d24:	f003 fa4e 	bl	80041c4 <xTaskGetSchedulerState>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d001      	beq.n	8000d32 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d2e:	f004 f97b 	bl	8005028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d3a:	2020      	movs	r0, #32
 8000d3c:	f000 fb62 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d40:	2040      	movs	r0, #64	@ 0x40
 8000d42:	f000 fb5f 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d46:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d4a:	f000 fb5b 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d56:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d5a:	f000 fb53 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
	...

08000d70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff fff7 	bl	8000d62 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d76:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d78:	4a0c      	ldr	r2, [pc, #48]	@ (8000dac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a09      	ldr	r2, [pc, #36]	@ (8000db0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d8c:	4c09      	ldr	r4, [pc, #36]	@ (8000db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f004 fbbd 	bl	8005518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9e:	f7ff faf7 	bl	8000390 <main>
  bx lr
 8000da2:	4770      	bx	lr
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dac:	080055f8 	.word	0x080055f8
  ldr r2, =_sbss
 8000db0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000db4:	20001618 	.word	0x20001618

08000db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC1_2_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <HAL_Init+0x28>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a07      	ldr	r2, [pc, #28]	@ (8000de4 <HAL_Init+0x28>)
 8000dc6:	f043 0310 	orr.w	r3, r3, #16
 8000dca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f923 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd2:	200f      	movs	r0, #15
 8000dd4:	f000 f808 	bl	8000de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd8:	f7ff fec0 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40022000 	.word	0x40022000

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_InitTick+0x54>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_InitTick+0x58>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f93b 	bl	8001082 <HAL_SYSTICK_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00e      	b.n	8000e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d80a      	bhi.n	8000e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 f903 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4a06      	ldr	r2, [pc, #24]	@ (8000e44 <HAL_InitTick+0x5c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <HAL_IncTick+0x1c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a03      	ldr	r2, [pc, #12]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000784 	.word	0x20000784

08000e6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b02      	ldr	r3, [pc, #8]	@ (8000e7c <HAL_GetTick+0x10>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000784 	.word	0x20000784

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4906      	ldr	r1, [pc, #24]	@ (8000f18 <__NVIC_EnableIRQ+0x34>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	@ (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	@ (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	@ 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff90 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff2d 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff42 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff90 	bl	8000f70 <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5f 	bl	8000f1c <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff35 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffa2 	bl	8000fd4 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b08b      	sub	sp, #44	@ 0x2c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ae:	e169      	b.n	8001384 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b0:	2201      	movs	r2, #1
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8158 	bne.w	800137e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a9a      	ldr	r2, [pc, #616]	@ (800133c <HAL_GPIO_Init+0x2a0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d05e      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010d8:	4a98      	ldr	r2, [pc, #608]	@ (800133c <HAL_GPIO_Init+0x2a0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d875      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010de:	4a98      	ldr	r2, [pc, #608]	@ (8001340 <HAL_GPIO_Init+0x2a4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d058      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010e4:	4a96      	ldr	r2, [pc, #600]	@ (8001340 <HAL_GPIO_Init+0x2a4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d86f      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010ea:	4a96      	ldr	r2, [pc, #600]	@ (8001344 <HAL_GPIO_Init+0x2a8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d052      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010f0:	4a94      	ldr	r2, [pc, #592]	@ (8001344 <HAL_GPIO_Init+0x2a8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d869      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010f6:	4a94      	ldr	r2, [pc, #592]	@ (8001348 <HAL_GPIO_Init+0x2ac>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d04c      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010fc:	4a92      	ldr	r2, [pc, #584]	@ (8001348 <HAL_GPIO_Init+0x2ac>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d863      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 8001102:	4a92      	ldr	r2, [pc, #584]	@ (800134c <HAL_GPIO_Init+0x2b0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d046      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 8001108:	4a90      	ldr	r2, [pc, #576]	@ (800134c <HAL_GPIO_Init+0x2b0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d85d      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 800110e:	2b12      	cmp	r3, #18
 8001110:	d82a      	bhi.n	8001168 <HAL_GPIO_Init+0xcc>
 8001112:	2b12      	cmp	r3, #18
 8001114:	d859      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 8001116:	a201      	add	r2, pc, #4	@ (adr r2, 800111c <HAL_GPIO_Init+0x80>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	08001197 	.word	0x08001197
 8001120:	08001171 	.word	0x08001171
 8001124:	08001183 	.word	0x08001183
 8001128:	080011c5 	.word	0x080011c5
 800112c:	080011cb 	.word	0x080011cb
 8001130:	080011cb 	.word	0x080011cb
 8001134:	080011cb 	.word	0x080011cb
 8001138:	080011cb 	.word	0x080011cb
 800113c:	080011cb 	.word	0x080011cb
 8001140:	080011cb 	.word	0x080011cb
 8001144:	080011cb 	.word	0x080011cb
 8001148:	080011cb 	.word	0x080011cb
 800114c:	080011cb 	.word	0x080011cb
 8001150:	080011cb 	.word	0x080011cb
 8001154:	080011cb 	.word	0x080011cb
 8001158:	080011cb 	.word	0x080011cb
 800115c:	080011cb 	.word	0x080011cb
 8001160:	08001179 	.word	0x08001179
 8001164:	0800118d 	.word	0x0800118d
 8001168:	4a79      	ldr	r2, [pc, #484]	@ (8001350 <HAL_GPIO_Init+0x2b4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800116e:	e02c      	b.n	80011ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e029      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	3304      	adds	r3, #4
 800117e:	623b      	str	r3, [r7, #32]
          break;
 8001180:	e024      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	3308      	adds	r3, #8
 8001188:	623b      	str	r3, [r7, #32]
          break;
 800118a:	e01f      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	330c      	adds	r3, #12
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e01a      	b.n	80011cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800119e:	2304      	movs	r3, #4
 80011a0:	623b      	str	r3, [r7, #32]
          break;
 80011a2:	e013      	b.n	80011cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d105      	bne.n	80011b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ac:	2308      	movs	r3, #8
 80011ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	611a      	str	r2, [r3, #16]
          break;
 80011b6:	e009      	b.n	80011cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b8:	2308      	movs	r3, #8
 80011ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	615a      	str	r2, [r3, #20]
          break;
 80011c2:	e003      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x130>
          break;
 80011ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2bff      	cmp	r3, #255	@ 0xff
 80011d0:	d801      	bhi.n	80011d6 <HAL_GPIO_Init+0x13a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e001      	b.n	80011da <HAL_GPIO_Init+0x13e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2bff      	cmp	r3, #255	@ 0xff
 80011e0:	d802      	bhi.n	80011e8 <HAL_GPIO_Init+0x14c>
 80011e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x152>
 80011e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ea:	3b08      	subs	r3, #8
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	210f      	movs	r1, #15
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	6a39      	ldr	r1, [r7, #32]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80b1 	beq.w	800137e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800121c:	4b4d      	ldr	r3, [pc, #308]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a4c      	ldr	r2, [pc, #304]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b4a      	ldr	r3, [pc, #296]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001234:	4a48      	ldr	r2, [pc, #288]	@ (8001358 <HAL_GPIO_Init+0x2bc>)
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001240:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a40      	ldr	r2, [pc, #256]	@ (800135c <HAL_GPIO_Init+0x2c0>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d013      	beq.n	8001288 <HAL_GPIO_Init+0x1ec>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3f      	ldr	r2, [pc, #252]	@ (8001360 <HAL_GPIO_Init+0x2c4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00d      	beq.n	8001284 <HAL_GPIO_Init+0x1e8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a3e      	ldr	r2, [pc, #248]	@ (8001364 <HAL_GPIO_Init+0x2c8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x1e4>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a3d      	ldr	r2, [pc, #244]	@ (8001368 <HAL_GPIO_Init+0x2cc>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_GPIO_Init+0x1e0>
 8001278:	2303      	movs	r3, #3
 800127a:	e006      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 800127c:	2304      	movs	r3, #4
 800127e:	e004      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 8001280:	2302      	movs	r3, #2
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 8001288:	2300      	movs	r3, #0
 800128a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800128c:	f002 0203 	and.w	r2, r2, #3
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	4093      	lsls	r3, r2
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800129a:	492f      	ldr	r1, [pc, #188]	@ (8001358 <HAL_GPIO_Init+0x2bc>)
 800129c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012b4:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	492c      	ldr	r1, [pc, #176]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	608b      	str	r3, [r1, #8]
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012c2:	4b2a      	ldr	r3, [pc, #168]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4928      	ldr	r1, [pc, #160]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012dc:	4b23      	ldr	r3, [pc, #140]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	4922      	ldr	r1, [pc, #136]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	60cb      	str	r3, [r1, #12]
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ea:	4b20      	ldr	r3, [pc, #128]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	491e      	ldr	r1, [pc, #120]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001304:	4b19      	ldr	r3, [pc, #100]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4918      	ldr	r1, [pc, #96]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	43db      	mvns	r3, r3
 800131a:	4914      	ldr	r1, [pc, #80]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 800131c:	4013      	ands	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d021      	beq.n	8001370 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	490e      	ldr	r1, [pc, #56]	@ (800136c <HAL_GPIO_Init+0x2d0>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
 8001338:	e021      	b.n	800137e <HAL_GPIO_Init+0x2e2>
 800133a:	bf00      	nop
 800133c:	10320000 	.word	0x10320000
 8001340:	10310000 	.word	0x10310000
 8001344:	10220000 	.word	0x10220000
 8001348:	10210000 	.word	0x10210000
 800134c:	10120000 	.word	0x10120000
 8001350:	10110000 	.word	0x10110000
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	40010800 	.word	0x40010800
 8001360:	40010c00 	.word	0x40010c00
 8001364:	40011000 	.word	0x40011000
 8001368:	40011400 	.word	0x40011400
 800136c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	43db      	mvns	r3, r3
 8001378:	4909      	ldr	r1, [pc, #36]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 800137a:	4013      	ands	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	3301      	adds	r3, #1
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	fa22 f303 	lsr.w	r3, r2, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	f47f ae8e 	bne.w	80010b0 <HAL_GPIO_Init+0x14>
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	372c      	adds	r7, #44	@ 0x2c
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40010400 	.word	0x40010400

080013a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e001      	b.n	80013c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	807b      	strh	r3, [r7, #2]
 80013de:	4613      	mov	r3, r2
 80013e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e2:	787b      	ldrb	r3, [r7, #1]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ee:	e003      	b.n	80013f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	041a      	lsls	r2, r3, #16
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	611a      	str	r2, [r3, #16]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
	...

08001404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f9e4 	bl	80007f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e272      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8087 	beq.w	8001562 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001454:	4b92      	ldr	r3, [pc, #584]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b04      	cmp	r3, #4
 800145e:	d00c      	beq.n	800147a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001460:	4b8f      	ldr	r3, [pc, #572]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d112      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
 800146c:	4b8c      	ldr	r3, [pc, #560]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001478:	d10b      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	4b89      	ldr	r3, [pc, #548]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d06c      	beq.n	8001560 <HAL_RCC_OscConfig+0x12c>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d168      	bne.n	8001560 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e24c      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x76>
 800149c:	4b80      	ldr	r3, [pc, #512]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a7f      	ldr	r2, [pc, #508]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e02e      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b7b      	ldr	r3, [pc, #492]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7a      	ldr	r2, [pc, #488]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b78      	ldr	r3, [pc, #480]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a77      	ldr	r2, [pc, #476]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e01d      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0xbc>
 80014d6:	4b72      	ldr	r3, [pc, #456]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a71      	ldr	r2, [pc, #452]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b6f      	ldr	r3, [pc, #444]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6e      	ldr	r2, [pc, #440]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014f0:	4b6b      	ldr	r3, [pc, #428]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6a      	ldr	r2, [pc, #424]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b68      	ldr	r3, [pc, #416]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a67      	ldr	r2, [pc, #412]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001506:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fcac 	bl	8000e6c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fca8 	bl	8000e6c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	@ 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e200      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	4b5d      	ldr	r3, [pc, #372]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0xe4>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fc98 	bl	8000e6c <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fc94 	bl	8000e6c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	@ 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e1ec      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	4b53      	ldr	r3, [pc, #332]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x10c>
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d063      	beq.n	8001636 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156e:	4b4c      	ldr	r3, [pc, #304]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800157a:	4b49      	ldr	r3, [pc, #292]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d11c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x18c>
 8001586:	4b46      	ldr	r3, [pc, #280]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d116      	bne.n	80015c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	4b43      	ldr	r3, [pc, #268]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e1c0      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4939      	ldr	r1, [pc, #228]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	e03a      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c8:	4b36      	ldr	r3, [pc, #216]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fc4d 	bl	8000e6c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fc49 	bl	8000e6c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1a1      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4927      	ldr	r1, [pc, #156]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fc2c 	bl	8000e6c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001618:	f7ff fc28 	bl	8000e6c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e180      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d03a      	beq.n	80016b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d019      	beq.n	800167e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <HAL_RCC_OscConfig+0x274>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fc0c 	bl	8000e6c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff fc08 	bl	8000e6c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e160      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166a:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f000 face 	bl	8001c18 <RCC_Delay>
 800167c:	e01c      	b.n	80016b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff fbf2 	bl	8000e6c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168a:	e00f      	b.n	80016ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff fbee 	bl	8000e6c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d908      	bls.n	80016ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e146      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	42420000 	.word	0x42420000
 80016a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	4b92      	ldr	r3, [pc, #584]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e9      	bne.n	800168c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a6 	beq.w	8001812 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b8b      	ldr	r3, [pc, #556]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b88      	ldr	r3, [pc, #544]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a87      	ldr	r2, [pc, #540]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b85      	ldr	r3, [pc, #532]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b82      	ldr	r3, [pc, #520]	@ (80018fc <HAL_RCC_OscConfig+0x4c8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b7f      	ldr	r3, [pc, #508]	@ (80018fc <HAL_RCC_OscConfig+0x4c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7e      	ldr	r2, [pc, #504]	@ (80018fc <HAL_RCC_OscConfig+0x4c8>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fbaf 	bl	8000e6c <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fbab 	bl	8000e6c <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	@ 0x64
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e103      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b75      	ldr	r3, [pc, #468]	@ (80018fc <HAL_RCC_OscConfig+0x4c8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x312>
 8001738:	4b6f      	ldr	r3, [pc, #444]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a6e      	ldr	r2, [pc, #440]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e02d      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x334>
 800174e:	4b6a      	ldr	r3, [pc, #424]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a69      	ldr	r2, [pc, #420]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	4b67      	ldr	r3, [pc, #412]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a66      	ldr	r2, [pc, #408]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6213      	str	r3, [r2, #32]
 8001766:	e01c      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x356>
 8001770:	4b61      	ldr	r3, [pc, #388]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a60      	ldr	r2, [pc, #384]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	4b5e      	ldr	r3, [pc, #376]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a5d      	ldr	r2, [pc, #372]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6213      	str	r3, [r2, #32]
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 800178a:	4b5b      	ldr	r3, [pc, #364]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a5a      	ldr	r2, [pc, #360]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	4b58      	ldr	r3, [pc, #352]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a57      	ldr	r2, [pc, #348]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fb5f 	bl	8000e6c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fb5b 	bl	8000e6c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0b1      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	4b4b      	ldr	r3, [pc, #300]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ee      	beq.n	80017b2 <HAL_RCC_OscConfig+0x37e>
 80017d4:	e014      	b.n	8001800 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fb49 	bl	8000e6c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fb45 	bl	8000e6c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e09b      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	4b40      	ldr	r3, [pc, #256]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001806:	4b3c      	ldr	r3, [pc, #240]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a3b      	ldr	r2, [pc, #236]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001810:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8087 	beq.w	800192a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181c:	4b36      	ldr	r3, [pc, #216]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d061      	beq.n	80018ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d146      	bne.n	80018be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b33      	ldr	r3, [pc, #204]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb19 	bl	8000e6c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fb15 	bl	8000e6c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e06d      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001850:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001864:	d108      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001866:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4921      	ldr	r1, [pc, #132]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a19      	ldr	r1, [r3, #32]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	430b      	orrs	r3, r1
 800188a:	491b      	ldr	r1, [pc, #108]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fae9 	bl	8000e6c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff fae5 	bl	8000e6c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e03d      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x46a>
 80018bc:	e035      	b.n	800192a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fad2 	bl	8000e6c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff face 	bl	8000e6c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e026      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x498>
 80018ea:	e01e      	b.n	800192a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e019      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40007000 	.word	0x40007000
 8001900:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_RCC_OscConfig+0x500>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	429a      	cmp	r2, r3
 8001916:	d106      	bne.n	8001926 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0d0      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b6a      	ldr	r3, [pc, #424]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d910      	bls.n	800197c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b67      	ldr	r3, [pc, #412]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 0207 	bic.w	r2, r3, #7
 8001962:	4965      	ldr	r1, [pc, #404]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b63      	ldr	r3, [pc, #396]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0b8      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001994:	4b59      	ldr	r3, [pc, #356]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a58      	ldr	r2, [pc, #352]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800199e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ac:	4b53      	ldr	r3, [pc, #332]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a52      	ldr	r2, [pc, #328]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4b50      	ldr	r3, [pc, #320]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	494d      	ldr	r1, [pc, #308]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d040      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	4b47      	ldr	r3, [pc, #284]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d115      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e07f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f6:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e073      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a06:	4b3d      	ldr	r3, [pc, #244]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e06b      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a16:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f023 0203 	bic.w	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4936      	ldr	r1, [pc, #216]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a28:	f7ff fa20 	bl	8000e6c <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f7ff fa1c 	bl	8000e6c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e053      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	4b2d      	ldr	r3, [pc, #180]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 020c 	and.w	r2, r3, #12
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1eb      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d210      	bcs.n	8001a88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0207 	bic.w	r2, r3, #7
 8001a6e:	4922      	ldr	r1, [pc, #136]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e032      	b.n	8001aee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4916      	ldr	r1, [pc, #88]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ab2:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	490e      	ldr	r1, [pc, #56]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ac6:	f000 f821 	bl	8001b0c <HAL_RCC_GetSysClockFreq>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	490a      	ldr	r1, [pc, #40]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad8:	5ccb      	ldrb	r3, [r1, r3]
 8001ada:	fa22 f303 	lsr.w	r3, r2, r3
 8001ade:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <HAL_RCC_ClockConfig+0x1cc>)
 8001ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_RCC_ClockConfig+0x1d0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f97e 	bl	8000de8 <HAL_InitTick>

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40022000 	.word	0x40022000
 8001afc:	40021000 	.word	0x40021000
 8001b00:	080055c4 	.word	0x080055c4
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000004 	.word	0x20000004

08001b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x30>
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x36>
 8001b3a:	e027      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b3e:	613b      	str	r3, [r7, #16]
      break;
 8001b40:	e027      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	0c9b      	lsrs	r3, r3, #18
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b4c:	5cd3      	ldrb	r3, [r2, r3]
 8001b4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d010      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	0c5b      	lsrs	r3, r3, #17
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	4a11      	ldr	r2, [pc, #68]	@ (8001bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b6e:	fb03 f202 	mul.w	r2, r3, r2
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e004      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	613b      	str	r3, [r7, #16]
      break;
 8001b8a:	e002      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b8e:	613b      	str	r3, [r7, #16]
      break;
 8001b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b92:	693b      	ldr	r3, [r7, #16]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	007a1200 	.word	0x007a1200
 8001ba8:	080055dc 	.word	0x080055dc
 8001bac:	080055ec 	.word	0x080055ec
 8001bb0:	003d0900 	.word	0x003d0900

08001bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb8:	4b02      	ldr	r3, [pc, #8]	@ (8001bc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bcc:	f7ff fff2 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	@ (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000
 8001bec:	080055d4 	.word	0x080055d4

08001bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bf4:	f7ff ffde 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	0adb      	lsrs	r3, r3, #11
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	@ (8001c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	080055d4 	.word	0x080055d4

08001c18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c20:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <RCC_Delay+0x34>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <RCC_Delay+0x38>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	0a5b      	lsrs	r3, r3, #9
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c34:	bf00      	nop
  }
  while (Delay --);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1e5a      	subs	r2, r3, #1
 8001c3a:	60fa      	str	r2, [r7, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f9      	bne.n	8001c34 <RCC_Delay+0x1c>
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	10624dd3 	.word	0x10624dd3

08001c54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e041      	b.n	8001cea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe ffa6 	bl	8000bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4610      	mov	r0, r2
 8001c94:	f000 f992 	bl	8001fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_TIM_PWM_Start+0x24>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	bf14      	ite	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	2300      	moveq	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e022      	b.n	8001d5e <HAL_TIM_PWM_Start+0x6a>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d109      	bne.n	8001d32 <HAL_TIM_PWM_Start+0x3e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	bf14      	ite	ne
 8001d2a:	2301      	movne	r3, #1
 8001d2c:	2300      	moveq	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	e015      	b.n	8001d5e <HAL_TIM_PWM_Start+0x6a>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d109      	bne.n	8001d4c <HAL_TIM_PWM_Start+0x58>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	e008      	b.n	8001d5e <HAL_TIM_PWM_Start+0x6a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e05e      	b.n	8001e24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <HAL_TIM_PWM_Start+0x82>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d74:	e013      	b.n	8001d9e <HAL_TIM_PWM_Start+0xaa>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d104      	bne.n	8001d86 <HAL_TIM_PWM_Start+0x92>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d84:	e00b      	b.n	8001d9e <HAL_TIM_PWM_Start+0xaa>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d104      	bne.n	8001d96 <HAL_TIM_PWM_Start+0xa2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d94:	e003      	b.n	8001d9e <HAL_TIM_PWM_Start+0xaa>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2201      	movs	r2, #1
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fafe 	bl	80023a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <HAL_TIM_PWM_Start+0x138>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d107      	bne.n	8001dc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a18      	ldr	r2, [pc, #96]	@ (8001e2c <HAL_TIM_PWM_Start+0x138>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00e      	beq.n	8001dee <HAL_TIM_PWM_Start+0xfa>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd8:	d009      	beq.n	8001dee <HAL_TIM_PWM_Start+0xfa>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <HAL_TIM_PWM_Start+0x13c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d004      	beq.n	8001dee <HAL_TIM_PWM_Start+0xfa>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <HAL_TIM_PWM_Start+0x140>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d111      	bne.n	8001e12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b06      	cmp	r3, #6
 8001dfe:	d010      	beq.n	8001e22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e10:	e007      	b.n	8001e22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40012c00 	.word	0x40012c00
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40000800 	.word	0x40000800

08001e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e0ae      	b.n	8001fb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	f200 809f 	bhi.w	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e66:	a201      	add	r2, pc, #4	@ (adr r2, 8001e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001ea1 	.word	0x08001ea1
 8001e70:	08001fa5 	.word	0x08001fa5
 8001e74:	08001fa5 	.word	0x08001fa5
 8001e78:	08001fa5 	.word	0x08001fa5
 8001e7c:	08001ee1 	.word	0x08001ee1
 8001e80:	08001fa5 	.word	0x08001fa5
 8001e84:	08001fa5 	.word	0x08001fa5
 8001e88:	08001fa5 	.word	0x08001fa5
 8001e8c:	08001f23 	.word	0x08001f23
 8001e90:	08001fa5 	.word	0x08001fa5
 8001e94:	08001fa5 	.word	0x08001fa5
 8001e98:	08001fa5 	.word	0x08001fa5
 8001e9c:	08001f63 	.word	0x08001f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f8f6 	bl	8002098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0208 	orr.w	r2, r2, #8
 8001eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0204 	bic.w	r2, r2, #4
 8001eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6999      	ldr	r1, [r3, #24]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	619a      	str	r2, [r3, #24]
      break;
 8001ede:	e064      	b.n	8001faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f93c 	bl	8002164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6999      	ldr	r1, [r3, #24]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	021a      	lsls	r2, r3, #8
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	619a      	str	r2, [r3, #24]
      break;
 8001f20:	e043      	b.n	8001faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f985 	bl	8002238 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69da      	ldr	r2, [r3, #28]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0208 	orr.w	r2, r2, #8
 8001f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0204 	bic.w	r2, r2, #4
 8001f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69d9      	ldr	r1, [r3, #28]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	61da      	str	r2, [r3, #28]
      break;
 8001f60:	e023      	b.n	8001faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f9cf 	bl	800230c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69da      	ldr	r2, [r3, #28]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69da      	ldr	r2, [r3, #28]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	69d9      	ldr	r1, [r3, #28]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	61da      	str	r2, [r3, #28]
      break;
 8001fa2:	e002      	b.n	8001faa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8001fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a2f      	ldr	r2, [pc, #188]	@ (800208c <TIM_Base_SetConfig+0xd0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <TIM_Base_SetConfig+0x30>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fda:	d007      	beq.n	8001fec <TIM_Base_SetConfig+0x30>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a2c      	ldr	r2, [pc, #176]	@ (8002090 <TIM_Base_SetConfig+0xd4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0x30>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a2b      	ldr	r2, [pc, #172]	@ (8002094 <TIM_Base_SetConfig+0xd8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a22      	ldr	r2, [pc, #136]	@ (800208c <TIM_Base_SetConfig+0xd0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00b      	beq.n	800201e <TIM_Base_SetConfig+0x62>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200c:	d007      	beq.n	800201e <TIM_Base_SetConfig+0x62>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a1f      	ldr	r2, [pc, #124]	@ (8002090 <TIM_Base_SetConfig+0xd4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d003      	beq.n	800201e <TIM_Base_SetConfig+0x62>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a1e      	ldr	r2, [pc, #120]	@ (8002094 <TIM_Base_SetConfig+0xd8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d108      	bne.n	8002030 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0d      	ldr	r2, [pc, #52]	@ (800208c <TIM_Base_SetConfig+0xd0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d103      	bne.n	8002064 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f023 0201 	bic.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]
  }
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	40012c00 	.word	0x40012c00
 8002090:	40000400 	.word	0x40000400
 8002094:	40000800 	.word	0x40000800

08002098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f023 0201 	bic.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f023 0302 	bic.w	r3, r3, #2
 80020e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002160 <TIM_OC1_SetConfig+0xc8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d10c      	bne.n	800210e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 0308 	bic.w	r3, r3, #8
 80020fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a13      	ldr	r2, [pc, #76]	@ (8002160 <TIM_OC1_SetConfig+0xc8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d111      	bne.n	800213a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800211c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	621a      	str	r2, [r3, #32]
}
 8002154:	bf00      	nop
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40012c00 	.word	0x40012c00

08002164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f023 0210 	bic.w	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800219a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f023 0320 	bic.w	r3, r3, #32
 80021ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a1d      	ldr	r2, [pc, #116]	@ (8002234 <TIM_OC2_SetConfig+0xd0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10d      	bne.n	80021e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <TIM_OC2_SetConfig+0xd0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d113      	bne.n	8002210 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80021f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	621a      	str	r2, [r3, #32]
}
 800222a:	bf00      	nop
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	40012c00 	.word	0x40012c00

08002238 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0303 	bic.w	r3, r3, #3
 800226e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a1d      	ldr	r2, [pc, #116]	@ (8002308 <TIM_OC3_SetConfig+0xd0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10d      	bne.n	80022b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800229c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a14      	ldr	r2, [pc, #80]	@ (8002308 <TIM_OC3_SetConfig+0xd0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d113      	bne.n	80022e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	621a      	str	r2, [r3, #32]
}
 80022fc:	bf00      	nop
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40012c00 	.word	0x40012c00

0800230c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800233a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	031b      	lsls	r3, r3, #12
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a0f      	ldr	r2, [pc, #60]	@ (80023a4 <TIM_OC4_SetConfig+0x98>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d109      	bne.n	8002380 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	019b      	lsls	r3, r3, #6
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	621a      	str	r2, [r3, #32]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	40012c00 	.word	0x40012c00

080023a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2201      	movs	r2, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	401a      	ands	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a1a      	ldr	r2, [r3, #32]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	431a      	orrs	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	621a      	str	r2, [r3, #32]
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002404:	2302      	movs	r3, #2
 8002406:	e046      	b.n	8002496 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800242e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00e      	beq.n	800246a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002454:	d009      	beq.n	800246a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a12      	ldr	r2, [pc, #72]	@ (80024a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a10      	ldr	r2, [pc, #64]	@ (80024a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10c      	bne.n	8002484 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4313      	orrs	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800

080024ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e042      	b.n	8002544 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fbca 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	@ 0x24
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f82b 	bl	800254c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002586:	f023 030c 	bic.w	r3, r3, #12
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	430b      	orrs	r3, r1
 8002592:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002660 <UART_SetConfig+0x114>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d103      	bne.n	80025bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025b4:	f7ff fb1c 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	e002      	b.n	80025c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025bc:	f7ff fb04 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 80025c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	009a      	lsls	r2, r3, #2
 80025cc:	441a      	add	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <UART_SetConfig+0x118>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	0119      	lsls	r1, r3, #4
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009a      	lsls	r2, r3, #2
 80025ec:	441a      	add	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <UART_SetConfig+0x118>)
 80025fa:	fba3 0302 	umull	r0, r3, r3, r2
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2064      	movs	r0, #100	@ 0x64
 8002602:	fb00 f303 	mul.w	r3, r0, r3
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	3332      	adds	r3, #50	@ 0x32
 800260c:	4a15      	ldr	r2, [pc, #84]	@ (8002664 <UART_SetConfig+0x118>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002618:	4419      	add	r1, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	009a      	lsls	r2, r3, #2
 8002624:	441a      	add	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002630:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <UART_SetConfig+0x118>)
 8002632:	fba3 0302 	umull	r0, r3, r3, r2
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2064      	movs	r0, #100	@ 0x64
 800263a:	fb00 f303 	mul.w	r3, r0, r3
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	3332      	adds	r3, #50	@ 0x32
 8002644:	4a07      	ldr	r2, [pc, #28]	@ (8002664 <UART_SetConfig+0x118>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	f003 020f 	and.w	r2, r3, #15
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	440a      	add	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40013800 	.word	0x40013800
 8002664:	51eb851f 	.word	0x51eb851f

08002668 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f103 0208 	add.w	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f103 0208 	add.w	r2, r3, #8
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0208 	add.w	r2, r3, #8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271a:	d103      	bne.n	8002724 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e00c      	b.n	800273e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3308      	adds	r3, #8
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	e002      	b.n	8002732 <vListInsert+0x2e>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d2f6      	bcs.n	800272c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	601a      	str	r2, [r3, #0]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6892      	ldr	r2, [r2, #8]
 800278a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6852      	ldr	r2, [r2, #4]
 8002794:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d103      	bne.n	80027a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
	...

080027c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <xQueueGenericReset+0x2c>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	60bb      	str	r3, [r7, #8]
}
 80027ee:	bf00      	nop
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80027f4:	f002 fb9a 	bl	8004f2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	441a      	add	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002824:	3b01      	subs	r3, #1
 8002826:	68f9      	ldr	r1, [r7, #12]
 8002828:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	441a      	add	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	22ff      	movs	r2, #255	@ 0xff
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	22ff      	movs	r2, #255	@ 0xff
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d114      	bne.n	8002874 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01a      	beq.n	8002888 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3310      	adds	r3, #16
 8002856:	4618      	mov	r0, r3
 8002858:	f001 faf4 	bl	8003e44 <xTaskRemoveFromEventList>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d012      	beq.n	8002888 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002862:	4b0d      	ldr	r3, [pc, #52]	@ (8002898 <xQueueGenericReset+0xd0>)
 8002864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	e009      	b.n	8002888 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3310      	adds	r3, #16
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fef5 	bl	8002668 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3324      	adds	r3, #36	@ 0x24
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fef0 	bl	8002668 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002888:	f002 fb80 	bl	8004f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800288c:	2301      	movs	r3, #1
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000ed04 	.word	0xe000ed04

0800289c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08e      	sub	sp, #56	@ 0x38
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	e7fd      	b.n	80028e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <xQueueGenericCreateStatic+0x56>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <xQueueGenericCreateStatic+0x5a>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <xQueueGenericCreateStatic+0x5c>
 80028f6:	2300      	movs	r3, #0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	623b      	str	r3, [r7, #32]
}
 800290e:	bf00      	nop
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <xQueueGenericCreateStatic+0x84>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <xQueueGenericCreateStatic+0x88>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <xQueueGenericCreateStatic+0x8a>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10b      	bne.n	8002942 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800292a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292e:	f383 8811 	msr	BASEPRI, r3
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	61fb      	str	r3, [r7, #28]
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	e7fd      	b.n	800293e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002942:	2348      	movs	r3, #72	@ 0x48
 8002944:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b48      	cmp	r3, #72	@ 0x48
 800294a:	d00b      	beq.n	8002964 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	61bb      	str	r3, [r7, #24]
}
 800295e:	bf00      	nop
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002964:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800296a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00d      	beq.n	800298c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002978:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800297c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f840 	bl	8002a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800298c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800298e:	4618      	mov	r0, r3
 8002990:	3730      	adds	r7, #48	@ 0x30
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002996:	b580      	push	{r7, lr}
 8002998:	b08a      	sub	sp, #40	@ 0x28
 800299a:	af02      	add	r7, sp, #8
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	4613      	mov	r3, r2
 80029a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10b      	bne.n	80029c2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80029aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ae:	f383 8811 	msr	BASEPRI, r3
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	f3bf 8f4f 	dsb	sy
 80029ba:	613b      	str	r3, [r7, #16]
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	e7fd      	b.n	80029be <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	3348      	adds	r3, #72	@ 0x48
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 fbad 	bl	8005130 <pvPortMalloc>
 80029d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d011      	beq.n	8002a02 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3348      	adds	r3, #72	@ 0x48
 80029e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029f0:	79fa      	ldrb	r2, [r7, #7]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f805 	bl	8002a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a02:	69bb      	ldr	r3, [r7, #24]
	}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e002      	b.n	8002a2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	69b8      	ldr	r0, [r7, #24]
 8002a3e:	f7ff fec3 	bl	80027c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00e      	beq.n	8002a76 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f81d 	bl	8002ab0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	461a      	mov	r2, r3
 8002a94:	6939      	ldr	r1, [r7, #16]
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7ff ff7d 	bl	8002996 <xQueueGenericCreate>
 8002a9c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff ffd3 	bl	8002a4a <prvInitialiseMutex>

		return xNewQueue;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
	}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08e      	sub	sp, #56	@ 0x38
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10b      	bne.n	8002ae4 <xQueueGenericSend+0x34>
	__asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <xQueueGenericSend+0x42>
 8002aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <xQueueGenericSend+0x46>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <xQueueGenericSend+0x48>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10b      	bne.n	8002b14 <xQueueGenericSend+0x64>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	e7fd      	b.n	8002b10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d103      	bne.n	8002b22 <xQueueGenericSend+0x72>
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <xQueueGenericSend+0x76>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <xQueueGenericSend+0x78>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <xQueueGenericSend+0x94>
	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	623b      	str	r3, [r7, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b44:	f001 fb3e 	bl	80041c4 <xTaskGetSchedulerState>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <xQueueGenericSend+0xa4>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <xQueueGenericSend+0xa8>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <xQueueGenericSend+0xaa>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10b      	bne.n	8002b76 <xQueueGenericSend+0xc6>
	__asm volatile
 8002b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	61fb      	str	r3, [r7, #28]
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	e7fd      	b.n	8002b72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b76:	f002 f9d9 	bl	8004f2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <xQueueGenericSend+0xdc>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d129      	bne.n	8002be0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b92:	f000 fb36 	bl	8003202 <prvCopyDataToQueue>
 8002b96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba2:	3324      	adds	r3, #36	@ 0x24
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f94d 	bl	8003e44 <xTaskRemoveFromEventList>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bb0:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb0 <xQueueGenericSend+0x200>)
 8002bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	e00a      	b.n	8002bd8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bc8:	4b39      	ldr	r3, [pc, #228]	@ (8002cb0 <xQueueGenericSend+0x200>)
 8002bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bd8:	f002 f9d8 	bl	8004f8c <vPortExitCritical>
				return pdPASS;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e063      	b.n	8002ca8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d103      	bne.n	8002bee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002be6:	f002 f9d1 	bl	8004f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e05c      	b.n	8002ca8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 f987 	bl	8003f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c02:	f002 f9c3 	bl	8004f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c06:	f000 fee9 	bl	80039dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c0a:	f002 f98f 	bl	8004f2c <vPortEnterCritical>
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1a:	d103      	bne.n	8002c24 <xQueueGenericSend+0x174>
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d103      	bne.n	8002c3a <xQueueGenericSend+0x18a>
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c3a:	f002 f9a7 	bl	8004f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c3e:	1d3a      	adds	r2, r7, #4
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 f976 	bl	8003f38 <xTaskCheckForTimeOut>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d124      	bne.n	8002c9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c54:	f000 fbcd 	bl	80033f2 <prvIsQueueFull>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d018      	beq.n	8002c90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	3310      	adds	r3, #16
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 f89a 	bl	8003da0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c6e:	f000 fb58 	bl	8003322 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c72:	f000 fec1 	bl	80039f8 <xTaskResumeAll>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f47f af7c 	bne.w	8002b76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <xQueueGenericSend+0x200>)
 8002c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	e772      	b.n	8002b76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c92:	f000 fb46 	bl	8003322 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c96:	f000 feaf 	bl	80039f8 <xTaskResumeAll>
 8002c9a:	e76c      	b.n	8002b76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c9e:	f000 fb40 	bl	8003322 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ca2:	f000 fea9 	bl	80039f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ca6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3738      	adds	r7, #56	@ 0x38
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	e000ed04 	.word	0xe000ed04

08002cb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b090      	sub	sp, #64	@ 0x40
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d103      	bne.n	8002cf2 <xQueueGenericSendFromISR+0x3e>
 8002cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <xQueueGenericSendFromISR+0x42>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <xQueueGenericSendFromISR+0x44>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d103      	bne.n	8002d22 <xQueueGenericSendFromISR+0x6e>
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <xQueueGenericSendFromISR+0x72>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <xQueueGenericSendFromISR+0x74>
 8002d26:	2300      	movs	r3, #0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	623b      	str	r3, [r7, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d44:	f002 f9b4 	bl	80050b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d48:	f3ef 8211 	mrs	r2, BASEPRI
 8002d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	61fa      	str	r2, [r7, #28]
 8002d5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d302      	bcc.n	8002d76 <xQueueGenericSendFromISR+0xc2>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d12f      	bne.n	8002dd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002d8c:	f000 fa39 	bl	8003202 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d112      	bne.n	8002dc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da4:	3324      	adds	r3, #36	@ 0x24
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 f84c 	bl	8003e44 <xTaskRemoveFromEventList>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00e      	beq.n	8002dd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e007      	b.n	8002dd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	b25a      	sxtb	r2, r3
 8002dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002dd4:	e001      	b.n	8002dda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ddc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002de4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3740      	adds	r7, #64	@ 0x40
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	@ 0x30
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10b      	bne.n	8002e22 <xQueueReceive+0x32>
	__asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	623b      	str	r3, [r7, #32]
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	e7fd      	b.n	8002e1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <xQueueReceive+0x40>
 8002e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <xQueueReceive+0x44>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <xQueueReceive+0x46>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10b      	bne.n	8002e52 <xQueueReceive+0x62>
	__asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	61fb      	str	r3, [r7, #28]
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	e7fd      	b.n	8002e4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e52:	f001 f9b7 	bl	80041c4 <xTaskGetSchedulerState>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <xQueueReceive+0x72>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <xQueueReceive+0x76>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <xQueueReceive+0x78>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10b      	bne.n	8002e84 <xQueueReceive+0x94>
	__asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	61bb      	str	r3, [r7, #24]
}
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e84:	f002 f852 	bl	8004f2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01f      	beq.n	8002ed4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e98:	f000 fa1d 	bl	80032d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	1e5a      	subs	r2, r3, #1
 8002ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00f      	beq.n	8002ecc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	3310      	adds	r3, #16
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 ffc7 	bl	8003e44 <xTaskRemoveFromEventList>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <xQueueReceive+0x1c0>)
 8002ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ecc:	f002 f85e 	bl	8004f8c <vPortExitCritical>
				return pdPASS;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e069      	b.n	8002fa8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eda:	f002 f857 	bl	8004f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e062      	b.n	8002fa8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 f80d 	bl	8003f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ef6:	f002 f849 	bl	8004f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002efa:	f000 fd6f 	bl	80039dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002efe:	f002 f815 	bl	8004f2c <vPortEnterCritical>
 8002f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d103      	bne.n	8002f18 <xQueueReceive+0x128>
 8002f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d103      	bne.n	8002f2e <xQueueReceive+0x13e>
 8002f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f2e:	f002 f82d 	bl	8004f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f32:	1d3a      	adds	r2, r7, #4
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fffc 	bl	8003f38 <xTaskCheckForTimeOut>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d123      	bne.n	8002f8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f48:	f000 fa3d 	bl	80033c6 <prvIsQueueEmpty>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d017      	beq.n	8002f82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	3324      	adds	r3, #36	@ 0x24
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 ff20 	bl	8003da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f62:	f000 f9de 	bl	8003322 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f66:	f000 fd47 	bl	80039f8 <xTaskResumeAll>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d189      	bne.n	8002e84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002f70:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb0 <xQueueReceive+0x1c0>)
 8002f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	e780      	b.n	8002e84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f84:	f000 f9cd 	bl	8003322 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f88:	f000 fd36 	bl	80039f8 <xTaskResumeAll>
 8002f8c:	e77a      	b.n	8002e84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f90:	f000 f9c7 	bl	8003322 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f94:	f000 fd30 	bl	80039f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f9a:	f000 fa14 	bl	80033c6 <prvIsQueueEmpty>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f43f af6f 	beq.w	8002e84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fa6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3730      	adds	r7, #48	@ 0x30
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	e000ed04 	.word	0xe000ed04

08002fb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08e      	sub	sp, #56	@ 0x38
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	623b      	str	r3, [r7, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	bf00      	nop
 8002fe6:	e7fd      	b.n	8002fe4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	61fb      	str	r3, [r7, #28]
}
 8003002:	bf00      	nop
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003008:	f001 f8dc 	bl	80041c4 <xTaskGetSchedulerState>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <xQueueSemaphoreTake+0x64>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <xQueueSemaphoreTake+0x68>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <xQueueSemaphoreTake+0x6a>
 800301c:	2300      	movs	r3, #0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10b      	bne.n	800303a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	61bb      	str	r3, [r7, #24]
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	e7fd      	b.n	8003036 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800303a:	f001 ff77 	bl	8004f2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003042:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	2b00      	cmp	r3, #0
 8003048:	d024      	beq.n	8003094 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	1e5a      	subs	r2, r3, #1
 800304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003050:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d104      	bne.n	8003064 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800305a:	f001 fa5f 	bl	800451c <pvTaskIncrementMutexHeldCount>
 800305e:	4602      	mov	r2, r0
 8003060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003062:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00f      	beq.n	800308c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800306c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306e:	3310      	adds	r3, #16
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fee7 	bl	8003e44 <xTaskRemoveFromEventList>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800307c:	4b54      	ldr	r3, [pc, #336]	@ (80031d0 <xQueueSemaphoreTake+0x21c>)
 800307e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800308c:	f001 ff7e 	bl	8004f8c <vPortExitCritical>
				return pdPASS;
 8003090:	2301      	movs	r3, #1
 8003092:	e098      	b.n	80031c6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d112      	bne.n	80030c0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800309a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	617b      	str	r3, [r7, #20]
}
 80030b2:	bf00      	nop
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80030b8:	f001 ff68 	bl	8004f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030bc:	2300      	movs	r3, #0
 80030be:	e082      	b.n	80031c6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030c6:	f107 030c 	add.w	r3, r7, #12
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 ff1e 	bl	8003f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030d4:	f001 ff5a 	bl	8004f8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030d8:	f000 fc80 	bl	80039dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030dc:	f001 ff26 	bl	8004f2c <vPortEnterCritical>
 80030e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d103      	bne.n	80030f6 <xQueueSemaphoreTake+0x142>
 80030ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030fc:	b25b      	sxtb	r3, r3
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d103      	bne.n	800310c <xQueueSemaphoreTake+0x158>
 8003104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800310c:	f001 ff3e 	bl	8004f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003110:	463a      	mov	r2, r7
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f000 ff0d 	bl	8003f38 <xTaskCheckForTimeOut>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d132      	bne.n	800318a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003124:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003126:	f000 f94e 	bl	80033c6 <prvIsQueueEmpty>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d026      	beq.n	800317e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003138:	f001 fef8 	bl	8004f2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800313c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4618      	mov	r0, r3
 8003142:	f001 f85d 	bl	8004200 <xTaskPriorityInherit>
 8003146:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003148:	f001 ff20 	bl	8004f8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	3324      	adds	r3, #36	@ 0x24
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fe23 	bl	8003da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800315a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800315c:	f000 f8e1 	bl	8003322 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003160:	f000 fc4a 	bl	80039f8 <xTaskResumeAll>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	f47f af67 	bne.w	800303a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800316c:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <xQueueSemaphoreTake+0x21c>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	e75d      	b.n	800303a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800317e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003180:	f000 f8cf 	bl	8003322 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003184:	f000 fc38 	bl	80039f8 <xTaskResumeAll>
 8003188:	e757      	b.n	800303a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800318a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800318c:	f000 f8c9 	bl	8003322 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003190:	f000 fc32 	bl	80039f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003194:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003196:	f000 f916 	bl	80033c6 <prvIsQueueEmpty>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	f43f af4c 	beq.w	800303a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80031a8:	f001 fec0 	bl	8004f2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80031ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80031ae:	f000 f811 	bl	80031d4 <prvGetDisinheritPriorityAfterTimeout>
 80031b2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80031b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 f91e 	bl	80043fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80031c0:	f001 fee4 	bl	8004f8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3738      	adds	r7, #56	@ 0x38
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000ed04 	.word	0xe000ed04

080031d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f1c3 0307 	rsb	r3, r3, #7
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e001      	b.n	80031f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80031f6:	68fb      	ldr	r3, [r7, #12]
	}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003216:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10d      	bne.n	800323c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d14d      	bne.n	80032c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f001 f85d 	bl	80042ec <xTaskPriorityDisinherit>
 8003232:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	e043      	b.n	80032c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d119      	bne.n	8003276 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6858      	ldr	r0, [r3, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	461a      	mov	r2, r3
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	f002 f987 	bl	8005560 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	441a      	add	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	429a      	cmp	r2, r3
 800326a:	d32b      	bcc.n	80032c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	e026      	b.n	80032c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68d8      	ldr	r0, [r3, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	461a      	mov	r2, r3
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	f002 f96d 	bl	8005560 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	425b      	negs	r3, r3
 8003290:	441a      	add	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d207      	bcs.n	80032b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	425b      	negs	r3, r3
 80032ac:	441a      	add	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d105      	bne.n	80032c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80032cc:	697b      	ldr	r3, [r7, #20]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d018      	beq.n	800331a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	441a      	add	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d303      	bcc.n	800330a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68d9      	ldr	r1, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	461a      	mov	r2, r3
 8003314:	6838      	ldr	r0, [r7, #0]
 8003316:	f002 f923 	bl	8005560 <memcpy>
	}
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800332a:	f001 fdff 	bl	8004f2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003334:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003336:	e011      	b.n	800335c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3324      	adds	r3, #36	@ 0x24
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fd7d 	bl	8003e44 <xTaskRemoveFromEventList>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003350:	f000 fe56 	bl	8004000 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	3b01      	subs	r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800335c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003360:	2b00      	cmp	r3, #0
 8003362:	dce9      	bgt.n	8003338 <prvUnlockQueue+0x16>
 8003364:	e000      	b.n	8003368 <prvUnlockQueue+0x46>
					break;
 8003366:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	22ff      	movs	r2, #255	@ 0xff
 800336c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003370:	f001 fe0c 	bl	8004f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003374:	f001 fdda 	bl	8004f2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800337e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003380:	e011      	b.n	80033a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d012      	beq.n	80033b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3310      	adds	r3, #16
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fd58 	bl	8003e44 <xTaskRemoveFromEventList>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800339a:	f000 fe31 	bl	8004000 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800339e:	7bbb      	ldrb	r3, [r7, #14]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	dce9      	bgt.n	8003382 <prvUnlockQueue+0x60>
 80033ae:	e000      	b.n	80033b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	22ff      	movs	r2, #255	@ 0xff
 80033b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80033ba:	f001 fde7 	bl	8004f8c <vPortExitCritical>
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033ce:	f001 fdad 	bl	8004f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033da:	2301      	movs	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e001      	b.n	80033e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033e4:	f001 fdd2 	bl	8004f8c <vPortExitCritical>

	return xReturn;
 80033e8:	68fb      	ldr	r3, [r7, #12]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033fa:	f001 fd97 	bl	8004f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003406:	429a      	cmp	r2, r3
 8003408:	d102      	bne.n	8003410 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800340a:	2301      	movs	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	e001      	b.n	8003414 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003414:	f001 fdba 	bl	8004f8c <vPortExitCritical>

	return xReturn;
 8003418:	68fb      	ldr	r3, [r7, #12]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	e014      	b.n	800345e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003434:	4a0e      	ldr	r2, [pc, #56]	@ (8003470 <vQueueAddToRegistry+0x4c>)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003440:	490b      	ldr	r1, [pc, #44]	@ (8003470 <vQueueAddToRegistry+0x4c>)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800344a:	4a09      	ldr	r2, [pc, #36]	@ (8003470 <vQueueAddToRegistry+0x4c>)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003456:	e006      	b.n	8003466 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3301      	adds	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b07      	cmp	r3, #7
 8003462:	d9e7      	bls.n	8003434 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	20000788 	.word	0x20000788

08003474 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003484:	f001 fd52 	bl	8004f2c <vPortEnterCritical>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800348e:	b25b      	sxtb	r3, r3
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d103      	bne.n	800349e <vQueueWaitForMessageRestricted+0x2a>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d103      	bne.n	80034b4 <vQueueWaitForMessageRestricted+0x40>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034b4:	f001 fd6a 	bl	8004f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d106      	bne.n	80034ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	3324      	adds	r3, #36	@ 0x24
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fc8f 	bl	8003dec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff27 	bl	8003322 <prvUnlockQueue>
	}
 80034d4:	bf00      	nop
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08e      	sub	sp, #56	@ 0x38
 80034e0:	af04      	add	r7, sp, #16
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <xTaskCreateStatic+0x2c>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	623b      	str	r3, [r7, #32]
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10b      	bne.n	8003526 <xTaskCreateStatic+0x4a>
	__asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	61fb      	str	r3, [r7, #28]
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	e7fd      	b.n	8003522 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003526:	2354      	movs	r3, #84	@ 0x54
 8003528:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b54      	cmp	r3, #84	@ 0x54
 800352e:	d00b      	beq.n	8003548 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	61bb      	str	r3, [r7, #24]
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003548:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800354a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01e      	beq.n	800358e <xTaskCreateStatic+0xb2>
 8003550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01b      	beq.n	800358e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	2202      	movs	r2, #2
 8003564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003568:	2300      	movs	r3, #0
 800356a:	9303      	str	r3, [sp, #12]
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	9302      	str	r3, [sp, #8]
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f850 	bl	8003626 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003588:	f000 f8d6 	bl	8003738 <prvAddNewTaskToReadyList>
 800358c:	e001      	b.n	8003592 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003592:	697b      	ldr	r3, [r7, #20]
	}
 8003594:	4618      	mov	r0, r3
 8003596:	3728      	adds	r7, #40	@ 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	@ 0x30
 80035a0:	af04      	add	r7, sp, #16
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 fdbd 	bl	8005130 <pvPortMalloc>
 80035b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035be:	2054      	movs	r0, #84	@ 0x54
 80035c0:	f001 fdb6 	bl	8005130 <pvPortMalloc>
 80035c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80035d2:	e005      	b.n	80035e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035d4:	6978      	ldr	r0, [r7, #20]
 80035d6:	f001 fe79 	bl	80052cc <vPortFree>
 80035da:	e001      	b.n	80035e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d017      	beq.n	8003616 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	2300      	movs	r3, #0
 80035f2:	9303      	str	r3, [sp, #12]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	9302      	str	r3, [sp, #8]
 80035f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f80e 	bl	8003626 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800360a:	69f8      	ldr	r0, [r7, #28]
 800360c:	f000 f894 	bl	8003738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003610:	2301      	movs	r3, #1
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	e002      	b.n	800361c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800361c:	69bb      	ldr	r3, [r7, #24]
	}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b088      	sub	sp, #32
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800363e:	3b01      	subs	r3, #1
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f023 0307 	bic.w	r3, r3, #7
 800364c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	617b      	str	r3, [r7, #20]
}
 800366a:	bf00      	nop
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01f      	beq.n	80036b6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e012      	b.n	80036a2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	7819      	ldrb	r1, [r3, #0]
 8003684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	3334      	adds	r3, #52	@ 0x34
 800368c:	460a      	mov	r2, r1
 800368e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d006      	beq.n	80036aa <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	3301      	adds	r3, #1
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2b0f      	cmp	r3, #15
 80036a6:	d9e9      	bls.n	800367c <prvInitialiseNewTask+0x56>
 80036a8:	e000      	b.n	80036ac <prvInitialiseNewTask+0x86>
			{
				break;
 80036aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036b4:	e003      	b.n	80036be <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d901      	bls.n	80036c8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036c4:	2306      	movs	r3, #6
 80036c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036d2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	2200      	movs	r2, #0
 80036d8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	3304      	adds	r3, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe ffe1 	bl	80026a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	3318      	adds	r3, #24
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe ffdc 	bl	80026a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	f1c3 0207 	rsb	r2, r3, #7
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003702:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	69b8      	ldr	r0, [r7, #24]
 8003718:	f001 fb14 	bl	8004d44 <pxPortInitialiseStack>
 800371c:	4602      	mov	r2, r0
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800372c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800372e:	bf00      	nop
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003740:	f001 fbf4 	bl	8004f2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003744:	4b2a      	ldr	r3, [pc, #168]	@ (80037f0 <prvAddNewTaskToReadyList+0xb8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3301      	adds	r3, #1
 800374a:	4a29      	ldr	r2, [pc, #164]	@ (80037f0 <prvAddNewTaskToReadyList+0xb8>)
 800374c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800374e:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <prvAddNewTaskToReadyList+0xbc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003756:	4a27      	ldr	r2, [pc, #156]	@ (80037f4 <prvAddNewTaskToReadyList+0xbc>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800375c:	4b24      	ldr	r3, [pc, #144]	@ (80037f0 <prvAddNewTaskToReadyList+0xb8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d110      	bne.n	8003786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003764:	f000 fc70 	bl	8004048 <prvInitialiseTaskLists>
 8003768:	e00d      	b.n	8003786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800376a:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <prvAddNewTaskToReadyList+0xc0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003772:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <prvAddNewTaskToReadyList+0xbc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377c:	429a      	cmp	r2, r3
 800377e:	d802      	bhi.n	8003786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003780:	4a1c      	ldr	r2, [pc, #112]	@ (80037f4 <prvAddNewTaskToReadyList+0xbc>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003786:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <prvAddNewTaskToReadyList+0xc4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3301      	adds	r3, #1
 800378c:	4a1b      	ldr	r2, [pc, #108]	@ (80037fc <prvAddNewTaskToReadyList+0xc4>)
 800378e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	2201      	movs	r2, #1
 8003796:	409a      	lsls	r2, r3
 8003798:	4b19      	ldr	r3, [pc, #100]	@ (8003800 <prvAddNewTaskToReadyList+0xc8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4313      	orrs	r3, r2
 800379e:	4a18      	ldr	r2, [pc, #96]	@ (8003800 <prvAddNewTaskToReadyList+0xc8>)
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <prvAddNewTaskToReadyList+0xcc>)
 80037b0:	441a      	add	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f7fe ff80 	bl	80026be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037be:	f001 fbe5 	bl	8004f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <prvAddNewTaskToReadyList+0xc0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00e      	beq.n	80037e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037ca:	4b0a      	ldr	r3, [pc, #40]	@ (80037f4 <prvAddNewTaskToReadyList+0xbc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d207      	bcs.n	80037e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <prvAddNewTaskToReadyList+0xd0>)
 80037da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	200008c8 	.word	0x200008c8
 80037f4:	200007c8 	.word	0x200007c8
 80037f8:	200008d4 	.word	0x200008d4
 80037fc:	200008e4 	.word	0x200008e4
 8003800:	200008d0 	.word	0x200008d0
 8003804:	200007cc 	.word	0x200007cc
 8003808:	e000ed04 	.word	0xe000ed04

0800380c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <vTaskDelayUntil+0x2c>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	617b      	str	r3, [r7, #20]
}
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	e7fd      	b.n	8003834 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <vTaskDelayUntil+0x4a>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	613b      	str	r3, [r7, #16]
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	e7fd      	b.n	8003852 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8003856:	4b2a      	ldr	r3, [pc, #168]	@ (8003900 <vTaskDelayUntil+0xf4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <vTaskDelayUntil+0x6a>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	60fb      	str	r3, [r7, #12]
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	e7fd      	b.n	8003872 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8003876:	f000 f8b1 	bl	80039dc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800387a:	4b22      	ldr	r3, [pc, #136]	@ (8003904 <vTaskDelayUntil+0xf8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	4413      	add	r3, r2
 8003888:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6a3a      	ldr	r2, [r7, #32]
 8003890:	429a      	cmp	r2, r3
 8003892:	d20b      	bcs.n	80038ac <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	429a      	cmp	r2, r3
 800389c:	d211      	bcs.n	80038c2 <vTaskDelayUntil+0xb6>
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d90d      	bls.n	80038c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038aa:	e00a      	b.n	80038c2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d303      	bcc.n	80038be <vTaskDelayUntil+0xb2>
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d901      	bls.n	80038c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80038be:	2301      	movs	r3, #1
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d006      	beq.n	80038dc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fe34 	bl	8004544 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80038dc:	f000 f88c 	bl	80039f8 <xTaskResumeAll>
 80038e0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d107      	bne.n	80038f8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80038e8:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <vTaskDelayUntil+0xfc>)
 80038ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038f8:	bf00      	nop
 80038fa:	3728      	adds	r7, #40	@ 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	200008f0 	.word	0x200008f0
 8003904:	200008cc 	.word	0x200008cc
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	@ 0x28
 8003910:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800391a:	463a      	mov	r2, r7
 800391c:	1d39      	adds	r1, r7, #4
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	4618      	mov	r0, r3
 8003924:	f7fc fc14 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003928:	6839      	ldr	r1, [r7, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	9202      	str	r2, [sp, #8]
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	2300      	movs	r3, #0
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	2300      	movs	r3, #0
 8003938:	460a      	mov	r2, r1
 800393a:	4922      	ldr	r1, [pc, #136]	@ (80039c4 <vTaskStartScheduler+0xb8>)
 800393c:	4822      	ldr	r0, [pc, #136]	@ (80039c8 <vTaskStartScheduler+0xbc>)
 800393e:	f7ff fdcd 	bl	80034dc <xTaskCreateStatic>
 8003942:	4603      	mov	r3, r0
 8003944:	4a21      	ldr	r2, [pc, #132]	@ (80039cc <vTaskStartScheduler+0xc0>)
 8003946:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003948:	4b20      	ldr	r3, [pc, #128]	@ (80039cc <vTaskStartScheduler+0xc0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003950:	2301      	movs	r3, #1
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e001      	b.n	800395a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d102      	bne.n	8003966 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003960:	f000 fe56 	bl	8004610 <xTimerCreateTimerTask>
 8003964:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d116      	bne.n	800399a <vTaskStartScheduler+0x8e>
	__asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	613b      	str	r3, [r7, #16]
}
 800397e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003980:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <vTaskStartScheduler+0xc4>)
 8003982:	f04f 32ff 	mov.w	r2, #4294967295
 8003986:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003988:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <vTaskStartScheduler+0xc8>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800398e:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <vTaskStartScheduler+0xcc>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003994:	f001 fa58 	bl	8004e48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003998:	e00f      	b.n	80039ba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d10b      	bne.n	80039ba <vTaskStartScheduler+0xae>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	60fb      	str	r3, [r7, #12]
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	e7fd      	b.n	80039b6 <vTaskStartScheduler+0xaa>
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	080055ac 	.word	0x080055ac
 80039c8:	08004019 	.word	0x08004019
 80039cc:	200008ec 	.word	0x200008ec
 80039d0:	200008e8 	.word	0x200008e8
 80039d4:	200008d4 	.word	0x200008d4
 80039d8:	200008cc 	.word	0x200008cc

080039dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <vTaskSuspendAll+0x18>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	4a03      	ldr	r2, [pc, #12]	@ (80039f4 <vTaskSuspendAll+0x18>)
 80039e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039ea:	bf00      	nop
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200008f0 	.word	0x200008f0

080039f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a06:	4b42      	ldr	r3, [pc, #264]	@ (8003b10 <xTaskResumeAll+0x118>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10b      	bne.n	8003a26 <xTaskResumeAll+0x2e>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	603b      	str	r3, [r7, #0]
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	e7fd      	b.n	8003a22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a26:	f001 fa81 	bl	8004f2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a2a:	4b39      	ldr	r3, [pc, #228]	@ (8003b10 <xTaskResumeAll+0x118>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	4a37      	ldr	r2, [pc, #220]	@ (8003b10 <xTaskResumeAll+0x118>)
 8003a32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a34:	4b36      	ldr	r3, [pc, #216]	@ (8003b10 <xTaskResumeAll+0x118>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d161      	bne.n	8003b00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a3c:	4b35      	ldr	r3, [pc, #212]	@ (8003b14 <xTaskResumeAll+0x11c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d05d      	beq.n	8003b00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a44:	e02e      	b.n	8003aa4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a46:	4b34      	ldr	r3, [pc, #208]	@ (8003b18 <xTaskResumeAll+0x120>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3318      	adds	r3, #24
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fe8e 	bl	8002774 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe fe89 	bl	8002774 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a66:	2201      	movs	r2, #1
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b1c <xTaskResumeAll+0x124>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	4a2a      	ldr	r2, [pc, #168]	@ (8003b1c <xTaskResumeAll+0x124>)
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4a27      	ldr	r2, [pc, #156]	@ (8003b20 <xTaskResumeAll+0x128>)
 8003a82:	441a      	add	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3304      	adds	r3, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	f7fe fe17 	bl	80026be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a94:	4b23      	ldr	r3, [pc, #140]	@ (8003b24 <xTaskResumeAll+0x12c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a9e:	4b22      	ldr	r3, [pc, #136]	@ (8003b28 <xTaskResumeAll+0x130>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b18 <xTaskResumeAll+0x120>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1cc      	bne.n	8003a46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ab2:	f000 fb67 	bl	8004184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b2c <xTaskResumeAll+0x134>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d010      	beq.n	8003ae4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ac2:	f000 f857 	bl	8003b74 <xTaskIncrementTick>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003acc:	4b16      	ldr	r3, [pc, #88]	@ (8003b28 <xTaskResumeAll+0x130>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f1      	bne.n	8003ac2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ade:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <xTaskResumeAll+0x134>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ae4:	4b10      	ldr	r3, [pc, #64]	@ (8003b28 <xTaskResumeAll+0x130>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003af0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b30 <xTaskResumeAll+0x138>)
 8003af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b00:	f001 fa44 	bl	8004f8c <vPortExitCritical>

	return xAlreadyYielded;
 8003b04:	68bb      	ldr	r3, [r7, #8]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	200008f0 	.word	0x200008f0
 8003b14:	200008c8 	.word	0x200008c8
 8003b18:	20000888 	.word	0x20000888
 8003b1c:	200008d0 	.word	0x200008d0
 8003b20:	200007cc 	.word	0x200007cc
 8003b24:	200007c8 	.word	0x200007c8
 8003b28:	200008dc 	.word	0x200008dc
 8003b2c:	200008d8 	.word	0x200008d8
 8003b30:	e000ed04 	.word	0xe000ed04

08003b34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b3a:	4b04      	ldr	r3, [pc, #16]	@ (8003b4c <xTaskGetTickCount+0x18>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b40:	687b      	ldr	r3, [r7, #4]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	200008cc 	.word	0x200008cc

08003b50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b56:	f001 faab 	bl	80050b0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003b5e:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <xTaskGetTickCountFromISR+0x20>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b64:	683b      	ldr	r3, [r7, #0]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200008cc 	.word	0x200008cc

08003b74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b7e:	4b4f      	ldr	r3, [pc, #316]	@ (8003cbc <xTaskIncrementTick+0x148>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f040 808f 	bne.w	8003ca6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b88:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc0 <xTaskIncrementTick+0x14c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b90:	4a4b      	ldr	r2, [pc, #300]	@ (8003cc0 <xTaskIncrementTick+0x14c>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d121      	bne.n	8003be0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b9c:	4b49      	ldr	r3, [pc, #292]	@ (8003cc4 <xTaskIncrementTick+0x150>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <xTaskIncrementTick+0x4a>
	__asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	603b      	str	r3, [r7, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	e7fd      	b.n	8003bba <xTaskIncrementTick+0x46>
 8003bbe:	4b41      	ldr	r3, [pc, #260]	@ (8003cc4 <xTaskIncrementTick+0x150>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	4b40      	ldr	r3, [pc, #256]	@ (8003cc8 <xTaskIncrementTick+0x154>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a3e      	ldr	r2, [pc, #248]	@ (8003cc4 <xTaskIncrementTick+0x150>)
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4a3e      	ldr	r2, [pc, #248]	@ (8003cc8 <xTaskIncrementTick+0x154>)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8003ccc <xTaskIncrementTick+0x158>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8003ccc <xTaskIncrementTick+0x158>)
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	f000 fad2 	bl	8004184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003be0:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd0 <xTaskIncrementTick+0x15c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d348      	bcc.n	8003c7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bea:	4b36      	ldr	r3, [pc, #216]	@ (8003cc4 <xTaskIncrementTick+0x150>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf4:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <xTaskIncrementTick+0x15c>)
 8003bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfa:	601a      	str	r2, [r3, #0]
					break;
 8003bfc:	e03e      	b.n	8003c7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bfe:	4b31      	ldr	r3, [pc, #196]	@ (8003cc4 <xTaskIncrementTick+0x150>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d203      	bcs.n	8003c1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c16:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd0 <xTaskIncrementTick+0x15c>)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c1c:	e02e      	b.n	8003c7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fda6 	bl	8002774 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	3318      	adds	r3, #24
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fe fd9d 	bl	8002774 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	2201      	movs	r2, #1
 8003c40:	409a      	lsls	r2, r3
 8003c42:	4b24      	ldr	r3, [pc, #144]	@ (8003cd4 <xTaskIncrementTick+0x160>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	4a22      	ldr	r2, [pc, #136]	@ (8003cd4 <xTaskIncrementTick+0x160>)
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd8 <xTaskIncrementTick+0x164>)
 8003c5a:	441a      	add	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7fe fd2b 	bl	80026be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cdc <xTaskIncrementTick+0x168>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d3b9      	bcc.n	8003bea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003c76:	2301      	movs	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c7a:	e7b6      	b.n	8003bea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c7c:	4b17      	ldr	r3, [pc, #92]	@ (8003cdc <xTaskIncrementTick+0x168>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c82:	4915      	ldr	r1, [pc, #84]	@ (8003cd8 <xTaskIncrementTick+0x164>)
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d901      	bls.n	8003c98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c98:	4b11      	ldr	r3, [pc, #68]	@ (8003ce0 <xTaskIncrementTick+0x16c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e004      	b.n	8003cb0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce4 <xTaskIncrementTick+0x170>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3301      	adds	r3, #1
 8003cac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce4 <xTaskIncrementTick+0x170>)
 8003cae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cb0:	697b      	ldr	r3, [r7, #20]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200008f0 	.word	0x200008f0
 8003cc0:	200008cc 	.word	0x200008cc
 8003cc4:	20000880 	.word	0x20000880
 8003cc8:	20000884 	.word	0x20000884
 8003ccc:	200008e0 	.word	0x200008e0
 8003cd0:	200008e8 	.word	0x200008e8
 8003cd4:	200008d0 	.word	0x200008d0
 8003cd8:	200007cc 	.word	0x200007cc
 8003cdc:	200007c8 	.word	0x200007c8
 8003ce0:	200008dc 	.word	0x200008dc
 8003ce4:	200008d8 	.word	0x200008d8

08003ce8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cee:	4b27      	ldr	r3, [pc, #156]	@ (8003d8c <vTaskSwitchContext+0xa4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cf6:	4b26      	ldr	r3, [pc, #152]	@ (8003d90 <vTaskSwitchContext+0xa8>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cfc:	e040      	b.n	8003d80 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003cfe:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <vTaskSwitchContext+0xa8>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d04:	4b23      	ldr	r3, [pc, #140]	@ (8003d94 <vTaskSwitchContext+0xac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	fab3 f383 	clz	r3, r3
 8003d10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d12:	7afb      	ldrb	r3, [r7, #11]
 8003d14:	f1c3 031f 	rsb	r3, r3, #31
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	491f      	ldr	r1, [pc, #124]	@ (8003d98 <vTaskSwitchContext+0xb0>)
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	607b      	str	r3, [r7, #4]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <vTaskSwitchContext+0x5a>
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4a11      	ldr	r2, [pc, #68]	@ (8003d98 <vTaskSwitchContext+0xb0>)
 8003d52:	4413      	add	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	605a      	str	r2, [r3, #4]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	3308      	adds	r3, #8
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d104      	bne.n	8003d76 <vTaskSwitchContext+0x8e>
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a07      	ldr	r2, [pc, #28]	@ (8003d9c <vTaskSwitchContext+0xb4>)
 8003d7e:	6013      	str	r3, [r2, #0]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	200008f0 	.word	0x200008f0
 8003d90:	200008dc 	.word	0x200008dc
 8003d94:	200008d0 	.word	0x200008d0
 8003d98:	200007cc 	.word	0x200007cc
 8003d9c:	200007c8 	.word	0x200007c8

08003da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	60fb      	str	r3, [r7, #12]
}
 8003dc2:	bf00      	nop
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dc8:	4b07      	ldr	r3, [pc, #28]	@ (8003de8 <vTaskPlaceOnEventList+0x48>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3318      	adds	r3, #24
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fe fc97 	bl	8002704 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	6838      	ldr	r0, [r7, #0]
 8003dda:	f000 fbb3 	bl	8004544 <prvAddCurrentTaskToDelayedList>
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200007c8 	.word	0x200007c8

08003dec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	617b      	str	r3, [r7, #20]
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	e7fd      	b.n	8003e12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e16:	4b0a      	ldr	r3, [pc, #40]	@ (8003e40 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3318      	adds	r3, #24
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f7fe fc4d 	bl	80026be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	68b8      	ldr	r0, [r7, #8]
 8003e34:	f000 fb86 	bl	8004544 <prvAddCurrentTaskToDelayedList>
	}
 8003e38:	bf00      	nop
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200007c8 	.word	0x200007c8

08003e44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60fb      	str	r3, [r7, #12]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	3318      	adds	r3, #24
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fc7c 	bl	8002774 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef4 <xTaskRemoveFromEventList+0xb0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d11c      	bne.n	8003ebe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe fc73 	bl	8002774 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e92:	2201      	movs	r2, #1
 8003e94:	409a      	lsls	r2, r3
 8003e96:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <xTaskRemoveFromEventList+0xb4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <xTaskRemoveFromEventList+0xb4>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4a13      	ldr	r2, [pc, #76]	@ (8003efc <xTaskRemoveFromEventList+0xb8>)
 8003eae:	441a      	add	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f7fe fc01 	bl	80026be <vListInsertEnd>
 8003ebc:	e005      	b.n	8003eca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	3318      	adds	r3, #24
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	480e      	ldr	r0, [pc, #56]	@ (8003f00 <xTaskRemoveFromEventList+0xbc>)
 8003ec6:	f7fe fbfa 	bl	80026be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ece:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <xTaskRemoveFromEventList+0xc0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d905      	bls.n	8003ee4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f08 <xTaskRemoveFromEventList+0xc4>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e001      	b.n	8003ee8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ee8:	697b      	ldr	r3, [r7, #20]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200008f0 	.word	0x200008f0
 8003ef8:	200008d0 	.word	0x200008d0
 8003efc:	200007cc 	.word	0x200007cc
 8003f00:	20000888 	.word	0x20000888
 8003f04:	200007c8 	.word	0x200007c8
 8003f08:	200008dc 	.word	0x200008dc

08003f0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f14:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <vTaskInternalSetTimeOutState+0x24>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f1c:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <vTaskInternalSetTimeOutState+0x28>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	605a      	str	r2, [r3, #4]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	200008e0 	.word	0x200008e0
 8003f34:	200008cc 	.word	0x200008cc

08003f38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	613b      	str	r3, [r7, #16]
}
 8003f5a:	bf00      	nop
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	60fb      	str	r3, [r7, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	e7fd      	b.n	8003f7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003f7e:	f000 ffd5 	bl	8004f2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff8 <xTaskCheckForTimeOut+0xc0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d102      	bne.n	8003fa2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	e023      	b.n	8003fea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <xTaskCheckForTimeOut+0xc4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d007      	beq.n	8003fbe <xTaskCheckForTimeOut+0x86>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d302      	bcc.n	8003fbe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	e015      	b.n	8003fea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d20b      	bcs.n	8003fe0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	1ad2      	subs	r2, r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff99 	bl	8003f0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	e004      	b.n	8003fea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fea:	f000 ffcf 	bl	8004f8c <vPortExitCritical>

	return xReturn;
 8003fee:	69fb      	ldr	r3, [r7, #28]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	200008cc 	.word	0x200008cc
 8003ffc:	200008e0 	.word	0x200008e0

08004000 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <vTaskMissedYield+0x14>)
 8004006:	2201      	movs	r2, #1
 8004008:	601a      	str	r2, [r3, #0]
}
 800400a:	bf00      	nop
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	200008dc 	.word	0x200008dc

08004018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004020:	f000 f852 	bl	80040c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004024:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <prvIdleTask+0x28>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d9f9      	bls.n	8004020 <prvIdleTask+0x8>
			{
				taskYIELD();
 800402c:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <prvIdleTask+0x2c>)
 800402e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800403c:	e7f0      	b.n	8004020 <prvIdleTask+0x8>
 800403e:	bf00      	nop
 8004040:	200007cc 	.word	0x200007cc
 8004044:	e000ed04 	.word	0xe000ed04

08004048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	e00c      	b.n	800406e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4a12      	ldr	r2, [pc, #72]	@ (80040a8 <prvInitialiseTaskLists+0x60>)
 8004060:	4413      	add	r3, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fb00 	bl	8002668 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3301      	adds	r3, #1
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b06      	cmp	r3, #6
 8004072:	d9ef      	bls.n	8004054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004074:	480d      	ldr	r0, [pc, #52]	@ (80040ac <prvInitialiseTaskLists+0x64>)
 8004076:	f7fe faf7 	bl	8002668 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800407a:	480d      	ldr	r0, [pc, #52]	@ (80040b0 <prvInitialiseTaskLists+0x68>)
 800407c:	f7fe faf4 	bl	8002668 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004080:	480c      	ldr	r0, [pc, #48]	@ (80040b4 <prvInitialiseTaskLists+0x6c>)
 8004082:	f7fe faf1 	bl	8002668 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004086:	480c      	ldr	r0, [pc, #48]	@ (80040b8 <prvInitialiseTaskLists+0x70>)
 8004088:	f7fe faee 	bl	8002668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800408c:	480b      	ldr	r0, [pc, #44]	@ (80040bc <prvInitialiseTaskLists+0x74>)
 800408e:	f7fe faeb 	bl	8002668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004092:	4b0b      	ldr	r3, [pc, #44]	@ (80040c0 <prvInitialiseTaskLists+0x78>)
 8004094:	4a05      	ldr	r2, [pc, #20]	@ (80040ac <prvInitialiseTaskLists+0x64>)
 8004096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004098:	4b0a      	ldr	r3, [pc, #40]	@ (80040c4 <prvInitialiseTaskLists+0x7c>)
 800409a:	4a05      	ldr	r2, [pc, #20]	@ (80040b0 <prvInitialiseTaskLists+0x68>)
 800409c:	601a      	str	r2, [r3, #0]
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200007cc 	.word	0x200007cc
 80040ac:	20000858 	.word	0x20000858
 80040b0:	2000086c 	.word	0x2000086c
 80040b4:	20000888 	.word	0x20000888
 80040b8:	2000089c 	.word	0x2000089c
 80040bc:	200008b4 	.word	0x200008b4
 80040c0:	20000880 	.word	0x20000880
 80040c4:	20000884 	.word	0x20000884

080040c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040ce:	e019      	b.n	8004104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040d0:	f000 ff2c 	bl	8004f2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d4:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <prvCheckTasksWaitingTermination+0x50>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe fb47 	bl	8002774 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040e6:	4b0d      	ldr	r3, [pc, #52]	@ (800411c <prvCheckTasksWaitingTermination+0x54>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	4a0b      	ldr	r2, [pc, #44]	@ (800411c <prvCheckTasksWaitingTermination+0x54>)
 80040ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <prvCheckTasksWaitingTermination+0x58>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004120 <prvCheckTasksWaitingTermination+0x58>)
 80040f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040fa:	f000 ff47 	bl	8004f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f810 	bl	8004124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <prvCheckTasksWaitingTermination+0x58>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e1      	bne.n	80040d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	2000089c 	.word	0x2000089c
 800411c:	200008c8 	.word	0x200008c8
 8004120:	200008b0 	.word	0x200008b0

08004124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	4618      	mov	r0, r3
 800413c:	f001 f8c6 	bl	80052cc <vPortFree>
				vPortFree( pxTCB );
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f001 f8c3 	bl	80052cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004146:	e019      	b.n	800417c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800414e:	2b01      	cmp	r3, #1
 8004150:	d103      	bne.n	800415a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f001 f8ba 	bl	80052cc <vPortFree>
	}
 8004158:	e010      	b.n	800417c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004160:	2b02      	cmp	r3, #2
 8004162:	d00b      	beq.n	800417c <prvDeleteTCB+0x58>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	60fb      	str	r3, [r7, #12]
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <prvDeleteTCB+0x54>
	}
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800418a:	4b0c      	ldr	r3, [pc, #48]	@ (80041bc <prvResetNextTaskUnblockTime+0x38>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004194:	4b0a      	ldr	r3, [pc, #40]	@ (80041c0 <prvResetNextTaskUnblockTime+0x3c>)
 8004196:	f04f 32ff 	mov.w	r2, #4294967295
 800419a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800419c:	e008      	b.n	80041b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800419e:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <prvResetNextTaskUnblockTime+0x38>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4a04      	ldr	r2, [pc, #16]	@ (80041c0 <prvResetNextTaskUnblockTime+0x3c>)
 80041ae:	6013      	str	r3, [r2, #0]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000880 	.word	0x20000880
 80041c0:	200008e8 	.word	0x200008e8

080041c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041ca:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <xTaskGetSchedulerState+0x34>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041d2:	2301      	movs	r3, #1
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	e008      	b.n	80041ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041d8:	4b08      	ldr	r3, [pc, #32]	@ (80041fc <xTaskGetSchedulerState+0x38>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041e0:	2302      	movs	r3, #2
 80041e2:	607b      	str	r3, [r7, #4]
 80041e4:	e001      	b.n	80041ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041e6:	2300      	movs	r3, #0
 80041e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041ea:	687b      	ldr	r3, [r7, #4]
	}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	200008d4 	.word	0x200008d4
 80041fc:	200008f0 	.word	0x200008f0

08004200 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d05e      	beq.n	80042d4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421a:	4b31      	ldr	r3, [pc, #196]	@ (80042e0 <xTaskPriorityInherit+0xe0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	429a      	cmp	r2, r3
 8004222:	d24e      	bcs.n	80042c2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	db06      	blt.n	800423a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422c:	4b2c      	ldr	r3, [pc, #176]	@ (80042e0 <xTaskPriorityInherit+0xe0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	f1c3 0207 	rsb	r2, r3, #7
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6959      	ldr	r1, [r3, #20]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4a26      	ldr	r2, [pc, #152]	@ (80042e4 <xTaskPriorityInherit+0xe4>)
 800424c:	4413      	add	r3, r2
 800424e:	4299      	cmp	r1, r3
 8004250:	d12f      	bne.n	80042b2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	3304      	adds	r3, #4
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe fa8c 	bl	8002774 <uxListRemove>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	2201      	movs	r2, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43da      	mvns	r2, r3
 800426e:	4b1e      	ldr	r3, [pc, #120]	@ (80042e8 <xTaskPriorityInherit+0xe8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4013      	ands	r3, r2
 8004274:	4a1c      	ldr	r2, [pc, #112]	@ (80042e8 <xTaskPriorityInherit+0xe8>)
 8004276:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004278:	4b19      	ldr	r3, [pc, #100]	@ (80042e0 <xTaskPriorityInherit+0xe0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	2201      	movs	r2, #1
 8004288:	409a      	lsls	r2, r3
 800428a:	4b17      	ldr	r3, [pc, #92]	@ (80042e8 <xTaskPriorityInherit+0xe8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4313      	orrs	r3, r2
 8004290:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <xTaskPriorityInherit+0xe8>)
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4a10      	ldr	r2, [pc, #64]	@ (80042e4 <xTaskPriorityInherit+0xe4>)
 80042a2:	441a      	add	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f7fe fa07 	bl	80026be <vListInsertEnd>
 80042b0:	e004      	b.n	80042bc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042b2:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <xTaskPriorityInherit+0xe0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	e008      	b.n	80042d4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042c6:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <xTaskPriorityInherit+0xe0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d201      	bcs.n	80042d4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042d4:	68fb      	ldr	r3, [r7, #12]
	}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	200007c8 	.word	0x200007c8
 80042e4:	200007cc 	.word	0x200007cc
 80042e8:	200008d0 	.word	0x200008d0

080042ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d070      	beq.n	80043e4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004302:	4b3b      	ldr	r3, [pc, #236]	@ (80043f0 <xTaskPriorityDisinherit+0x104>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	429a      	cmp	r2, r3
 800430a:	d00b      	beq.n	8004324 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	60fb      	str	r3, [r7, #12]
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	60bb      	str	r3, [r7, #8]
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004348:	1e5a      	subs	r2, r3, #1
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	429a      	cmp	r2, r3
 8004358:	d044      	beq.n	80043e4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435e:	2b00      	cmp	r3, #0
 8004360:	d140      	bne.n	80043e4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	3304      	adds	r3, #4
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fa04 	bl	8002774 <uxListRemove>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d115      	bne.n	800439e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004376:	491f      	ldr	r1, [pc, #124]	@ (80043f4 <xTaskPriorityDisinherit+0x108>)
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10a      	bne.n	800439e <xTaskPriorityDisinherit+0xb2>
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	2201      	movs	r2, #1
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43da      	mvns	r2, r3
 8004394:	4b18      	ldr	r3, [pc, #96]	@ (80043f8 <xTaskPriorityDisinherit+0x10c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4013      	ands	r3, r2
 800439a:	4a17      	ldr	r2, [pc, #92]	@ (80043f8 <xTaskPriorityDisinherit+0x10c>)
 800439c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	f1c3 0207 	rsb	r2, r3, #7
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	2201      	movs	r2, #1
 80043b8:	409a      	lsls	r2, r3
 80043ba:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <xTaskPriorityDisinherit+0x10c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	4a0d      	ldr	r2, [pc, #52]	@ (80043f8 <xTaskPriorityDisinherit+0x10c>)
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4a08      	ldr	r2, [pc, #32]	@ (80043f4 <xTaskPriorityDisinherit+0x108>)
 80043d2:	441a      	add	r2, r3
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f7fe f96f 	bl	80026be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043e4:	697b      	ldr	r3, [r7, #20]
	}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200007c8 	.word	0x200007c8
 80043f4:	200007cc 	.word	0x200007cc
 80043f8:	200008d0 	.word	0x200008d0

080043fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800440a:	2301      	movs	r3, #1
 800440c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d079      	beq.n	8004508 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	60fb      	str	r3, [r7, #12]
}
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	e7fd      	b.n	8004430 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d902      	bls.n	8004444 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	e002      	b.n	800444a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004448:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	429a      	cmp	r2, r3
 8004452:	d059      	beq.n	8004508 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	429a      	cmp	r2, r3
 800445c:	d154      	bne.n	8004508 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800445e:	4b2c      	ldr	r3, [pc, #176]	@ (8004510 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	429a      	cmp	r2, r3
 8004466:	d10b      	bne.n	8004480 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60bb      	str	r3, [r7, #8]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	db04      	blt.n	800449e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f1c3 0207 	rsb	r2, r3, #7
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	6959      	ldr	r1, [r3, #20]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4a19      	ldr	r2, [pc, #100]	@ (8004514 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80044ae:	4413      	add	r3, r2
 80044b0:	4299      	cmp	r1, r3
 80044b2:	d129      	bne.n	8004508 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fe f95b 	bl	8002774 <uxListRemove>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	2201      	movs	r2, #1
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43da      	mvns	r2, r3
 80044d0:	4b11      	ldr	r3, [pc, #68]	@ (8004518 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4013      	ands	r3, r2
 80044d6:	4a10      	ldr	r2, [pc, #64]	@ (8004518 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80044d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	2201      	movs	r2, #1
 80044e0:	409a      	lsls	r2, r3
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004518 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4a06      	ldr	r2, [pc, #24]	@ (8004514 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80044fa:	441a      	add	r2, r3
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f7fe f8db 	bl	80026be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004508:	bf00      	nop
 800450a:	3720      	adds	r7, #32
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200007c8 	.word	0x200007c8
 8004514:	200007cc 	.word	0x200007cc
 8004518:	200008d0 	.word	0x200008d0

0800451c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004520:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <pvTaskIncrementMutexHeldCount+0x24>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004528:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <pvTaskIncrementMutexHeldCount+0x24>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800452e:	3201      	adds	r2, #1
 8004530:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004532:	4b03      	ldr	r3, [pc, #12]	@ (8004540 <pvTaskIncrementMutexHeldCount+0x24>)
 8004534:	681b      	ldr	r3, [r3, #0]
	}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	200007c8 	.word	0x200007c8

08004544 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800454e:	4b29      	ldr	r3, [pc, #164]	@ (80045f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004554:	4b28      	ldr	r3, [pc, #160]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3304      	adds	r3, #4
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe f90a 	bl	8002774 <uxListRemove>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10b      	bne.n	800457e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004566:	4b24      	ldr	r3, [pc, #144]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	2201      	movs	r2, #1
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43da      	mvns	r2, r3
 8004574:	4b21      	ldr	r3, [pc, #132]	@ (80045fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4013      	ands	r3, r2
 800457a:	4a20      	ldr	r2, [pc, #128]	@ (80045fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800457c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d10a      	bne.n	800459c <prvAddCurrentTaskToDelayedList+0x58>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800458c:	4b1a      	ldr	r3, [pc, #104]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3304      	adds	r3, #4
 8004592:	4619      	mov	r1, r3
 8004594:	481a      	ldr	r0, [pc, #104]	@ (8004600 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004596:	f7fe f892 	bl	80026be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800459a:	e026      	b.n	80045ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4413      	add	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045a4:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d209      	bcs.n	80045c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b4:	4b13      	ldr	r3, [pc, #76]	@ (8004604 <prvAddCurrentTaskToDelayedList+0xc0>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b0f      	ldr	r3, [pc, #60]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3304      	adds	r3, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f7fe f89f 	bl	8002704 <vListInsert>
}
 80045c6:	e010      	b.n	80045ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f7fe f895 	bl	8002704 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045da:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <prvAddCurrentTaskToDelayedList+0xc8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d202      	bcs.n	80045ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045e4:	4a09      	ldr	r2, [pc, #36]	@ (800460c <prvAddCurrentTaskToDelayedList+0xc8>)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6013      	str	r3, [r2, #0]
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	200008cc 	.word	0x200008cc
 80045f8:	200007c8 	.word	0x200007c8
 80045fc:	200008d0 	.word	0x200008d0
 8004600:	200008b4 	.word	0x200008b4
 8004604:	20000884 	.word	0x20000884
 8004608:	20000880 	.word	0x20000880
 800460c:	200008e8 	.word	0x200008e8

08004610 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	@ 0x28
 8004614:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800461a:	f000 fb53 	bl	8004cc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800461e:	4b1d      	ldr	r3, [pc, #116]	@ (8004694 <xTimerCreateTimerTask+0x84>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d021      	beq.n	800466a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800462e:	1d3a      	adds	r2, r7, #4
 8004630:	f107 0108 	add.w	r1, r7, #8
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	4618      	mov	r0, r3
 800463a:	f7fb fda1 	bl	8000180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	9202      	str	r2, [sp, #8]
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	2302      	movs	r3, #2
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2300      	movs	r3, #0
 800464e:	460a      	mov	r2, r1
 8004650:	4911      	ldr	r1, [pc, #68]	@ (8004698 <xTimerCreateTimerTask+0x88>)
 8004652:	4812      	ldr	r0, [pc, #72]	@ (800469c <xTimerCreateTimerTask+0x8c>)
 8004654:	f7fe ff42 	bl	80034dc <xTaskCreateStatic>
 8004658:	4603      	mov	r3, r0
 800465a:	4a11      	ldr	r2, [pc, #68]	@ (80046a0 <xTimerCreateTimerTask+0x90>)
 800465c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800465e:	4b10      	ldr	r3, [pc, #64]	@ (80046a0 <xTimerCreateTimerTask+0x90>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	613b      	str	r3, [r7, #16]
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	e7fd      	b.n	8004684 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004688:	697b      	ldr	r3, [r7, #20]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000924 	.word	0x20000924
 8004698:	080055b4 	.word	0x080055b4
 800469c:	08004899 	.word	0x08004899
 80046a0:	20000928 	.word	0x20000928

080046a4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80046b2:	2028      	movs	r0, #40	@ 0x28
 80046b4:	f000 fd3c 	bl	8005130 <pvPortMalloc>
 80046b8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00d      	beq.n	80046dc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f805 	bl	80046e6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80046dc:	697b      	ldr	r3, [r7, #20]
	}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b086      	sub	sp, #24
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	617b      	str	r3, [r7, #20]
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	e7fd      	b.n	800470e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01e      	beq.n	8004756 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004718:	f000 fad4 	bl	8004cc4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	6a3a      	ldr	r2, [r7, #32]
 8004732:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	3304      	adds	r3, #4
 8004738:	4618      	mov	r0, r3
 800473a:	f7fd ffb4 	bl	80026a6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	b2da      	uxtb	r2, r3
 8004750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004756:	bf00      	nop
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	@ 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800476e:	2300      	movs	r3, #0
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <xTimerGenericCommand+0x30>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	623b      	str	r3, [r7, #32]
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	e7fd      	b.n	800478c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004790:	4b19      	ldr	r3, [pc, #100]	@ (80047f8 <xTimerGenericCommand+0x98>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d02a      	beq.n	80047ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	dc18      	bgt.n	80047dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047aa:	f7ff fd0b 	bl	80041c4 <xTaskGetSchedulerState>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d109      	bne.n	80047c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047b4:	4b10      	ldr	r3, [pc, #64]	@ (80047f8 <xTimerGenericCommand+0x98>)
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	f107 0114 	add.w	r1, r7, #20
 80047bc:	2300      	movs	r3, #0
 80047be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c0:	f7fe f976 	bl	8002ab0 <xQueueGenericSend>
 80047c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80047c6:	e012      	b.n	80047ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80047c8:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <xTimerGenericCommand+0x98>)
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	f107 0114 	add.w	r1, r7, #20
 80047d0:	2300      	movs	r3, #0
 80047d2:	2200      	movs	r2, #0
 80047d4:	f7fe f96c 	bl	8002ab0 <xQueueGenericSend>
 80047d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80047da:	e008      	b.n	80047ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80047dc:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <xTimerGenericCommand+0x98>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	f107 0114 	add.w	r1, r7, #20
 80047e4:	2300      	movs	r3, #0
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	f7fe fa64 	bl	8002cb4 <xQueueGenericSendFromISR>
 80047ec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3728      	adds	r7, #40	@ 0x28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000924 	.word	0x20000924

080047fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004806:	4b23      	ldr	r3, [pc, #140]	@ (8004894 <prvProcessExpiredTimer+0x98>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	3304      	adds	r3, #4
 8004814:	4618      	mov	r0, r3
 8004816:	f7fd ffad 	bl	8002774 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d023      	beq.n	8004870 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	18d1      	adds	r1, r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	6978      	ldr	r0, [r7, #20]
 8004836:	f000 f8d3 	bl	80049e0 <prvInsertTimerInActiveList>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004840:	2300      	movs	r3, #0
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	2300      	movs	r3, #0
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	2100      	movs	r1, #0
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7ff ff88 	bl	8004760 <xTimerGenericCommand>
 8004850:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d114      	bne.n	8004882 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	60fb      	str	r3, [r7, #12]
}
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	e7fd      	b.n	800486c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	b2da      	uxtb	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	6978      	ldr	r0, [r7, #20]
 8004888:	4798      	blx	r3
}
 800488a:	bf00      	nop
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	2000091c 	.word	0x2000091c

08004898 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048a0:	f107 0308 	add.w	r3, r7, #8
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f859 	bl	800495c <prvGetNextExpireTime>
 80048aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4619      	mov	r1, r3
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f805 	bl	80048c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048b6:	f000 f8d5 	bl	8004a64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048ba:	bf00      	nop
 80048bc:	e7f0      	b.n	80048a0 <prvTimerTask+0x8>
	...

080048c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80048ca:	f7ff f887 	bl	80039dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048ce:	f107 0308 	add.w	r3, r7, #8
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f864 	bl	80049a0 <prvSampleTimeNow>
 80048d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d130      	bne.n	8004942 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <prvProcessTimerOrBlockTask+0x3c>
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d806      	bhi.n	80048fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048ee:	f7ff f883 	bl	80039f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff81 	bl	80047fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048fa:	e024      	b.n	8004946 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004902:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <prvProcessTimerOrBlockTask+0x90>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <prvProcessTimerOrBlockTask+0x50>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <prvProcessTimerOrBlockTask+0x52>
 8004910:	2300      	movs	r3, #0
 8004912:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004914:	4b0f      	ldr	r3, [pc, #60]	@ (8004954 <prvProcessTimerOrBlockTask+0x94>)
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	4619      	mov	r1, r3
 8004922:	f7fe fda7 	bl	8003474 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004926:	f7ff f867 	bl	80039f8 <xTaskResumeAll>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004930:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <prvProcessTimerOrBlockTask+0x98>)
 8004932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
}
 8004940:	e001      	b.n	8004946 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004942:	f7ff f859 	bl	80039f8 <xTaskResumeAll>
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000920 	.word	0x20000920
 8004954:	20000924 	.word	0x20000924
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004964:	4b0d      	ldr	r3, [pc, #52]	@ (800499c <prvGetNextExpireTime+0x40>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <prvGetNextExpireTime+0x16>
 800496e:	2201      	movs	r2, #1
 8004970:	e000      	b.n	8004974 <prvGetNextExpireTime+0x18>
 8004972:	2200      	movs	r2, #0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004980:	4b06      	ldr	r3, [pc, #24]	@ (800499c <prvGetNextExpireTime+0x40>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e001      	b.n	8004990 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004990:	68fb      	ldr	r3, [r7, #12]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	2000091c 	.word	0x2000091c

080049a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049a8:	f7ff f8c4 	bl	8003b34 <xTaskGetTickCount>
 80049ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80049ae:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <prvSampleTimeNow+0x3c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d205      	bcs.n	80049c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80049b8:	f000 f91e 	bl	8004bf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e002      	b.n	80049ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80049ca:	4a04      	ldr	r2, [pc, #16]	@ (80049dc <prvSampleTimeNow+0x3c>)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80049d0:	68fb      	ldr	r3, [r7, #12]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	2000092c 	.word	0x2000092c

080049e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d812      	bhi.n	8004a2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d302      	bcc.n	8004a1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e01b      	b.n	8004a52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a1a:	4b10      	ldr	r3, [pc, #64]	@ (8004a5c <prvInsertTimerInActiveList+0x7c>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f7fd fe6d 	bl	8002704 <vListInsert>
 8004a2a:	e012      	b.n	8004a52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d206      	bcs.n	8004a42 <prvInsertTimerInActiveList+0x62>
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d302      	bcc.n	8004a42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e007      	b.n	8004a52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a42:	4b07      	ldr	r3, [pc, #28]	@ (8004a60 <prvInsertTimerInActiveList+0x80>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f7fd fe59 	bl	8002704 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a52:	697b      	ldr	r3, [r7, #20]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000920 	.word	0x20000920
 8004a60:	2000091c 	.word	0x2000091c

08004a64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08c      	sub	sp, #48	@ 0x30
 8004a68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a6a:	e0b2      	b.n	8004bd2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f2c0 80af 	blt.w	8004bd2 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d004      	beq.n	8004a8a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	3304      	adds	r3, #4
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fd fe75 	bl	8002774 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff ff87 	bl	80049a0 <prvSampleTimeNow>
 8004a92:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b09      	cmp	r3, #9
 8004a98:	f200 8098 	bhi.w	8004bcc <prvProcessReceivedCommands+0x168>
 8004a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <prvProcessReceivedCommands+0x40>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004acd 	.word	0x08004acd
 8004aa8:	08004acd 	.word	0x08004acd
 8004aac:	08004acd 	.word	0x08004acd
 8004ab0:	08004b43 	.word	0x08004b43
 8004ab4:	08004b57 	.word	0x08004b57
 8004ab8:	08004ba3 	.word	0x08004ba3
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004acd 	.word	0x08004acd
 8004ac4:	08004b43 	.word	0x08004b43
 8004ac8:	08004b57 	.word	0x08004b57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	18d1      	adds	r1, r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004aec:	f7ff ff78 	bl	80049e0 <prvInsertTimerInActiveList>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d06c      	beq.n	8004bd0 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004afc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d061      	beq.n	8004bd0 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	441a      	add	r2, r3
 8004b14:	2300      	movs	r3, #0
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b1e:	f7ff fe1f 	bl	8004760 <xTimerGenericCommand>
 8004b22:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d152      	bne.n	8004bd0 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	61bb      	str	r3, [r7, #24]
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	e7fd      	b.n	8004b3e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004b54:	e03d      	b.n	8004bd2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10b      	bne.n	8004b8e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	617b      	str	r3, [r7, #20]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	18d1      	adds	r1, r2, r3
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	6a3a      	ldr	r2, [r7, #32]
 8004b9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b9c:	f7ff ff20 	bl	80049e0 <prvInsertTimerInActiveList>
					break;
 8004ba0:	e017      	b.n	8004bd2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8004bb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bb2:	f000 fb8b 	bl	80052cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bb6:	e00c      	b.n	8004bd2 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004bca:	e002      	b.n	8004bd2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8004bcc:	bf00      	nop
 8004bce:	e000      	b.n	8004bd2 <prvProcessReceivedCommands+0x16e>
					break;
 8004bd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bd2:	4b08      	ldr	r3, [pc, #32]	@ (8004bf4 <prvProcessReceivedCommands+0x190>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f107 0108 	add.w	r1, r7, #8
 8004bda:	2200      	movs	r2, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe f907 	bl	8002df0 <xQueueReceive>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f47f af41 	bne.w	8004a6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	3728      	adds	r7, #40	@ 0x28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000924 	.word	0x20000924

08004bf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bfe:	e049      	b.n	8004c94 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c00:	4b2e      	ldr	r3, [pc, #184]	@ (8004cbc <prvSwitchTimerLists+0xc4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8004cbc <prvSwitchTimerLists+0xc4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fd fdab 	bl	8002774 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02f      	beq.n	8004c94 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d90e      	bls.n	8004c64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c52:	4b1a      	ldr	r3, [pc, #104]	@ (8004cbc <prvSwitchTimerLists+0xc4>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f7fd fd51 	bl	8002704 <vListInsert>
 8004c62:	e017      	b.n	8004c94 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c64:	2300      	movs	r3, #0
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	2300      	movs	r3, #0
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff fd76 	bl	8004760 <xTimerGenericCommand>
 8004c74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10b      	bne.n	8004c94 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	603b      	str	r3, [r7, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	e7fd      	b.n	8004c90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c94:	4b09      	ldr	r3, [pc, #36]	@ (8004cbc <prvSwitchTimerLists+0xc4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1b0      	bne.n	8004c00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c9e:	4b07      	ldr	r3, [pc, #28]	@ (8004cbc <prvSwitchTimerLists+0xc4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ca4:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <prvSwitchTimerLists+0xc8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a04      	ldr	r2, [pc, #16]	@ (8004cbc <prvSwitchTimerLists+0xc4>)
 8004caa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004cac:	4a04      	ldr	r2, [pc, #16]	@ (8004cc0 <prvSwitchTimerLists+0xc8>)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	6013      	str	r3, [r2, #0]
}
 8004cb2:	bf00      	nop
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	2000091c 	.word	0x2000091c
 8004cc0:	20000920 	.word	0x20000920

08004cc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cca:	f000 f92f 	bl	8004f2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <prvCheckForValidListAndQueue+0x60>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d120      	bne.n	8004d18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cd6:	4814      	ldr	r0, [pc, #80]	@ (8004d28 <prvCheckForValidListAndQueue+0x64>)
 8004cd8:	f7fd fcc6 	bl	8002668 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cdc:	4813      	ldr	r0, [pc, #76]	@ (8004d2c <prvCheckForValidListAndQueue+0x68>)
 8004cde:	f7fd fcc3 	bl	8002668 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ce2:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <prvCheckForValidListAndQueue+0x6c>)
 8004ce4:	4a10      	ldr	r2, [pc, #64]	@ (8004d28 <prvCheckForValidListAndQueue+0x64>)
 8004ce6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ce8:	4b12      	ldr	r3, [pc, #72]	@ (8004d34 <prvCheckForValidListAndQueue+0x70>)
 8004cea:	4a10      	ldr	r2, [pc, #64]	@ (8004d2c <prvCheckForValidListAndQueue+0x68>)
 8004cec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	4b11      	ldr	r3, [pc, #68]	@ (8004d38 <prvCheckForValidListAndQueue+0x74>)
 8004cf4:	4a11      	ldr	r2, [pc, #68]	@ (8004d3c <prvCheckForValidListAndQueue+0x78>)
 8004cf6:	210c      	movs	r1, #12
 8004cf8:	200a      	movs	r0, #10
 8004cfa:	f7fd fdcf 	bl	800289c <xQueueGenericCreateStatic>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4a08      	ldr	r2, [pc, #32]	@ (8004d24 <prvCheckForValidListAndQueue+0x60>)
 8004d02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d04:	4b07      	ldr	r3, [pc, #28]	@ (8004d24 <prvCheckForValidListAndQueue+0x60>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <prvCheckForValidListAndQueue+0x60>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	490b      	ldr	r1, [pc, #44]	@ (8004d40 <prvCheckForValidListAndQueue+0x7c>)
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fb86 	bl	8003424 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d18:	f000 f938 	bl	8004f8c <vPortExitCritical>
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000924 	.word	0x20000924
 8004d28:	200008f4 	.word	0x200008f4
 8004d2c:	20000908 	.word	0x20000908
 8004d30:	2000091c 	.word	0x2000091c
 8004d34:	20000920 	.word	0x20000920
 8004d38:	200009a8 	.word	0x200009a8
 8004d3c:	20000930 	.word	0x20000930
 8004d40:	080055bc 	.word	0x080055bc

08004d44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3b04      	subs	r3, #4
 8004d54:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3b04      	subs	r3, #4
 8004d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3b04      	subs	r3, #4
 8004d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d74:	4a08      	ldr	r2, [pc, #32]	@ (8004d98 <pxPortInitialiseStack+0x54>)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3b14      	subs	r3, #20
 8004d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3b20      	subs	r3, #32
 8004d8a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr
 8004d98:	08004d9d 	.word	0x08004d9d

08004d9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004da6:	4b12      	ldr	r3, [pc, #72]	@ (8004df0 <prvTaskExitError+0x54>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d00b      	beq.n	8004dc8 <prvTaskExitError+0x2c>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60fb      	str	r3, [r7, #12]
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <prvTaskExitError+0x28>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	60bb      	str	r3, [r7, #8]
}
 8004dda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ddc:	bf00      	nop
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0fc      	beq.n	8004dde <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	2000000c 	.word	0x2000000c
	...

08004e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e00:	4b07      	ldr	r3, [pc, #28]	@ (8004e20 <pxCurrentTCBConst2>)
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	6808      	ldr	r0, [r1, #0]
 8004e06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e0a:	f380 8809 	msr	PSP, r0
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f380 8811 	msr	BASEPRI, r0
 8004e1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004e1e:	4770      	bx	lr

08004e20 <pxCurrentTCBConst2>:
 8004e20:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004e28:	4806      	ldr	r0, [pc, #24]	@ (8004e44 <prvPortStartFirstTask+0x1c>)
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	f380 8808 	msr	MSP, r0
 8004e32:	b662      	cpsie	i
 8004e34:	b661      	cpsie	f
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	df00      	svc	0
 8004e40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e42:	bf00      	nop
 8004e44:	e000ed08 	.word	0xe000ed08

08004e48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e4e:	4b32      	ldr	r3, [pc, #200]	@ (8004f18 <xPortStartScheduler+0xd0>)
 8004e50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	22ff      	movs	r2, #255	@ 0xff
 8004e5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	4b2a      	ldr	r3, [pc, #168]	@ (8004f1c <xPortStartScheduler+0xd4>)
 8004e74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e76:	4b2a      	ldr	r3, [pc, #168]	@ (8004f20 <xPortStartScheduler+0xd8>)
 8004e78:	2207      	movs	r2, #7
 8004e7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e7c:	e009      	b.n	8004e92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004e7e:	4b28      	ldr	r3, [pc, #160]	@ (8004f20 <xPortStartScheduler+0xd8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	4a26      	ldr	r2, [pc, #152]	@ (8004f20 <xPortStartScheduler+0xd8>)
 8004e86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9a:	2b80      	cmp	r3, #128	@ 0x80
 8004e9c:	d0ef      	beq.n	8004e7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e9e:	4b20      	ldr	r3, [pc, #128]	@ (8004f20 <xPortStartScheduler+0xd8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f1c3 0307 	rsb	r3, r3, #7
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d00b      	beq.n	8004ec2 <xPortStartScheduler+0x7a>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	60bb      	str	r3, [r7, #8]
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	e7fd      	b.n	8004ebe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ec2:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <xPortStartScheduler+0xd8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	4a15      	ldr	r2, [pc, #84]	@ (8004f20 <xPortStartScheduler+0xd8>)
 8004eca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ecc:	4b14      	ldr	r3, [pc, #80]	@ (8004f20 <xPortStartScheduler+0xd8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ed4:	4a12      	ldr	r2, [pc, #72]	@ (8004f20 <xPortStartScheduler+0xd8>)
 8004ed6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ee0:	4b10      	ldr	r3, [pc, #64]	@ (8004f24 <xPortStartScheduler+0xdc>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8004f24 <xPortStartScheduler+0xdc>)
 8004ee6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004eea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004eec:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <xPortStartScheduler+0xdc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8004f24 <xPortStartScheduler+0xdc>)
 8004ef2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ef6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ef8:	f000 f8b8 	bl	800506c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004efc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f28 <xPortStartScheduler+0xe0>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f02:	f7ff ff91 	bl	8004e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f06:	f7fe feef 	bl	8003ce8 <vTaskSwitchContext>
	prvTaskExitError();
 8004f0a:	f7ff ff47 	bl	8004d9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	e000e400 	.word	0xe000e400
 8004f1c:	200009f0 	.word	0x200009f0
 8004f20:	200009f4 	.word	0x200009f4
 8004f24:	e000ed20 	.word	0xe000ed20
 8004f28:	2000000c 	.word	0x2000000c

08004f2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	607b      	str	r3, [r7, #4]
}
 8004f44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f46:	4b0f      	ldr	r3, [pc, #60]	@ (8004f84 <vPortEnterCritical+0x58>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004f84 <vPortEnterCritical+0x58>)
 8004f4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f50:	4b0c      	ldr	r3, [pc, #48]	@ (8004f84 <vPortEnterCritical+0x58>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d110      	bne.n	8004f7a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <vPortEnterCritical+0x5c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <vPortEnterCritical+0x4e>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	603b      	str	r3, [r7, #0]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <vPortEnterCritical+0x4a>
	}
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	2000000c 	.word	0x2000000c
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f92:	4b12      	ldr	r3, [pc, #72]	@ (8004fdc <vPortExitCritical+0x50>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <vPortExitCritical+0x26>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	607b      	str	r3, [r7, #4]
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	e7fd      	b.n	8004fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <vPortExitCritical+0x50>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	4a08      	ldr	r2, [pc, #32]	@ (8004fdc <vPortExitCritical+0x50>)
 8004fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fbc:	4b07      	ldr	r3, [pc, #28]	@ (8004fdc <vPortExitCritical+0x50>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <vPortExitCritical+0x44>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	f383 8811 	msr	BASEPRI, r3
}
 8004fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	2000000c 	.word	0x2000000c

08004fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fe0:	f3ef 8009 	mrs	r0, PSP
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <pxCurrentTCBConst>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ff0:	6010      	str	r0, [r2, #0]
 8004ff2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ff6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ffa:	f380 8811 	msr	BASEPRI, r0
 8004ffe:	f7fe fe73 	bl	8003ce8 <vTaskSwitchContext>
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8811 	msr	BASEPRI, r0
 800500a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	6808      	ldr	r0, [r1, #0]
 8005012:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005016:	f380 8809 	msr	PSP, r0
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	4770      	bx	lr

08005020 <pxCurrentTCBConst>:
 8005020:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	607b      	str	r3, [r7, #4]
}
 8005040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005042:	f7fe fd97 	bl	8003b74 <xTaskIncrementTick>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800504c:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <xPortSysTickHandler+0x40>)
 800504e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f383 8811 	msr	BASEPRI, r3
}
 800505e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005070:	4b0a      	ldr	r3, [pc, #40]	@ (800509c <vPortSetupTimerInterrupt+0x30>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005076:	4b0a      	ldr	r3, [pc, #40]	@ (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800507c:	4b09      	ldr	r3, [pc, #36]	@ (80050a4 <vPortSetupTimerInterrupt+0x38>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a09      	ldr	r2, [pc, #36]	@ (80050a8 <vPortSetupTimerInterrupt+0x3c>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	4a08      	ldr	r2, [pc, #32]	@ (80050ac <vPortSetupTimerInterrupt+0x40>)
 800508a:	3b01      	subs	r3, #1
 800508c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800508e:	4b03      	ldr	r3, [pc, #12]	@ (800509c <vPortSetupTimerInterrupt+0x30>)
 8005090:	2207      	movs	r2, #7
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	e000e010 	.word	0xe000e010
 80050a0:	e000e018 	.word	0xe000e018
 80050a4:	20000000 	.word	0x20000000
 80050a8:	10624dd3 	.word	0x10624dd3
 80050ac:	e000e014 	.word	0xe000e014

080050b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050b6:	f3ef 8305 	mrs	r3, IPSR
 80050ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	d915      	bls.n	80050ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050c2:	4a17      	ldr	r2, [pc, #92]	@ (8005120 <vPortValidateInterruptPriority+0x70>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050cc:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <vPortValidateInterruptPriority+0x74>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	7afa      	ldrb	r2, [r7, #11]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d20b      	bcs.n	80050ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	607b      	str	r3, [r7, #4]
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005128 <vPortValidateInterruptPriority+0x78>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050f6:	4b0d      	ldr	r3, [pc, #52]	@ (800512c <vPortValidateInterruptPriority+0x7c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d90b      	bls.n	8005116 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	603b      	str	r3, [r7, #0]
}
 8005110:	bf00      	nop
 8005112:	bf00      	nop
 8005114:	e7fd      	b.n	8005112 <vPortValidateInterruptPriority+0x62>
	}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr
 8005120:	e000e3f0 	.word	0xe000e3f0
 8005124:	200009f0 	.word	0x200009f0
 8005128:	e000ed0c 	.word	0xe000ed0c
 800512c:	200009f4 	.word	0x200009f4

08005130 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	@ 0x28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800513c:	f7fe fc4e 	bl	80039dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005140:	4b5c      	ldr	r3, [pc, #368]	@ (80052b4 <pvPortMalloc+0x184>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005148:	f000 f924 	bl	8005394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800514c:	4b5a      	ldr	r3, [pc, #360]	@ (80052b8 <pvPortMalloc+0x188>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 8095 	bne.w	8005284 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01e      	beq.n	800519e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005160:	2208      	movs	r2, #8
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	2b00      	cmp	r3, #0
 8005170:	d015      	beq.n	800519e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f023 0307 	bic.w	r3, r3, #7
 8005178:	3308      	adds	r3, #8
 800517a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <pvPortMalloc+0x6e>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	617b      	str	r3, [r7, #20]
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	e7fd      	b.n	800519a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d06f      	beq.n	8005284 <pvPortMalloc+0x154>
 80051a4:	4b45      	ldr	r3, [pc, #276]	@ (80052bc <pvPortMalloc+0x18c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d86a      	bhi.n	8005284 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051ae:	4b44      	ldr	r3, [pc, #272]	@ (80052c0 <pvPortMalloc+0x190>)
 80051b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051b2:	4b43      	ldr	r3, [pc, #268]	@ (80052c0 <pvPortMalloc+0x190>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051b8:	e004      	b.n	80051c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d903      	bls.n	80051d6 <pvPortMalloc+0xa6>
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f1      	bne.n	80051ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051d6:	4b37      	ldr	r3, [pc, #220]	@ (80052b4 <pvPortMalloc+0x184>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051dc:	429a      	cmp	r2, r3
 80051de:	d051      	beq.n	8005284 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2208      	movs	r2, #8
 80051e6:	4413      	add	r3, r2
 80051e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	1ad2      	subs	r2, r2, r3
 80051fa:	2308      	movs	r3, #8
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	429a      	cmp	r2, r3
 8005200:	d920      	bls.n	8005244 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4413      	add	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <pvPortMalloc+0xfc>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	613b      	str	r3, [r7, #16]
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800523e:	69b8      	ldr	r0, [r7, #24]
 8005240:	f000 f90a 	bl	8005458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005244:	4b1d      	ldr	r3, [pc, #116]	@ (80052bc <pvPortMalloc+0x18c>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	4a1b      	ldr	r2, [pc, #108]	@ (80052bc <pvPortMalloc+0x18c>)
 8005250:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005252:	4b1a      	ldr	r3, [pc, #104]	@ (80052bc <pvPortMalloc+0x18c>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4b1b      	ldr	r3, [pc, #108]	@ (80052c4 <pvPortMalloc+0x194>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d203      	bcs.n	8005266 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800525e:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <pvPortMalloc+0x18c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a18      	ldr	r2, [pc, #96]	@ (80052c4 <pvPortMalloc+0x194>)
 8005264:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	4b13      	ldr	r3, [pc, #76]	@ (80052b8 <pvPortMalloc+0x188>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	431a      	orrs	r2, r3
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800527a:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <pvPortMalloc+0x198>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3301      	adds	r3, #1
 8005280:	4a11      	ldr	r2, [pc, #68]	@ (80052c8 <pvPortMalloc+0x198>)
 8005282:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005284:	f7fe fbb8 	bl	80039f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00b      	beq.n	80052aa <pvPortMalloc+0x17a>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60fb      	str	r3, [r7, #12]
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	e7fd      	b.n	80052a6 <pvPortMalloc+0x176>
	return pvReturn;
 80052aa:	69fb      	ldr	r3, [r7, #28]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3728      	adds	r7, #40	@ 0x28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	20001600 	.word	0x20001600
 80052b8:	20001614 	.word	0x20001614
 80052bc:	20001604 	.word	0x20001604
 80052c0:	200015f8 	.word	0x200015f8
 80052c4:	20001608 	.word	0x20001608
 80052c8:	2000160c 	.word	0x2000160c

080052cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d04f      	beq.n	800537e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052de:	2308      	movs	r3, #8
 80052e0:	425b      	negs	r3, r3
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4413      	add	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <vPortFree+0xbc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <vPortFree+0x46>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	60fb      	str	r3, [r7, #12]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <vPortFree+0x66>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60bb      	str	r3, [r7, #8]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	4b14      	ldr	r3, [pc, #80]	@ (8005388 <vPortFree+0xbc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01e      	beq.n	800537e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d11a      	bne.n	800537e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	4b0e      	ldr	r3, [pc, #56]	@ (8005388 <vPortFree+0xbc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	43db      	mvns	r3, r3
 8005352:	401a      	ands	r2, r3
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005358:	f7fe fb40 	bl	80039dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	4b0a      	ldr	r3, [pc, #40]	@ (800538c <vPortFree+0xc0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4413      	add	r3, r2
 8005366:	4a09      	ldr	r2, [pc, #36]	@ (800538c <vPortFree+0xc0>)
 8005368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800536a:	6938      	ldr	r0, [r7, #16]
 800536c:	f000 f874 	bl	8005458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005370:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <vPortFree+0xc4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	4a06      	ldr	r2, [pc, #24]	@ (8005390 <vPortFree+0xc4>)
 8005378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800537a:	f7fe fb3d 	bl	80039f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800537e:	bf00      	nop
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20001614 	.word	0x20001614
 800538c:	20001604 	.word	0x20001604
 8005390:	20001610 	.word	0x20001610

08005394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800539a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800539e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053a0:	4b27      	ldr	r3, [pc, #156]	@ (8005440 <prvHeapInit+0xac>)
 80053a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00c      	beq.n	80053c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3307      	adds	r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0307 	bic.w	r3, r3, #7
 80053ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005440 <prvHeapInit+0xac>)
 80053c4:	4413      	add	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005444 <prvHeapInit+0xb0>)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005444 <prvHeapInit+0xb0>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4413      	add	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053e0:	2208      	movs	r2, #8
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4a15      	ldr	r2, [pc, #84]	@ (8005448 <prvHeapInit+0xb4>)
 80053f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053f6:	4b14      	ldr	r3, [pc, #80]	@ (8005448 <prvHeapInit+0xb4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2200      	movs	r2, #0
 80053fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053fe:	4b12      	ldr	r3, [pc, #72]	@ (8005448 <prvHeapInit+0xb4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	1ad2      	subs	r2, r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005414:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <prvHeapInit+0xb4>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4a0a      	ldr	r2, [pc, #40]	@ (800544c <prvHeapInit+0xb8>)
 8005422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4a09      	ldr	r2, [pc, #36]	@ (8005450 <prvHeapInit+0xbc>)
 800542a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800542c:	4b09      	ldr	r3, [pc, #36]	@ (8005454 <prvHeapInit+0xc0>)
 800542e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005432:	601a      	str	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	200009f8 	.word	0x200009f8
 8005444:	200015f8 	.word	0x200015f8
 8005448:	20001600 	.word	0x20001600
 800544c:	20001608 	.word	0x20001608
 8005450:	20001604 	.word	0x20001604
 8005454:	20001614 	.word	0x20001614

08005458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005460:	4b27      	ldr	r3, [pc, #156]	@ (8005500 <prvInsertBlockIntoFreeList+0xa8>)
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e002      	b.n	800546c <prvInsertBlockIntoFreeList+0x14>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d8f7      	bhi.n	8005466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4413      	add	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d108      	bne.n	800549a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	441a      	add	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	441a      	add	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d118      	bne.n	80054e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b14      	ldr	r3, [pc, #80]	@ (8005504 <prvInsertBlockIntoFreeList+0xac>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d00d      	beq.n	80054d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	441a      	add	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	e008      	b.n	80054e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005504 <prvInsertBlockIntoFreeList+0xac>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e003      	b.n	80054e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d002      	beq.n	80054f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr
 8005500:	200015f8 	.word	0x200015f8
 8005504:	20001600 	.word	0x20001600

08005508 <memset>:
 8005508:	4603      	mov	r3, r0
 800550a:	4402      	add	r2, r0
 800550c:	4293      	cmp	r3, r2
 800550e:	d100      	bne.n	8005512 <memset+0xa>
 8005510:	4770      	bx	lr
 8005512:	f803 1b01 	strb.w	r1, [r3], #1
 8005516:	e7f9      	b.n	800550c <memset+0x4>

08005518 <__libc_init_array>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	2600      	movs	r6, #0
 800551c:	4d0c      	ldr	r5, [pc, #48]	@ (8005550 <__libc_init_array+0x38>)
 800551e:	4c0d      	ldr	r4, [pc, #52]	@ (8005554 <__libc_init_array+0x3c>)
 8005520:	1b64      	subs	r4, r4, r5
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	42a6      	cmp	r6, r4
 8005526:	d109      	bne.n	800553c <__libc_init_array+0x24>
 8005528:	f000 f828 	bl	800557c <_init>
 800552c:	2600      	movs	r6, #0
 800552e:	4d0a      	ldr	r5, [pc, #40]	@ (8005558 <__libc_init_array+0x40>)
 8005530:	4c0a      	ldr	r4, [pc, #40]	@ (800555c <__libc_init_array+0x44>)
 8005532:	1b64      	subs	r4, r4, r5
 8005534:	10a4      	asrs	r4, r4, #2
 8005536:	42a6      	cmp	r6, r4
 8005538:	d105      	bne.n	8005546 <__libc_init_array+0x2e>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
 800553c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005540:	4798      	blx	r3
 8005542:	3601      	adds	r6, #1
 8005544:	e7ee      	b.n	8005524 <__libc_init_array+0xc>
 8005546:	f855 3b04 	ldr.w	r3, [r5], #4
 800554a:	4798      	blx	r3
 800554c:	3601      	adds	r6, #1
 800554e:	e7f2      	b.n	8005536 <__libc_init_array+0x1e>
 8005550:	080055f0 	.word	0x080055f0
 8005554:	080055f0 	.word	0x080055f0
 8005558:	080055f0 	.word	0x080055f0
 800555c:	080055f4 	.word	0x080055f4

08005560 <memcpy>:
 8005560:	440a      	add	r2, r1
 8005562:	4291      	cmp	r1, r2
 8005564:	f100 33ff 	add.w	r3, r0, #4294967295
 8005568:	d100      	bne.n	800556c <memcpy+0xc>
 800556a:	4770      	bx	lr
 800556c:	b510      	push	{r4, lr}
 800556e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005572:	4291      	cmp	r1, r2
 8005574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005578:	d1f9      	bne.n	800556e <memcpy+0xe>
 800557a:	bd10      	pop	{r4, pc}

0800557c <_init>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr

08005588 <_fini>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr
